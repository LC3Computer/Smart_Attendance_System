;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega32.h>
;#include <stdlib.h>
;#include <string.h>
;#include <eeprom.h>
;
;#define LCD_PRT PORTB // LCD DATA PORT
;#define LCD_DDR DDRB  // LCD DATA DDR
;#define LCD_PIN PINB  // LCD DATA PIN
;#define LCD_RS 0      // LCD RS
;#define LCD_RW 1      // LCD RW
;#define LCD_EN 2      // LCD EN
;#define KEY_PRT PORTC // keyboard PORT
;#define KEY_DDR DDRC  // keyboard DDR
;#define KEY_PIN PINC  // keyboard PIN
;#define BUZZER_DDR DDRD
;#define BUZZER_PRT PORTD
;#define BUZZER_NUM 7
;#define MENU_PAGE_COUNT 3
;
;void lcdCommand(unsigned char cmnd);
;void lcdData(unsigned char data);
;void lcd_init();
;void lcd_gotoxy(unsigned char x, unsigned char y);
;void lcd_print(char *str);
;void LCM35_init();
;void show_temp();
;void show_menu();
;void clear_eeprom();
;unsigned char read_byte_from_eeprom(unsigned int addr);
;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
;void USART_init(unsigned int ubrr);
;void USART_Transmit(unsigned char data);
;unsigned char search_student_code();
;
;/* keypad mapping :
;C : Cancel
;O : On/Clear
;D : Delete
;L : Left
;R : Right
;E : Enter  */
;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
;                              '4', '5', '6', 'D',
;                              '1', '2', '3', 'C',
;                              'L', '0', 'R', 'E'};

	.DSEG
;
;unsigned int stage = 0;
;char buffer[32] = "";
;unsigned char page_num = 0;
;
;enum stages
;{
;    STAGE_INIT_MENU,
;    STAGE_ATTENDENC_MENU,
;    STAGE_SUBMIT_CODE,
;    STAGE_TEMPERATURE_MONITORING,
;    STAGE_VIEW_PRESENT_STUDENTS,
;    STAGE_RETRIEVE_STUDENT_DATA,
;    STAGE_STUDENT_MANAGMENT,
;    STAGE_SEARCH_STUDENT,
;};
;
;enum menu_options
;{
;    OPTION_ATTENDENCE = 1,
;    OPTION_STUDENT_MANAGEMENT = 2,
;    OPTION_VIEW_PRESENT_STUDENTS = 3,
;    OPTION_TEMPERATURE_MONITORING = 4,
;    OPTION_RETRIEVE_STUDENT_DATA = 5,
;    OPTION_TRAFFIC_MONITORING = 6,
;};
;
;void main(void)
; 0000 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 004D     int i, j;
; 0000 004E     unsigned char st_counts;
; 0000 004F     KEY_DDR = 0xF0;
;	i -> R16,R17
;	j -> R18,R19
;	st_counts -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0050     KEY_PRT = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0051     KEY_PRT &= 0x0F;    // ground all rows at once
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0052     MCUCR = 0x02;       // make INT0 falling edge triggered
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0053     GICR = (1 << INT0); // enable external interrupt 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0054     BUZZER_DDR |= (1 << BUZZER_NUM); //make buzzer pin output
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0055     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0056     lcd_init();
;PCODE: $0000001D VOL: 0
; 0000 0057     USART_init(0x33);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0058 
; 0000 0059 
; 0000 005A #asm("sei")           // enable interrupts
;PCODE: $00000021 VOL: 0
	sei
;PCODE: $00000022 VOL: 0
; 0000 005B     lcdCommand(0x01); // clear LCD
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 005C     LCM35_init();
;PCODE: $00000025 VOL: 0
; 0000 005D     while (1)
;PCODE: $00000026 VOL: 0
; 0000 005E     {
; 0000 005F         if (stage == STAGE_INIT_MENU)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0060         {
; 0000 0061             show_menu();
;PCODE: $00000029 VOL: 0
; 0000 0062         }
; 0000 0063         else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0064         {
; 0000 0065             lcdCommand(0x01);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0066             lcd_gotoxy(1, 1);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0067             lcd_print("1 : Submit Student Code");
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0068             lcd_gotoxy(1, 2);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0069             lcd_print("    press cancel to back");
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 006A             while (stage == STAGE_ATTENDENC_MENU)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 006B                 ;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 006C         }
; 0000 006D         else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 006E         {
; 0000 006F             lcdCommand(0x01);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0070             lcd_gotoxy(1, 1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0071             lcd_print("Enter your student code:");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0072             lcd_gotoxy(1, 2);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0073             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0074             delay_us(100 * 16); // wait
;PCODE: $00000059 VOL: 0
; 0000 0075             while (stage == STAGE_SUBMIT_CODE)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0076                 ;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0077             lcdCommand(0x0c);   // display on, cursor off
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0078             delay_us(100 * 16); // wait
;PCODE: $00000062 VOL: 0
; 0000 0079         }
; 0000 007A         else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007B         {
; 0000 007C             show_temp();
;PCODE: $00000068 VOL: 0
; 0000 007D         }
; 0000 007E         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 007F         {
; 0000 0080             lcdCommand(0x01);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0081             lcd_gotoxy(1, 1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0082             lcd_print("Number of students : ");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0083             lcd_gotoxy(1, 2);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0084             st_counts = read_byte_from_eeprom(0x0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0085             memset(buffer, 0, 32);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0086             itoa(st_counts, buffer);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0087             lcd_print(buffer);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0088             delay_ms(1000);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0089 
; 0000 008A             for (i = 0; i < st_counts; i++)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 008B             {
; 0000 008C                 memset(buffer, 0, 32);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 008D                 for (j = 0; j < 8; j++)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008E                 {
; 0000 008F                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0090                 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0091                 buffer[j] = '\0';
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0092                 lcdCommand(0x01);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0093                 lcd_gotoxy(1, 1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0094                 lcd_print(buffer);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0095                 delay_ms(1000);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 0096             }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0097 
; 0000 0098             lcdCommand(0x01);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0099             lcd_gotoxy(1, 1);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 009A             lcd_print("Press Cancel To Go Back");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 009B             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 009C                 ;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 009D         }
; 0000 009E         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 009F         {
; 0000 00A0             lcdCommand(0x01);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00A1             lcd_gotoxy(1, 1);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00A2             lcd_print("Start Transferring...");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00A3             st_counts = read_byte_from_eeprom(0x0);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00A4             for (i = 0; i < st_counts; i++)
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A5             {
; 0000 00A6                 for (j = 0; j < 8; j++)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00A7                 {
; 0000 00A8                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00A9                 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00AA                 USART_Transmit('\r');
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00AB                 USART_Transmit('\r');
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00AC                 delay_ms(500);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00AD             }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00AE             lcdCommand(0x01);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AF             lcd_gotoxy(1, 1);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00B0             lcd_print("Usart Transmit Finished");
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00B1             delay_ms(2000);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00B2             stage = STAGE_INIT_MENU;
;PCODE: $00000125 VOL: 0
; 0000 00B3         }
; 0000 00B4         else if (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 00B5         {
; 0000 00B6             lcdCommand(0x01);
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B7             lcd_gotoxy(1, 1);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B8             lcd_print("1 : Search Student");
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00B9             lcd_gotoxy(1, 2);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00BA             lcd_print("    Press Cancel To Back");
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00BB             while (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00BC                 ;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00BD         }
; 0000 00BE         else if (stage == STAGE_SEARCH_STUDENT)
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00BF         {
; 0000 00C0             lcdCommand(0x01);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00C1             lcd_gotoxy(1, 1);
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00C2             lcd_print("Enter Student Code For Search:");
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C3             lcd_gotoxy(1, 2);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00C4             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00C5             delay_us(100 * 16); // wait
;PCODE: $00000155 VOL: 0
; 0000 00C6             while (stage == STAGE_SEARCH_STUDENT)
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00C7                 ;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00C8             lcdCommand(0x0c);   // display on, cursor off
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00C9             delay_us(100 * 16); // wait
;PCODE: $0000015E VOL: 0
; 0000 00CA         }
; 0000 00CB     }
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00CC }
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0

	.DSEG
_0xA:
	.BYTE 0xF1
;
;// int0 (keypad) service routine
;interrupt[EXT_INT0] void int0_routine(void)
; 0000 00D0 {

	.CSEG
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00D1     unsigned char colloc, rowloc, cl, st_counts;
; 0000 00D2     int i;
; 0000 00D3 
; 0000 00D4     // detect the key
; 0000 00D5     while (1)
;PCODE: $0000016E VOL: 0
;	colloc -> R17
;	rowloc -> R16
;	cl -> R19
;	st_counts -> R18
;	i -> R20,R21
;PCODE: $0000016F VOL: 0
; 0000 00D6     {
; 0000 00D7         KEY_PRT = 0xEF;            // ground row 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00D8         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00D9         if (colloc != 0x0F)        // column detected
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 00DA         {
; 0000 00DB             rowloc = 0; // save row location
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00DC             break;      // exit while loop
;PCODE: $0000017A VOL: 0
; 0000 00DD         }
; 0000 00DE         KEY_PRT = 0xDF;            // ground row 1
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00DF         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00E0         if (colloc != 0x0F)        // column detected
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00E1         {
; 0000 00E2             rowloc = 1; // save row location
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00E3             break;      // exit while loop
;PCODE: $00000186 VOL: 0
; 0000 00E4         }
; 0000 00E5         KEY_PRT = 0xBF;            // ground row 2
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00E6         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00E7         if (colloc != 0x0F)        // column detected
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00E8         {
; 0000 00E9             rowloc = 2; // save row location
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00EA             break;      // exit while loop
;PCODE: $00000192 VOL: 0
; 0000 00EB         }
; 0000 00EC         KEY_PRT = 0x7F;            // ground row 3
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00ED         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00EE         rowloc = 3;                // save row location
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00EF         break;                     // exit while loop
;PCODE: $0000019B VOL: 0
; 0000 00F0     }
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00F1     // check column and send result to Port D
; 0000 00F2     if (colloc == 0x0E)
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00F3         cl = 0;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00F4     else if (colloc == 0x0D)
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 00F5         cl = 1;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00F6     else if (colloc == 0x0B)
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00F7         cl = 2;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00F8     else
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 00F9         cl = 3;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 00FA 
; 0000 00FB     KEY_PRT &= 0x0F; // ground all rows at once
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 00FC 
; 0000 00FD     // inside menu level 1
; 0000 00FE     if (stage == STAGE_INIT_MENU)
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 00FF     {
; 0000 0100         switch (keypad[rowloc][cl] - '0')
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0101         {
; 0000 0102         case OPTION_ATTENDENCE:
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0103             stage = STAGE_ATTENDENC_MENU;
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0104             break;
;PCODE: $000001CA VOL: 0
; 0000 0105 
; 0000 0106         case OPTION_TEMPERATURE_MONITORING:
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0107             stage = STAGE_TEMPERATURE_MONITORING;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0108             break;
;PCODE: $000001D0 VOL: 0
; 0000 0109         case OPTION_VIEW_PRESENT_STUDENTS:
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 010A             stage = STAGE_VIEW_PRESENT_STUDENTS;
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 010B             break;
;PCODE: $000001D6 VOL: 0
; 0000 010C         case OPTION_RETRIEVE_STUDENT_DATA:
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 010D             stage = STAGE_RETRIEVE_STUDENT_DATA;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 010E             break;
;PCODE: $000001DC VOL: 0
; 0000 010F         case OPTION_STUDENT_MANAGEMENT:
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0110             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0111             break;
;PCODE: $000001E2 VOL: 0
; 0000 0112         case 9:
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0113 #asm("cli") // disable interrupts
;PCODE: $000001E6 VOL: 0
	cli
;PCODE: $000001E7 VOL: 0
; 0000 0114 
; 0000 0115             lcdCommand(0x1);
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0116             lcd_gotoxy(1, 1);
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0117             lcd_print("Clearing EEPROM ...");
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0118             clear_eeprom();
;PCODE: $000001F1 VOL: 0
; 0000 0119 #asm("sei") // enable interrupts
;PCODE: $000001F2 VOL: 0
	sei
;PCODE: $000001F3 VOL: 0
; 0000 011A 
; 0000 011B         default:
;PCODE: $000001F4 VOL: 0
; 0000 011C             break;
;PCODE: $000001F5 VOL: 0
; 0000 011D         }
;PCODE: $000001F6 VOL: 0
; 0000 011E 
; 0000 011F 
; 0000 0120         if(keypad[rowloc][cl] == 'L'){
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0121             page_num = page_num > 0 ? page_num -1 : (MENU_PAGE_COUNT -1);
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0122         }
; 0000 0123          if(keypad[rowloc][cl] == 'R'){
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0124             page_num = (page_num +1) % MENU_PAGE_COUNT;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0125         }
; 0000 0126 
; 0000 0127 
; 0000 0128     }
;PCODE: $0000021D VOL: 0
; 0000 0129     else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 012A     {
; 0000 012B         switch (keypad[rowloc][cl])
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 012C         {
; 0000 012D         case 'C':
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 012E             stage = STAGE_INIT_MENU;
;PCODE: $0000022D VOL: 0
; 0000 012F             break;
;PCODE: $0000022E VOL: 0
; 0000 0130         case '1':
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0131             memset(buffer, 0, 32);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 0132             stage = STAGE_SUBMIT_CODE;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 0133             break;
;PCODE: $0000023B VOL: 0
; 0000 0134         default:
;PCODE: $0000023C VOL: 0
; 0000 0135             break;
;PCODE: $0000023D VOL: 0
; 0000 0136         }
;PCODE: $0000023E VOL: 0
; 0000 0137     }
; 0000 0138     else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0139     {
; 0000 013A 
; 0000 013B         if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 013C         {
; 0000 013D             if (strlen(buffer) <= 30)
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 013E             {
; 0000 013F                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0140                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0141                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0142             }
; 0000 0143         }
;PCODE: $0000026D VOL: 0
; 0000 0144         else if (keypad[rowloc][cl] == 'E')
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0145         {
; 0000 0146 
; 0000 0147         #asm("cli")
;PCODE: $00000279 VOL: 0
	cli
;PCODE: $0000027A VOL: 0
; 0000 0148 
; 0000 0149             if (strncmp(buffer, "40", 2) != 0 ||
; 0000 014A                 strlen(buffer) != 8)
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 014B             {
; 0000 014C 
; 0000 014D                 BUZZER_PRT |= (1<<BUZZER_NUM); //turn on buzzer
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 014E                 lcdCommand(0x01);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 014F                 lcd_gotoxy(1, 1);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0150                 lcd_print("Incorrect Suudent Code Format");
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 0151                 lcd_gotoxy(1, 2);
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0152                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0153                 delay_ms(2000);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0154                 BUZZER_PRT &= ~(1<<BUZZER_NUM); //turn off buzzer
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0155             }
; 0000 0156             else if (search_student_code())
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0157             {
; 0000 0158                 BUZZER_PRT |= (1<<BUZZER_NUM); //turn on buzzer
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0159                 lcdCommand(0x01);
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 015A                 lcd_gotoxy(1, 1);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 015B                 lcd_print("Duplicate Suudent Code Entered");
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 015C                 lcd_gotoxy(1, 2);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 015D                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
; 0000 015E                 delay_ms(2000);
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 015F                 BUZZER_PRT &= ~(1<<BUZZER_NUM); //turn off buzzer
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0160             }
; 0000 0161             else
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0162             {
; 0000 0163                 // save the buffer to EEPROM
; 0000 0164                 st_counts = read_byte_from_eeprom(0x0);
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0165                 for (i = 0; i < 8; i++)
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0166                 {
; 0000 0167                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0168                 }
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0169                 write_byte_to_eeprom(0x0, st_counts + 1);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 016A 
; 0000 016B                 lcdCommand(0x01);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 016C                 lcd_gotoxy(1, 1);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 016D                 lcd_print("Student Code Successfully Added");
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
; 0000 016E                 lcd_gotoxy(1, 2);
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 016F                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0170                 delay_ms(2000);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0171             }
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0172             memset(buffer, 0, 32);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 0173              #asm("sei")
;PCODE: $000002F9 VOL: 0
	sei
;PCODE: $000002FA VOL: 0
; 0000 0174             stage = STAGE_ATTENDENC_MENU;
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 0175         }
; 0000 0176         else if (keypad[rowloc][cl] == 'C')
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0177             stage = STAGE_ATTENDENC_MENU;
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0178     }
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0179     else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
; 0000 017A     {
; 0000 017B 
; 0000 017C         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 017D             stage = STAGE_INIT_MENU;
;PCODE: $0000031B VOL: 0
; 0000 017E     }
;PCODE: $0000031C VOL: 0
; 0000 017F     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0180     {
; 0000 0181         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 0182             stage = STAGE_INIT_MENU;
;PCODE: $0000032B VOL: 0
; 0000 0183     }
;PCODE: $0000032C VOL: 0
; 0000 0184     else if (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0185     {
; 0000 0186         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
; 0000 0187             stage = STAGE_INIT_MENU;
;PCODE: $0000033B VOL: 0
; 0000 0188         else if (keypad[rowloc][cl] == '1')
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0189             stage = STAGE_SEARCH_STUDENT;
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 018A     }
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
; 0000 018B     else if (stage == STAGE_SEARCH_STUDENT)
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 018C     {
; 0000 018D         if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 018E         {
; 0000 018F             if (strlen(buffer) <= 30)
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0190             {
; 0000 0191                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 0192                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 0193                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0194             }
; 0000 0195         }
;PCODE: $00000379 VOL: 0
; 0000 0196         else if (keypad[rowloc][cl] == 'E')
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 0197         {
; 0000 0198             // search from eeprom data
; 0000 0199             unsigned char result = search_student_code();
; 0000 019A 
; 0000 019B             if (result == 1)
;PCODE: $00000385 VOL: 0
;	result -> Y+0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 019C             {
; 0000 019D                 lcdCommand(0x01);
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 019E                 lcd_gotoxy(1, 1);
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 019F                 lcd_print("Student Code Found");
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
; 0000 01A0                 lcd_gotoxy(1, 2);
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 01A1                 lcd_print("You Will Back Menu In 5 Second");
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 01A2                 delay_ms(5000);
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01A3             }
; 0000 01A4             else
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 01A5             {
; 0000 01A6                 lcdCommand(0x01);
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0000 01A7                 lcd_gotoxy(1, 1);
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 01A8                 lcd_print("Ops , Student Code Not Found");
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 01A9                 lcd_gotoxy(1, 2);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 01AA                 lcd_print("You Will Back Menu In 5 Second");
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 01AB                 delay_ms(5000);
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 01AC             }
;PCODE: $000003B1 VOL: 0
; 0000 01AD             memset(buffer, 0, 32);
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 01AE             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 01AF         }
;PCODE: $000003BB VOL: 0
; 0000 01B0         else if (keypad[rowloc][cl] == 'C')
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
; 0000 01B1             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 01B2     }
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01B3 }
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0

	.DSEG
_0x49:
	.BYTE 0x13F
;
;void lcdCommand(unsigned char cmnd)
; 0000 01B6 {

	.CSEG
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 01B7     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
;PCODE: $000003DA VOL: 0
;	cmnd -> Y+0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 01B8     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 01B9     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 01BA     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
; 0000 01BB     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $000003E8 VOL: 0
; 0000 01BC     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 01BD     delay_us(20 * 16);         // wait
;PCODE: $000003EB VOL: 0
; 0000 01BE     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01BF     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 01C0     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $000003F5 VOL: 0
; 0000 01C1     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
; 0000 01C2 }
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;void lcdData(unsigned char data)
; 0000 01C4 {
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
; 0000 01C5     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
;PCODE: $000003FD VOL: 0
;	data -> Y+0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 01C6     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 01C7     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
; 0000 01C8     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01C9     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $0000040B VOL: 0
; 0000 01CA     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01CB     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
; 0000 01CC     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 01CD     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $00000417 VOL: 0
; 0000 01CE     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 01CF }
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;void lcd_init()
; 0000 01D1 {
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
; 0000 01D2     LCD_DDR = 0xFF;            // LCD port is output
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 01D3     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
; 0000 01D4     delay_us(2000 * 16);       // wait for stable power
;PCODE: $00000423 VOL: 0
; 0000 01D5     lcdCommand(0x33);          //$33 for 4-bit mode
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
; 0000 01D6     delay_us(100 * 16);        // wait
;PCODE: $00000426 VOL: 0
; 0000 01D7     lcdCommand(0x32);          //$32 for 4-bit mode
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 01D8     delay_us(100 * 16);        // wait
;PCODE: $00000429 VOL: 0
; 0000 01D9     lcdCommand(0x28);          //$28 for 4-bit mode
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 01DA     delay_us(100 * 16);        // wait
;PCODE: $0000042C VOL: 0
; 0000 01DB     lcdCommand(0x0c);          // display on, cursor off
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
; 0000 01DC     delay_us(100 * 16);        // wait
;PCODE: $0000042F VOL: 0
; 0000 01DD     lcdCommand(0x01);          // clear LCD
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
; 0000 01DE     delay_us(2000 * 16);       // wait
;PCODE: $00000432 VOL: 0
; 0000 01DF     lcdCommand(0x06);          // shift cursor right
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
; 0000 01E0     delay_us(100 * 16);
;PCODE: $00000435 VOL: 0
; 0000 01E1 }
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;void lcd_gotoxy(unsigned char x, unsigned char y)
; 0000 01E3 {
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
; 0000 01E4     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
; 0000 01E5     lcdCommand(firstCharAdr[y - 1] + x - 1);
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;	x -> Y+5
;	y -> Y+4
;	firstCharAdr -> Y+0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01E6     delay_us(100 * 16);
;PCODE: $0000044E VOL: 0
; 0000 01E7 }
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;void lcd_print(char *str)
; 0000 01E9 {
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
; 0000 01EA     unsigned char i = 0;
; 0000 01EB     while (str[i] != 0)
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01EC     {
; 0000 01ED         lcdData(str[i]);
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 01EE         i++;
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
; 0000 01EF     }
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
; 0000 01F0 }
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;
;void LCM35_init()
; 0000 01F3 {
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01F4     ADMUX = 0xE0;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 01F5     ADCSRA = 0x87;
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 01F6 }
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;
;void show_temp()
; 0000 01F9 {
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01FA     unsigned char temperatureVal = 0;
; 0000 01FB     unsigned char temperatureRep[3];
; 0000 01FC 
; 0000 01FD     while (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;	temperatureVal -> R17
;	temperatureRep -> Y+1
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 01FE     {
; 0000 01FF         lcdCommand(0x01);
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0200         lcd_gotoxy(1, 1);
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 0201         lcd_print("Temp(C):");
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 0202         ADCSRA |= (1 << ADSC);
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0203         while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 0204             ;
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
; 0000 0205         temperatureVal = ADCH;
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
; 0000 0206         itoa(temperatureVal, temperatureRep);
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
; 0000 0207         lcd_print(temperatureRep);
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
; 0000 0208         delay_ms(500);
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 0209     }
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 020A }
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0

	.DSEG
_0x84:
	.BYTE 0x9
;
;void show_menu()
; 0000 020D {

	.CSEG
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 020E 
; 0000 020F     while (stage == STAGE_INIT_MENU)
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0210     {
; 0000 0211         lcdCommand(0x01);
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0212         lcd_gotoxy(1, 1);
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 0213         if (page_num == 0)
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 0214         {
; 0000 0215             lcd_print("1: Attendance Initialization");
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 0216             lcd_gotoxy(1, 2);
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
; 0000 0217             lcd_print("2: Student Management");
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 0218             while(page_num==0 && stage == STAGE_INIT_MENU);
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0219 
; 0000 021A         }
; 0000 021B         else if (page_num == 1)
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 021C         {
; 0000 021D             lcd_print("3: View Present Students ");
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 021E             lcd_gotoxy(1, 2);
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 021F             lcd_print("4: Temperature Monitoring");
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 0220              while(page_num==1 && stage == STAGE_INIT_MENU);
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
; 0000 0221 
; 0000 0222         }
; 0000 0223         else if (page_num == 2)
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 0224         {
; 0000 0225             lcd_print("5: Retrieve Student Data");
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0226             lcd_gotoxy(1, 2);
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 0227             lcd_print("6: Traffic Monitoring");
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
; 0000 0228             while(page_num==2 && stage == STAGE_INIT_MENU);
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0229 
; 0000 022A         }
; 0000 022B     }
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 022C }
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0

	.DSEG
_0x8C:
	.BYTE 0x96
;
;void clear_eeprom()
; 0000 022F {

	.CSEG
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0230     unsigned int i;
; 0000 0231     for (i = 0; i <= 1023; i++)
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;	i -> R16,R17
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 0232     {
; 0000 0233         // Wait for the previous write to complete
; 0000 0234         while (EECR & (1 << EEWE))
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 0235             ;
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 0236 
; 0000 0237         // Set up address registers
; 0000 0238         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0000 0239         EEARL = i & 0xFF;        // Low byte (bits 0-7)
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
; 0000 023A 
; 0000 023B         // Set up data register
; 0000 023C         EEDR = 0; // Write 0 to EEPROM
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 023D 
; 0000 023E         // Enable write
; 0000 023F         EECR |= (1 << EEMWE); // Master write enable
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 0240         EECR |= (1 << EEWE);  // Start EEPROM write
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 0241     }
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 0242 }
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;
;unsigned char read_byte_from_eeprom(unsigned int addr)
; 0000 0245 {
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 0246     unsigned char x;
; 0000 0247     // Wait for the previous write to complete
; 0000 0248     while (EECR & (1 << EEWE))
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;	addr -> Y+1
;	x -> R17
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
; 0000 0249         ;
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 024A 
; 0000 024B     // Set up address registers
; 0000 024C     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
; 0000 024D     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
; 0000 024E     EECR |= (1 << EERE);        // Read Enable
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 024F     x = EEDR;
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
; 0000 0250     return x;
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0000 0251 }
;PCODE: $00000541 VOL: 0
;
;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
; 0000 0254 {
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 0255     // Wait for the previous write to complete
; 0000 0256     while (EECR & (1 << EEWE))
;PCODE: $00000544 VOL: 0
;	addr -> Y+1
;	value -> Y+0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 0257         ;
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0258 
; 0000 0259     // Set up address registers
; 0000 025A     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
; 0000 025B     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
; 0000 025C 
; 0000 025D     // Set up data register
; 0000 025E     EEDR = value; // Write 0 to EEPROM
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 025F 
; 0000 0260     // Enable write
; 0000 0261     EECR |= (1 << EEMWE); // Master write enable
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 0262     EECR |= (1 << EEWE);  // Start EEPROM write
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
; 0000 0263 }
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;
;void USART_Transmit(unsigned char data)
; 0000 0266 {
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 0267     while (!(UCSRA & (1 << UDRE)))
;PCODE: $0000055D VOL: 0
;	data -> Y+0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 0268         ;
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 0269     UDR = data;
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
; 0000 026A }
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;
;void USART_init(unsigned int ubrr)
; 0000 026D {
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 026E     UBRRL = (unsigned char)ubrr;
;PCODE: $0000056B VOL: 0
;	ubrr -> Y+0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 026F     UBRRH = (unsigned char)(ubrr >> 8);
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
; 0000 0270     UCSRB = (1 << RXEN) | (1 << TXEN);
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
; 0000 0271     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
; 0000 0272 }
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;
;unsigned char search_student_code()
; 0000 0275 {
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 0276     unsigned char st_counts, i, j;
; 0000 0277     char temp[32];
; 0000 0278 
; 0000 0279     st_counts = read_byte_from_eeprom(0x0);
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;	st_counts -> R17
;	i -> R16
;	j -> R19
;	temp -> Y+4
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
; 0000 027A 
; 0000 027B     for (i = 0; i < st_counts; i++)
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 027C     {
; 0000 027D         memset(temp, 0, 32);
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 027E         for (j = 0; j < 8; j++)
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 027F         {
; 0000 0280             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 0281         }
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
; 0000 0282         temp[j] = '\0';
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
; 0000 0283         if (strcmp(temp, buffer) == 0)
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 0284             return 1;
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 0000 0285     }
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
; 0000 0286 
; 0000 0287     return 0;
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
; 0000 0288 }
;PCODE: $000005C7 VOL: 0
