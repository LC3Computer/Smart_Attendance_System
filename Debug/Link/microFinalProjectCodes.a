;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega32.h>
;#include <stdlib.h>
;#include <string.h>
;#include <eeprom.h>
;#include <stdint.h>
;
;#define LCD_PRT PORTB // LCD DATA PORT
;#define LCD_DDR DDRB  // LCD DATA DDR
;#define LCD_PIN PINB  // LCD DATA PIN
;#define LCD_RS 0      // LCD RS
;#define LCD_RW 1      // LCD RW
;#define LCD_EN 2      // LCD EN
;#define KEY_PRT PORTC // keyboard PORT
;#define KEY_DDR DDRC  // keyboard DDR
;#define KEY_PIN PINC  // keyboard PIN
;#define BUZZER_DDR DDRD
;#define BUZZER_PRT PORTD
;#define BUZZER_NUM 7
;#define MENU_PAGE_COUNT 4
;#define US_ERROR -1       // Error indicator
;#define US_NO_OBSTACLE -2 // No obstacle indicator
;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
;#define US_PIN PIND       // Ultrasonic PIN register
;#define US_DDR DDRD       // Ultrasonic data direction register
;#define US_TRIG_POS 5     // Trigger pin connected to PD5
;#define US_ECHO_POS 6     // Echo pin connected to PD6
;
;void lcdCommand(unsigned char cmnd);
;void lcdData(unsigned char data);
;void lcd_init();
;void lcd_gotoxy(unsigned char x, unsigned char y);
;void lcd_print(char *str);
;void show_temperature();
;void show_menu();
;void clear_eeprom();
;unsigned char read_byte_from_eeprom(unsigned int addr);
;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
;void USART_init(unsigned int ubrr);
;void USART_Transmit(unsigned char data);
;unsigned char search_student_code();
;void delete_student_code(unsigned char index);
;void HCSR04Init();
;void HCSR04Trigger();
;uint16_t GetPulseWidth();
;void startSonar();
;unsigned int simple_hash(const char *str);
;
;/* keypad mapping :
;C : Cancel
;O : On/Clear
;D : Delete
;L : Left
;R : Right
;E : Enter  */
;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
;                              '4', '5', '6', 'D',
;                              '1', '2', '3', 'C',
;                              'L', '0', 'R', 'E'};

	.DSEG
;
;unsigned int stage = 0;
;char buffer[32] = "";
;unsigned char page_num = 0;
;unsigned char US_count = 0;
;const unsigned int secret = 3940;
;char logged_in = 0;
;
;enum stages
;{
;    STAGE_INIT_MENU,
;    STAGE_ATTENDENC_MENU,
;    STAGE_SUBMIT_CODE,
;    STAGE_TEMPERATURE_MONITORING,
;    STAGE_VIEW_PRESENT_STUDENTS,
;    STAGE_RETRIEVE_STUDENT_DATA,
;    STAGE_STUDENT_MANAGMENT,
;    STAGE_SEARCH_STUDENT,
;    STAGE_DELETE_STUDENT,
;    STAGE_TRAFFIC_MONITORING,
;    STAGE_LOGIN_WITH_ADMIN,
;    STAGE_CLEAR_EEPROM,
;};
;
;enum menu_options
;{
;    OPTION_ATTENDENCE = 1,
;    OPTION_STUDENT_MANAGEMENT = 2,
;    OPTION_VIEW_PRESENT_STUDENTS = 3,
;    OPTION_TEMPERATURE_MONITORING = 4,
;    OPTION_RETRIEVE_STUDENT_DATA = 5,
;    OPTION_TRAFFIC_MONITORING = 6,
;    OPTION_LOGIN_WITH_ADMIN = 7,
;    OPTION_LOGOUT = 8,
;};
;
;void main(void)
; 0000 0062 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0063     int i, j;
; 0000 0064     unsigned char st_counts;
; 0000 0065     KEY_DDR = 0xF0;
;	i -> R16,R17
;	j -> R18,R19
;	st_counts -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0066     KEY_PRT = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0067     KEY_PRT &= 0x0F;                  // ground all rows at once
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0068     MCUCR = 0x02;                     // make INT0 falling edge triggered
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0069     GICR = (1 << INT0);               // enable external interrupt 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 006A     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 006B     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 006C     USART_init(0x33);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 006D     HCSR04Init(); // Initialize ultrasonic sensor
;PCODE: $00000020 VOL: 0
; 0000 006E     lcd_init();
;PCODE: $00000021 VOL: 0
; 0000 006F 
; 0000 0070 #asm("sei")           // enable interrupts
;PCODE: $00000022 VOL: 0
	sei
;PCODE: $00000023 VOL: 0
; 0000 0071     lcdCommand(0x01); // clear LCD
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0072     while (1)
;PCODE: $00000026 VOL: 0
; 0000 0073     {
; 0000 0074         if (stage == STAGE_INIT_MENU)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0075         {
; 0000 0076             show_menu();
;PCODE: $00000029 VOL: 0
; 0000 0077         }
; 0000 0078         else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0079         {
; 0000 007A             lcdCommand(0x01);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 007B             lcd_gotoxy(1, 1);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 007C             lcd_print("1 : Submit Student Code");
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 007D             lcd_gotoxy(1, 2);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 007E             lcd_print("    press cancel to back");
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 007F             while (stage == STAGE_ATTENDENC_MENU)
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0080                 ;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0081         }
; 0000 0082         else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0083         {
; 0000 0084             lcdCommand(0x01);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0085             lcd_gotoxy(1, 1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0086             lcd_print("Enter your student code:");
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0087             lcd_gotoxy(1, 2);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0088             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0089             delay_us(100 * 16); // wait
;PCODE: $00000059 VOL: 0
; 0000 008A             while (stage == STAGE_SUBMIT_CODE)
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 008B                 ;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008C             lcdCommand(0x0c);   // display on, cursor off
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008D             delay_us(100 * 16); // wait
;PCODE: $00000062 VOL: 0
; 0000 008E         }
; 0000 008F         else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0090         {
; 0000 0091             show_temperature();
;PCODE: $00000068 VOL: 0
; 0000 0092         }
; 0000 0093         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0094         {
; 0000 0095             lcdCommand(0x01);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0096             lcd_gotoxy(1, 1);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0097             lcd_print("Number of students : ");
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0098             lcd_gotoxy(1, 2);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0099             st_counts = read_byte_from_eeprom(0x0);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009A             memset(buffer, 0, 32);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 009B             itoa(st_counts, buffer);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 009C             lcd_print(buffer);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 009D             delay_ms(1000);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 009E 
; 0000 009F             for (i = 0; i < st_counts; i++)
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A0             {
; 0000 00A1                 memset(buffer, 0, 32);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00A2                 for (j = 0; j < 8; j++)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00A3                 {
; 0000 00A4                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00A5                 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00A6                 buffer[j] = '\0';
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00A7                 lcdCommand(0x01);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A8                 lcd_gotoxy(1, 1);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00A9                 lcd_print(buffer);
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00AA                 delay_ms(1000);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00AB             }
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00AC 
; 0000 00AD             lcdCommand(0x01);
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00AE             lcd_gotoxy(1, 1);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00AF             lcd_print("Press Cancel To Go Back");
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00B0             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00B1                 ;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00B2         }
; 0000 00B3         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B4         {
; 0000 00B5             lcdCommand(0x01);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00B6             lcd_gotoxy(1, 1);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00B7             lcd_print("Start Transferring...");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B8             st_counts = read_byte_from_eeprom(0x0);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00B9             for (i = 0; i < st_counts; i++)
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00BA             {
; 0000 00BB                 for (j = 0; j < 8; j++)
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00BC                 {
; 0000 00BD                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00BE                 }
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00BF 
; 0000 00C0                 USART_Transmit('\r');
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C1                 USART_Transmit('\r');
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00C2 
; 0000 00C3                 delay_ms(500);
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00C4             }
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00C5             for (j = 0; j < 8; j++)
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00C6             {
; 0000 00C7                 USART_Transmit('=');
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00C8             }
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C9 
; 0000 00CA             USART_Transmit('\r');
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00CB             USART_Transmit('\r');
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00CC             delay_ms(500);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CD 
; 0000 00CE             lcdCommand(0x01);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CF             lcd_gotoxy(1, 1);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D0             lcd_print("Usart Transmit Finished");
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D1             delay_ms(2000);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00D2             stage = STAGE_INIT_MENU;
;PCODE: $0000013B VOL: 0
; 0000 00D3         }
; 0000 00D4         else if (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00D5         {
; 0000 00D6             lcdCommand(0x01);
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00D7             lcd_gotoxy(1, 1);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00D8             lcd_print("1: Search Student");
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00D9             lcd_gotoxy(1, 2);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00DA             lcd_print("2: Delete Student");
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00DB             while (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00DC                 ;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00DD         }
; 0000 00DE         else if (stage == STAGE_SEARCH_STUDENT)
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00DF         {
; 0000 00E0             lcdCommand(0x01);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00E1             lcd_gotoxy(1, 1);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00E2             lcd_print("Enter Student Code For Search:");
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00E3             lcd_gotoxy(1, 2);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00E4             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E5             delay_us(100 * 16); // wait
;PCODE: $0000016B VOL: 0
; 0000 00E6             while (stage == STAGE_SEARCH_STUDENT)
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E7                 ;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00E8             lcdCommand(0x0c);   // display on, cursor off
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00E9             delay_us(100 * 16); // wait
;PCODE: $00000174 VOL: 0
; 0000 00EA         }
; 0000 00EB         else if (stage == STAGE_DELETE_STUDENT)
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00EC         {
; 0000 00ED             lcdCommand(0x01);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00EE             lcd_gotoxy(1, 1);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00EF             lcd_print("Enter Student Code For Delete:");
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00F0             lcd_gotoxy(1, 2);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00F1             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00F2             delay_us(100 * 16); // wait
;PCODE: $00000189 VOL: 0
; 0000 00F3             while (stage == STAGE_DELETE_STUDENT)
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00F4                 ;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00F5             lcdCommand(0x0c); // display on, cursor off
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00F6             delay_us(100 * 16);
;PCODE: $00000192 VOL: 0
; 0000 00F7         }
; 0000 00F8         else if (stage == STAGE_TRAFFIC_MONITORING)
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00F9         {
; 0000 00FA             startSonar();
;PCODE: $00000198 VOL: 0
; 0000 00FB             stage = STAGE_INIT_MENU;
;PCODE: $00000199 VOL: 0
; 0000 00FC         }
; 0000 00FD         else if (stage == STAGE_LOGIN_WITH_ADMIN)
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00FE         {
; 0000 00FF             lcdCommand(0x01);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0100             lcd_gotoxy(1, 1);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0101             lcd_print("Enter Secret Code (or cancel)");
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0102             lcd_gotoxy(1, 2);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0103             lcdCommand(0x0f);   // display on, cursor blinking
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0104             delay_us(100 * 16); // wait
;PCODE: $000001AE VOL: 0
; 0000 0105             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0106                 ;
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0107             if (logged_in == 1)
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0108             {
; 0000 0109                 lcdCommand(0x0c); // display on, cursor off
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 010A                 delay_us(100 * 16);
;PCODE: $000001C0 VOL: 0
; 0000 010B                 lcdCommand(0x01);
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 010C                 lcd_gotoxy(1, 1);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 010D                 lcd_print("1 : Clear EEPROM");
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 010E                 lcd_gotoxy(1, 2);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 010F                 lcd_print("    press cancel to back");
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0110                 while (stage == STAGE_LOGIN_WITH_ADMIN)
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0111                     ;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0112             }
; 0000 0113             else
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0114             {
; 0000 0115                 lcdCommand(0x0c); // display on, cursor off
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0116                 delay_us(100 * 16);
;PCODE: $000001DB VOL: 0
; 0000 0117             }
;PCODE: $000001DC VOL: 0
; 0000 0118         }
; 0000 0119     }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 011A }
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0

	.DSEG
_0xB:
	.BYTE 0x150
;
;// int0 (keypad) service routine
;interrupt[EXT_INT0] void int0_routine(void)
; 0000 011E {

	.CSEG
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 011F     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
; 0000 0120     int i;
; 0000 0121 
; 0000 0122     // detect the key
; 0000 0123     while (1)
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;	colloc -> R17
;	rowloc -> R16
;	cl -> R19
;	st_counts -> R18
;	buffer_len -> R21
;	i -> Y+6
;PCODE: $000001F1 VOL: 0
; 0000 0124     {
; 0000 0125         KEY_PRT = 0xEF;            // ground row 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0126         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0127         if (colloc != 0x0F)        // column detected
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0128         {
; 0000 0129             rowloc = 0; // save row location
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 012A             break;      // exit while loop
;PCODE: $000001FC VOL: 0
; 0000 012B         }
; 0000 012C         KEY_PRT = 0xDF;            // ground row 1
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 012D         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 012E         if (colloc != 0x0F)        // column detected
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 012F         {
; 0000 0130             rowloc = 1; // save row location
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0131             break;      // exit while loop
;PCODE: $00000208 VOL: 0
; 0000 0132         }
; 0000 0133         KEY_PRT = 0xBF;            // ground row 2
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 0134         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0135         if (colloc != 0x0F)        // column detected
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 0136         {
; 0000 0137             rowloc = 2; // save row location
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0138             break;      // exit while loop
;PCODE: $00000214 VOL: 0
; 0000 0139         }
; 0000 013A         KEY_PRT = 0x7F;            // ground row 3
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 013B         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 013C         rowloc = 3;                // save row location
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 013D         break;                     // exit while loop
;PCODE: $0000021D VOL: 0
; 0000 013E     }
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 013F     // check column and send result to Port D
; 0000 0140     if (colloc == 0x0E)
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0141         cl = 0;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 0142     else if (colloc == 0x0D)
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0143         cl = 1;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0144     else if (colloc == 0x0B)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0145         cl = 2;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0146     else
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0147         cl = 3;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0148 
; 0000 0149     KEY_PRT &= 0x0F; // ground all rows at once
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 014A 
; 0000 014B     // inside menu level 1
; 0000 014C     if (stage == STAGE_INIT_MENU)
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 014D     {
; 0000 014E         switch (keypad[rowloc][cl] - '0')
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 014F         {
; 0000 0150         case OPTION_ATTENDENCE:
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0151             stage = STAGE_ATTENDENC_MENU;
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0152             break;
;PCODE: $0000024C VOL: 0
; 0000 0153 
; 0000 0154         case OPTION_TEMPERATURE_MONITORING:
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0155             stage = STAGE_TEMPERATURE_MONITORING;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0156             break;
;PCODE: $00000252 VOL: 0
; 0000 0157         case OPTION_VIEW_PRESENT_STUDENTS:
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0158             stage = STAGE_VIEW_PRESENT_STUDENTS;
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0159             break;
;PCODE: $00000258 VOL: 0
; 0000 015A         case OPTION_RETRIEVE_STUDENT_DATA:
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 015B             stage = STAGE_RETRIEVE_STUDENT_DATA;
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 015C             break;
;PCODE: $0000025E VOL: 0
; 0000 015D         case OPTION_STUDENT_MANAGEMENT:
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 015E             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 015F             break;
;PCODE: $00000264 VOL: 0
; 0000 0160         case OPTION_TRAFFIC_MONITORING:
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 0161             stage = STAGE_TRAFFIC_MONITORING;
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0162             break;
;PCODE: $0000026A VOL: 0
; 0000 0163         case OPTION_LOGIN_WITH_ADMIN:
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0164             stage = STAGE_LOGIN_WITH_ADMIN;
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 0165             break;
;PCODE: $00000270 VOL: 0
; 0000 0166         case OPTION_LOGOUT:
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0167 #asm("cli") // disable interrupts
;PCODE: $00000274 VOL: 0
	cli
;PCODE: $00000275 VOL: 0
; 0000 0168             if (logged_in == 1)
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
; 0000 0169             {
; 0000 016A                 lcdCommand(0x1);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 016B                 lcd_gotoxy(1, 1);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 016C                 lcd_print("Logout ...");
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 016D                 lcd_gotoxy(1, 2);
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 016E                 lcd_print("Going To Admin Page In 2 Sec");
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 016F                 delay_ms(2000);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 0170                 logged_in = 0;
;PCODE: $0000028B VOL: 0
; 0000 0171 #asm("sei")
;PCODE: $0000028C VOL: 0
	sei
;PCODE: $0000028D VOL: 0
; 0000 0172                 stage = STAGE_LOGIN_WITH_ADMIN;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0173             }
; 0000 0174             break;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 0175         default:
;PCODE: $00000292 VOL: 0
; 0000 0176             break;
;PCODE: $00000293 VOL: 0
; 0000 0177         }
;PCODE: $00000294 VOL: 0
; 0000 0178 
; 0000 0179         if (keypad[rowloc][cl] == 'L')
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 017A         {
; 0000 017B             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 017C         }
; 0000 017D         if (keypad[rowloc][cl] == 'R')
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 017E         {
; 0000 017F             page_num = (page_num + 1) % MENU_PAGE_COUNT;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0180         }
; 0000 0181     }
;PCODE: $000002BA VOL: 0
; 0000 0182     else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0183     {
; 0000 0184         switch (keypad[rowloc][cl])
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0185         {
; 0000 0186         case 'C':
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0187             stage = STAGE_INIT_MENU;
;PCODE: $000002CA VOL: 0
; 0000 0188             break;
;PCODE: $000002CB VOL: 0
; 0000 0189         case '1':
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 018A             memset(buffer, 0, 32);
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 018B             stage = STAGE_SUBMIT_CODE;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 018C             break;
;PCODE: $000002D8 VOL: 0
; 0000 018D         default:
;PCODE: $000002D9 VOL: 0
; 0000 018E             break;
;PCODE: $000002DA VOL: 0
; 0000 018F         }
;PCODE: $000002DB VOL: 0
; 0000 0190     }
; 0000 0191     else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0192     {
; 0000 0193 
; 0000 0194         if (keypad[rowloc][cl] == 'C')
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0195         {
; 0000 0196             memset(buffer, 0, 32);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 0197             stage = STAGE_ATTENDENC_MENU;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 0198         }
; 0000 0199         if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 019A         {
; 0000 019B             if (strlen(buffer) <= 30)
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 019C             {
; 0000 019D                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 019E                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 019F                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01A0             }
; 0000 01A1         }
;PCODE: $0000031D VOL: 0
; 0000 01A2         else if (keypad[rowloc][cl] == 'D')
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01A3         {
; 0000 01A4             buffer_len = strlen(buffer);
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01A5             if (buffer_len > 0)
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01A6             {
; 0000 01A7                 buffer[buffer_len - 1] = '\0';
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01A8                 lcdCommand(0x10);
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01A9                 lcd_print(" ");
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01AA                 lcdCommand(0x10);
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01AB             }
; 0000 01AC         }
;PCODE: $0000033C VOL: 0
; 0000 01AD         else if (keypad[rowloc][cl] == 'E')
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01AE         {
; 0000 01AF 
; 0000 01B0 #asm("cli")
;PCODE: $00000348 VOL: 0
	cli
;PCODE: $00000349 VOL: 0
; 0000 01B1 
; 0000 01B2             if (strncmp(buffer, "40", 2) != 0 ||
; 0000 01B3                 strlen(buffer) != 8)
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01B4             {
; 0000 01B5 
; 0000 01B6                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01B7                 lcdCommand(0x01);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01B8                 lcd_gotoxy(1, 1);
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01B9                 lcd_print("Incorrect Student Code Format");
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 01BA                 lcd_gotoxy(1, 2);
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
; 0000 01BB                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01BC                 delay_ms(2000);
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 01BD                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01BE             }
; 0000 01BF             else if (search_student_code() > 0)
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 01C0             {
; 0000 01C1                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 01C2                 lcdCommand(0x01);
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
; 0000 01C3                 lcd_gotoxy(1, 1);
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 01C4                 lcd_print("Duplicate Student Code Entered");
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 01C5                 lcd_gotoxy(1, 2);
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01C6                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 01C7                 delay_ms(2000);
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01C8                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
; 0000 01C9             }
; 0000 01CA             else
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
; 0000 01CB             {
; 0000 01CC                 // save the buffer to EEPROM
; 0000 01CD                 st_counts = read_byte_from_eeprom(0x0);
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 01CE                 for (i = 0; i < 8; i++)
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01CF                 {
; 0000 01D0                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 01D1                 }
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 01D2                 write_byte_to_eeprom(0x0, st_counts + 1);
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 01D3 
; 0000 01D4                 lcdCommand(0x01);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
; 0000 01D5                 lcd_gotoxy(1, 1);
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 01D6                 lcd_print("Student Code Successfully Added");
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 01D7                 lcd_gotoxy(1, 2);
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 01D8                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01D9                 delay_ms(2000);
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 01DA             }
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 01DB             memset(buffer, 0, 32);
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 01DC #asm("sei")
;PCODE: $000003CB VOL: 0
	sei
;PCODE: $000003CC VOL: 0
; 0000 01DD             stage = STAGE_ATTENDENC_MENU;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
; 0000 01DE         }
; 0000 01DF         else if (keypad[rowloc][cl] == 'C')
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
; 0000 01E0             stage = STAGE_ATTENDENC_MENU;
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 01E1     }
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 01E2     else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
; 0000 01E3     {
; 0000 01E4 
; 0000 01E5         if (keypad[rowloc][cl] == 'C')
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
; 0000 01E6             stage = STAGE_INIT_MENU;
;PCODE: $000003EE VOL: 0
; 0000 01E7     }
;PCODE: $000003EF VOL: 0
; 0000 01E8     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 01E9     {
; 0000 01EA         if (keypad[rowloc][cl] == 'C')
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 01EB             stage = STAGE_INIT_MENU;
;PCODE: $000003FE VOL: 0
; 0000 01EC     }
;PCODE: $000003FF VOL: 0
; 0000 01ED     else if (stage == STAGE_STUDENT_MANAGMENT)
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 01EE     {
; 0000 01EF         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01F0             stage = STAGE_INIT_MENU;
;PCODE: $0000040E VOL: 0
; 0000 01F1         else if (keypad[rowloc][cl] == '1')
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
; 0000 01F2             stage = STAGE_SEARCH_STUDENT;
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
; 0000 01F3         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
; 0000 01F4             stage = STAGE_DELETE_STUDENT;
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 01F5         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 01F6         {
; 0000 01F7             lcdCommand(0x01);
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 01F8             lcd_gotoxy(1, 1);
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 01F9             lcd_print("You Must First Login");
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
; 0000 01FA             lcd_gotoxy(1, 2);
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 01FB             lcd_print("You Will Go Admin Page 2 Sec");
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 01FC             delay_ms(2000);
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 01FD             stage = STAGE_LOGIN_WITH_ADMIN;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 01FE         }
; 0000 01FF     }
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 0200     else if (stage == STAGE_SEARCH_STUDENT)
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 0201     {
; 0000 0202         if (keypad[rowloc][cl] == 'C')
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 0203         {
; 0000 0204             memset(buffer, 0, 32);
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
; 0000 0205             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 0206         }
; 0000 0207         else if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
; 0000 0208         {
; 0000 0209             if (strlen(buffer) <= 30)
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
; 0000 020A             {
; 0000 020B                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
; 0000 020C                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 020D                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
; 0000 020E             }
; 0000 020F         }
;PCODE: $0000049B VOL: 0
; 0000 0210         else if (keypad[rowloc][cl] == 'D')
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
; 0000 0211         {
; 0000 0212             buffer_len = strlen(buffer);
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 0213             if (buffer_len > 0)
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 0214             {
; 0000 0215                 buffer[buffer_len - 1] = '\0';
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 0216                 lcdCommand(0x10);
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 0217                 lcd_print(" ");
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 0218                 lcdCommand(0x10);
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 0219             }
; 0000 021A         }
;PCODE: $000004BA VOL: 0
; 0000 021B         else if (keypad[rowloc][cl] == 'E')
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 021C         {
; 0000 021D             // search from eeprom data
; 0000 021E             unsigned char result = search_student_code();
; 0000 021F 
; 0000 0220             if (result > 0)
;PCODE: $000004C6 VOL: 0
;	i -> Y+7
;	result -> Y+0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 0221             {
; 0000 0222                 lcdCommand(0x01);
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 0223                 lcd_gotoxy(1, 1);
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0224                 lcd_print("Student Code Found");
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 0225                 lcd_gotoxy(1, 2);
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 0226                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 0227                 delay_ms(2000);
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 0228             }
; 0000 0229             else
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
; 0000 022A             {
; 0000 022B                 lcdCommand(0x01);
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 022C                 lcd_gotoxy(1, 1);
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
; 0000 022D                 lcd_print("Ops , Student Code Not Found");
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 022E                 lcd_gotoxy(1, 2);
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 022F                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
; 0000 0230                 delay_ms(2000);
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0231             }
;PCODE: $000004F2 VOL: 0
; 0000 0232             memset(buffer, 0, 32);
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
; 0000 0233             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 0234         }
;PCODE: $000004FC VOL: 0
; 0000 0235         else if (keypad[rowloc][cl] == 'C')
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 0236             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
; 0000 0237     }
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 0238     else if (stage == STAGE_DELETE_STUDENT)
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0239     {
; 0000 023A         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
; 0000 023B         {
; 0000 023C             memset(buffer, 0, 32);
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 023D             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
; 0000 023E         }
; 0000 023F         else if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
; 0000 0240         {
; 0000 0241             if (strlen(buffer) <= 30)
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 0242             {
; 0000 0243                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
; 0000 0244                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 0245                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0000 0246             }
; 0000 0247         }
;PCODE: $00000551 VOL: 0
; 0000 0248         else if (keypad[rowloc][cl] == 'D')
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 0249         {
; 0000 024A             buffer_len = strlen(buffer);
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 024B             if (buffer_len > 0)
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
; 0000 024C             {
; 0000 024D                 buffer[buffer_len - 1] = '\0';
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 024E                 lcdCommand(0x10);
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 024F                 lcd_print(" ");
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
; 0000 0250                 lcdCommand(0x10);
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
; 0000 0251             }
; 0000 0252         }
;PCODE: $00000570 VOL: 0
; 0000 0253         else if (keypad[rowloc][cl] == 'E')
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
; 0000 0254         {
; 0000 0255             // search from eeprom data
; 0000 0256             unsigned char result = search_student_code();
; 0000 0257 
; 0000 0258             if (result > 0)
;PCODE: $0000057C VOL: 0
;	i -> Y+7
;	result -> Y+0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
; 0000 0259             {
; 0000 025A                 lcdCommand(0x01);
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
; 0000 025B                 lcd_gotoxy(1, 1);
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
; 0000 025C                 lcd_print("Student Code Found");
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 025D                 lcd_gotoxy(1, 2);
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
; 0000 025E                 lcd_print("Wait For Delete...");
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 025F                 delete_student_code(result);
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
; 0000 0260                 lcdCommand(0x01);
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
; 0000 0261                 lcd_gotoxy(1, 1);
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 0262                 lcd_print("Student Code Was Deleted");
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 0263                 lcd_gotoxy(1, 2);
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0000 0264                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 0265                 delay_ms(2000);
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
; 0000 0266             }
; 0000 0267             else
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
; 0000 0268             {
; 0000 0269                 lcdCommand(0x01);
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
; 0000 026A                 lcd_gotoxy(1, 1);
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 026B                 lcd_print("Ops , Student Code Not Found");
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
; 0000 026C                 lcd_gotoxy(1, 2);
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 026D                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 026E                 delay_ms(2000);
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
; 0000 026F             }
;PCODE: $000005BA VOL: 0
; 0000 0270             memset(buffer, 0, 32);
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 0271             stage = STAGE_STUDENT_MANAGMENT;
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 0272         }
;PCODE: $000005C4 VOL: 0
; 0000 0273     }
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
; 0000 0274     else if (stage == STAGE_TRAFFIC_MONITORING)
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
; 0000 0275     {
; 0000 0276         if (keypad[rowloc][cl] == 'C')
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 0277             stage = STAGE_INIT_MENU;
;PCODE: $000005D7 VOL: 0
; 0000 0278     }
;PCODE: $000005D8 VOL: 0
; 0000 0279     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0000 027A     {
; 0000 027B         if (keypad[rowloc][cl] == 'C')
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
; 0000 027C         {
; 0000 027D             memset(buffer, 0, 32);
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0000 027E             stage = STAGE_INIT_MENU;
;PCODE: $000005F5 VOL: 0
; 0000 027F         }
; 0000 0280 
; 0000 0281         else if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 0282         {
; 0000 0283             if (strlen(buffer) <= 30)
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
; 0000 0284             {
; 0000 0285                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
; 0000 0286                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 0287                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
; 0000 0288             }
; 0000 0289         }
;PCODE: $00000621 VOL: 0
; 0000 028A         else if (keypad[rowloc][cl] == 'D')
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
; 0000 028B         {
; 0000 028C             buffer_len = strlen(buffer);
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
; 0000 028D             if (buffer_len > 0)
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
; 0000 028E             {
; 0000 028F                 buffer[buffer_len - 1] = '\0';
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
; 0000 0290                 lcdCommand(0x10);
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
; 0000 0291                 lcd_print(" ");
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
; 0000 0292                 lcdCommand(0x10);
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 0293             }
; 0000 0294         }
;PCODE: $00000640 VOL: 0
; 0000 0295         else if (keypad[rowloc][cl] == 'E')
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
; 0000 0296         {
; 0000 0297             // search from eeprom data
; 0000 0298             unsigned int input_hash = simple_hash(buffer);
; 0000 0299 
; 0000 029A             if (input_hash == secret)
;PCODE: $0000064C VOL: 0
;	i -> Y+8
;	input_hash -> Y+0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
; 0000 029B             {
; 0000 029C                 lcdCommand(0x01);
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
; 0000 029D                 lcd_gotoxy(1, 1);
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
; 0000 029E                 lcd_print("Login Successfully");
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 029F                 lcd_gotoxy(1, 2);
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 02A0                 lcd_print("Wait...");
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
; 0000 02A1                 delay_ms(2000);
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
; 0000 02A2                 logged_in = 1;
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
; 0000 02A3             }
; 0000 02A4             else
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
; 0000 02A5             {
; 0000 02A6                 lcdCommand(0x01);
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
; 0000 02A7                 lcd_gotoxy(1, 1);
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
; 0000 02A8                 lcd_print("Ops , secret is incorrect");
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
; 0000 02A9                 lcd_gotoxy(1, 2);
;PCODE: $00000672 VOL: 0
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
; 0000 02AA                 lcd_print("You Will Back Menu In 2 Second");
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
; 0000 02AB                 delay_ms(2000);
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
; 0000 02AC             }
;PCODE: $0000067B VOL: 0
; 0000 02AD             memset(buffer, 0, 32);
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 02AE             stage = STAGE_INIT_MENU;
;PCODE: $00000683 VOL: 0
; 0000 02AF         }
;PCODE: $00000684 VOL: 0
; 0000 02B0     }
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0000 02B1     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
; 0000 02B2     {
; 0000 02B3         switch (keypad[rowloc][cl])
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
; 0000 02B4         {
; 0000 02B5         case 'C':
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
; 0000 02B6             stage = STAGE_INIT_MENU;
;PCODE: $0000069E VOL: 0
; 0000 02B7             break;
;PCODE: $0000069F VOL: 0
; 0000 02B8         case '1':
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
; 0000 02B9 #asm("cli") // disable interrupts
;PCODE: $000006A3 VOL: 0
	cli
;PCODE: $000006A4 VOL: 0
; 0000 02BA             lcdCommand(0x1);
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0000 02BB             lcd_gotoxy(1, 1);
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
; 0000 02BC             lcd_print("Clearing EEPROM ...");
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 02BD             clear_eeprom();
;PCODE: $000006AE VOL: 0
; 0000 02BE #asm("sei") // enable interrupts
;PCODE: $000006AF VOL: 0
	sei
;PCODE: $000006B0 VOL: 0
; 0000 02BF             break;
;PCODE: $000006B1 VOL: 0
; 0000 02C0         default:
;PCODE: $000006B2 VOL: 0
; 0000 02C1             break;
;PCODE: $000006B3 VOL: 0
; 0000 02C2         }
;PCODE: $000006B4 VOL: 0
; 0000 02C3         memset(buffer, 0, 32);
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
; 0000 02C4         stage = STAGE_INIT_MENU;
;PCODE: $000006BC VOL: 0
; 0000 02C5     }
; 0000 02C6 }
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0

	.DSEG
_0x63:
	.BYTE 0x28F
;
;void lcdCommand(unsigned char cmnd)
; 0000 02C9 {

	.CSEG
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
; 0000 02CA     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
;PCODE: $000006CF VOL: 0
;	cmnd -> Y+0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
; 0000 02CB     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 02CC     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0000 02CD     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 02CE     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $000006DD VOL: 0
; 0000 02CF     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
; 0000 02D0     delay_us(20 * 16);         // wait
;PCODE: $000006E0 VOL: 0
; 0000 02D1     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
; 0000 02D2     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
; 0000 02D3     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $000006EA VOL: 0
; 0000 02D4     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0000 02D5 }
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;void lcdData(unsigned char data)
; 0000 02D7 {
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
; 0000 02D8     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
;PCODE: $000006F2 VOL: 0
;	data -> Y+0
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
; 0000 02D9     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
; 0000 02DA     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
; 0000 02DB     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
; 0000 02DC     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $00000700 VOL: 0
; 0000 02DD     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
; 0000 02DE     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
; 0000 02DF     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
; 0000 02E0     delay_us(1 * 16);          // wait to make EN wider
;PCODE: $0000070C VOL: 0
; 0000 02E1     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 02E2 }
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;void lcd_init()
; 0000 02E4 {
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
; 0000 02E5     LCD_DDR = 0xFF;            // LCD port is output
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
; 0000 02E6     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
; 0000 02E7     delay_us(2000 * 16);       // wait for stable power
;PCODE: $00000718 VOL: 0
; 0000 02E8     lcdCommand(0x33);          //$33 for 4-bit mode
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0000 02E9     delay_us(100 * 16);        // wait
;PCODE: $0000071B VOL: 0
; 0000 02EA     lcdCommand(0x32);          //$32 for 4-bit mode
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
; 0000 02EB     delay_us(100 * 16);        // wait
;PCODE: $0000071E VOL: 0
; 0000 02EC     lcdCommand(0x28);          //$28 for 4-bit mode
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
; 0000 02ED     delay_us(100 * 16);        // wait
;PCODE: $00000721 VOL: 0
; 0000 02EE     lcdCommand(0x0c);          // display on, cursor off
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
; 0000 02EF     delay_us(100 * 16);        // wait
;PCODE: $00000724 VOL: 0
; 0000 02F0     lcdCommand(0x01);          // clear LCD
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0000 02F1     delay_us(2000 * 16);       // wait
;PCODE: $00000727 VOL: 0
; 0000 02F2     lcdCommand(0x06);          // shift cursor right
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
; 0000 02F3     delay_us(100 * 16);
;PCODE: $0000072A VOL: 0
; 0000 02F4 }
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;void lcd_gotoxy(unsigned char x, unsigned char y)
; 0000 02F6 {
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
; 0000 02F7     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
; 0000 02F8     lcdCommand(firstCharAdr[y - 1] + x - 1);
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;	x -> Y+5
;	y -> Y+4
;	firstCharAdr -> Y+0
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
; 0000 02F9     delay_us(100 * 16);
;PCODE: $00000743 VOL: 0
; 0000 02FA }
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;void lcd_print(char *str)
; 0000 02FC {
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
; 0000 02FD     unsigned char i = 0;
; 0000 02FE     while (str[i] != 0)
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
; 0000 02FF     {
; 0000 0300         lcdData(str[i]);
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
; 0000 0301         i++;
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
; 0000 0302     }
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
; 0000 0303 }
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;
;void show_temperature()
; 0000 0306 {
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
; 0000 0307     unsigned char temperatureVal = 0;
; 0000 0308     unsigned char temperatureRep[3];
; 0000 0309 
; 0000 030A     ADMUX = 0xE0;
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;	temperatureVal -> R17
;	temperatureRep -> Y+1
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
; 0000 030B     ADCSRA = 0x87;
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
; 0000 030C 
; 0000 030D     lcdCommand(0x01);
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
; 0000 030E     lcd_gotoxy(1, 1);
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
; 0000 030F     lcd_print("temperature(C):");
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
; 0000 0310 
; 0000 0311     while (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000773 VOL: 0
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
; 0000 0312     {
; 0000 0313         ADCSRA |= (1 << ADSC);
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
; 0000 0314         while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
; 0000 0315             ;
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
; 0000 0316         if (ADCH != temperatureVal)
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
; 0000 0317         {
; 0000 0318             temperatureVal = ADCH;
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
; 0000 0319             itoa(temperatureVal, temperatureRep);
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
;PCODE: $00000788 VOL: 0
; 0000 031A             lcd_gotoxy(17, 1);
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
; 0000 031B             lcd_print(temperatureRep);
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
; 0000 031C             lcd_print(" ");
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
; 0000 031D         }
; 0000 031E         delay_ms(500);
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
; 0000 031F     }
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
; 0000 0320 
; 0000 0321     ADCSRA = 0x0;
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
; 0000 0322 }
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0

	.DSEG
_0xD5:
	.BYTE 0x12
;
;void show_menu()
; 0000 0325 {

	.CSEG
;PCODE: $0000079E VOL: 0
;PCODE: $0000079F VOL: 0
; 0000 0326 
; 0000 0327     while (stage == STAGE_INIT_MENU)
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
; 0000 0328     {
; 0000 0329         lcdCommand(0x01);
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
; 0000 032A         lcd_gotoxy(1, 1);
;PCODE: $000007A5 VOL: 0
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
; 0000 032B         if (page_num == 0)
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
; 0000 032C         {
; 0000 032D             lcd_print("1: Attendance Initialization");
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
; 0000 032E             lcd_gotoxy(1, 2);
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
; 0000 032F             lcd_print("2: Student Management");
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
; 0000 0330             while (page_num == 0 && stage == STAGE_INIT_MENU)
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
; 0000 0331                 ;
;PCODE: $000007BE VOL: 0
;PCODE: $000007BF VOL: 0
; 0000 0332         }
; 0000 0333         else if (page_num == 1)
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
; 0000 0334         {
; 0000 0335             lcd_print("3: View Present Students ");
;PCODE: $000007C5 VOL: 0
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
; 0000 0336             lcd_gotoxy(1, 2);
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
; 0000 0337             lcd_print("4: Temperature Monitoring");
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
; 0000 0338             while (page_num == 1 && stage == STAGE_INIT_MENU)
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
; 0000 0339                 ;
;PCODE: $000007D9 VOL: 0
;PCODE: $000007DA VOL: 0
; 0000 033A         }
; 0000 033B         else if (page_num == 2)
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
; 0000 033C         {
; 0000 033D             lcd_print("5: Retrieve Student Data");
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
; 0000 033E             lcd_gotoxy(1, 2);
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
;PCODE: $000007E6 VOL: 0
; 0000 033F             lcd_print("6: Traffic Monitoring");
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
; 0000 0340             while (page_num == 2 && stage == STAGE_INIT_MENU)
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
; 0000 0341                 ;
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
; 0000 0342         }
; 0000 0343         else if (page_num == 3)
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
; 0000 0344         {
; 0000 0345             lcd_print("7: Login With Admin");
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
; 0000 0346             lcd_gotoxy(1, 2);
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
; 0000 0347             lcd_print("8: Logout");
;PCODE: $00000802 VOL: 0
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
; 0000 0348             while (page_num == 3 && stage == STAGE_INIT_MENU)
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
;PCODE: $0000080E VOL: 0
; 0000 0349                 ;
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
; 0000 034A         }
; 0000 034B     }
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
; 0000 034C }
;PCODE: $00000817 VOL: 0
;PCODE: $00000818 VOL: 0

	.DSEG
_0xE1:
	.BYTE 0xB4
;
;void clear_eeprom()
; 0000 034F {

	.CSEG
;PCODE: $00000819 VOL: 0
;PCODE: $0000081A VOL: 0
; 0000 0350     unsigned int i;
; 0000 0351 
; 0000 0352     for (i = 0; i <= 1023; i++)
;PCODE: $0000081B VOL: 0
;PCODE: $0000081C VOL: 0
;	i -> R16,R17
;PCODE: $0000081D VOL: 0
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;PCODE: $00000825 VOL: 0
; 0000 0353     {
; 0000 0354         // Wait for the previous write to complete
; 0000 0355         while (EECR & (1 << EEWE))
;PCODE: $00000826 VOL: 0
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
;PCODE: $00000829 VOL: 0
; 0000 0356             ;
;PCODE: $0000082A VOL: 0
;PCODE: $0000082B VOL: 0
; 0000 0357 
; 0000 0358         // Set up address registers
; 0000 0359         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $0000082C VOL: 0
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
; 0000 035A         EEARL = i & 0xFF;        // Low byte (bits 0-7)
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
; 0000 035B 
; 0000 035C         // Set up data register
; 0000 035D         EEDR = 0; // Write 0 to EEPROM
;PCODE: $00000833 VOL: 0
;PCODE: $00000834 VOL: 0
; 0000 035E 
; 0000 035F         // Enable write
; 0000 0360         EECR |= (1 << EEMWE); // Master write enable
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
; 0000 0361         EECR |= (1 << EEWE);  // Start EEPROM write
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
; 0000 0362     }
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
;PCODE: $0000083B VOL: 0
;PCODE: $0000083C VOL: 0
;PCODE: $0000083D VOL: 0
; 0000 0363 }
;PCODE: $0000083E VOL: 0
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;
;unsigned char read_byte_from_eeprom(unsigned int addr)
; 0000 0366 {
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
; 0000 0367     unsigned char x;
; 0000 0368     // Wait for the previous write to complete
; 0000 0369     while (EECR & (1 << EEWE))
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;	addr -> Y+1
;	x -> R17
;PCODE: $00000845 VOL: 0
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
; 0000 036A         ;
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
; 0000 036B 
; 0000 036C     // Set up address registers
; 0000 036D     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $0000084B VOL: 0
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
; 0000 036E     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
; 0000 036F     EECR |= (1 << EERE);        // Read Enable
;PCODE: $00000852 VOL: 0
;PCODE: $00000853 VOL: 0
; 0000 0370     x = EEDR;
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
; 0000 0371     return x;
;PCODE: $00000856 VOL: 0
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
; 0000 0372 }
;PCODE: $0000085B VOL: 0
;
;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
; 0000 0375 {
;PCODE: $0000085C VOL: 0
;PCODE: $0000085D VOL: 0
; 0000 0376     // Wait for the previous write to complete
; 0000 0377     while (EECR & (1 << EEWE))
;PCODE: $0000085E VOL: 0
;	addr -> Y+1
;	value -> Y+0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
; 0000 0378         ;
;PCODE: $00000863 VOL: 0
;PCODE: $00000864 VOL: 0
; 0000 0379 
; 0000 037A     // Set up address registers
; 0000 037B     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
;PCODE: $00000865 VOL: 0
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
;PCODE: $00000868 VOL: 0
; 0000 037C     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
; 0000 037D 
; 0000 037E     // Set up data register
; 0000 037F     EEDR = value; // Write 0 to EEPROM
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
; 0000 0380 
; 0000 0381     // Enable write
; 0000 0382     EECR |= (1 << EEMWE); // Master write enable
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
; 0000 0383     EECR |= (1 << EEWE);  // Start EEPROM write
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
; 0000 0384 }
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;
;void USART_Transmit(unsigned char data)
; 0000 0387 {
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
; 0000 0388     while (!(UCSRA & (1 << UDRE)))
;PCODE: $00000877 VOL: 0
;	data -> Y+0
;PCODE: $00000878 VOL: 0
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
;PCODE: $0000087B VOL: 0
; 0000 0389         ;
;PCODE: $0000087C VOL: 0
;PCODE: $0000087D VOL: 0
; 0000 038A     UDR = data;
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
; 0000 038B }
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
;PCODE: $00000882 VOL: 0
;
;void USART_init(unsigned int ubrr)
; 0000 038E {
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
; 0000 038F     UBRRL = (unsigned char)ubrr;
;PCODE: $00000885 VOL: 0
;	ubrr -> Y+0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
; 0000 0390     UBRRH = (unsigned char)(ubrr >> 8);
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
; 0000 0391     UCSRB = (1 << RXEN) | (1 << TXEN);
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
; 0000 0392     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
; 0000 0393 }
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;
;unsigned char search_student_code()
; 0000 0396 {
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
; 0000 0397     unsigned char st_counts, i, j;
; 0000 0398     char temp[10];
; 0000 0399 
; 0000 039A     st_counts = read_byte_from_eeprom(0x0);
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;	st_counts -> R17
;	i -> R16
;	j -> R19
;	temp -> Y+4
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
; 0000 039B 
; 0000 039C     for (i = 0; i < st_counts; i++)
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
; 0000 039D     {
; 0000 039E         memset(temp, 0, 10);
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
; 0000 039F         for (j = 0; j < 8; j++)
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
; 0000 03A0         {
; 0000 03A1             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
;PCODE: $000008B3 VOL: 0
;PCODE: $000008B4 VOL: 0
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
; 0000 03A2         }
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
; 0000 03A3         temp[j] = '\0';
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
; 0000 03A4         if (strncmp(temp, buffer, 8) == 0)
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
;PCODE: $000008D3 VOL: 0
;PCODE: $000008D4 VOL: 0
; 0000 03A5             return (i + 1);
;PCODE: $000008D5 VOL: 0
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
; 0000 03A6     }
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
;PCODE: $000008DF VOL: 0
; 0000 03A7 
; 0000 03A8     return 0;
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
; 0000 03A9 }
;PCODE: $000008E4 VOL: 0
;
;void delete_student_code(unsigned char index)
; 0000 03AC {
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0000 03AD     unsigned char st_counts, i, j;
; 0000 03AE     unsigned char temp;
; 0000 03AF 
; 0000 03B0     st_counts = read_byte_from_eeprom(0x0);
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
;	index -> Y+4
;	st_counts -> R17
;	i -> R16
;	j -> R19
;	temp -> R18
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
; 0000 03B1 
; 0000 03B2     for (i = index; i <= st_counts; i++)
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
; 0000 03B3     {
; 0000 03B4         for (j = 0; j < 8; j++)
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
; 0000 03B5         {
; 0000 03B6             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
;PCODE: $00000907 VOL: 0
; 0000 03B7             write_byte_to_eeprom(j + ((i) * 8), temp);
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
; 0000 03B8         }
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
; 0000 03B9     }
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
; 0000 03BA     write_byte_to_eeprom(0x0, st_counts - 1);
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
;PCODE: $0000091E VOL: 0
; 0000 03BB }
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;
;void HCSR04Init()
; 0000 03BE {
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
; 0000 03BF     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
; 0000 03C0     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
; 0000 03C1 }
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;
;void HCSR04Trigger()
; 0000 03C4 {
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
; 0000 03C5     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
; 0000 03C6     delay_us(15);                   // Wait for 15 microseconds
;PCODE: $0000092F VOL: 0
; 0000 03C7     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
; 0000 03C8 }
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;
;uint16_t GetPulseWidth()
; 0000 03CB {
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
; 0000 03CC     uint32_t i, result;
; 0000 03CD 
; 0000 03CE     // Wait for rising edge on Echo pin
; 0000 03CF     for (i = 0; i < 600000; i++)
;PCODE: $00000936 VOL: 0
;	i -> Y+4
;	result -> Y+0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
; 0000 03D0     {
; 0000 03D1         if (!(US_PIN & (1 << US_ECHO_POS)))
;PCODE: $00000941 VOL: 0
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
; 0000 03D2             continue;
;PCODE: $00000944 VOL: 0
; 0000 03D3         else
;PCODE: $00000945 VOL: 0
;PCODE: $00000946 VOL: 0
; 0000 03D4             break;
;PCODE: $00000947 VOL: 0
; 0000 03D5     }
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
;PCODE: $0000094E VOL: 0
; 0000 03D6 
; 0000 03D7     if (i == 600000)
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
;PCODE: $00000951 VOL: 0
; 0000 03D8         return US_ERROR; // Timeout error if no rising edge detected
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
;PCODE: $00000954 VOL: 0
; 0000 03D9 
; 0000 03DA     // Start timer with prescaler 8
; 0000 03DB     TCCR1A = 0x00;
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
;PCODE: $00000957 VOL: 0
; 0000 03DC     TCCR1B = (1 << CS11) | (1 << CS10);
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
; 0000 03DD     TCNT1 = 0x00; // Reset timer
;PCODE: $0000095A VOL: 0
;PCODE: $0000095B VOL: 0
; 0000 03DE 
; 0000 03DF     // Wait for falling edge on Echo pin
; 0000 03E0     for (i = 0; i < 600000; i++)
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
;PCODE: $00000965 VOL: 0
; 0000 03E1     {
; 0000 03E2         if (!(US_PIN & (1 << US_ECHO_POS)))
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
; 0000 03E3             break; // Falling edge detected
;PCODE: $00000969 VOL: 0
; 0000 03E4         if (TCNT1 > 60000)
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
; 0000 03E5             return US_NO_OBSTACLE; // No obstacle in range
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
; 0000 03E6     }
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
; 0000 03E7 
; 0000 03E8     result = TCNT1; // Capture timer value
;PCODE: $00000978 VOL: 0
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
; 0000 03E9     TCCR1B = 0x00;  // Stop timer
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
; 0000 03EA 
; 0000 03EB     if (result > 60000)
;PCODE: $0000097D VOL: 0
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
; 0000 03EC         return US_NO_OBSTACLE;
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
; 0000 03ED     else
;PCODE: $00000983 VOL: 0
; 0000 03EE         return (result >> 1); // Return the measured pulse width
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
; 0000 03EF }
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;
;void startSonar()
; 0000 03F2 {
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
; 0000 03F3     char numberString[16];
; 0000 03F4     uint16_t pulseWidth; // Pulse width from echo
; 0000 03F5     int distance, previous_distance = -1;
; 0000 03F6     static int previous_count = -1;

	.DSEG

	.CSEG
; 0000 03F7 
; 0000 03F8     lcdCommand(0x01);
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;	numberString -> Y+6
;	pulseWidth -> R16,R17
;	distance -> R18,R19
;	previous_distance -> R20,R21
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
; 0000 03F9     lcd_gotoxy(1, 1);
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
;PCODE: $00000997 VOL: 0
; 0000 03FA     lcd_print("Distance: ");
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
;PCODE: $0000099A VOL: 0
; 0000 03FB 
; 0000 03FC     while (stage == STAGE_TRAFFIC_MONITORING)
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
; 0000 03FD     {
; 0000 03FE         HCSR04Trigger();              // Send trigger pulse
;PCODE: $0000099F VOL: 0
; 0000 03FF         pulseWidth = GetPulseWidth(); // Measure echo pulse
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
; 0000 0400 
; 0000 0401         if (pulseWidth == US_ERROR)
;PCODE: $000009A2 VOL: 0
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
; 0000 0402         {
; 0000 0403             lcdCommand(0x01);
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
; 0000 0404             lcd_gotoxy(1, 1);
;PCODE: $000009A7 VOL: 0
;PCODE: $000009A8 VOL: 0
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
; 0000 0405             lcd_print("Error"); // Display error message
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
; 0000 0406         }
; 0000 0407         else if (pulseWidth == US_NO_OBSTACLE)
;PCODE: $000009AE VOL: 0
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
;PCODE: $000009B2 VOL: 0
; 0000 0408         {
; 0000 0409             lcdCommand(0x01);
;PCODE: $000009B3 VOL: 0
;PCODE: $000009B4 VOL: 0
; 0000 040A             lcd_gotoxy(1, 1);
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
; 0000 040B             lcd_print("No Obstacle"); // Display no obstacle message
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
; 0000 040C         }
; 0000 040D         else
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
; 0000 040E         {
; 0000 040F             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
; 0000 0410 
; 0000 0411             if (distance != previous_distance)
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
; 0000 0412             {
; 0000 0413                 previous_distance = distance;
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
; 0000 0414                 // Display distance on LCD
; 0000 0415                 itoa(distance, numberString); // Convert distance to string
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
;PCODE: $000009D0 VOL: 0
; 0000 0416                 lcd_gotoxy(11, 1);
;PCODE: $000009D1 VOL: 0
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 0417                 lcd_print(numberString);
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
; 0000 0418                 lcd_print(" cm ");
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
; 0000 0419             }
; 0000 041A             // Counting logic based on distance
; 0000 041B             if (distance < 6)
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
; 0000 041C             {
; 0000 041D                 US_count++; // Increment count if distance is below threshold
;PCODE: $000009DE VOL: 0
; 0000 041E             }
; 0000 041F 
; 0000 0420             // Update count on LCD only if it changes
; 0000 0421             if (US_count != previous_count)
;PCODE: $000009DF VOL: 0
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
; 0000 0422             {
; 0000 0423                 previous_count = US_count;
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
; 0000 0424                 lcd_gotoxy(1, 2); // Move to second line
;PCODE: $000009E8 VOL: 0
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
; 0000 0425                 itoa(US_count, numberString);
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
; 0000 0426                 lcd_print("Count: ");
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
;PCODE: $000009F3 VOL: 0
; 0000 0427                 lcd_print(numberString);
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
; 0000 0428             }
; 0000 0429         }
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0000 042A         delay_ms(100);
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
; 0000 042B     }
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
; 0000 042C }
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0

	.DSEG
_0x126:
	.BYTE 0x2A
;
;unsigned int simple_hash(const char *str)
; 0000 042F {

	.CSEG
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
; 0000 0430     unsigned int hash = 0;
; 0000 0431     while (*str)
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;	*str -> Y+2
;	hash -> R16,R17
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
; 0000 0432     {
; 0000 0433         hash = (hash * 31) + *str; // A basic hash formula
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
;PCODE: $00000A12 VOL: 0
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
;PCODE: $00000A15 VOL: 0
; 0000 0434         str++;
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
; 0000 0435     }
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
; 0000 0436     return hash;
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
; 0000 0437 }
;PCODE: $00000A22 VOL: 0
