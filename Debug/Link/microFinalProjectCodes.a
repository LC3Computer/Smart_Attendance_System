;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega32.h>
;#include <stdlib.h>
;#include <string.h>
;#include <eeprom.h>
;
;#define LCD_PRT PORTB // LCD DATA PORT
;#define LCD_DDR DDRB  // LCD DATA DDR
;#define LCD_PIN PINB  // LCD DATA PIN
;#define LCD_RS 0      // LCD RS
;#define LCD_RW 1      // LCD RW
;#define LCD_EN 2      // LCD EN
;#define KEY_PRT PORTC // keyboard PORT
;#define KEY_DDR DDRC  // keyboard DDR
;#define KEY_PIN PINC  // keyboard PIN
;
;void lcdCommand(unsigned char cmnd);
;void lcdData(unsigned char data);
;void lcd_init();
;void lcd_gotoxy(unsigned char x, unsigned char y);
;void lcd_print(char *str);
;void LCM35_init();
;void show_temp();
;void show_menu();
;
;/* keypad mapping :
;C : Cancel
;O : On/Clear
;D : Delete
;L : Left
;R : Right
;E : Enter  */
;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
;                              '4', '5', '6', 'D',
;                              '1', '2', '3', 'C',
;                              'L', '0', 'R', 'E'};

	.DSEG
;
;unsigned int stage = 0;
;char buffer[32] = "";
;
;char EEMEM eepromStudentCodes[200] = "";
;unsigned char studentCounts = 0;
;
;enum stages
;{
;    STAGE_INIT_MENU,
;    STAGE_ATTENDENC_MENU,
;    STAGE_SUBMIT_CODE,
;    STAGE_TEMPERATURE_MONITORING,
;    STAGE_VIEW_PRESENT_STUDENTS,
;};
;enum menu_options
;{
;    OPTION_ATTENDENCE = 1,
;    OPTION_STUDENT_MANAGEMENT = 2,
;    OPTION_VIEW_PRESENT_STUDENTS = 3,
;    OPTION_TEMPERATURE_MONITORING = 4,
;    OPTION_RETRIEVE_STUDENT_DATA = 5,
;    OPTION_TRAFFIC_MONITORING = 6,
;};
;
;void main(void)
; 0000 0040 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0041     unsigned char i;
; 0000 0042     KEY_DDR = 0xF0;
;	i -> R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0043     KEY_PRT = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0044     KEY_PRT &= 0x0F;    // ground all rows at once
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0045     MCUCR = 0x02;       // make INT0 falling edge triggered
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0046     GICR = (1 << INT0); // enable external interrupt 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0047     lcd_init();
;PCODE: $00000019 VOL: 0
; 0000 0048 
; 0000 0049 #asm("sei")           // enable interrupts
;PCODE: $0000001A VOL: 0
	sei
;PCODE: $0000001B VOL: 0
; 0000 004A     lcdCommand(0x01); // clear LCD
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004B     LCM35_init();
;PCODE: $0000001E VOL: 0
; 0000 004C     while (1)
;PCODE: $0000001F VOL: 0
; 0000 004D     {
; 0000 004E         if (stage == STAGE_INIT_MENU)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 004F         {
; 0000 0050             show_menu();
;PCODE: $00000022 VOL: 0
; 0000 0051         }
; 0000 0052         else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0053         {
; 0000 0054             lcdCommand(0x01);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0055             lcd_gotoxy(1, 1);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0056             lcd_print("1:submit student code");
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0057             lcd_gotoxy(1, 2);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0058             lcd_print("press cancel to back");
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0059             while (stage == STAGE_ATTENDENC_MENU)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005A                 ;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005B         }
; 0000 005C         else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005D         {
; 0000 005E             lcdCommand(0x01);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005F             lcd_gotoxy(1, 1);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0060             lcd_print("Enter your student code:");
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0061             lcd_gotoxy(1, 2);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0062             lcdCommand(0x0f);  // display on, cursor blinking
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0063             delay_us(100 * 8); // wait
;PCODE: $00000052 VOL: 0
; 0000 0064             while (stage == STAGE_SUBMIT_CODE)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0065                 ;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0066             lcdCommand(0x0c);  // display on, cursor off
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0067             delay_us(100 * 8); // wait
;PCODE: $0000005B VOL: 0
; 0000 0068         }
; 0000 0069         else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 006A         {
; 0000 006B             show_temp();
;PCODE: $00000061 VOL: 0
; 0000 006C         }
; 0000 006D         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 006E         {
; 0000 006F             lcdCommand(0x01);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0070             lcd_gotoxy(1, 1);
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0071             lcd_print("Number of students : ");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0072 
; 0000 0073             for (i = 0; i < studentCounts; i++)
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0074             {
; 0000 0075                 eeprom_read_block(buffer, (&eepromStudentCodes)+i, 9);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0076 
; 0000 0077                 lcdCommand(0x01);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0078                 lcd_gotoxy(1, 1);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0079                 lcd_print(buffer);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 007A                 delay_ms(300);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007B             }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 007C             lcd_print("Press cancel to go back");
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 007D             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 007E                 ;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 007F         }
; 0000 0080     }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0081 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0

	.DSEG
_0xA:
	.BYTE 0x72
;
;// int0 (keypad) service routine
;interrupt[EXT_INT0] void int0_routine(void)
; 0000 0085 {

	.CSEG
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0086     unsigned char colloc, rowloc, cl , i;
; 0000 0087 
; 0000 0088     // detect the key
; 0000 0089     while (1)
;PCODE: $000000A6 VOL: 0
;	colloc -> R17
;	rowloc -> R16
;	cl -> R19
;	i -> R18
;PCODE: $000000A7 VOL: 0
; 0000 008A     {
; 0000 008B         KEY_PRT = 0xEF;            // ground row 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 008C         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 008D         if (colloc != 0x0F)        // column detected
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 008E         {
; 0000 008F             rowloc = 0; // save row location
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0090             break;      // exit while loop
;PCODE: $000000B2 VOL: 0
; 0000 0091         }
; 0000 0092         KEY_PRT = 0xDF;            // ground row 1
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0093         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0094         if (colloc != 0x0F)        // column detected
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0095         {
; 0000 0096             rowloc = 1; // save row location
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0097             break;      // exit while loop
;PCODE: $000000BE VOL: 0
; 0000 0098         }
; 0000 0099         KEY_PRT = 0xBF;            // ground row 2
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009A         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 009B         if (colloc != 0x0F)        // column detected
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 009C         {
; 0000 009D             rowloc = 2; // save row location
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 009E             break;      // exit while loop
;PCODE: $000000CA VOL: 0
; 0000 009F         }
; 0000 00A0         KEY_PRT = 0x7F;            // ground row 3
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00A1         colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A2         rowloc = 3;                // save row location
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00A3         break;                     // exit while loop
;PCODE: $000000D3 VOL: 0
; 0000 00A4     }
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00A5     // check column and send result to Port D
; 0000 00A6     if (colloc == 0x0E)
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00A7         cl = 0;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00A8     else if (colloc == 0x0D)
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00A9         cl = 1;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AA     else if (colloc == 0x0B)
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00AB         cl = 2;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00AC     else
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00AD         cl = 3;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00AE 
; 0000 00AF     KEY_PRT &= 0x0F; // ground all rows at once
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B0 
; 0000 00B1     // inside menu level 1
; 0000 00B2     if (stage == STAGE_INIT_MENU)
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00B3     {
; 0000 00B4         switch (keypad[rowloc][cl] - '0')
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00B5         {
; 0000 00B6         case OPTION_ATTENDENCE:
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00B7             stage = STAGE_ATTENDENC_MENU;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00B8             break;
;PCODE: $00000102 VOL: 0
; 0000 00B9 
; 0000 00BA         case OPTION_TEMPERATURE_MONITORING:
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BB             stage = STAGE_TEMPERATURE_MONITORING;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00BC             break;
;PCODE: $00000108 VOL: 0
; 0000 00BD         case OPTION_VIEW_PRESENT_STUDENTS:
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00BE             stage = STAGE_VIEW_PRESENT_STUDENTS;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00BF             break;
;PCODE: $0000010E VOL: 0
; 0000 00C0 
; 0000 00C1         default:
;PCODE: $0000010F VOL: 0
; 0000 00C2             break;
;PCODE: $00000110 VOL: 0
; 0000 00C3         }
;PCODE: $00000111 VOL: 0
; 0000 00C4     }
; 0000 00C5     else if (stage == STAGE_ATTENDENC_MENU)
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00C6     {
; 0000 00C7         switch (keypad[rowloc][cl])
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00C8         {
; 0000 00C9         case 'C':
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00CA             stage = STAGE_INIT_MENU;
;PCODE: $00000121 VOL: 0
; 0000 00CB             break;
;PCODE: $00000122 VOL: 0
; 0000 00CC         case '1':
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00CD             stage = STAGE_SUBMIT_CODE;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00CE             break;
;PCODE: $00000128 VOL: 0
; 0000 00CF         default:
;PCODE: $00000129 VOL: 0
; 0000 00D0             break;
;PCODE: $0000012A VOL: 0
; 0000 00D1         }
;PCODE: $0000012B VOL: 0
; 0000 00D2     }
; 0000 00D3     else if (stage == STAGE_SUBMIT_CODE)
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00D4     {
; 0000 00D5 
; 0000 00D6         if ((keypad[rowloc][cl] - '0') < 10)
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00D7         {
; 0000 00D8 
; 0000 00D9             if (strlen(buffer) <= 30)
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00DA             {
; 0000 00DB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00DC                 buffer[strlen(buffer) + 1] = '\0';
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00DD                 lcdData(keypad[rowloc][cl]);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00DE             }
; 0000 00DF         }
;PCODE: $0000015A VOL: 0
; 0000 00E0         else if (keypad[rowloc][cl] == 'E')
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00E1         {
; 0000 00E2             // save the buffer to EEPROM
; 0000 00E3             eeprom_write_block((const void *)buffer, (eeprom void *)((&eepromStudentCodes)+studentCounts), 9);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E4             studentCounts++;
;PCODE: $00000170 VOL: 0
; 0000 00E5             stage = STAGE_INIT_MENU;
;PCODE: $00000171 VOL: 0
; 0000 00E6         }
; 0000 00E7         else if (keypad[rowloc][cl] == 'C')
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00E8             stage = STAGE_ATTENDENC_MENU;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00E9     }
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00EA     else if (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00EB     {
; 0000 00EC 
; 0000 00ED         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00EE             stage = STAGE_INIT_MENU;
;PCODE: $00000190 VOL: 0
; 0000 00EF     }
;PCODE: $00000191 VOL: 0
; 0000 00F0     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00F1     {
; 0000 00F2         if (keypad[rowloc][cl] == 'C')
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00F3             stage = STAGE_INIT_MENU;
;PCODE: $000001A0 VOL: 0
; 0000 00F4     }
;PCODE: $000001A1 VOL: 0
; 0000 00F5 }
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;
;void lcdCommand(unsigned char cmnd)
; 0000 00F8 {
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00F9     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
;PCODE: $000001AE VOL: 0
;	cmnd -> Y+0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 00FA     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 00FB     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00FC     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 00FD     delay_us(1);               // wait to make EN wider
;PCODE: $000001BC VOL: 0
; 0000 00FE     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 00FF     delay_us(20);              // wait
;PCODE: $000001BF VOL: 0
; 0000 0100     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 0101     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 0102     delay_us(1);               // wait to make EN wider
;PCODE: $000001C9 VOL: 0
; 0000 0103     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0104 }
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;void lcdData(unsigned char data)
; 0000 0106 {
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0107     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
;PCODE: $000001D1 VOL: 0
;	data -> Y+0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0108     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0109     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 010A     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 010B     delay_us(1);               // wait to make EN wider
;PCODE: $000001DF VOL: 0
; 0000 010C     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 010D     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 010E     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 010F     delay_us(1);               // wait to make EN wider
;PCODE: $000001EB VOL: 0
; 0000 0110     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0111 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;void lcd_init()
; 0000 0113 {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0114     LCD_DDR = 0xFF;            // LCD port is output
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0115     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0116     delay_us(2000);            // wait for stable power
;PCODE: $000001F7 VOL: 0
; 0000 0117     lcdCommand(0x33);          //$33 for 4-bit mode
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0118     delay_us(100 * 8);         // wait
;PCODE: $000001FA VOL: 0
; 0000 0119     lcdCommand(0x32);          //$32 for 4-bit mode
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 011A     delay_us(100 * 8);         // wait
;PCODE: $000001FD VOL: 0
; 0000 011B     lcdCommand(0x28);          //$28 for 4-bit mode
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 011C     delay_us(100 * 8);         // wait
;PCODE: $00000200 VOL: 0
; 0000 011D     lcdCommand(0x0c);          // display on, cursor off
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 011E     delay_us(100 * 8);         // wait
;PCODE: $00000203 VOL: 0
; 0000 011F     lcdCommand(0x01);          // clear LCD
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0120     delay_us(2000);            // wait
;PCODE: $00000206 VOL: 0
; 0000 0121     lcdCommand(0x06);          // shift cursor right
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0122     delay_us(100 * 8);
;PCODE: $00000209 VOL: 0
; 0000 0123 }
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;void lcd_gotoxy(unsigned char x, unsigned char y)
; 0000 0125 {
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0126     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
; 0000 0127     lcdCommand(firstCharAdr[y - 1] + x - 1);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;	x -> Y+5
;	y -> Y+4
;	firstCharAdr -> Y+0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0128     delay_us(100 * 8);
;PCODE: $00000222 VOL: 0
; 0000 0129 }
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;void lcd_print(char *str)
; 0000 012B {
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 012C     unsigned char i = 0;
; 0000 012D     while (str[i] != 0)
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 012E     {
; 0000 012F         lcdData(str[i]);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0130         i++;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0131     }
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0132 }
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;
;void LCM35_init()
; 0000 0135 {
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0136     ADMUX = 0xE0;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0137     ADCSRA = 0x87;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0138 }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;
;void show_temp()
; 0000 013B {
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 013C     unsigned char temperatureVal = 0;
; 0000 013D     unsigned char temperatureRep[3];
; 0000 013E 
; 0000 013F     while (stage == STAGE_TEMPERATURE_MONITORING)
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;	temperatureVal -> R17
;	temperatureRep -> Y+1
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0140     {
; 0000 0141         lcdCommand(0x01);
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 0142         lcd_gotoxy(1, 1);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0143         lcd_print("Temp(C):");
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0144         ADCSRA |= (1 << ADSC);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 0145         while ((ADCSRA & (1 << ADIF)) == 0)
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 0146             ;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 0147         temperatureVal = ADCH;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0148         itoa(temperatureVal, temperatureRep);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0149         lcd_print(temperatureRep);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 014A         delay_ms(100);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 014B     }
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 014C }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0

	.DSEG
_0x4E:
	.BYTE 0x9
;
;void show_menu()
; 0000 014F {

	.CSEG
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0150     unsigned char page_num = 0;
; 0000 0151     while (stage == STAGE_INIT_MENU)
;PCODE: $00000277 VOL: 0
;	page_num -> R17
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0152     {
; 0000 0153         lcdCommand(0x01);
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0154         lcd_gotoxy(1, 1);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 0155         if (page_num == 0)
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0156         {
; 0000 0157             lcd_print("1: Attendance Initialization");
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 0158             lcd_gotoxy(1, 2);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 0159             lcd_print("2: Student Management");
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 015A             if (stage == STAGE_INIT_MENU)
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 015B                 delay_ms(250);
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 015C             page_num = (page_num + 1) % 3;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 015D         }
; 0000 015E         else if (page_num == 1)
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 015F         {
; 0000 0160             lcd_print("3: View Present Students ");
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0161             lcd_gotoxy(1, 2);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0162             lcd_print("4: Temperature Monitoring");
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
; 0000 0163             if (stage == STAGE_INIT_MENU)
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0164                 delay_ms(250);
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0165             page_num = (page_num + 1) % 3;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0166         }
; 0000 0167         else if (page_num == 2)
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 0168         {
; 0000 0169             lcd_print("5: Retrieve Student Data");
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 016A             lcd_gotoxy(1, 2);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 016B             lcd_print("6: Traffic Monitoring");
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 016C             if (stage == STAGE_INIT_MENU)
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 016D                 delay_ms(250);
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 016E             page_num = (page_num + 1) % 3;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 016F         }
; 0000 0170     }
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0171 }
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0

	.DSEG
_0x56:
	.BYTE 0x96
