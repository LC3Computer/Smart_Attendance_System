;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <mega32.h>
;#include <stdlib.h>
;
;#define LCD_PRT PORTB   // LCD DATA PORT
;#define LCD_DDR DDRB    // LCD DATA DDR
;#define LCD_PIN PINB    // LCD DATA PIN
;#define LCD_RS 0        // LCD RS
;#define LCD_RW 1        // LCD RW
;#define LCD_EN 2        // LCD EN
;#define KEY_PRT PORTC // keyboard PORT
;#define KEY_DDR DDRC  // keyboard DDR
;#define KEY_PIN PINC  // keyboard PIN
;
;void lcdCommand( unsigned char cmnd );
;void lcdData( unsigned char data );
;void lcd_init();
;void lcd_gotoxy(unsigned char x, unsigned char y);
;void lcd_print( char * str );
;void LCM35_init();
;void getTemp();
;
;/* keypad mapping :
;C : Cancel
;O : On/Clear
;D : Delete
;L : Left
;R : Right
;E : Enter  */
;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
;                              '4', '5', '6', 'D',
;                              '1', '2', '3', 'C',
;                              'L', '0', 'R', 'E'};

	.DSEG
;
;
;void main(void)
; 0000 0026 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0027     KEY_DDR = 0xF0;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0028     KEY_PRT = 0xFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0029     KEY_PRT &= 0x0F;// ground all rows at once
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002A     MCUCR = 0x02; //make INT0 falling edge triggered
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002B     GICR = (1<<INT0); //enable external interrupt 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 002C     lcd_init();
;PCODE: $00000019 VOL: 0
; 0000 002D 
; 0000 002E 
; 0000 002F     #asm("sei") //enable interrupts
;PCODE: $0000001A VOL: 0
	sei
;PCODE: $0000001B VOL: 0
; 0000 0030     lcdCommand(0x01); //clear LCD
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0031     LCM35_init();
;PCODE: $0000001E VOL: 0
; 0000 0032     getTemp();
;PCODE: $0000001F VOL: 0
; 0000 0033     while(1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0034 
; 0000 0035 
; 0000 0036 }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;
;
;//int0 (keypad) service routine
;interrupt [EXT_INT0] void int0_routine(void){
; 0000 003B interrupt [2] void int0_routine(void){
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003C     unsigned char colloc, rowloc , cl;
; 0000 003D 
; 0000 003E     //detect the key
; 0000 003F       while (1)
;PCODE: $00000028 VOL: 0
;	colloc -> R17
;	rowloc -> R16
;	cl -> R19
;PCODE: $00000029 VOL: 0
; 0000 0040         {
; 0000 0041             KEY_PRT = 0xEF;            // ground row 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0042             colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0043             if (colloc != 0x0F)        // column detected
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0044             {
; 0000 0045                 rowloc = 0; // save row location
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0046                 break;      // exit while loop
;PCODE: $00000034 VOL: 0
; 0000 0047             }
; 0000 0048             KEY_PRT = 0xDF;            // ground row 1
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0049             colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004A             if (colloc != 0x0F)        // column detected
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004B             {
; 0000 004C                 rowloc = 1; // save row location
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 004D                 break;      // exit while loop
;PCODE: $00000040 VOL: 0
; 0000 004E             }
; 0000 004F             KEY_PRT = 0xBF;            // ground row 2
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0050             colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0051             if (colloc != 0x0F)        // column detected
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0052             {
; 0000 0053                 rowloc = 2; // save row location
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0054                 break;      // exit while loop
;PCODE: $0000004C VOL: 0
; 0000 0055             }
; 0000 0056             KEY_PRT = 0x7F;            // ground row 3
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0057             colloc = (KEY_PIN & 0x0F); // read the columns
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0058             rowloc = 3;                // save row location
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0059             break;                     // exit while loop
;PCODE: $00000055 VOL: 0
; 0000 005A         }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 005B         // check column and send result to Port D
; 0000 005C         if (colloc == 0x0E)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 005D             cl=0;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005E         else if (colloc == 0x0D)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005F              cl=1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0060         else if (colloc == 0x0B)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0061               cl=2;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0062         else
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0063             cl=3;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0064 
; 0000 0065     KEY_PRT &= 0x0F;// ground all rows at once
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0066 
; 0000 0067    lcdData(keypad[rowloc][cl]); //send the character to lcd
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0068 
; 0000 0069 }
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;
;
;void lcdCommand(unsigned char cmnd)
; 0000 006D {
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006E     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
;PCODE: $00000084 VOL: 0
;	cmnd -> Y+0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006F     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0070     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0071     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0072     delay_us(1);               // wait to make EN wider
;PCODE: $00000092 VOL: 0
; 0000 0073     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0074     delay_us(20);              // wait
;PCODE: $00000095 VOL: 0
; 0000 0075     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0076     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0077     delay_us(1);               // wait to make EN wider
;PCODE: $0000009F VOL: 0
; 0000 0078     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 0079 }
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;void lcdData(unsigned char data)
; 0000 007B {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 007C     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
;PCODE: $000000A7 VOL: 0
;	data -> Y+0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 007D     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007E     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 007F     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0080     delay_us(1);               // wait to make EN wider
;PCODE: $000000B5 VOL: 0
; 0000 0081     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0082     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0083     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0084     delay_us(1);               // wait to make EN wider
;PCODE: $000000C1 VOL: 0
; 0000 0085     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0086 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;void lcd_init()
; 0000 0088 {
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0089     LCD_DDR = 0xFF;            // LCD port is output
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 008A     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 008B     delay_us(2000);            // wait for stable power
;PCODE: $000000CD VOL: 0
; 0000 008C     lcdCommand(0x33);          //$33 for 4-bit mode
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 008D     delay_us(100 * 8);             // wait
;PCODE: $000000D0 VOL: 0
; 0000 008E     lcdCommand(0x32);          //$32 for 4-bit mode
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 008F     delay_us(100 * 8);             // wait
;PCODE: $000000D3 VOL: 0
; 0000 0090     lcdCommand(0x28);          //$28 for 4-bit mode
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0091     delay_us(100 * 8);             // wait
;PCODE: $000000D6 VOL: 0
; 0000 0092     lcdCommand(0x0e);          // display on, cursor on
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0093     delay_us(100 * 8);             // wait
;PCODE: $000000D9 VOL: 0
; 0000 0094     lcdCommand(0x01);          // clear LCD
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 0095     delay_us(2000);            // wait
;PCODE: $000000DC VOL: 0
; 0000 0096     lcdCommand(0x06);          // shift cursor right
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0097     delay_us(100 * 8);
;PCODE: $000000DF VOL: 0
; 0000 0098 }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;void lcd_gotoxy(unsigned char x, unsigned char y)
; 0000 009A {
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 009B     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
; 0000 009C     lcdCommand(firstCharAdr[y - 1] + x - 1);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;	x -> Y+5
;	y -> Y+4
;	firstCharAdr -> Y+0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 009D     delay_us(100 * 8);
;PCODE: $000000F8 VOL: 0
; 0000 009E }
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;void lcd_print(char *str)
; 0000 00A0 {
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00A1     unsigned char i = 0;
; 0000 00A2     while (str[i] != 0)
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00A3     {
; 0000 00A4         lcdData(str[i]);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00A5         i++;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00A6     }
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00A7 }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;
;void LCM35_init()
; 0000 00AA {
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00AB     ADMUX = 0xE0;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00AC 	ADCSRA = 0x87;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00AD 
; 0000 00AE }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;
;void getTemp()
; 0000 00B1 {
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00B2 	unsigned char temperatureVal = 0;
; 0000 00B3 	unsigned char temperatureRep[3];
; 0000 00B4 
; 0000 00B5 
; 0000 00B6     while(1)
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;	temperatureVal -> R17
;	temperatureRep -> Y+1
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00B7 	{
; 0000 00B8         lcdCommand(0x01);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00B9         lcd_gotoxy(1,1);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00BA         lcd_print("Temp(C):");
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00BB 		ADCSRA |= (1 << ADSC);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00BC 		while((ADCSRA & (1 << ADIF)) == 0);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00BD 		temperatureVal = ADCH;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00BE 		itoa(temperatureVal, temperatureRep);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00BF         lcd_print(temperatureRep);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00C0         delay_ms(100);
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00C1 	}
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00C2 }
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0

	.DSEG
_0x1A:
	.BYTE 0x9
