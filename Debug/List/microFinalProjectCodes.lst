
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Sun Dec 22 08:49:54 2024

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 	.DEF _logged_in=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02f7 	JMP  __RESET
000002 940c 048d 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002d 3837
00002e 4f39
00002f 3534
000030 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000031 3231
000032 4333
000033 304c
000034 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x4:
000035 0f64      	.DB  0x64,0xF
                 _0x13C:
000036 ffff      	.DB  0xFF,0xFF
                 _0x0:
000037 2031
000038 203a
000039 7553
00003a 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
00003b 7469
00003c 5320
00003d 7574
00003e 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003f 746e
000040 4320
000041 646f
000042 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000043 2032
000044 203a
000045 7553
000046 6d62      	.DB  0x32,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000047 7469
000048 5720
000049 7469
00004a 2068      	.DB  0x69,0x74,0x20,0x57,0x69,0x74,0x68,0x20
00004b 6143
00004c 6472
00004d 4500
00004e 746e      	.DB  0x43,0x61,0x72,0x64,0x0,0x45,0x6E,0x74
00004f 7265
000050 7920
000051 756f
000052 2072      	.DB  0x65,0x72,0x20,0x79,0x6F,0x75,0x72,0x20
000053 7473
000054 6475
000055 6e65
000056 2074      	.DB  0x73,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
000057 6f63
000058 6564
000059 003a
00005a 7242      	.DB  0x63,0x6F,0x64,0x65,0x3A,0x0,0x42,0x72
00005b 6e69
00005c 2067
00005d 6f79
00005e 7275      	.DB  0x69,0x6E,0x67,0x20,0x79,0x6F,0x75,0x72
00005f 6320
000060 7261
000061 2064
000062 656e      	.DB  0x20,0x63,0x61,0x72,0x64,0x20,0x6E,0x65
000063 7261
000064 6420
000065 7665
000066 6369      	.DB  0x61,0x72,0x20,0x64,0x65,0x76,0x69,0x63
000067 3a65
000068 5300
000069 7574
00006a 6564      	.DB  0x65,0x3A,0x0,0x53,0x74,0x75,0x64,0x65
00006b 746e
00006c 6120
00006d 6464
00006e 6465      	.DB  0x6E,0x74,0x20,0x61,0x64,0x64,0x65,0x64
00006f 7720
000070 7469
000071 2068
000072 4449      	.DB  0x20,0x77,0x69,0x74,0x68,0x20,0x49,0x44
000073 003a
000074 754e
000075 626d
000076 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
000077 6f20
000078 2066
000079 7473
00007a 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
00007b 6e65
00007c 7374
00007d 3a20
00007e 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
00007f 7250
000080 7365
000081 2073
000082 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000083 636e
000084 6c65
000085 5420
000086 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
000087 6f47
000088 4220
000089 6361
00008a 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
00008b 7453
00008c 7261
00008d 2074
00008e 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
00008f 6e61
000090 6673
000091 7265
000092 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000093 676e
000094 2e2e
000095 002e
000096 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
000097 7261
000098 2074
000099 7254
00009a 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
00009b 6d73
00009c 7469
00009d 4620
00009e 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
00009f 7369
0000a0 6568
0000a1 0064
0000a2 3a31      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x3A
0000a3 5320
0000a4 6165
0000a5 6372
0000a6 2068      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x20
0000a7 7453
0000a8 6475
0000a9 6e65
0000aa 0074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x0
0000ab 3a32
0000ac 4420
0000ad 6c65
0000ae 7465      	.DB  0x32,0x3A,0x20,0x44,0x65,0x6C,0x65,0x74
0000af 2065
0000b0 7453
0000b1 6475
0000b2 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
0000b3 0074
0000b4 6e45
0000b5 6574
0000b6 2072      	.DB  0x74,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
0000b7 7453
0000b8 6475
0000b9 6e65
0000ba 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000bb 6f43
0000bc 6564
0000bd 4620
0000be 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000bf 5320
0000c0 6165
0000c1 6372
0000c2 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000c3 4500
0000c4 746e
0000c5 7265
0000c6 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
0000c7 7574
0000c8 6564
0000c9 746e
0000ca 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000cb 646f
0000cc 2065
0000cd 6f46
0000ce 2072      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x20
0000cf 6544
0000d0 656c
0000d1 6574
0000d2 003a      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x3A,0x0
0000d3 6e45
0000d4 6574
0000d5 2072
0000d6 6553      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x53,0x65
0000d7 7263
0000d8 7465
0000d9 4320
0000da 646f      	.DB  0x63,0x72,0x65,0x74,0x20,0x43,0x6F,0x64
0000db 2065
0000dc 6f28
0000dd 2072
0000de 6163      	.DB  0x65,0x20,0x28,0x6F,0x72,0x20,0x63,0x61
0000df 636e
0000e0 6c65
0000e1 0029
0000e2 2031      	.DB  0x6E,0x63,0x65,0x6C,0x29,0x0,0x31,0x20
0000e3 203a
0000e4 6c43
0000e5 6165
0000e6 2072      	.DB  0x3A,0x20,0x43,0x6C,0x65,0x61,0x72,0x20
0000e7 4545
0000e8 5250
0000e9 4d4f
0000ea 2000      	.DB  0x45,0x45,0x50,0x52,0x4F,0x4D,0x0,0x20
0000eb 2020
0000ec 7020
0000ed 6572
0000ee 7373      	.DB  0x20,0x20,0x20,0x70,0x72,0x65,0x73,0x73
0000ef 6320
0000f0 6e61
0000f1 6563
0000f2 206c      	.DB  0x20,0x63,0x61,0x6E,0x63,0x65,0x6C,0x20
0000f3 6f74
0000f4 6220
0000f5 6361
0000f6 006b      	.DB  0x74,0x6F,0x20,0x62,0x61,0x63,0x6B,0x0
0000f7 6f4c
0000f8 6f67
0000f9 7475
0000fa 2e20      	.DB  0x4C,0x6F,0x67,0x6F,0x75,0x74,0x20,0x2E
0000fb 2e2e
0000fc 4700
0000fd 696f
0000fe 676e      	.DB  0x2E,0x2E,0x0,0x47,0x6F,0x69,0x6E,0x67
0000ff 5420
000100 206f
000101 6441
000102 696d      	.DB  0x20,0x54,0x6F,0x20,0x41,0x64,0x6D,0x69
000103 206e
000104 6150
000105 6567
000106 4920      	.DB  0x6E,0x20,0x50,0x61,0x67,0x65,0x20,0x49
000107 206e
000108 2032
000109 6553
00010a 0063      	.DB  0x6E,0x20,0x32,0x20,0x53,0x65,0x63,0x0
00010b 3034
00010c 4900
00010d 636e
00010e 726f      	.DB  0x34,0x30,0x0,0x49,0x6E,0x63,0x6F,0x72
00010f 6572
000110 7463
000111 5320
000112 7574      	.DB  0x72,0x65,0x63,0x74,0x20,0x53,0x74,0x75
000113 6564
000114 746e
000115 4320
000116 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
000117 2065
000118 6f46
000119 6d72
00011a 7461      	.DB  0x65,0x20,0x46,0x6F,0x72,0x6D,0x61,0x74
00011b 5900
00011c 756f
00011d 5720
00011e 6c69      	.DB  0x0,0x59,0x6F,0x75,0x20,0x57,0x69,0x6C
00011f 206c
000120 6142
000121 6b63
000122 4d20      	.DB  0x6C,0x20,0x42,0x61,0x63,0x6B,0x20,0x4D
000123 6e65
000124 2075
000125 6e49
000126 3220      	.DB  0x65,0x6E,0x75,0x20,0x49,0x6E,0x20,0x32
000127 5320
000128 6365
000129 6e6f
00012a 0064      	.DB  0x20,0x53,0x65,0x63,0x6F,0x6E,0x64,0x0
00012b 7544
00012c 6c70
00012d 6369
00012e 7461      	.DB  0x44,0x75,0x70,0x6C,0x69,0x63,0x61,0x74
00012f 2065
000130 7453
000131 6475
000132 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000133 2074
000134 6f43
000135 6564
000136 4520      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x45
000137 746e
000138 7265
000139 6465
00013a 5300      	.DB  0x6E,0x74,0x65,0x72,0x65,0x64,0x0,0x53
00013b 7574
00013c 6564
00013d 746e
00013e 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
00013f 646f
000140 2065
000141 7553
000142 6363      	.DB  0x6F,0x64,0x65,0x20,0x53,0x75,0x63,0x63
000143 7365
000144 6673
000145 6c75
000146 796c      	.DB  0x65,0x73,0x73,0x66,0x75,0x6C,0x6C,0x79
000147 4120
000148 6464
000149 6465
00014a 5900      	.DB  0x20,0x41,0x64,0x64,0x65,0x64,0x0,0x59
00014b 756f
00014c 4d20
00014d 7375
00014e 2074      	.DB  0x6F,0x75,0x20,0x4D,0x75,0x73,0x74,0x20
00014f 6946
000150 7372
000151 2074
000152 6f4c      	.DB  0x46,0x69,0x72,0x73,0x74,0x20,0x4C,0x6F
000153 6967
000154 006e
000155 6f59
000156 2075      	.DB  0x67,0x69,0x6E,0x0,0x59,0x6F,0x75,0x20
000157 6957
000158 6c6c
000159 4720
00015a 206f      	.DB  0x57,0x69,0x6C,0x6C,0x20,0x47,0x6F,0x20
00015b 6441
00015c 696d
00015d 206e
00015e 6150      	.DB  0x41,0x64,0x6D,0x69,0x6E,0x20,0x50,0x61
00015f 6567
000160 3220
000161 5320
000162 6365      	.DB  0x67,0x65,0x20,0x32,0x20,0x53,0x65,0x63
000163 5300
000164 7574
000165 6564
000166 746e      	.DB  0x0,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000167 4320
000168 646f
000169 2065
00016a 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
00016b 6e75
00016c 0064
00016d 704f
00016e 2073      	.DB  0x75,0x6E,0x64,0x0,0x4F,0x70,0x73,0x20
00016f 202c
000170 7453
000171 6475
000172 6e65      	.DB  0x2C,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000173 2074
000174 6f43
000175 6564
000176 4e20      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x4E
000177 746f
000178 4620
000179 756f
00017a 646e      	.DB  0x6F,0x74,0x20,0x46,0x6F,0x75,0x6E,0x64
00017b 5700
00017c 6961
00017d 2074
00017e 6f46      	.DB  0x0,0x57,0x61,0x69,0x74,0x20,0x46,0x6F
00017f 2072
000180 6544
000181 656c
000182 6574      	.DB  0x72,0x20,0x44,0x65,0x6C,0x65,0x74,0x65
000183 2e2e
000184 002e
000185 7453
000186 6475      	.DB  0x2E,0x2E,0x2E,0x0,0x53,0x74,0x75,0x64
000187 6e65
000188 2074
000189 6f43
00018a 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
00018b 5720
00018c 7361
00018d 4420
00018e 6c65      	.DB  0x20,0x57,0x61,0x73,0x20,0x44,0x65,0x6C
00018f 7465
000190 6465
000191 4c00
000192 676f      	.DB  0x65,0x74,0x65,0x64,0x0,0x4C,0x6F,0x67
000193 6e69
000194 5320
000195 6375
000196 6563      	.DB  0x69,0x6E,0x20,0x53,0x75,0x63,0x63,0x65
000197 7373
000198 7566
000199 6c6c
00019a 0079      	.DB  0x73,0x73,0x66,0x75,0x6C,0x6C,0x79,0x0
00019b 6157
00019c 7469
00019d 2e2e
00019e 002e      	.DB  0x57,0x61,0x69,0x74,0x2E,0x2E,0x2E,0x0
00019f 704f
0001a0 2073
0001a1 202c
0001a2 6573      	.DB  0x4F,0x70,0x73,0x20,0x2C,0x20,0x73,0x65
0001a3 7263
0001a4 7465
0001a5 6920
0001a6 2073      	.DB  0x63,0x72,0x65,0x74,0x20,0x69,0x73,0x20
0001a7 6e69
0001a8 6f63
0001a9 7272
0001aa 6365      	.DB  0x69,0x6E,0x63,0x6F,0x72,0x72,0x65,0x63
0001ab 0074
0001ac 6c43
0001ad 6165
0001ae 6972      	.DB  0x74,0x0,0x43,0x6C,0x65,0x61,0x72,0x69
0001af 676e
0001b0 4520
0001b1 5045
0001b2 4f52      	.DB  0x6E,0x67,0x20,0x45,0x45,0x50,0x52,0x4F
0001b3 204d
0001b4 2e2e
0001b5 002e
0001b6 6574      	.DB  0x4D,0x20,0x2E,0x2E,0x2E,0x0,0x74,0x65
0001b7 706d
0001b8 7265
0001b9 7461
0001ba 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
0001bb 2865
0001bc 2943
0001bd 003a
0001be 3a31      	.DB  0x65,0x28,0x43,0x29,0x3A,0x0,0x31,0x3A
0001bf 4120
0001c0 7474
0001c1 6e65
0001c2 6164      	.DB  0x20,0x41,0x74,0x74,0x65,0x6E,0x64,0x61
0001c3 636e
0001c4 2065
0001c5 6e49
0001c6 7469      	.DB  0x6E,0x63,0x65,0x20,0x49,0x6E,0x69,0x74
0001c7 6169
0001c8 696c
0001c9 617a
0001ca 6974      	.DB  0x69,0x61,0x6C,0x69,0x7A,0x61,0x74,0x69
0001cb 6e6f
0001cc 3200
0001cd 203a
0001ce 7453      	.DB  0x6F,0x6E,0x0,0x32,0x3A,0x20,0x53,0x74
0001cf 6475
0001d0 6e65
0001d1 2074
0001d2 614d      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x4D,0x61
0001d3 616e
0001d4 6567
0001d5 656d
0001d6 746e      	.DB  0x6E,0x61,0x67,0x65,0x6D,0x65,0x6E,0x74
0001d7 3300
0001d8 203a
0001d9 6956
0001da 7765      	.DB  0x0,0x33,0x3A,0x20,0x56,0x69,0x65,0x77
0001db 5020
0001dc 6572
0001dd 6573
0001de 746e      	.DB  0x20,0x50,0x72,0x65,0x73,0x65,0x6E,0x74
0001df 5320
0001e0 7574
0001e1 6564
0001e2 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0001e3 2073
0001e4 3400
0001e5 203a
0001e6 6554      	.DB  0x73,0x20,0x0,0x34,0x3A,0x20,0x54,0x65
0001e7 706d
0001e8 7265
0001e9 7461
0001ea 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
0001eb 2065
0001ec 6f4d
0001ed 696e
0001ee 6f74      	.DB  0x65,0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F
0001ef 6972
0001f0 676e
0001f1 3500
0001f2 203a      	.DB  0x72,0x69,0x6E,0x67,0x0,0x35,0x3A,0x20
0001f3 6552
0001f4 7274
0001f5 6569
0001f6 6576      	.DB  0x52,0x65,0x74,0x72,0x69,0x65,0x76,0x65
0001f7 5320
0001f8 7574
0001f9 6564
0001fa 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0001fb 4420
0001fc 7461
0001fd 0061
0001fe 3a36      	.DB  0x20,0x44,0x61,0x74,0x61,0x0,0x36,0x3A
0001ff 5420
000200 6172
000201 6666
000202 6369      	.DB  0x20,0x54,0x72,0x61,0x66,0x66,0x69,0x63
000203 4d20
000204 6e6f
000205 7469
000206 726f      	.DB  0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72
000207 6e69
000208 0067
000209 3a37
00020a 4c20      	.DB  0x69,0x6E,0x67,0x0,0x37,0x3A,0x20,0x4C
00020b 676f
00020c 6e69
00020d 5720
00020e 7469      	.DB  0x6F,0x67,0x69,0x6E,0x20,0x57,0x69,0x74
00020f 2068
000210 6441
000211 696d
000212 006e      	.DB  0x68,0x20,0x41,0x64,0x6D,0x69,0x6E,0x0
000213 3a38
000214 4c20
000215 676f
000216 756f      	.DB  0x38,0x3A,0x20,0x4C,0x6F,0x67,0x6F,0x75
000217 0074
000218 6944
000219 7473
00021a 6e61      	.DB  0x74,0x0,0x44,0x69,0x73,0x74,0x61,0x6E
00021b 6563
00021c 203a
00021d 4500
00021e 7272      	.DB  0x63,0x65,0x3A,0x20,0x0,0x45,0x72,0x72
00021f 726f
000220 4e00
000221 206f
000222 624f      	.DB  0x6F,0x72,0x0,0x4E,0x6F,0x20,0x4F,0x62
000223 7473
000224 6361
000225 656c
000226 2000      	.DB  0x73,0x74,0x61,0x63,0x6C,0x65,0x0,0x20
000227 6d63
000228 0020
000229 6f43
00022a 6e75      	.DB  0x63,0x6D,0x20,0x0,0x43,0x6F,0x75,0x6E
00022b 3a74
00022c 0020      	.DB  0x74,0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1263): warning: .cseg .db misalignment - padding zero byte
00022d 0001      	.DB  0x1
                 _0x2000000:
00022e 4e2d
00022f 4e41
000230 4900
000231 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1266): warning: .cseg .db misalignment - padding zero byte
000232 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000233 0006      	.DW  0x06
000234 0004      	.DW  0x04
000235 0054      	.DW  __REG_VARS*2
                 
000236 0010      	.DW  0x10
000237 075f      	.DW  _keypad
000238 005a      	.DW  _0x3*2
                 
000239 0018      	.DW  0x18
00023a 0260      	.DW  _0xB
00023b 006e      	.DW  _0x0*2
                 
00023c 0015      	.DW  0x15
00023d 0278      	.DW  _0xB+24
00023e 0086      	.DW  _0x0*2+24
                 
00023f 0019      	.DW  0x19
000240 028d      	.DW  _0xB+45
000241 009b      	.DW  _0x0*2+45
                 
000242 001d      	.DW  0x1D
000243 02a6      	.DW  _0xB+70
000244 00b4      	.DW  _0x0*2+70
                 
000245 0017      	.DW  0x17
000246 02c3      	.DW  _0xB+99
000247 00d1      	.DW  _0x0*2+99
                 
000248 0016      	.DW  0x16
000249 02da      	.DW  _0xB+122
00024a 00e8      	.DW  _0x0*2+122
                 
00024b 0018      	.DW  0x18
00024c 02f0      	.DW  _0xB+144
00024d 00fe      	.DW  _0x0*2+144
                 
00024e 0016      	.DW  0x16
00024f 0308      	.DW  _0xB+168
000250 0116      	.DW  _0x0*2+168
                 
000251 0018      	.DW  0x18
000252 031e      	.DW  _0xB+190
000253 012c      	.DW  _0x0*2+190
                 
000254 0012      	.DW  0x12
000255 0336      	.DW  _0xB+214
000256 0144      	.DW  _0x0*2+214
                 
000257 0012      	.DW  0x12
000258 0348      	.DW  _0xB+232
000259 0156      	.DW  _0x0*2+232
                 
00025a 001f      	.DW  0x1F
00025b 035a      	.DW  _0xB+250
00025c 0168      	.DW  _0x0*2+250
                 
00025d 001f      	.DW  0x1F
00025e 0379      	.DW  _0xB+281
00025f 0187      	.DW  _0x0*2+281
                 
000260 001e      	.DW  0x1E
000261 0398      	.DW  _0xB+312
000262 01a6      	.DW  _0x0*2+312
                 
000263 0011      	.DW  0x11
000264 03b6      	.DW  _0xB+342
000265 01c4      	.DW  _0x0*2+342
                 
000266 0019      	.DW  0x19
000267 03c7      	.DW  _0xB+359
000268 01d5      	.DW  _0x0*2+359
                 
000269 000b      	.DW  0x0B
00026a 03e0      	.DW  _0x71
00026b 01ee      	.DW  _0x0*2+384
                 
00026c 001d      	.DW  0x1D
00026d 03eb      	.DW  _0x71+11
00026e 01f9      	.DW  _0x0*2+395
                 
00026f 0002      	.DW  0x02
000270 0408      	.DW  _0x71+40
000271 00fc      	.DW  _0x0*2+142
                 
000272 0003      	.DW  0x03
000273 040a      	.DW  _0x71+42
000274 0216      	.DW  _0x0*2+424
                 
000275 001e      	.DW  0x1E
000276 040d      	.DW  _0x71+45
000277 0219      	.DW  _0x0*2+427
                 
000278 001f      	.DW  0x1F
000279 042b      	.DW  _0x71+75
00027a 0237      	.DW  _0x0*2+457
                 
00027b 001f      	.DW  0x1F
00027c 044a      	.DW  _0x71+106
00027d 0256      	.DW  _0x0*2+488
                 
00027e 001f      	.DW  0x1F
00027f 0469      	.DW  _0x71+137
000280 0237      	.DW  _0x0*2+457
                 
000281 0020      	.DW  0x20
000282 0488      	.DW  _0x71+168
000283 0275      	.DW  _0x0*2+519
                 
000284 001f      	.DW  0x1F
000285 04a8      	.DW  _0x71+200
000286 0237      	.DW  _0x0*2+457
                 
000287 0015      	.DW  0x15
000288 04c7      	.DW  _0x71+231
000289 0295      	.DW  _0x0*2+551
                 
00028a 001d      	.DW  0x1D
00028b 04dc      	.DW  _0x71+252
00028c 02aa      	.DW  _0x0*2+572
                 
00028d 0002      	.DW  0x02
00028e 04f9      	.DW  _0x71+281
00028f 00fc      	.DW  _0x0*2+142
                 
000290 0013      	.DW  0x13
000291 04fb      	.DW  _0x71+283
000292 02c7      	.DW  _0x0*2+601
                 
000293 001f      	.DW  0x1F
000294 050e      	.DW  _0x71+302
000295 0237      	.DW  _0x0*2+457
                 
000296 001d      	.DW  0x1D
000297 052d      	.DW  _0x71+333
000298 02da      	.DW  _0x0*2+620
                 
000299 001f      	.DW  0x1F
00029a 054a      	.DW  _0x71+362
00029b 0237      	.DW  _0x0*2+457
                 
00029c 0002      	.DW  0x02
00029d 0569      	.DW  _0x71+393
00029e 00fc      	.DW  _0x0*2+142
                 
00029f 0013      	.DW  0x13
0002a0 056b      	.DW  _0x71+395
0002a1 02c7      	.DW  _0x0*2+601
                 
0002a2 0013      	.DW  0x13
0002a3 057e      	.DW  _0x71+414
0002a4 02f7      	.DW  _0x0*2+649
                 
0002a5 0019      	.DW  0x19
0002a6 0591      	.DW  _0x71+433
0002a7 030a      	.DW  _0x0*2+668
                 
0002a8 001f      	.DW  0x1F
0002a9 05aa      	.DW  _0x71+458
0002aa 0237      	.DW  _0x0*2+457
                 
0002ab 001d      	.DW  0x1D
0002ac 05c9      	.DW  _0x71+489
0002ad 02da      	.DW  _0x0*2+620
                 
0002ae 001f      	.DW  0x1F
0002af 05e6      	.DW  _0x71+518
0002b0 0237      	.DW  _0x0*2+457
                 
0002b1 0002      	.DW  0x02
0002b2 0605      	.DW  _0x71+549
0002b3 00fc      	.DW  _0x0*2+142
                 
0002b4 0013      	.DW  0x13
0002b5 0607      	.DW  _0x71+551
0002b6 0323      	.DW  _0x0*2+693
                 
0002b7 0008      	.DW  0x08
0002b8 061a      	.DW  _0x71+570
0002b9 0336      	.DW  _0x0*2+712
                 
0002ba 001a      	.DW  0x1A
0002bb 0622      	.DW  _0x71+578
0002bc 033e      	.DW  _0x0*2+720
                 
0002bd 001f      	.DW  0x1F
0002be 063c      	.DW  _0x71+604
0002bf 0237      	.DW  _0x0*2+457
                 
0002c0 0014      	.DW  0x14
0002c1 065b      	.DW  _0x71+635
0002c2 0358      	.DW  _0x0*2+746
                 
0002c3 0010      	.DW  0x10
0002c4 066f      	.DW  _0xE7
0002c5 036c      	.DW  _0x0*2+766
                 
0002c6 0002      	.DW  0x02
0002c7 067f      	.DW  _0xE7+16
0002c8 00fc      	.DW  _0x0*2+142
                 
0002c9 001d      	.DW  0x1D
0002ca 0681      	.DW  _0xF3
0002cb 037c      	.DW  _0x0*2+782
                 
0002cc 0016      	.DW  0x16
0002cd 069e      	.DW  _0xF3+29
0002ce 0399      	.DW  _0x0*2+811
                 
0002cf 001a      	.DW  0x1A
0002d0 06b4      	.DW  _0xF3+51
0002d1 03af      	.DW  _0x0*2+833
                 
0002d2 001a      	.DW  0x1A
0002d3 06ce      	.DW  _0xF3+77
0002d4 03c9      	.DW  _0x0*2+859
                 
0002d5 0019      	.DW  0x19
0002d6 06e8      	.DW  _0xF3+103
0002d7 03e3      	.DW  _0x0*2+885
                 
0002d8 0016      	.DW  0x16
0002d9 0701      	.DW  _0xF3+128
0002da 03fc      	.DW  _0x0*2+910
                 
0002db 0014      	.DW  0x14
0002dc 0717      	.DW  _0xF3+150
0002dd 0412      	.DW  _0x0*2+932
                 
0002de 000a      	.DW  0x0A
0002df 072b      	.DW  _0xF3+170
0002e0 0426      	.DW  _0x0*2+952
                 
0002e1 0002      	.DW  0x02
0002e2 078f      	.DW  _previous_count_S0000014000
0002e3 006c      	.DW  _0x13C*2
                 
0002e4 000b      	.DW  0x0B
0002e5 0735      	.DW  _0x13D
0002e6 0430      	.DW  _0x0*2+962
                 
0002e7 0006      	.DW  0x06
0002e8 0740      	.DW  _0x13D+11
0002e9 043b      	.DW  _0x0*2+973
                 
0002ea 000c      	.DW  0x0C
0002eb 0746      	.DW  _0x13D+17
0002ec 0441      	.DW  _0x0*2+979
                 
0002ed 0005      	.DW  0x05
0002ee 0752      	.DW  _0x13D+29
0002ef 044d      	.DW  _0x0*2+991
                 
0002f0 0008      	.DW  0x08
0002f1 0757      	.DW  _0x13D+34
0002f2 0452      	.DW  _0x0*2+996
                 
0002f3 0001      	.DW  0x01
0002f4 0791      	.DW  __seed_G100
0002f5 045a      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0002f6 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0002f7 94f8      	CLI
0002f8 27ee      	CLR  R30
0002f9 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002fa e0f1      	LDI  R31,1
0002fb bffb      	OUT  GICR,R31
0002fc bfeb      	OUT  GICR,R30
0002fd bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0002fe e08d      	LDI  R24,(14-2)+1
0002ff e0a2      	LDI  R26,2
000300 27bb      	CLR  R27
                 __CLEAR_REG:
000301 93ed      	ST   X+,R30
000302 958a      	DEC  R24
000303 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000304 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000305 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000306 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000307 93ed      	ST   X+,R30
000308 9701      	SBIW R24,1
000309 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00030a e6e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00030b e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00030c 9185      	LPM  R24,Z+
00030d 9195      	LPM  R25,Z+
00030e 9700      	SBIW R24,0
00030f f061      	BREQ __GLOBAL_INI_END
000310 91a5      	LPM  R26,Z+
000311 91b5      	LPM  R27,Z+
000312 9005      	LPM  R0,Z+
000313 9015      	LPM  R1,Z+
000314 01bf      	MOVW R22,R30
000315 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000316 9005      	LPM  R0,Z+
000317 920d      	ST   X+,R0
000318 9701      	SBIW R24,1
000319 f7e1      	BRNE __GLOBAL_INI_LOOP
00031a 01fb      	MOVW R30,R22
00031b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00031c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00031d bfed      	OUT  SPL,R30
00031e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00031f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000320 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000321 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000322 940c 0324 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 4
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0064 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0065     int i, j;
                 ; 0000 0066     unsigned char st_counts;
                 ; 0000 0067     unsigned char data;
                 ; 0000 0068     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
000324 efe0      	LDI  R30,LOW(240)
000325 bbe4      	OUT  0x14,R30
                 ; 0000 0069     KEY_PRT = 0xFF;
000326 efef      	LDI  R30,LOW(255)
000327 bbe5      	OUT  0x15,R30
                 ; 0000 006A     KEY_PRT &= 0x0F;                  // ground all rows at once
000328 b3e5      	IN   R30,0x15
000329 70ef      	ANDI R30,LOW(0xF)
00032a bbe5      	OUT  0x15,R30
                 ; 0000 006B     MCUCR = 0x02;                     // make INT0 falling edge triggered
00032b e0e2      	LDI  R30,LOW(2)
00032c bfe5      	OUT  0x35,R30
                 ; 0000 006C     GICR = (1 << INT0);               // enable external interrupt 0
00032d e4e0      	LDI  R30,LOW(64)
00032e bfeb      	OUT  0x3B,R30
                 ; 0000 006D     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
00032f 9a8f      	SBI  0x11,7
                 ; 0000 006E     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
000330 9897      	CBI  0x12,7
                 ; 0000 006F     USART_init(0x33);
000331 e3a3      	LDI  R26,LOW(51)
000332 e0b0      	LDI  R27,0
000333 940e 08ea 	CALL _USART_init
                 ; 0000 0070     HCSR04Init(); // Initialize ultrasonic sensor
000335 940e 0970 	CALL _HCSR04Init
                 ; 0000 0071     lcd_init();
000337 d49f      	RCALL _lcd_init
                 ; 0000 0072 
                 ; 0000 0073 #asm("sei")           // enable interrupts
000338 9478      	sei
                 ; 0000 0074     lcdCommand(0x01); // clear LCD
000339 e0a1      	LDI  R26,LOW(1)
00033a d488      	RCALL _lcdCommand
                 ; 0000 0075     while (1)
                 _0x5:
                 ; 0000 0076     {
                 ; 0000 0077         if (stage == STAGE_INIT_MENU)
00033b 2c04      	MOV  R0,R4
00033c 2805      	OR   R0,R5
00033d f411      	BRNE _0x8
                 ; 0000 0078         {
                 ; 0000 0079             show_menu();
00033e d515      	RCALL _show_menu
                 ; 0000 007A         }
                 ; 0000 007B         else if (stage == STAGE_ATTENDENC_MENU)
00033f c14b      	RJMP _0x9
                 _0x8:
000340 940e 0ad0 	CALL SUBOPT_0x0
000342 f469      	BRNE _0xA
                 ; 0000 007C         {
                 ; 0000 007D             lcdCommand(0x01);
000343 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 007E             lcd_gotoxy(1, 1);
                 ; 0000 007F             lcd_print("1 : Submit Student Code");
                +
000345 e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
000346 e0b2     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
000347 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0080             lcd_gotoxy(1, 2);
                 ; 0000 0081             lcd_print("2 : Submit With Card");
                +
000349 e7a8     +LDI R26 , LOW ( _0xB + ( 24 ) )
00034a e0b2     +LDI R27 , HIGH ( _0xB + ( 24 ) )
                 	__POINTW2MN _0xB,24
00034b d4c0      	RCALL _lcd_print
                 ; 0000 0082             while (stage == STAGE_ATTENDENC_MENU)
                 _0xC:
00034c 940e 0ad0 	CALL SUBOPT_0x0
00034e f3e9      	BREQ _0xC
                 ; 0000 0083                 ;
                 ; 0000 0084         }
                 ; 0000 0085         else if (stage == STAGE_SUBMIT_CODE)
00034f c13b      	RJMP _0xF
                 _0xA:
000350 940e 0ae4 	CALL SUBOPT_0x3
000352 f461      	BRNE _0x10
                 ; 0000 0086         {
                 ; 0000 0087             lcdCommand(0x01);
000353 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0088             lcd_gotoxy(1, 1);
                 ; 0000 0089             lcd_print("Enter your student code:");
                +
000355 e8ad     +LDI R26 , LOW ( _0xB + ( 45 ) )
000356 e0b2     +LDI R27 , HIGH ( _0xB + ( 45 ) )
                 	__POINTW2MN _0xB,45
000357 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 008A             lcd_gotoxy(1, 2);
                 ; 0000 008B             lcdCommand(0x0f);   // display on, cursor blinking
000359 940e 0ae9 	CALL SUBOPT_0x4
                 ; 0000 008C             delay_us(100 * 16); // wait
                 ; 0000 008D             while (stage == STAGE_SUBMIT_CODE)
                 _0x11:
00035b 940e 0ae4 	CALL SUBOPT_0x3
00035d f3e9      	BREQ _0x11
                 ; 0000 008E                 ;
                 ; 0000 008F             lcdCommand(0x0c);   // display on, cursor off
00035e c129      	RJMP _0x14B
                 ; 0000 0090             delay_us(100 * 16); // wait
                 ; 0000 0091         }
                 ; 0000 0092         else if(stage == STAGE_SUBMIT_WITH_CARD)
                 _0x10:
00035f 940e 0af1 	CALL SUBOPT_0x5
000361 f5a9      	BRNE _0x15
                 ; 0000 0093         {
                 ; 0000 0094             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x16:
000362 940e 0af1 	CALL SUBOPT_0x5
000364 f589      	BRNE _0x18
                 ; 0000 0095             {
                 ; 0000 0096                 lcdCommand(0x01);
000365 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0097                 lcd_gotoxy(1, 1);
                 ; 0000 0098                 lcd_print("Bring your card near device:");
                +
000367 eaa6     +LDI R26 , LOW ( _0xB + ( 70 ) )
000368 e0b2     +LDI R27 , HIGH ( _0xB + ( 70 ) )
                 	__POINTW2MN _0xB,70
000369 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0099                 lcd_gotoxy(1, 2);
                 ; 0000 009A                 delay_us(100 * 16); // wait
00036b 940e 0af6 	CALL SUBOPT_0x6
                 ; 0000 009B                 while((data = USART_Receive()) != '\r'){
                 _0x19:
00036d d573      	RCALL _USART_Receive
00036e 2f4e      	MOV  R20,R30
00036f 30ed      	CPI  R30,LOW(0xD)
000370 f071      	BREQ _0x1B
                 ; 0000 009C                     if(strlen(buffer) > 10 || stage != STAGE_SUBMIT_WITH_CARD)
000371 940e 0afb 	CALL SUBOPT_0x7
000373 973b      	SBIW R30,11
000374 f418      	BRSH _0x1D
000375 940e 0af1 	CALL SUBOPT_0x5
000377 f009      	BREQ _0x1C
                 _0x1D:
                 ; 0000 009D                         break;
000378 c006      	RJMP _0x1B
                 ; 0000 009E                     buffer[strlen(buffer)] = data;
                 _0x1C:
000379 940e 0afb 	CALL SUBOPT_0x7
00037b 59e1      	SUBI R30,LOW(-_buffer)
00037c 4ff8      	SBCI R31,HIGH(-_buffer)
00037d 8340      	ST   Z,R20
                 ; 0000 009F                 }
00037e cfee      	RJMP _0x19
                 _0x1B:
                 ; 0000 00A0                 if(stage != STAGE_SUBMIT_WITH_CARD || strlen(buffer) > 10)
00037f 940e 0af1 	CALL SUBOPT_0x5
000381 f421      	BRNE _0x20
000382 940e 0afb 	CALL SUBOPT_0x7
000384 973b      	SBIW R30,11
000385 f008      	BRLO _0x1F
                 _0x20:
                 ; 0000 00A1                     break;
000386 c00f      	RJMP _0x18
                 ; 0000 00A2                 lcdCommand(0x01);
                 _0x1F:
000387 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00A3                 lcd_gotoxy(1, 1);
                 ; 0000 00A4                 lcd_print("Student added with ID:");
                +
000389 eca3     +LDI R26 , LOW ( _0xB + ( 99 ) )
00038a e0b2     +LDI R27 , HIGH ( _0xB + ( 99 ) )
                 	__POINTW2MN _0xB,99
00038b 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 00A5                 lcd_gotoxy(1, 2);
                 ; 0000 00A6                 lcd_print(buffer);
00038d 940e 0aff 	CALL SUBOPT_0x8
                 ; 0000 00A7                 delay_ms(5000); // wait
00038f e8a8      	LDI  R26,LOW(5000)
000390 e1b3      	LDI  R27,HIGH(5000)
000391 940e 0bc8 	CALL _delay_ms
                 ; 0000 00A8                 memset(buffer,0,32);
000393 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 00A9             }
000395 cfcc      	RJMP _0x16
                 _0x18:
                 ; 0000 00AA         }
                 ; 0000 00AB         else if (stage == STAGE_TEMPERATURE_MONITORING)
000396 c0f4      	RJMP _0x22
                 _0x15:
000397 940e 0b0d 	CALL SUBOPT_0xA
000399 f411      	BRNE _0x23
                 ; 0000 00AC         {
                 ; 0000 00AD             show_temperature();
00039a d488      	RCALL _show_temperature
                 ; 0000 00AE         }
                 ; 0000 00AF         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00039b c0ef      	RJMP _0x24
                 _0x23:
00039c 940e 0b12 	CALL SUBOPT_0xB
00039e f009      	BREQ PC+2
00039f c051      	RJMP _0x25
                 ; 0000 00B0         {
                 ; 0000 00B1             lcdCommand(0x01);
0003a0 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00B2             lcd_gotoxy(1, 1);
                 ; 0000 00B3             lcd_print("Number of students : ");
                +
0003a2 edaa     +LDI R26 , LOW ( _0xB + ( 122 ) )
0003a3 e0b2     +LDI R27 , HIGH ( _0xB + ( 122 ) )
                 	__POINTW2MN _0xB,122
0003a4 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 00B4             lcd_gotoxy(1, 2);
                 ; 0000 00B5             st_counts = read_byte_from_eeprom(0x0);
0003a6 e0a0      	LDI  R26,LOW(0)
0003a7 e0b0      	LDI  R27,0
0003a8 d51a      	RCALL _read_byte_from_eeprom
0003a9 2f5e      	MOV  R21,R30
                 ; 0000 00B6             memset(buffer, 0, 32);
0003aa 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 00B7             itoa(st_counts, buffer);
0003ac 2fe5      	MOV  R30,R21
0003ad e0f0      	LDI  R31,0
0003ae 93fa      	ST   -Y,R31
0003af 93ea      	ST   -Y,R30
0003b0 e6af      	LDI  R26,LOW(_buffer)
0003b1 e0b7      	LDI  R27,HIGH(_buffer)
0003b2 940e 0a6d 	CALL _itoa
                 ; 0000 00B8             lcd_print(buffer);
0003b4 940e 0aff 	CALL SUBOPT_0x8
                 ; 0000 00B9             delay_ms(1000);
0003b6 eea8      	LDI  R26,LOW(1000)
0003b7 e0b3      	LDI  R27,HIGH(1000)
0003b8 940e 0bc8 	CALL _delay_ms
                 ; 0000 00BA 
                 ; 0000 00BB             for (i = 0; i < st_counts; i++)
                +
0003ba e000     +LDI R16 , LOW ( 0 )
0003bb e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x27:
0003bc 2fe5      	MOV  R30,R21
0003bd 01d8      	MOVW R26,R16
0003be e0f0      	LDI  R31,0
0003bf 17ae      	CP   R26,R30
0003c0 07bf      	CPC  R27,R31
0003c1 f534      	BRGE _0x28
                 ; 0000 00BC             {
                 ; 0000 00BD                 memset(buffer, 0, 32);
0003c2 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 00BE                 for (j = 0; j < 8; j++)
                +
0003c4 e020     +LDI R18 , LOW ( 0 )
0003c5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2A:
                +
0003c6 3028     +CPI R18 , LOW ( 8 )
0003c7 e0e0     +LDI R30 , HIGH ( 8 )
0003c8 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0003c9 f46c      	BRGE _0x2B
                 ; 0000 00BF                 {
                 ; 0000 00C0                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0003ca 01f9      	MOVW R30,R18
0003cb 59e1      	SUBI R30,LOW(-_buffer)
0003cc 4ff8      	SBCI R31,HIGH(-_buffer)
0003cd 93ff      	PUSH R31
0003ce 93ef      	PUSH R30
0003cf 940e 0b17 	CALL SUBOPT_0xC
0003d1 91af      	POP  R26
0003d2 91bf      	POP  R27
0003d3 93ec      	ST   X,R30
                 ; 0000 00C1                 }
                +
0003d4 5f2f     +SUBI R18 , LOW ( - 1 )
0003d5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003d6 cfef      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00C2                 buffer[j] = '\0';
0003d7 e6af      	LDI  R26,LOW(_buffer)
0003d8 e0b7      	LDI  R27,HIGH(_buffer)
0003d9 0fa2      	ADD  R26,R18
0003da 1fb3      	ADC  R27,R19
0003db e0e0      	LDI  R30,LOW(0)
0003dc 93ec      	ST   X,R30
                 ; 0000 00C3                 lcdCommand(0x01);
0003dd 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00C4                 lcd_gotoxy(1, 1);
                 ; 0000 00C5                 lcd_print(buffer);
0003df 940e 0aff 	CALL SUBOPT_0x8
                 ; 0000 00C6                 delay_ms(1000);
0003e1 eea8      	LDI  R26,LOW(1000)
0003e2 e0b3      	LDI  R27,HIGH(1000)
0003e3 940e 0bc8 	CALL _delay_ms
                 ; 0000 00C7             }
                +
0003e5 5f0f     +SUBI R16 , LOW ( - 1 )
0003e6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003e7 cfd4      	RJMP _0x27
                 _0x28:
                 ; 0000 00C8 
                 ; 0000 00C9             lcdCommand(0x01);
0003e8 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00CA             lcd_gotoxy(1, 1);
                 ; 0000 00CB             lcd_print("Press Cancel To Go Back");
                +
0003ea efa0     +LDI R26 , LOW ( _0xB + ( 144 ) )
0003eb e0b2     +LDI R27 , HIGH ( _0xB + ( 144 ) )
                 	__POINTW2MN _0xB,144
0003ec d41f      	RCALL _lcd_print
                 ; 0000 00CC             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x2C:
0003ed 940e 0b12 	CALL SUBOPT_0xB
0003ef f3e9      	BREQ _0x2C
                 ; 0000 00CD                 ;
                 ; 0000 00CE         }
                 ; 0000 00CF         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
0003f0 c09a      	RJMP _0x2F
                 _0x25:
0003f1 e0e6      	LDI  R30,LOW(6)
0003f2 e0f0      	LDI  R31,HIGH(6)
0003f3 15e4      	CP   R30,R4
0003f4 05f5      	CPC  R31,R5
0003f5 f5c1      	BRNE _0x30
                 ; 0000 00D0         {
                 ; 0000 00D1             lcdCommand(0x01);
0003f6 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00D2             lcd_gotoxy(1, 1);
                 ; 0000 00D3             lcd_print("Start Transferring...");
                +
0003f8 e0a8     +LDI R26 , LOW ( _0xB + ( 168 ) )
0003f9 e0b3     +LDI R27 , HIGH ( _0xB + ( 168 ) )
                 	__POINTW2MN _0xB,168
0003fa d411      	RCALL _lcd_print
                 ; 0000 00D4             st_counts = read_byte_from_eeprom(0x0);
0003fb 940e 0b20 	CALL SUBOPT_0xD
0003fd 2f5e      	MOV  R21,R30
                 ; 0000 00D5             for (i = 0; i < st_counts; i++)
                +
0003fe e000     +LDI R16 , LOW ( 0 )
0003ff e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x32:
000400 2fe5      	MOV  R30,R21
000401 01d8      	MOVW R26,R16
000402 e0f0      	LDI  R31,0
000403 17ae      	CP   R26,R30
000404 07bf      	CPC  R27,R31
000405 f494      	BRGE _0x33
                 ; 0000 00D6             {
                 ; 0000 00D7                 for (j = 0; j < 8; j++)
                +
000406 e020     +LDI R18 , LOW ( 0 )
000407 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x35:
                +
000408 3028     +CPI R18 , LOW ( 8 )
000409 e0e0     +LDI R30 , HIGH ( 8 )
00040a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00040b f43c      	BRGE _0x36
                 ; 0000 00D8                 {
                 ; 0000 00D9                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
00040c 940e 0b17 	CALL SUBOPT_0xC
00040e 2fae      	MOV  R26,R30
00040f d4ca      	RCALL _USART_Transmit
                 ; 0000 00DA                 }
                +
000410 5f2f     +SUBI R18 , LOW ( - 1 )
000411 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000412 cff5      	RJMP _0x35
                 _0x36:
                 ; 0000 00DB 
                 ; 0000 00DC                 USART_Transmit('\r');
000413 940e 0b24 	CALL SUBOPT_0xE
                 ; 0000 00DD                 USART_Transmit('\r');
                 ; 0000 00DE 
                 ; 0000 00DF                 delay_ms(500);
                 ; 0000 00E0             }
                +
000415 5f0f     +SUBI R16 , LOW ( - 1 )
000416 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000417 cfe8      	RJMP _0x32
                 _0x33:
                 ; 0000 00E1             for (j = 0; j < 8; j++)
                +
000418 e020     +LDI R18 , LOW ( 0 )
000419 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x38:
                +
00041a 3028     +CPI R18 , LOW ( 8 )
00041b e0e0     +LDI R30 , HIGH ( 8 )
00041c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00041d f42c      	BRGE _0x39
                 ; 0000 00E2             {
                 ; 0000 00E3                 USART_Transmit('=');
00041e e3ad      	LDI  R26,LOW(61)
00041f d4ba      	RCALL _USART_Transmit
                 ; 0000 00E4             }
                +
000420 5f2f     +SUBI R18 , LOW ( - 1 )
000421 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000422 cff7      	RJMP _0x38
                 _0x39:
                 ; 0000 00E5 
                 ; 0000 00E6             USART_Transmit('\r');
000423 940e 0b24 	CALL SUBOPT_0xE
                 ; 0000 00E7             USART_Transmit('\r');
                 ; 0000 00E8             delay_ms(500);
                 ; 0000 00E9 
                 ; 0000 00EA             lcdCommand(0x01);
000425 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00EB             lcd_gotoxy(1, 1);
                 ; 0000 00EC             lcd_print("Usart Transmit Finished");
                +
000427 e1ae     +LDI R26 , LOW ( _0xB + ( 190 ) )
000428 e0b3     +LDI R27 , HIGH ( _0xB + ( 190 ) )
                 	__POINTW2MN _0xB,190
000429 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 00ED             delay_ms(2000);
                 ; 0000 00EE             stage = STAGE_INIT_MENU;
00042b 2444      	CLR  R4
00042c 2455      	CLR  R5
                 ; 0000 00EF         }
                 ; 0000 00F0         else if (stage == STAGE_STUDENT_MANAGMENT)
00042d c05d      	RJMP _0x3A
                 _0x30:
00042e 940e 0b34 	CALL SUBOPT_0x10
000430 f469      	BRNE _0x3B
                 ; 0000 00F1         {
                 ; 0000 00F2             lcdCommand(0x01);
000431 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00F3             lcd_gotoxy(1, 1);
                 ; 0000 00F4             lcd_print("1: Search Student");
                +
000433 e3a6     +LDI R26 , LOW ( _0xB + ( 214 ) )
000434 e0b3     +LDI R27 , HIGH ( _0xB + ( 214 ) )
                 	__POINTW2MN _0xB,214
000435 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 00F5             lcd_gotoxy(1, 2);
                 ; 0000 00F6             lcd_print("2: Delete Student");
                +
000437 e4a8     +LDI R26 , LOW ( _0xB + ( 232 ) )
000438 e0b3     +LDI R27 , HIGH ( _0xB + ( 232 ) )
                 	__POINTW2MN _0xB,232
000439 d3d2      	RCALL _lcd_print
                 ; 0000 00F7             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x3C:
00043a 940e 0b34 	CALL SUBOPT_0x10
00043c f3e9      	BREQ _0x3C
                 ; 0000 00F8                 ;
                 ; 0000 00F9         }
                 ; 0000 00FA         else if (stage == STAGE_SEARCH_STUDENT)
00043d c04d      	RJMP _0x3F
                 _0x3B:
00043e 940e 0b39 	CALL SUBOPT_0x11
000440 f461      	BRNE _0x40
                 ; 0000 00FB         {
                 ; 0000 00FC             lcdCommand(0x01);
000441 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 00FD             lcd_gotoxy(1, 1);
                 ; 0000 00FE             lcd_print("Enter Student Code For Search:");
                +
000443 e5aa     +LDI R26 , LOW ( _0xB + ( 250 ) )
000444 e0b3     +LDI R27 , HIGH ( _0xB + ( 250 ) )
                 	__POINTW2MN _0xB,250
000445 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 00FF             lcd_gotoxy(1, 2);
                 ; 0000 0100             lcdCommand(0x0f);   // display on, cursor blinking
000447 940e 0ae9 	CALL SUBOPT_0x4
                 ; 0000 0101             delay_us(100 * 16); // wait
                 ; 0000 0102             while (stage == STAGE_SEARCH_STUDENT)
                 _0x41:
000449 940e 0b39 	CALL SUBOPT_0x11
00044b f3e9      	BREQ _0x41
                 ; 0000 0103                 ;
                 ; 0000 0104             lcdCommand(0x0c);   // display on, cursor off
00044c c03b      	RJMP _0x14B
                 ; 0000 0105             delay_us(100 * 16); // wait
                 ; 0000 0106         }
                 ; 0000 0107         else if (stage == STAGE_DELETE_STUDENT)
                 _0x40:
00044d 940e 0b3e 	CALL SUBOPT_0x12
00044f f461      	BRNE _0x45
                 ; 0000 0108         {
                 ; 0000 0109             lcdCommand(0x01);
000450 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 010A             lcd_gotoxy(1, 1);
                 ; 0000 010B             lcd_print("Enter Student Code For Delete:");
                +
000452 e7a9     +LDI R26 , LOW ( _0xB + ( 281 ) )
000453 e0b3     +LDI R27 , HIGH ( _0xB + ( 281 ) )
                 	__POINTW2MN _0xB,281
000454 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 010C             lcd_gotoxy(1, 2);
                 ; 0000 010D             lcdCommand(0x0f);   // display on, cursor blinking
000456 940e 0ae9 	CALL SUBOPT_0x4
                 ; 0000 010E             delay_us(100 * 16); // wait
                 ; 0000 010F             while (stage == STAGE_DELETE_STUDENT)
                 _0x46:
000458 940e 0b3e 	CALL SUBOPT_0x12
00045a f3e9      	BREQ _0x46
                 ; 0000 0110                 ;
                 ; 0000 0111             lcdCommand(0x0c); // display on, cursor off
00045b c02c      	RJMP _0x14B
                 ; 0000 0112             delay_us(100 * 16);
                 ; 0000 0113         }
                 ; 0000 0114         else if (stage == STAGE_TRAFFIC_MONITORING)
                 _0x45:
00045c 940e 0b43 	CALL SUBOPT_0x13
00045e f421      	BRNE _0x4A
                 ; 0000 0115         {
                 ; 0000 0116             startSonar();
00045f d566      	RCALL _startSonar
                 ; 0000 0117             stage = STAGE_INIT_MENU;
000460 2444      	CLR  R4
000461 2455      	CLR  R5
                 ; 0000 0118         }
                 ; 0000 0119         else if (stage == STAGE_LOGIN_WITH_ADMIN)
000462 c028      	RJMP _0x4B
                 _0x4A:
000463 940e 0b48 	CALL SUBOPT_0x14
000465 f529      	BRNE _0x4C
                 ; 0000 011A         {
                 ; 0000 011B             lcdCommand(0x01);
000466 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 011C             lcd_gotoxy(1, 1);
                 ; 0000 011D             lcd_print("Enter Secret Code (or cancel)");
                +
000468 e9a8     +LDI R26 , LOW ( _0xB + ( 312 ) )
000469 e0b3     +LDI R27 , HIGH ( _0xB + ( 312 ) )
                 	__POINTW2MN _0xB,312
00046a 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 011E             lcd_gotoxy(1, 2);
                 ; 0000 011F             lcdCommand(0x0f);   // display on, cursor blinking
00046c 940e 0ae9 	CALL SUBOPT_0x4
                 ; 0000 0120             delay_us(100 * 16); // wait
                 ; 0000 0121             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x4D:
00046e 940e 0b48 	CALL SUBOPT_0x14
000470 f411      	BRNE _0x50
000471 2099      	TST  R9
000472 f009      	BREQ _0x51
                 _0x50:
000473 c001      	RJMP _0x4F
                 _0x51:
                 ; 0000 0122                 ;
000474 cff9      	RJMP _0x4D
                 _0x4F:
                 ; 0000 0123             if (logged_in == 1)
000475 e0e1      	LDI  R30,LOW(1)
000476 15e9      	CP   R30,R9
000477 f481      	BRNE _0x52
                 ; 0000 0124             {
                 ; 0000 0125                 lcdCommand(0x0c); // display on, cursor off
000478 e0ac      	LDI  R26,LOW(12)
000479 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0126                 delay_us(100 * 16);
                 ; 0000 0127                 lcdCommand(0x01);
00047b 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0128                 lcd_gotoxy(1, 1);
                 ; 0000 0129                 lcd_print("1 : Clear EEPROM");
                +
00047d eba6     +LDI R26 , LOW ( _0xB + ( 342 ) )
00047e e0b3     +LDI R27 , HIGH ( _0xB + ( 342 ) )
                 	__POINTW2MN _0xB,342
00047f 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 012A                 lcd_gotoxy(1, 2);
                 ; 0000 012B                 lcd_print("    press cancel to back");
                +
000481 eca7     +LDI R26 , LOW ( _0xB + ( 359 ) )
000482 e0b3     +LDI R27 , HIGH ( _0xB + ( 359 ) )
                 	__POINTW2MN _0xB,359
000483 d388      	RCALL _lcd_print
                 ; 0000 012C                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x53:
000484 940e 0b48 	CALL SUBOPT_0x14
000486 f3e9      	BREQ _0x53
                 ; 0000 012D                     ;
                 ; 0000 012E             }
                 ; 0000 012F             else
000487 c003      	RJMP _0x56
                 _0x52:
                 ; 0000 0130             {
                 ; 0000 0131                 lcdCommand(0x0c); // display on, cursor off
                 _0x14B:
000488 e0ac      	LDI  R26,LOW(12)
000489 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0132                 delay_us(100 * 16);
                 ; 0000 0133             }
                 _0x56:
                 ; 0000 0134         }
                 ; 0000 0135     }
                 _0x4C:
                 _0x4B:
                 _0x3F:
                 _0x3A:
                 _0x2F:
                 _0x24:
                 _0x22:
                 _0xF:
                 _0x9:
00048b ceaf      	RJMP _0x5
                 ; 0000 0136 }
                 _0x57:
00048c cfff      	RJMP _0x57
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000260           	.BYTE 0x180
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 013A {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
00048d 920a      	ST   -Y,R0
00048e 921a      	ST   -Y,R1
00048f 92fa      	ST   -Y,R15
000490 936a      	ST   -Y,R22
000491 937a      	ST   -Y,R23
000492 938a      	ST   -Y,R24
000493 939a      	ST   -Y,R25
000494 93aa      	ST   -Y,R26
000495 93ba      	ST   -Y,R27
000496 93ea      	ST   -Y,R30
000497 93fa      	ST   -Y,R31
000498 b7ef      	IN   R30,SREG
000499 93ea      	ST   -Y,R30
                 ; 0000 013B     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 013C     int i;
                 ; 0000 013D 
                 ; 0000 013E     // detect the key
                 ; 0000 013F     while (1)
00049a 9722      	SBIW R28,2
00049b 940e 0d84 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 0140     {
                 ; 0000 0141         KEY_PRT = 0xEF;            // ground row 0
00049d eeef      	LDI  R30,LOW(239)
00049e 940e 0b50 	CALL SUBOPT_0x16
                 ; 0000 0142         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0143         if (colloc != 0x0F)        // column detected
0004a0 f011      	BREQ _0x5B
                 ; 0000 0144         {
                 ; 0000 0145             rowloc = 0; // save row location
0004a1 e000      	LDI  R16,LOW(0)
                 ; 0000 0146             break;      // exit while loop
0004a2 c012      	RJMP _0x5A
                 ; 0000 0147         }
                 ; 0000 0148         KEY_PRT = 0xDF;            // ground row 1
                 _0x5B:
0004a3 edef      	LDI  R30,LOW(223)
0004a4 940e 0b50 	CALL SUBOPT_0x16
                 ; 0000 0149         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 014A         if (colloc != 0x0F)        // column detected
0004a6 f011      	BREQ _0x5C
                 ; 0000 014B         {
                 ; 0000 014C             rowloc = 1; // save row location
0004a7 e001      	LDI  R16,LOW(1)
                 ; 0000 014D             break;      // exit while loop
0004a8 c00c      	RJMP _0x5A
                 ; 0000 014E         }
                 ; 0000 014F         KEY_PRT = 0xBF;            // ground row 2
                 _0x5C:
0004a9 ebef      	LDI  R30,LOW(191)
0004aa 940e 0b50 	CALL SUBOPT_0x16
                 ; 0000 0150         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0151         if (colloc != 0x0F)        // column detected
0004ac f011      	BREQ _0x5D
                 ; 0000 0152         {
                 ; 0000 0153             rowloc = 2; // save row location
0004ad e002      	LDI  R16,LOW(2)
                 ; 0000 0154             break;      // exit while loop
0004ae c006      	RJMP _0x5A
                 ; 0000 0155         }
                 ; 0000 0156         KEY_PRT = 0x7F;            // ground row 3
                 _0x5D:
0004af e7ef      	LDI  R30,LOW(127)
0004b0 bbe5      	OUT  0x15,R30
                 ; 0000 0157         colloc = (KEY_PIN & 0x0F); // read the columns
0004b1 b3e3      	IN   R30,0x13
0004b2 70ef      	ANDI R30,LOW(0xF)
0004b3 2f1e      	MOV  R17,R30
                 ; 0000 0158         rowloc = 3;                // save row location
0004b4 e003      	LDI  R16,LOW(3)
                 ; 0000 0159         break;                     // exit while loop
                 ; 0000 015A     }
                 _0x5A:
                 ; 0000 015B     // check column and send result to Port D
                 ; 0000 015C     if (colloc == 0x0E)
0004b5 301e      	CPI  R17,14
0004b6 f411      	BRNE _0x5E
                 ; 0000 015D         cl = 0;
0004b7 e030      	LDI  R19,LOW(0)
                 ; 0000 015E     else if (colloc == 0x0D)
0004b8 c009      	RJMP _0x5F
                 _0x5E:
0004b9 301d      	CPI  R17,13
0004ba f411      	BRNE _0x60
                 ; 0000 015F         cl = 1;
0004bb e031      	LDI  R19,LOW(1)
                 ; 0000 0160     else if (colloc == 0x0B)
0004bc c005      	RJMP _0x61
                 _0x60:
0004bd 301b      	CPI  R17,11
0004be f411      	BRNE _0x62
                 ; 0000 0161         cl = 2;
0004bf e032      	LDI  R19,LOW(2)
                 ; 0000 0162     else
0004c0 c001      	RJMP _0x63
                 _0x62:
                 ; 0000 0163         cl = 3;
0004c1 e033      	LDI  R19,LOW(3)
                 ; 0000 0164 
                 ; 0000 0165     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x63:
                 _0x61:
                 _0x5F:
0004c2 b3e5      	IN   R30,0x15
0004c3 70ef      	ANDI R30,LOW(0xF)
0004c4 bbe5      	OUT  0x15,R30
                 ; 0000 0166 
                 ; 0000 0167     // inside menu level 1
                 ; 0000 0168     if (stage == STAGE_INIT_MENU)
0004c5 2c04      	MOV  R0,R4
0004c6 2805      	OR   R0,R5
0004c7 f009      	BREQ PC+2
0004c8 c070      	RJMP _0x64
                 ; 0000 0169     {
                 ; 0000 016A         switch (keypad[rowloc][cl] - '0')
0004c9 940e 0b56 	CALL SUBOPT_0x17
0004cb 91ec      	LD   R30,X
0004cc e0f0      	LDI  R31,0
0004cd 97f0      	SBIW R30,48
                 ; 0000 016B         {
                 ; 0000 016C         case OPTION_ATTENDENCE:
0004ce 30e1      	CPI  R30,LOW(0x1)
0004cf e0a0      	LDI  R26,HIGH(0x1)
0004d0 07fa      	CPC  R31,R26
0004d1 f421      	BRNE _0x68
                 ; 0000 016D             stage = STAGE_ATTENDENC_MENU;
0004d2 e0e1      	LDI  R30,LOW(1)
0004d3 e0f0      	LDI  R31,HIGH(1)
0004d4 012f      	MOVW R4,R30
                 ; 0000 016E             break;
0004d5 c047      	RJMP _0x67
                 ; 0000 016F         case OPTION_TEMPERATURE_MONITORING:
                 _0x68:
0004d6 30e4      	CPI  R30,LOW(0x4)
0004d7 e0a0      	LDI  R26,HIGH(0x4)
0004d8 07fa      	CPC  R31,R26
0004d9 f421      	BRNE _0x69
                 ; 0000 0170             stage = STAGE_TEMPERATURE_MONITORING;
0004da e0e4      	LDI  R30,LOW(4)
0004db e0f0      	LDI  R31,HIGH(4)
0004dc 012f      	MOVW R4,R30
                 ; 0000 0171             break;
0004dd c03f      	RJMP _0x67
                 ; 0000 0172         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x69:
0004de 30e3      	CPI  R30,LOW(0x3)
0004df e0a0      	LDI  R26,HIGH(0x3)
0004e0 07fa      	CPC  R31,R26
0004e1 f421      	BRNE _0x6A
                 ; 0000 0173             stage = STAGE_VIEW_PRESENT_STUDENTS;
0004e2 e0e5      	LDI  R30,LOW(5)
0004e3 e0f0      	LDI  R31,HIGH(5)
0004e4 012f      	MOVW R4,R30
                 ; 0000 0174             break;
0004e5 c037      	RJMP _0x67
                 ; 0000 0175         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x6A:
0004e6 30e5      	CPI  R30,LOW(0x5)
0004e7 e0a0      	LDI  R26,HIGH(0x5)
0004e8 07fa      	CPC  R31,R26
0004e9 f421      	BRNE _0x6B
                 ; 0000 0176             stage = STAGE_RETRIEVE_STUDENT_DATA;
0004ea e0e6      	LDI  R30,LOW(6)
0004eb e0f0      	LDI  R31,HIGH(6)
0004ec 012f      	MOVW R4,R30
                 ; 0000 0177             break;
0004ed c02f      	RJMP _0x67
                 ; 0000 0178         case OPTION_STUDENT_MANAGEMENT:
                 _0x6B:
0004ee 30e2      	CPI  R30,LOW(0x2)
0004ef e0a0      	LDI  R26,HIGH(0x2)
0004f0 07fa      	CPC  R31,R26
0004f1 f421      	BRNE _0x6C
                 ; 0000 0179             stage = STAGE_STUDENT_MANAGMENT;
0004f2 e0e7      	LDI  R30,LOW(7)
0004f3 e0f0      	LDI  R31,HIGH(7)
0004f4 012f      	MOVW R4,R30
                 ; 0000 017A             break;
0004f5 c027      	RJMP _0x67
                 ; 0000 017B         case OPTION_TRAFFIC_MONITORING:
                 _0x6C:
0004f6 30e6      	CPI  R30,LOW(0x6)
0004f7 e0a0      	LDI  R26,HIGH(0x6)
0004f8 07fa      	CPC  R31,R26
0004f9 f421      	BRNE _0x6D
                 ; 0000 017C             stage = STAGE_TRAFFIC_MONITORING;
0004fa e0ea      	LDI  R30,LOW(10)
0004fb e0f0      	LDI  R31,HIGH(10)
0004fc 012f      	MOVW R4,R30
                 ; 0000 017D             break;
0004fd c01f      	RJMP _0x67
                 ; 0000 017E         case OPTION_LOGIN_WITH_ADMIN:
                 _0x6D:
0004fe 30e7      	CPI  R30,LOW(0x7)
0004ff e0a0      	LDI  R26,HIGH(0x7)
000500 07fa      	CPC  R31,R26
000501 f421      	BRNE _0x6E
                 ; 0000 017F             stage = STAGE_LOGIN_WITH_ADMIN;
000502 e0eb      	LDI  R30,LOW(11)
000503 e0f0      	LDI  R31,HIGH(11)
000504 012f      	MOVW R4,R30
                 ; 0000 0180             break;
000505 c017      	RJMP _0x67
                 ; 0000 0181         case OPTION_LOGOUT:
                 _0x6E:
000506 30e8      	CPI  R30,LOW(0x8)
000507 e0a0      	LDI  R26,HIGH(0x8)
000508 07fa      	CPC  R31,R26
000509 f499      	BRNE _0x72
                 ; 0000 0182 #asm("cli") // disable interrupts
00050a 94f8      	cli
                 ; 0000 0183             if (logged_in == 1)
00050b e0e1      	LDI  R30,LOW(1)
00050c 15e9      	CP   R30,R9
00050d f479      	BRNE _0x70
                 ; 0000 0184             {
                 ; 0000 0185                 lcdCommand(0x1);
00050e 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0186                 lcd_gotoxy(1, 1);
                 ; 0000 0187                 lcd_print("Logout ...");
                +
000510 eea0     +LDI R26 , LOW ( _0x71 + ( 0 ) )
000511 e0b3     +LDI R27 , HIGH ( _0x71 + ( 0 ) )
                 	__POINTW2MN _0x71,0
000512 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0188                 lcd_gotoxy(1, 2);
                 ; 0000 0189                 lcd_print("Going To Admin Page In 2 Sec");
                +
000514 eeab     +LDI R26 , LOW ( _0x71 + ( 11 ) )
000515 e0b3     +LDI R27 , HIGH ( _0x71 + ( 11 ) )
                 	__POINTW2MN _0x71,11
000516 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 018A                 delay_ms(2000);
                 ; 0000 018B                 logged_in = 0;
000518 2499      	CLR  R9
                 ; 0000 018C #asm("sei")
000519 9478      	sei
                 ; 0000 018D                 stage = STAGE_LOGIN_WITH_ADMIN;
00051a e0eb      	LDI  R30,LOW(11)
00051b e0f0      	LDI  R31,HIGH(11)
00051c 012f      	MOVW R4,R30
                 ; 0000 018E             }
                 ; 0000 018F             break;
                 _0x70:
                 ; 0000 0190         default:
                 _0x72:
                 ; 0000 0191             break;
                 ; 0000 0192         }
                 _0x67:
                 ; 0000 0193 
                 ; 0000 0194         if (keypad[rowloc][cl] == 'L')
00051d 940e 0b56 	CALL SUBOPT_0x17
00051f 91ac      	LD   R26,X
000520 34ac      	CPI  R26,LOW(0x4C)
000521 f449      	BRNE _0x73
                 ; 0000 0195         {
                 ; 0000 0196             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
000522 e0e0      	LDI  R30,LOW(0)
000523 15e7      	CP   R30,R7
000524 f420      	BRSH _0x74
000525 2de7      	MOV  R30,R7
000526 e0f0      	LDI  R31,0
000527 9731      	SBIW R30,1
000528 c001      	RJMP _0x75
                 _0x74:
000529 e0e3      	LDI  R30,LOW(3)
                 _0x75:
00052a 2e7e      	MOV  R7,R30
                 ; 0000 0197         }
                 ; 0000 0198         if (keypad[rowloc][cl] == 'R')
                 _0x73:
00052b 940e 0b56 	CALL SUBOPT_0x17
00052d 91ac      	LD   R26,X
00052e 35a2      	CPI  R26,LOW(0x52)
00052f f441      	BRNE _0x77
                 ; 0000 0199         {
                 ; 0000 019A             page_num = (page_num + 1) % MENU_PAGE_COUNT;
000530 2de7      	MOV  R30,R7
000531 e0f0      	LDI  R31,0
000532 9631      	ADIW R30,1
000533 e0a3      	LDI  R26,LOW(3)
000534 e0b0      	LDI  R27,HIGH(3)
000535 940e 0d6b 	CALL __MANDW12
000537 2e7e      	MOV  R7,R30
                 ; 0000 019B         }
                 ; 0000 019C     }
                 _0x77:
                 ; 0000 019D     else if (stage == STAGE_ATTENDENC_MENU)
000538 c279      	RJMP _0x78
                 _0x64:
000539 940e 0ad0 	CALL SUBOPT_0x0
00053b f4f9      	BRNE _0x79
                 ; 0000 019E     {
                 ; 0000 019F         switch (keypad[rowloc][cl])
00053c 940e 0b56 	CALL SUBOPT_0x17
00053e 91ec      	LD   R30,X
00053f e0f0      	LDI  R31,0
                 ; 0000 01A0         {
                 ; 0000 01A1         case 'C':
000540 34e3      	CPI  R30,LOW(0x43)
000541 e0a0      	LDI  R26,HIGH(0x43)
000542 07fa      	CPC  R31,R26
000543 f419      	BRNE _0x7D
                 ; 0000 01A2             stage = STAGE_INIT_MENU;
000544 2444      	CLR  R4
000545 2455      	CLR  R5
                 ; 0000 01A3             break;
000546 c013      	RJMP _0x7C
                 ; 0000 01A4         case '1':
                 _0x7D:
000547 33e1      	CPI  R30,LOW(0x31)
000548 e0a0      	LDI  R26,HIGH(0x31)
000549 07fa      	CPC  R31,R26
00054a f431      	BRNE _0x7E
                 ; 0000 01A5             memset(buffer, 0, 32);
00054b 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 01A6             stage = STAGE_SUBMIT_CODE;
00054d e0e2      	LDI  R30,LOW(2)
00054e e0f0      	LDI  R31,HIGH(2)
00054f 012f      	MOVW R4,R30
                 ; 0000 01A7             break;
000550 c009      	RJMP _0x7C
                 ; 0000 01A8         case '2':
                 _0x7E:
000551 33e2      	CPI  R30,LOW(0x32)
000552 e0a0      	LDI  R26,HIGH(0x32)
000553 07fa      	CPC  R31,R26
000554 f429      	BRNE _0x80
                 ; 0000 01A9             memset(buffer, 0, 32);
000555 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 01AA             stage = STAGE_SUBMIT_WITH_CARD;
000557 e0e3      	LDI  R30,LOW(3)
000558 e0f0      	LDI  R31,HIGH(3)
000559 012f      	MOVW R4,R30
                 ; 0000 01AB             break;
                 ; 0000 01AC         default:
                 _0x80:
                 ; 0000 01AD             break;
                 ; 0000 01AE         }
                 _0x7C:
                 ; 0000 01AF     }
                 ; 0000 01B0     else if (stage == STAGE_SUBMIT_CODE)
00055a c257      	RJMP _0x81
                 _0x79:
00055b 940e 0ae4 	CALL SUBOPT_0x3
00055d f009      	BREQ PC+2
00055e c0a4      	RJMP _0x82
                 ; 0000 01B1     {
                 ; 0000 01B2 
                 ; 0000 01B3         if (keypad[rowloc][cl] == 'C')
00055f 940e 0b56 	CALL SUBOPT_0x17
000561 91ac      	LD   R26,X
000562 34a3      	CPI  R26,LOW(0x43)
000563 f429      	BRNE _0x83
                 ; 0000 01B4         {
                 ; 0000 01B5             memset(buffer, 0, 32);
000564 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 01B6             stage = STAGE_ATTENDENC_MENU;
000566 e0e1      	LDI  R30,LOW(1)
000567 e0f0      	LDI  R31,HIGH(1)
000568 012f      	MOVW R4,R30
                 ; 0000 01B7         }
                 ; 0000 01B8         if ((keypad[rowloc][cl] - '0') < 10)
                 _0x83:
000569 940e 0b56 	CALL SUBOPT_0x17
00056b 91ec      	LD   R30,X
00056c e0f0      	LDI  R31,0
00056d 97fa      	SBIW R30,58
00056e f47c      	BRGE _0x84
                 ; 0000 01B9         {
                 ; 0000 01BA             if (strlen(buffer) <= 30)
00056f 940e 0afb 	CALL SUBOPT_0x7
000571 977f      	SBIW R30,31
000572 f450      	BRSH _0x85
                 ; 0000 01BB             {
                 ; 0000 01BC                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000573 940e 0afb 	CALL SUBOPT_0x7
000575 940e 0b62 	CALL SUBOPT_0x18
000577 940e 0b66 	CALL SUBOPT_0x19
                 ; 0000 01BD                 buffer[strlen(buffer) + 1] = '\0';
000579 940e 0b6a 	CALL SUBOPT_0x1A
                 ; 0000 01BE                 lcdData(keypad[rowloc][cl]);
00057b 91ac      	LD   R26,X
00057c d252      	RCALL _lcdData
                 ; 0000 01BF             }
                 ; 0000 01C0         }
                 _0x85:
                 ; 0000 01C1         else if (keypad[rowloc][cl] == 'D')
00057d c084      	RJMP _0x86
                 _0x84:
00057e 940e 0b56 	CALL SUBOPT_0x17
000580 91ac      	LD   R26,X
000581 34a4      	CPI  R26,LOW(0x44)
000582 f461      	BRNE _0x87
                 ; 0000 01C2         {
                 ; 0000 01C3             buffer_len = strlen(buffer);
000583 940e 0afb 	CALL SUBOPT_0x7
000585 2f5e      	MOV  R21,R30
                 ; 0000 01C4             if (buffer_len > 0)
000586 3051      	CPI  R21,1
000587 f030      	BRLO _0x88
                 ; 0000 01C5             {
                 ; 0000 01C6                 buffer[buffer_len - 1] = '\0';
000588 940e 0b6f 	CALL SUBOPT_0x1B
                 ; 0000 01C7                 lcdCommand(0x10);
                 ; 0000 01C8                 lcd_print(" ");
                +
00058a e0a8     +LDI R26 , LOW ( _0x71 + ( 40 ) )
00058b e0b4     +LDI R27 , HIGH ( _0x71 + ( 40 ) )
                 	__POINTW2MN _0x71,40
00058c 940e 0b79 	CALL SUBOPT_0x1C
                 ; 0000 01C9                 lcdCommand(0x10);
                 ; 0000 01CA             }
                 ; 0000 01CB         }
                 _0x88:
                 ; 0000 01CC         else if (keypad[rowloc][cl] == 'E')
00058e c073      	RJMP _0x89
                 _0x87:
00058f 940e 0b56 	CALL SUBOPT_0x17
000591 91ac      	LD   R26,X
000592 34a5      	CPI  R26,LOW(0x45)
000593 f009      	BREQ PC+2
000594 c065      	RJMP _0x8A
                 ; 0000 01CD         {
                 ; 0000 01CE 
                 ; 0000 01CF #asm("cli")
000595 94f8      	cli
                 ; 0000 01D0 
                 ; 0000 01D1             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 01D2                 strlen(buffer) != 8)
000596 e6ef      	LDI  R30,LOW(_buffer)
000597 e0f7      	LDI  R31,HIGH(_buffer)
000598 93fa      	ST   -Y,R31
000599 93ea      	ST   -Y,R30
                +
00059a e0ea     +LDI R30 , LOW ( _0x71 + ( 42 ) )
00059b e0f4     +LDI R31 , HIGH ( _0x71 + ( 42 ) )
                 	__POINTW1MN _0x71,42
00059c 93fa      	ST   -Y,R31
00059d 93ea      	ST   -Y,R30
00059e e0a2      	LDI  R26,LOW(2)
00059f 940e 0ab7 	CALL _strncmp
0005a1 30e0      	CPI  R30,0
0005a2 f431      	BRNE _0x8C
0005a3 940e 0afb 	CALL SUBOPT_0x7
0005a5 30e8      	CPI  R30,LOW(0x8)
0005a6 e0a0      	LDI  R26,HIGH(0x8)
0005a7 07fa      	CPC  R31,R26
0005a8 f069      	BREQ _0x8B
                 _0x8C:
                 ; 0000 01D3             {
                 ; 0000 01D4 
                 ; 0000 01D5                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0005a9 9a97      	SBI  0x12,7
                 ; 0000 01D6                 lcdCommand(0x01);
0005aa 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 01D7                 lcd_gotoxy(1, 1);
                 ; 0000 01D8                 lcd_print("Incorrect Student Code Format");
                +
0005ac e0ad     +LDI R26 , LOW ( _0x71 + ( 45 ) )
0005ad e0b4     +LDI R27 , HIGH ( _0x71 + ( 45 ) )
                 	__POINTW2MN _0x71,45
0005ae 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 01D9                 lcd_gotoxy(1, 2);
                 ; 0000 01DA                 lcd_print("You Will Back Menu In 2 Second");
                +
0005b0 e2ab     +LDI R26 , LOW ( _0x71 + ( 75 ) )
0005b1 e0b4     +LDI R27 , HIGH ( _0x71 + ( 75 ) )
                 	__POINTW2MN _0x71,75
0005b2 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 01DB                 delay_ms(2000);
                 ; 0000 01DC                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
0005b4 9897      	CBI  0x12,7
                 ; 0000 01DD             }
                 ; 0000 01DE             else if (search_student_code() > 0)
0005b5 c040      	RJMP _0x8E
                 _0x8B:
0005b6 d340      	RCALL _search_student_code
0005b7 30e1      	CPI  R30,LOW(0x1)
0005b8 f068      	BRLO _0x8F
                 ; 0000 01DF             {
                 ; 0000 01E0                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0005b9 9a97      	SBI  0x12,7
                 ; 0000 01E1                 lcdCommand(0x01);
0005ba 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 01E2                 lcd_gotoxy(1, 1);
                 ; 0000 01E3                 lcd_print("Duplicate Student Code Entered");
                +
0005bc e4aa     +LDI R26 , LOW ( _0x71 + ( 106 ) )
0005bd e0b4     +LDI R27 , HIGH ( _0x71 + ( 106 ) )
                 	__POINTW2MN _0x71,106
0005be 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 01E4                 lcd_gotoxy(1, 2);
                 ; 0000 01E5                 lcd_print("You Will Back Menu In 2 Second");
                +
0005c0 e6a9     +LDI R26 , LOW ( _0x71 + ( 137 ) )
0005c1 e0b4     +LDI R27 , HIGH ( _0x71 + ( 137 ) )
                 	__POINTW2MN _0x71,137
0005c2 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 01E6                 delay_ms(2000);
                 ; 0000 01E7                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
0005c4 9897      	CBI  0x12,7
                 ; 0000 01E8             }
                 ; 0000 01E9             else
0005c5 c030      	RJMP _0x90
                 _0x8F:
                 ; 0000 01EA             {
                 ; 0000 01EB                 // save the buffer to EEPROM
                 ; 0000 01EC                 st_counts = read_byte_from_eeprom(0x0);
0005c6 940e 0b20 	CALL SUBOPT_0xD
0005c8 2f2e      	MOV  R18,R30
                 ; 0000 01ED                 for (i = 0; i < 8; i++)
0005c9 e0e0      	LDI  R30,LOW(0)
0005ca 83ee      	STD  Y+6,R30
0005cb 83ef      	STD  Y+6+1,R30
                 _0x92:
0005cc 81ae      	LDD  R26,Y+6
0005cd 81bf      	LDD  R27,Y+6+1
0005ce 9718      	SBIW R26,8
0005cf f4ac      	BRGE _0x93
                 ; 0000 01EE                 {
                 ; 0000 01EF                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
0005d0 2fe2      	MOV  R30,R18
0005d1 940e 0b7e 	CALL SUBOPT_0x1D
0005d3 81ae      	LDD  R26,Y+6
0005d4 81bf      	LDD  R27,Y+6+1
0005d5 0fea      	ADD  R30,R26
0005d6 1ffb      	ADC  R31,R27
0005d7 93fa      	ST   -Y,R31
0005d8 93ea      	ST   -Y,R30
0005d9 85e8      	LDD  R30,Y+8
0005da 85f9      	LDD  R31,Y+8+1
0005db 59e1      	SUBI R30,LOW(-_buffer)
0005dc 4ff8      	SBCI R31,HIGH(-_buffer)
0005dd 81a0      	LD   R26,Z
0005de d2f0      	RCALL _write_byte_to_eeprom
                 ; 0000 01F0                 }
0005df 81ee      	LDD  R30,Y+6
0005e0 81ff      	LDD  R31,Y+6+1
0005e1 9631      	ADIW R30,1
0005e2 83ee      	STD  Y+6,R30
0005e3 83ff      	STD  Y+6+1,R31
0005e4 cfe7      	RJMP _0x92
                 _0x93:
                 ; 0000 01F1                 write_byte_to_eeprom(0x0, st_counts + 1);
0005e5 e0e0      	LDI  R30,LOW(0)
0005e6 e0f0      	LDI  R31,HIGH(0)
0005e7 93fa      	ST   -Y,R31
0005e8 93ea      	ST   -Y,R30
0005e9 2fa2      	MOV  R26,R18
0005ea 5faf      	SUBI R26,-LOW(1)
0005eb d2e3      	RCALL _write_byte_to_eeprom
                 ; 0000 01F2 
                 ; 0000 01F3                 lcdCommand(0x01);
0005ec 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 01F4                 lcd_gotoxy(1, 1);
                 ; 0000 01F5                 lcd_print("Student Code Successfully Added");
                +
0005ee e8a8     +LDI R26 , LOW ( _0x71 + ( 168 ) )
0005ef e0b4     +LDI R27 , HIGH ( _0x71 + ( 168 ) )
                 	__POINTW2MN _0x71,168
0005f0 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 01F6                 lcd_gotoxy(1, 2);
                 ; 0000 01F7                 lcd_print("You Will Back Menu In 2 Second");
                +
0005f2 eaa8     +LDI R26 , LOW ( _0x71 + ( 200 ) )
0005f3 e0b4     +LDI R27 , HIGH ( _0x71 + ( 200 ) )
                 	__POINTW2MN _0x71,200
0005f4 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 01F8                 delay_ms(2000);
                 ; 0000 01F9             }
                 _0x90:
                 _0x8E:
                 ; 0000 01FA             memset(buffer, 0, 32);
0005f6 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 01FB #asm("sei")
0005f8 9478      	sei
                 ; 0000 01FC             stage = STAGE_ATTENDENC_MENU;
0005f9 c005      	RJMP _0x14C
                 ; 0000 01FD         }
                 ; 0000 01FE         else if (keypad[rowloc][cl] == 'C')
                 _0x8A:
0005fa 940e 0b56 	CALL SUBOPT_0x17
0005fc 91ac      	LD   R26,X
0005fd 34a3      	CPI  R26,LOW(0x43)
0005fe f419      	BRNE _0x95
                 ; 0000 01FF             stage = STAGE_ATTENDENC_MENU;
                 _0x14C:
0005ff e0e1      	LDI  R30,LOW(1)
000600 e0f0      	LDI  R31,HIGH(1)
000601 012f      	MOVW R4,R30
                 ; 0000 0200     }
                 _0x95:
                 _0x89:
                 _0x86:
                 ; 0000 0201     else if (stage == STAGE_SUBMIT_WITH_CARD)
000602 c1af      	RJMP _0x96
                 _0x82:
000603 940e 0af1 	CALL SUBOPT_0x5
000605 f459      	BRNE _0x97
                 ; 0000 0202     {
                 ; 0000 0203         if (keypad[rowloc][cl] == 'C')
000606 940e 0b56 	CALL SUBOPT_0x17
000608 91ac      	LD   R26,X
000609 34a3      	CPI  R26,LOW(0x43)
00060a f429      	BRNE _0x98
                 ; 0000 0204         {
                 ; 0000 0205             memset(buffer, 0, 32);
00060b 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 0206             stage = STAGE_ATTENDENC_MENU;
00060d e0e1      	LDI  R30,LOW(1)
00060e e0f0      	LDI  R31,HIGH(1)
00060f 012f      	MOVW R4,R30
                 ; 0000 0207         }
                 ; 0000 0208     }
                 _0x98:
                 ; 0000 0209     else if (stage == STAGE_TEMPERATURE_MONITORING)
000610 c1a1      	RJMP _0x99
                 _0x97:
000611 940e 0b0d 	CALL SUBOPT_0xA
000613 f441      	BRNE _0x9A
                 ; 0000 020A     {
                 ; 0000 020B 
                 ; 0000 020C         if (keypad[rowloc][cl] == 'C')
000614 940e 0b56 	CALL SUBOPT_0x17
000616 91ac      	LD   R26,X
000617 34a3      	CPI  R26,LOW(0x43)
000618 f411      	BRNE _0x9B
                 ; 0000 020D             stage = STAGE_INIT_MENU;
000619 2444      	CLR  R4
00061a 2455      	CLR  R5
                 ; 0000 020E     }
                 _0x9B:
                 ; 0000 020F     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00061b c196      	RJMP _0x9C
                 _0x9A:
00061c 940e 0b12 	CALL SUBOPT_0xB
00061e f441      	BRNE _0x9D
                 ; 0000 0210     {
                 ; 0000 0211         if (keypad[rowloc][cl] == 'C')
00061f 940e 0b56 	CALL SUBOPT_0x17
000621 91ac      	LD   R26,X
000622 34a3      	CPI  R26,LOW(0x43)
000623 f411      	BRNE _0x9E
                 ; 0000 0212             stage = STAGE_INIT_MENU;
000624 2444      	CLR  R4
000625 2455      	CLR  R5
                 ; 0000 0213     }
                 _0x9E:
                 ; 0000 0214     else if (stage == STAGE_STUDENT_MANAGMENT)
000626 c18b      	RJMP _0x9F
                 _0x9D:
000627 940e 0b34 	CALL SUBOPT_0x10
000629 f591      	BRNE _0xA0
                 ; 0000 0215     {
                 ; 0000 0216         if (keypad[rowloc][cl] == 'C')
00062a 940e 0b56 	CALL SUBOPT_0x17
00062c 91ac      	LD   R26,X
00062d 34a3      	CPI  R26,LOW(0x43)
00062e f419      	BRNE _0xA1
                 ; 0000 0217             stage = STAGE_INIT_MENU;
00062f 2444      	CLR  R4
000630 2455      	CLR  R5
                 ; 0000 0218         else if (keypad[rowloc][cl] == '1')
000631 c029      	RJMP _0xA2
                 _0xA1:
000632 940e 0b56 	CALL SUBOPT_0x17
000634 91ac      	LD   R26,X
000635 33a1      	CPI  R26,LOW(0x31)
000636 f419      	BRNE _0xA3
                 ; 0000 0219             stage = STAGE_SEARCH_STUDENT;
000637 e0e8      	LDI  R30,LOW(8)
000638 e0f0      	LDI  R31,HIGH(8)
000639 c020      	RJMP _0x14D
                 ; 0000 021A         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xA3:
00063a 940e 0b56 	CALL SUBOPT_0x17
00063c 91ac      	LD   R26,X
00063d 33a2      	CPI  R26,LOW(0x32)
00063e f419      	BRNE _0xA6
00063f e0e1      	LDI  R30,LOW(1)
000640 15e9      	CP   R30,R9
000641 f009      	BREQ _0xA7
                 _0xA6:
000642 c003      	RJMP _0xA5
                 _0xA7:
                 ; 0000 021B             stage = STAGE_DELETE_STUDENT;
000643 e0e9      	LDI  R30,LOW(9)
000644 e0f0      	LDI  R31,HIGH(9)
000645 c014      	RJMP _0x14D
                 ; 0000 021C         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xA5:
000646 940e 0b56 	CALL SUBOPT_0x17
000648 91ac      	LD   R26,X
000649 33a2      	CPI  R26,LOW(0x32)
00064a f411      	BRNE _0xAA
00064b 2099      	TST  R9
00064c f009      	BREQ _0xAB
                 _0xAA:
00064d c00d      	RJMP _0xA9
                 _0xAB:
                 ; 0000 021D         {
                 ; 0000 021E             lcdCommand(0x01);
00064e 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 021F             lcd_gotoxy(1, 1);
                 ; 0000 0220             lcd_print("You Must First Login");
                +
000650 eca7     +LDI R26 , LOW ( _0x71 + ( 231 ) )
000651 e0b4     +LDI R27 , HIGH ( _0x71 + ( 231 ) )
                 	__POINTW2MN _0x71,231
000652 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0221             lcd_gotoxy(1, 2);
                 ; 0000 0222             lcd_print("You Will Go Admin Page 2 Sec");
                +
000654 edac     +LDI R26 , LOW ( _0x71 + ( 252 ) )
000655 e0b4     +LDI R27 , HIGH ( _0x71 + ( 252 ) )
                 	__POINTW2MN _0x71,252
000656 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 0223             delay_ms(2000);
                 ; 0000 0224             stage = STAGE_LOGIN_WITH_ADMIN;
000658 e0eb      	LDI  R30,LOW(11)
000659 e0f0      	LDI  R31,HIGH(11)
                 _0x14D:
00065a 012f      	MOVW R4,R30
                 ; 0000 0225         }
                 ; 0000 0226     }
                 _0xA9:
                 _0xA2:
                 ; 0000 0227     else if (stage == STAGE_SEARCH_STUDENT)
00065b c156      	RJMP _0xAC
                 _0xA0:
00065c 940e 0b39 	CALL SUBOPT_0x11
00065e f009      	BREQ PC+2
00065f c05c      	RJMP _0xAD
                 ; 0000 0228     {
                 ; 0000 0229         if (keypad[rowloc][cl] == 'C')
000660 940e 0b56 	CALL SUBOPT_0x17
000662 91ac      	LD   R26,X
000663 34a3      	CPI  R26,LOW(0x43)
000664 f419      	BRNE _0xAE
                 ; 0000 022A         {
                 ; 0000 022B             memset(buffer, 0, 32);
000665 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 022C             stage = STAGE_STUDENT_MANAGMENT;
000667 c050      	RJMP _0x14E
                 ; 0000 022D         }
                 ; 0000 022E         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xAE:
000668 940e 0b56 	CALL SUBOPT_0x17
00066a 91ec      	LD   R30,X
00066b e0f0      	LDI  R31,0
00066c 97fa      	SBIW R30,58
00066d f47c      	BRGE _0xB0
                 ; 0000 022F         {
                 ; 0000 0230             if (strlen(buffer) <= 30)
00066e 940e 0afb 	CALL SUBOPT_0x7
000670 977f      	SBIW R30,31
000671 f450      	BRSH _0xB1
                 ; 0000 0231             {
                 ; 0000 0232                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000672 940e 0afb 	CALL SUBOPT_0x7
000674 940e 0b62 	CALL SUBOPT_0x18
000676 940e 0b66 	CALL SUBOPT_0x19
                 ; 0000 0233                 buffer[strlen(buffer) + 1] = '\0';
000678 940e 0b6a 	CALL SUBOPT_0x1A
                 ; 0000 0234                 lcdData(keypad[rowloc][cl]);
00067a 91ac      	LD   R26,X
00067b d153      	RCALL _lcdData
                 ; 0000 0235             }
                 ; 0000 0236         }
                 _0xB1:
                 ; 0000 0237         else if (keypad[rowloc][cl] == 'D')
00067c c03e      	RJMP _0xB2
                 _0xB0:
00067d 940e 0b56 	CALL SUBOPT_0x17
00067f 91ac      	LD   R26,X
000680 34a4      	CPI  R26,LOW(0x44)
000681 f461      	BRNE _0xB3
                 ; 0000 0238         {
                 ; 0000 0239             buffer_len = strlen(buffer);
000682 940e 0afb 	CALL SUBOPT_0x7
000684 2f5e      	MOV  R21,R30
                 ; 0000 023A             if (buffer_len > 0)
000685 3051      	CPI  R21,1
000686 f030      	BRLO _0xB4
                 ; 0000 023B             {
                 ; 0000 023C                 buffer[buffer_len - 1] = '\0';
000687 940e 0b6f 	CALL SUBOPT_0x1B
                 ; 0000 023D                 lcdCommand(0x10);
                 ; 0000 023E                 lcd_print(" ");
                +
000689 efa9     +LDI R26 , LOW ( _0x71 + ( 281 ) )
00068a e0b4     +LDI R27 , HIGH ( _0x71 + ( 281 ) )
                 	__POINTW2MN _0x71,281
00068b 940e 0b79 	CALL SUBOPT_0x1C
                 ; 0000 023F                 lcdCommand(0x10);
                 ; 0000 0240             }
                 ; 0000 0241         }
                 _0xB4:
                 ; 0000 0242         else if (keypad[rowloc][cl] == 'E')
00068d c02d      	RJMP _0xB5
                 _0xB3:
00068e 940e 0b56 	CALL SUBOPT_0x17
000690 91ac      	LD   R26,X
000691 34a5      	CPI  R26,LOW(0x45)
000692 f501      	BRNE _0xB6
                 ; 0000 0243         {
                 ; 0000 0244             // search from eeprom data
                 ; 0000 0245             unsigned char result = search_student_code();
                 ; 0000 0246 
                 ; 0000 0247             if (result > 0)
000693 940e 0b83 	CALL SUBOPT_0x1E
                 ;	i -> Y+7
                 ;	result -> Y+0
000695 f048      	BRLO _0xB7
                 ; 0000 0248             {
                 ; 0000 0249                 lcdCommand(0x01);
000696 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 024A                 lcd_gotoxy(1, 1);
                 ; 0000 024B                 lcd_print("Student Code Found");
                +
000698 efab     +LDI R26 , LOW ( _0x71 + ( 283 ) )
000699 e0b4     +LDI R27 , HIGH ( _0x71 + ( 283 ) )
                 	__POINTW2MN _0x71,283
00069a 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 024C                 lcd_gotoxy(1, 2);
                 ; 0000 024D                 lcd_print("You Will Back Menu In 2 Second");
                +
00069c e0ae     +LDI R26 , LOW ( _0x71 + ( 302 ) )
00069d e0b5     +LDI R27 , HIGH ( _0x71 + ( 302 ) )
                 	__POINTW2MN _0x71,302
00069e c008      	RJMP _0x14F
                 ; 0000 024E                 delay_ms(2000);
                 ; 0000 024F             }
                 ; 0000 0250             else
                 _0xB7:
                 ; 0000 0251             {
                 ; 0000 0252                 lcdCommand(0x01);
00069f 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0253                 lcd_gotoxy(1, 1);
                 ; 0000 0254                 lcd_print("Ops , Student Code Not Found");
                +
0006a1 e2ad     +LDI R26 , LOW ( _0x71 + ( 333 ) )
0006a2 e0b5     +LDI R27 , HIGH ( _0x71 + ( 333 ) )
                 	__POINTW2MN _0x71,333
0006a3 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0255                 lcd_gotoxy(1, 2);
                 ; 0000 0256                 lcd_print("You Will Back Menu In 2 Second");
                +
0006a5 e4aa     +LDI R26 , LOW ( _0x71 + ( 362 ) )
0006a6 e0b5     +LDI R27 , HIGH ( _0x71 + ( 362 ) )
                 	__POINTW2MN _0x71,362
                 _0x14F:
0006a7 d164      	RCALL _lcd_print
                 ; 0000 0257                 delay_ms(2000);
0006a8 eda0      	LDI  R26,LOW(2000)
0006a9 e0b7      	LDI  R27,HIGH(2000)
0006aa 940e 0bc8 	CALL _delay_ms
                 ; 0000 0258             }
                 ; 0000 0259             memset(buffer, 0, 32);
0006ac 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 025A             stage = STAGE_STUDENT_MANAGMENT;
0006ae e0e7      	LDI  R30,LOW(7)
0006af e0f0      	LDI  R31,HIGH(7)
0006b0 012f      	MOVW R4,R30
                 ; 0000 025B         }
0006b1 9621      	ADIW R28,1
                 ; 0000 025C         else if (keypad[rowloc][cl] == 'C')
0006b2 c008      	RJMP _0xB9
                 _0xB6:
0006b3 940e 0b56 	CALL SUBOPT_0x17
0006b5 91ac      	LD   R26,X
0006b6 34a3      	CPI  R26,LOW(0x43)
0006b7 f419      	BRNE _0xBA
                 ; 0000 025D             stage = STAGE_STUDENT_MANAGMENT;
                 _0x14E:
0006b8 e0e7      	LDI  R30,LOW(7)
0006b9 e0f0      	LDI  R31,HIGH(7)
0006ba 012f      	MOVW R4,R30
                 ; 0000 025E     }
                 _0xBA:
                 _0xB9:
                 _0xB5:
                 _0xB2:
                 ; 0000 025F     else if (stage == STAGE_DELETE_STUDENT)
0006bb c0f6      	RJMP _0xBB
                 _0xAD:
0006bc 940e 0b3e 	CALL SUBOPT_0x12
0006be f009      	BREQ PC+2
0006bf c061      	RJMP _0xBC
                 ; 0000 0260     {
                 ; 0000 0261         if (keypad[rowloc][cl] == 'C')
0006c0 940e 0b56 	CALL SUBOPT_0x17
0006c2 91ac      	LD   R26,X
0006c3 34a3      	CPI  R26,LOW(0x43)
0006c4 f431      	BRNE _0xBD
                 ; 0000 0262         {
                 ; 0000 0263             memset(buffer, 0, 32);
0006c5 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 0264             stage = STAGE_STUDENT_MANAGMENT;
0006c7 e0e7      	LDI  R30,LOW(7)
0006c8 e0f0      	LDI  R31,HIGH(7)
0006c9 012f      	MOVW R4,R30
                 ; 0000 0265         }
                 ; 0000 0266         else if ((keypad[rowloc][cl] - '0') < 10)
0006ca c055      	RJMP _0xBE
                 _0xBD:
0006cb 940e 0b56 	CALL SUBOPT_0x17
0006cd 91ec      	LD   R30,X
0006ce e0f0      	LDI  R31,0
0006cf 97fa      	SBIW R30,58
0006d0 f47c      	BRGE _0xBF
                 ; 0000 0267         {
                 ; 0000 0268             if (strlen(buffer) <= 30)
0006d1 940e 0afb 	CALL SUBOPT_0x7
0006d3 977f      	SBIW R30,31
0006d4 f450      	BRSH _0xC0
                 ; 0000 0269             {
                 ; 0000 026A                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0006d5 940e 0afb 	CALL SUBOPT_0x7
0006d7 940e 0b62 	CALL SUBOPT_0x18
0006d9 940e 0b66 	CALL SUBOPT_0x19
                 ; 0000 026B                 buffer[strlen(buffer) + 1] = '\0';
0006db 940e 0b6a 	CALL SUBOPT_0x1A
                 ; 0000 026C                 lcdData(keypad[rowloc][cl]);
0006dd 91ac      	LD   R26,X
0006de d0f0      	RCALL _lcdData
                 ; 0000 026D             }
                 ; 0000 026E         }
                 _0xC0:
                 ; 0000 026F         else if (keypad[rowloc][cl] == 'D')
0006df c040      	RJMP _0xC1
                 _0xBF:
0006e0 940e 0b56 	CALL SUBOPT_0x17
0006e2 91ac      	LD   R26,X
0006e3 34a4      	CPI  R26,LOW(0x44)
0006e4 f461      	BRNE _0xC2
                 ; 0000 0270         {
                 ; 0000 0271             buffer_len = strlen(buffer);
0006e5 940e 0afb 	CALL SUBOPT_0x7
0006e7 2f5e      	MOV  R21,R30
                 ; 0000 0272             if (buffer_len > 0)
0006e8 3051      	CPI  R21,1
0006e9 f030      	BRLO _0xC3
                 ; 0000 0273             {
                 ; 0000 0274                 buffer[buffer_len - 1] = '\0';
0006ea 940e 0b6f 	CALL SUBOPT_0x1B
                 ; 0000 0275                 lcdCommand(0x10);
                 ; 0000 0276                 lcd_print(" ");
                +
0006ec e6a9     +LDI R26 , LOW ( _0x71 + ( 393 ) )
0006ed e0b5     +LDI R27 , HIGH ( _0x71 + ( 393 ) )
                 	__POINTW2MN _0x71,393
0006ee 940e 0b79 	CALL SUBOPT_0x1C
                 ; 0000 0277                 lcdCommand(0x10);
                 ; 0000 0278             }
                 ; 0000 0279         }
                 _0xC3:
                 ; 0000 027A         else if (keypad[rowloc][cl] == 'E')
0006f0 c02f      	RJMP _0xC4
                 _0xC2:
0006f1 940e 0b56 	CALL SUBOPT_0x17
0006f3 91ac      	LD   R26,X
0006f4 34a5      	CPI  R26,LOW(0x45)
0006f5 f551      	BRNE _0xC5
                 ; 0000 027B         {
                 ; 0000 027C             // search from eeprom data
                 ; 0000 027D             unsigned char result = search_student_code();
                 ; 0000 027E 
                 ; 0000 027F             if (result > 0)
0006f6 940e 0b83 	CALL SUBOPT_0x1E
                 ;	i -> Y+7
                 ;	result -> Y+0
0006f8 f0a0      	BRLO _0xC6
                 ; 0000 0280             {
                 ; 0000 0281                 lcdCommand(0x01);
0006f9 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0282                 lcd_gotoxy(1, 1);
                 ; 0000 0283                 lcd_print("Student Code Found");
                +
0006fb e6ab     +LDI R26 , LOW ( _0x71 + ( 395 ) )
0006fc e0b5     +LDI R27 , HIGH ( _0x71 + ( 395 ) )
                 	__POINTW2MN _0x71,395
0006fd 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0284                 lcd_gotoxy(1, 2);
                 ; 0000 0285                 lcd_print("Wait For Delete...");
                +
0006ff e7ae     +LDI R26 , LOW ( _0x71 + ( 414 ) )
000700 e0b5     +LDI R27 , HIGH ( _0x71 + ( 414 ) )
                 	__POINTW2MN _0x71,414
000701 d10a      	RCALL _lcd_print
                 ; 0000 0286                 delete_student_code(result);
000702 81a8      	LD   R26,Y
000703 d23d      	RCALL _delete_student_code
                 ; 0000 0287                 lcdCommand(0x01);
000704 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0288                 lcd_gotoxy(1, 1);
                 ; 0000 0289                 lcd_print("Student Code Was Deleted");
                +
000706 e9a1     +LDI R26 , LOW ( _0x71 + ( 433 ) )
000707 e0b5     +LDI R27 , HIGH ( _0x71 + ( 433 ) )
                 	__POINTW2MN _0x71,433
000708 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 028A                 lcd_gotoxy(1, 2);
                 ; 0000 028B                 lcd_print("You Will Back Menu In 2 Second");
                +
00070a eaaa     +LDI R26 , LOW ( _0x71 + ( 458 ) )
00070b e0b5     +LDI R27 , HIGH ( _0x71 + ( 458 ) )
                 	__POINTW2MN _0x71,458
00070c c008      	RJMP _0x150
                 ; 0000 028C                 delay_ms(2000);
                 ; 0000 028D             }
                 ; 0000 028E             else
                 _0xC6:
                 ; 0000 028F             {
                 ; 0000 0290                 lcdCommand(0x01);
00070d 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0291                 lcd_gotoxy(1, 1);
                 ; 0000 0292                 lcd_print("Ops , Student Code Not Found");
                +
00070f eca9     +LDI R26 , LOW ( _0x71 + ( 489 ) )
000710 e0b5     +LDI R27 , HIGH ( _0x71 + ( 489 ) )
                 	__POINTW2MN _0x71,489
000711 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0293                 lcd_gotoxy(1, 2);
                 ; 0000 0294                 lcd_print("You Will Back Menu In 2 Second");
                +
000713 eea6     +LDI R26 , LOW ( _0x71 + ( 518 ) )
000714 e0b5     +LDI R27 , HIGH ( _0x71 + ( 518 ) )
                 	__POINTW2MN _0x71,518
                 _0x150:
000715 d0f6      	RCALL _lcd_print
                 ; 0000 0295                 delay_ms(2000);
000716 eda0      	LDI  R26,LOW(2000)
000717 e0b7      	LDI  R27,HIGH(2000)
000718 940e 0bc8 	CALL _delay_ms
                 ; 0000 0296             }
                 ; 0000 0297             memset(buffer, 0, 32);
00071a 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 0298             stage = STAGE_STUDENT_MANAGMENT;
00071c e0e7      	LDI  R30,LOW(7)
00071d e0f0      	LDI  R31,HIGH(7)
00071e 012f      	MOVW R4,R30
                 ; 0000 0299         }
00071f 9621      	ADIW R28,1
                 ; 0000 029A     }
                 _0xC5:
                 _0xC4:
                 _0xC1:
                 _0xBE:
                 ; 0000 029B     else if (stage == STAGE_TRAFFIC_MONITORING)
000720 c091      	RJMP _0xC8
                 _0xBC:
000721 940e 0b43 	CALL SUBOPT_0x13
000723 f441      	BRNE _0xC9
                 ; 0000 029C     {
                 ; 0000 029D         if (keypad[rowloc][cl] == 'C')
000724 940e 0b56 	CALL SUBOPT_0x17
000726 91ac      	LD   R26,X
000727 34a3      	CPI  R26,LOW(0x43)
000728 f411      	BRNE _0xCA
                 ; 0000 029E             stage = STAGE_INIT_MENU;
000729 2444      	CLR  R4
00072a 2455      	CLR  R5
                 ; 0000 029F     }
                 _0xCA:
                 ; 0000 02A0     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
00072b c086      	RJMP _0xCB
                 _0xC9:
00072c 940e 0b48 	CALL SUBOPT_0x14
00072e f419      	BRNE _0xCD
00072f e0e1      	LDI  R30,LOW(1)
000730 15e9      	CP   R30,R9
000731 f409      	BRNE _0xCE
                 _0xCD:
000732 c05e      	RJMP _0xCC
                 _0xCE:
                 ; 0000 02A1     {
                 ; 0000 02A2         if (keypad[rowloc][cl] == 'C')
000733 940e 0b56 	CALL SUBOPT_0x17
000735 91ac      	LD   R26,X
000736 34a3      	CPI  R26,LOW(0x43)
000737 f429      	BRNE _0xCF
                 ; 0000 02A3         {
                 ; 0000 02A4             memset(buffer, 0, 32);
000738 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 02A5             stage = STAGE_INIT_MENU;
00073a 2444      	CLR  R4
00073b 2455      	CLR  R5
                 ; 0000 02A6         }
                 ; 0000 02A7 
                 ; 0000 02A8         else if ((keypad[rowloc][cl] - '0') < 10)
00073c c053      	RJMP _0xD0
                 _0xCF:
00073d 940e 0b56 	CALL SUBOPT_0x17
00073f 91ec      	LD   R30,X
000740 e0f0      	LDI  R31,0
000741 97fa      	SBIW R30,58
000742 f47c      	BRGE _0xD1
                 ; 0000 02A9         {
                 ; 0000 02AA             if (strlen(buffer) <= 30)
000743 940e 0afb 	CALL SUBOPT_0x7
000745 977f      	SBIW R30,31
000746 f450      	BRSH _0xD2
                 ; 0000 02AB             {
                 ; 0000 02AC                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000747 940e 0afb 	CALL SUBOPT_0x7
000749 940e 0b62 	CALL SUBOPT_0x18
00074b 940e 0b66 	CALL SUBOPT_0x19
                 ; 0000 02AD                 buffer[strlen(buffer) + 1] = '\0';
00074d 940e 0b6a 	CALL SUBOPT_0x1A
                 ; 0000 02AE                 lcdData(keypad[rowloc][cl]);
00074f 91ac      	LD   R26,X
000750 d07e      	RCALL _lcdData
                 ; 0000 02AF             }
                 ; 0000 02B0         }
                 _0xD2:
                 ; 0000 02B1         else if (keypad[rowloc][cl] == 'D')
000751 c03e      	RJMP _0xD3
                 _0xD1:
000752 940e 0b56 	CALL SUBOPT_0x17
000754 91ac      	LD   R26,X
000755 34a4      	CPI  R26,LOW(0x44)
000756 f461      	BRNE _0xD4
                 ; 0000 02B2         {
                 ; 0000 02B3             buffer_len = strlen(buffer);
000757 940e 0afb 	CALL SUBOPT_0x7
000759 2f5e      	MOV  R21,R30
                 ; 0000 02B4             if (buffer_len > 0)
00075a 3051      	CPI  R21,1
00075b f030      	BRLO _0xD5
                 ; 0000 02B5             {
                 ; 0000 02B6                 buffer[buffer_len - 1] = '\0';
00075c 940e 0b6f 	CALL SUBOPT_0x1B
                 ; 0000 02B7                 lcdCommand(0x10);
                 ; 0000 02B8                 lcd_print(" ");
                +
00075e e0a5     +LDI R26 , LOW ( _0x71 + ( 549 ) )
00075f e0b6     +LDI R27 , HIGH ( _0x71 + ( 549 ) )
                 	__POINTW2MN _0x71,549
000760 940e 0b79 	CALL SUBOPT_0x1C
                 ; 0000 02B9                 lcdCommand(0x10);
                 ; 0000 02BA             }
                 ; 0000 02BB         }
                 _0xD5:
                 ; 0000 02BC         else if (keypad[rowloc][cl] == 'E')
000762 c02d      	RJMP _0xD6
                 _0xD4:
000763 940e 0b56 	CALL SUBOPT_0x17
000765 91ac      	LD   R26,X
000766 34a5      	CPI  R26,LOW(0x45)
000767 f541      	BRNE _0xD7
                 ; 0000 02BD         {
                 ; 0000 02BE             // search from eeprom data
                 ; 0000 02BF             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 02C0 
                 ; 0000 02C1             if (input_hash == secret)
000768 9722      	SBIW R28,2
                 ;	i -> Y+8
                 ;	input_hash -> Y+0
000769 e6af      	LDI  R26,LOW(_buffer)
00076a e0b7      	LDI  R27,HIGH(_buffer)
00076b d2de      	RCALL _simple_hash
00076c 83e8      	ST   Y,R30
00076d 83f9      	STD  Y+1,R31
00076e 81a8      	LD   R26,Y
00076f 81b9      	LDD  R27,Y+1
000770 36a4      	CPI  R26,LOW(0xF64)
000771 e0ef      	LDI  R30,HIGH(0xF64)
000772 07be      	CPC  R27,R30
000773 f469      	BRNE _0xD8
                 ; 0000 02C2             {
                 ; 0000 02C3                 lcdCommand(0x01);
000774 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 02C4                 lcd_gotoxy(1, 1);
                 ; 0000 02C5                 lcd_print("Login Successfully");
                +
000776 e0a7     +LDI R26 , LOW ( _0x71 + ( 551 ) )
000777 e0b6     +LDI R27 , HIGH ( _0x71 + ( 551 ) )
                 	__POINTW2MN _0x71,551
000778 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 02C6                 lcd_gotoxy(1, 2);
                 ; 0000 02C7                 lcd_print("Wait...");
                +
00077a e1aa     +LDI R26 , LOW ( _0x71 + ( 570 ) )
00077b e0b6     +LDI R27 , HIGH ( _0x71 + ( 570 ) )
                 	__POINTW2MN _0x71,570
00077c 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 02C8                 delay_ms(2000);
                 ; 0000 02C9                 logged_in = 1;
00077e e0e1      	LDI  R30,LOW(1)
00077f 2e9e      	MOV  R9,R30
                 ; 0000 02CA             }
                 ; 0000 02CB             else
000780 c00a      	RJMP _0xD9
                 _0xD8:
                 ; 0000 02CC             {
                 ; 0000 02CD                 lcdCommand(0x01);
000781 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 02CE                 lcd_gotoxy(1, 1);
                 ; 0000 02CF                 lcd_print("Ops , secret is incorrect");
                +
000783 e2a2     +LDI R26 , LOW ( _0x71 + ( 578 ) )
000784 e0b6     +LDI R27 , HIGH ( _0x71 + ( 578 ) )
                 	__POINTW2MN _0x71,578
000785 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 02D0                 lcd_gotoxy(1, 2);
                 ; 0000 02D1                 lcd_print("You Will Back Menu In 2 Second");
                +
000787 e3ac     +LDI R26 , LOW ( _0x71 + ( 604 ) )
000788 e0b6     +LDI R27 , HIGH ( _0x71 + ( 604 ) )
                 	__POINTW2MN _0x71,604
000789 940e 0b2e 	CALL SUBOPT_0xF
                 ; 0000 02D2                 delay_ms(2000);
                 ; 0000 02D3             }
                 _0xD9:
                 ; 0000 02D4             memset(buffer, 0, 32);
00078b 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 02D5             stage = STAGE_INIT_MENU;
00078d 2444      	CLR  R4
00078e 2455      	CLR  R5
                 ; 0000 02D6         }
00078f 9622      	ADIW R28,2
                 ; 0000 02D7     }
                 _0xD7:
                 _0xD6:
                 _0xD3:
                 _0xD0:
                 ; 0000 02D8     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
000790 c021      	RJMP _0xDA
                 _0xCC:
000791 940e 0b48 	CALL SUBOPT_0x14
000793 f411      	BRNE _0xDC
000794 2099      	TST  R9
000795 f409      	BRNE _0xDD
                 _0xDC:
000796 c01b      	RJMP _0xDB
                 _0xDD:
                 ; 0000 02D9     {
                 ; 0000 02DA         switch (keypad[rowloc][cl])
000797 940e 0b56 	CALL SUBOPT_0x17
000799 91ec      	LD   R30,X
00079a e0f0      	LDI  R31,0
                 ; 0000 02DB         {
                 ; 0000 02DC         case 'C':
00079b 34e3      	CPI  R30,LOW(0x43)
00079c e0a0      	LDI  R26,HIGH(0x43)
00079d 07fa      	CPC  R31,R26
00079e f419      	BRNE _0xE1
                 ; 0000 02DD             stage = STAGE_INIT_MENU;
00079f 2444      	CLR  R4
0007a0 2455      	CLR  R5
                 ; 0000 02DE             break;
0007a1 c00c      	RJMP _0xE0
                 ; 0000 02DF         case '1':
                 _0xE1:
0007a2 33e1      	CPI  R30,LOW(0x31)
0007a3 e0a0      	LDI  R26,HIGH(0x31)
0007a4 07fa      	CPC  R31,R26
0007a5 f441      	BRNE _0xE3
                 ; 0000 02E0 #asm("cli") // disable interrupts
0007a6 94f8      	cli
                 ; 0000 02E1             lcdCommand(0x1);
0007a7 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 02E2             lcd_gotoxy(1, 1);
                 ; 0000 02E3             lcd_print("Clearing EEPROM ...");
                +
0007a9 e5ab     +LDI R26 , LOW ( _0x71 + ( 635 ) )
0007aa e0b6     +LDI R27 , HIGH ( _0x71 + ( 635 ) )
                 	__POINTW2MN _0x71,635
0007ab d060      	RCALL _lcd_print
                 ; 0000 02E4             clear_eeprom();
0007ac d0fc      	RCALL _clear_eeprom
                 ; 0000 02E5 #asm("sei") // enable interrupts
0007ad 9478      	sei
                 ; 0000 02E6             break;
                 ; 0000 02E7         default:
                 _0xE3:
                 ; 0000 02E8             break;
                 ; 0000 02E9         }
                 _0xE0:
                 ; 0000 02EA         memset(buffer, 0, 32);
0007ae 940e 0b03 	CALL SUBOPT_0x9
                 ; 0000 02EB         stage = STAGE_INIT_MENU;
0007b0 2444      	CLR  R4
0007b1 2455      	CLR  R5
                 ; 0000 02EC     }
                 ; 0000 02ED }
                 _0xDB:
                 _0xDA:
                 _0xCB:
                 _0xC8:
                 _0xBB:
                 _0xAC:
                 _0x9F:
                 _0x9C:
                 _0x99:
                 _0x96:
                 _0x81:
                 _0x78:
0007b2 940e 0d8b 	CALL __LOADLOCR6
0007b4 9628      	ADIW R28,8
0007b5 91e9      	LD   R30,Y+
0007b6 bfef      	OUT  SREG,R30
0007b7 91f9      	LD   R31,Y+
0007b8 91e9      	LD   R30,Y+
0007b9 91b9      	LD   R27,Y+
0007ba 91a9      	LD   R26,Y+
0007bb 9199      	LD   R25,Y+
0007bc 9189      	LD   R24,Y+
0007bd 9179      	LD   R23,Y+
0007be 9169      	LD   R22,Y+
0007bf 90f9      	LD   R15,Y+
0007c0 9019      	LD   R1,Y+
0007c1 9009      	LD   R0,Y+
0007c2 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x71:
0003e0           	.BYTE 0x28F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 02F0 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 02F1     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0007c3 940e 0b8a 	CALL SUBOPT_0x1F
                 ;	cmnd -> Y+0
                 ; 0000 02F2     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0007c5 98c0      	CBI  0x18,0
                 ; 0000 02F3     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0007c6 940e 0b93 	CALL SUBOPT_0x20
                 ; 0000 02F4     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02F5     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02F6     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02F7     delay_us(20 * 16);         // wait
                +
0007c8 e880     +LDI R24 , LOW ( 640 )
0007c9 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0007ca 9701     +SBIW R24 , 1
0007cb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 02F8     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0007cc 940e 0b9a 	CALL SUBOPT_0x21
                 ; 0000 02F9     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02FA     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02FB     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02FC }
0007ce c110      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 02FE {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 02FF     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0007cf 940e 0b8a 	CALL SUBOPT_0x1F
                 ;	data -> Y+0
                 ; 0000 0300     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0007d1 9ac0      	SBI  0x18,0
                 ; 0000 0301     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0007d2 940e 0b93 	CALL SUBOPT_0x20
                 ; 0000 0302     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0303     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0304     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0305     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0007d4 940e 0b9a 	CALL SUBOPT_0x21
                 ; 0000 0306     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0307     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0308     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0309 }
0007d6 c108      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 030B {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 030C     LCD_DDR = 0xFF;            // LCD port is output
0007d7 efef      	LDI  R30,LOW(255)
0007d8 bbe7      	OUT  0x17,R30
                 ; 0000 030D     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0007d9 98c2      	CBI  0x18,2
                 ; 0000 030E     delay_us(2000 * 16);       // wait for stable power
                +
0007da e080     +LDI R24 , LOW ( 64000 )
0007db ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0007dc 9701     +SBIW R24 , 1
0007dd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 030F     lcdCommand(0x33);          //$33 for 4-bit mode
0007de e3a3      	LDI  R26,LOW(51)
0007df 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0310     delay_us(100 * 16);        // wait
                 ; 0000 0311     lcdCommand(0x32);          //$32 for 4-bit mode
0007e1 e3a2      	LDI  R26,LOW(50)
0007e2 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0312     delay_us(100 * 16);        // wait
                 ; 0000 0313     lcdCommand(0x28);          //$28 for 4-bit mode
0007e4 e2a8      	LDI  R26,LOW(40)
0007e5 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0314     delay_us(100 * 16);        // wait
                 ; 0000 0315     lcdCommand(0x0c);          // display on, cursor off
0007e7 e0ac      	LDI  R26,LOW(12)
0007e8 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0316     delay_us(100 * 16);        // wait
                 ; 0000 0317     lcdCommand(0x01);          // clear LCD
0007ea e0a1      	LDI  R26,LOW(1)
0007eb dfd7      	RCALL _lcdCommand
                 ; 0000 0318     delay_us(2000 * 16);       // wait
                +
0007ec e080     +LDI R24 , LOW ( 64000 )
0007ed ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0007ee 9701     +SBIW R24 , 1
0007ef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0319     lcdCommand(0x06);          // shift cursor right
0007f0 e0a6      	LDI  R26,LOW(6)
0007f1 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 031A     delay_us(100 * 16);
                 ; 0000 031B }
0007f3 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 031D {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 031E     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 031F     lcdCommand(firstCharAdr[y - 1] + x - 1);
0007f4 93aa      	ST   -Y,R26
0007f5 9724      	SBIW R28,4
0007f6 e8e0      	LDI  R30,LOW(128)
0007f7 83e8      	ST   Y,R30
0007f8 ece0      	LDI  R30,LOW(192)
0007f9 83e9      	STD  Y+1,R30
0007fa e9e4      	LDI  R30,LOW(148)
0007fb 83ea      	STD  Y+2,R30
0007fc ede4      	LDI  R30,LOW(212)
0007fd 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
0007fe 81ec      	LDD  R30,Y+4
0007ff e0f0      	LDI  R31,0
000800 9731      	SBIW R30,1
000801 01de      	MOVW R26,R28
000802 0fae      	ADD  R26,R30
000803 1fbf      	ADC  R27,R31
000804 91ec      	LD   R30,X
000805 81ad      	LDD  R26,Y+5
000806 0fae      	ADD  R26,R30
000807 50a1      	SUBI R26,LOW(1)
000808 940e 0b4d 	CALL SUBOPT_0x15
                 ; 0000 0320     delay_us(100 * 16);
                 ; 0000 0321 }
00080a 9626      	ADIW R28,6
00080b 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0323 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0324     unsigned char i = 0;
                 ; 0000 0325     while (str[i] != 0)
00080c 93ba      	ST   -Y,R27
00080d 93aa      	ST   -Y,R26
00080e 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
00080f e010      	LDI  R17,0
                 _0xE4:
000810 81a9      	LDD  R26,Y+1
000811 81ba      	LDD  R27,Y+1+1
000812 27ee      	CLR  R30
000813 0fa1      	ADD  R26,R17
000814 1fbe      	ADC  R27,R30
000815 91ec      	LD   R30,X
000816 30e0      	CPI  R30,0
000817 f049      	BREQ _0xE6
                 ; 0000 0326     {
                 ; 0000 0327         lcdData(str[i]);
000818 81a9      	LDD  R26,Y+1
000819 81ba      	LDD  R27,Y+1+1
00081a 27ee      	CLR  R30
00081b 0fa1      	ADD  R26,R17
00081c 1fbe      	ADC  R27,R30
00081d 91ac      	LD   R26,X
00081e dfb0      	RCALL _lcdData
                 ; 0000 0328         i++;
00081f 5f1f      	SUBI R17,-1
                 ; 0000 0329     }
000820 cfef      	RJMP _0xE4
                 _0xE6:
                 ; 0000 032A }
000821 8118      	LDD  R17,Y+0
000822 c0b5      	RJMP _0x20A0006
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 032D {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 032E     unsigned char temperatureVal = 0;
                 ; 0000 032F     unsigned char temperatureRep[3];
                 ; 0000 0330 
                 ; 0000 0331     ADMUX = 0xE0;
000823 9723      	SBIW R28,3
000824 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000825 e010      	LDI  R17,0
000826 eee0      	LDI  R30,LOW(224)
000827 b9e7      	OUT  0x7,R30
                 ; 0000 0332     ADCSRA = 0x87;
000828 e8e7      	LDI  R30,LOW(135)
000829 b9e6      	OUT  0x6,R30
                 ; 0000 0333 
                 ; 0000 0334     lcdCommand(0x01);
00082a 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0335     lcd_gotoxy(1, 1);
                 ; 0000 0336     lcd_print("temperature(C):");
                +
00082c e6af     +LDI R26 , LOW ( _0xE7 + ( 0 ) )
00082d e0b6     +LDI R27 , HIGH ( _0xE7 + ( 0 ) )
                 	__POINTW2MN _0xE7,0
00082e dfdd      	RCALL _lcd_print
                 ; 0000 0337 
                 ; 0000 0338     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xE8:
00082f 940e 0b0d 	CALL SUBOPT_0xA
000831 f4f1      	BRNE _0xEA
                 ; 0000 0339     {
                 ; 0000 033A         ADCSRA |= (1 << ADSC);
000832 9a36      	SBI  0x6,6
                 ; 0000 033B         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xEB:
000833 9b34      	SBIS 0x6,4
                 ; 0000 033C             ;
000834 cffe      	RJMP _0xEB
                 ; 0000 033D         if (ADCH != temperatureVal)
000835 b1e5      	IN   R30,0x5
000836 171e      	CP   R17,R30
000837 f099      	BREQ _0xEE
                 ; 0000 033E         {
                 ; 0000 033F             temperatureVal = ADCH;
000838 b115      	IN   R17,5
                 ; 0000 0340             itoa(temperatureVal, temperatureRep);
000839 2fe1      	MOV  R30,R17
00083a e0f0      	LDI  R31,0
00083b 93fa      	ST   -Y,R31
00083c 93ea      	ST   -Y,R30
00083d 01de      	MOVW R26,R28
00083e 9613      	ADIW R26,3
00083f 940e 0a6d 	CALL _itoa
                 ; 0000 0341             lcd_gotoxy(17, 1);
000841 e1e1      	LDI  R30,LOW(17)
000842 93ea      	ST   -Y,R30
000843 e0a1      	LDI  R26,LOW(1)
000844 dfaf      	RCALL _lcd_gotoxy
                 ; 0000 0342             lcd_print(temperatureRep);
000845 01de      	MOVW R26,R28
000846 9611      	ADIW R26,1
000847 dfc4      	RCALL _lcd_print
                 ; 0000 0343             lcd_print(" ");
                +
000848 e7af     +LDI R26 , LOW ( _0xE7 + ( 16 ) )
000849 e0b6     +LDI R27 , HIGH ( _0xE7 + ( 16 ) )
                 	__POINTW2MN _0xE7,16
00084a dfc1      	RCALL _lcd_print
                 ; 0000 0344         }
                 ; 0000 0345         delay_ms(500);
                 _0xEE:
00084b efa4      	LDI  R26,LOW(500)
00084c e0b1      	LDI  R27,HIGH(500)
00084d 940e 0bc8 	CALL _delay_ms
                 ; 0000 0346     }
00084f cfdf      	RJMP _0xE8
                 _0xEA:
                 ; 0000 0347 
                 ; 0000 0348     ADCSRA = 0x0;
000850 e0e0      	LDI  R30,LOW(0)
000851 b9e6      	OUT  0x6,R30
                 ; 0000 0349 }
000852 8118      	LDD  R17,Y+0
000853 c217      	RJMP _0x20A0002
                 ; .FEND
                 
                 	.DSEG
                 _0xE7:
00066f           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 034C {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 034D 
                 ; 0000 034E     while (stage == STAGE_INIT_MENU)
                 _0xEF:
000854 2c04      	MOV  R0,R4
000855 2805      	OR   R0,R5
000856 f009      	BREQ PC+2
000857 c050      	RJMP _0xF1
                 ; 0000 034F     {
                 ; 0000 0350         lcdCommand(0x01);
000858 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0351         lcd_gotoxy(1, 1);
                 ; 0000 0352         if (page_num == 0)
00085a 2077      	TST  R7
00085b f481      	BRNE _0xF2
                 ; 0000 0353         {
                 ; 0000 0354             lcd_print("1: Attendance Initialization");
                +
00085c e8a1     +LDI R26 , LOW ( _0xF3 + ( 0 ) )
00085d e0b6     +LDI R27 , HIGH ( _0xF3 + ( 0 ) )
                 	__POINTW2MN _0xF3,0
00085e 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0355             lcd_gotoxy(1, 2);
                 ; 0000 0356             lcd_print("2: Student Management");
                +
000860 e9ae     +LDI R26 , LOW ( _0xF3 + ( 29 ) )
000861 e0b6     +LDI R27 , HIGH ( _0xF3 + ( 29 ) )
                 	__POINTW2MN _0xF3,29
000862 dfa9      	RCALL _lcd_print
                 ; 0000 0357             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xF4:
000863 2077      	TST  R7
000864 f421      	BRNE _0xF7
000865 2400      	CLR  R0
000866 1404      	CP   R0,R4
000867 0405      	CPC  R0,R5
000868 f009      	BREQ _0xF8
                 _0xF7:
000869 c001      	RJMP _0xF6
                 _0xF8:
                 ; 0000 0358                 ;
00086a cff8      	RJMP _0xF4
                 _0xF6:
                 ; 0000 0359         }
                 ; 0000 035A         else if (page_num == 1)
00086b c03b      	RJMP _0xF9
                 _0xF2:
00086c e0e1      	LDI  R30,LOW(1)
00086d 15e7      	CP   R30,R7
00086e f489      	BRNE _0xFA
                 ; 0000 035B         {
                 ; 0000 035C             lcd_print("3: View Present Students ");
                +
00086f eba4     +LDI R26 , LOW ( _0xF3 + ( 51 ) )
000870 e0b6     +LDI R27 , HIGH ( _0xF3 + ( 51 ) )
                 	__POINTW2MN _0xF3,51
000871 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 035D             lcd_gotoxy(1, 2);
                 ; 0000 035E             lcd_print("4: Temperature Monitoring");
                +
000873 ecae     +LDI R26 , LOW ( _0xF3 + ( 77 ) )
000874 e0b6     +LDI R27 , HIGH ( _0xF3 + ( 77 ) )
                 	__POINTW2MN _0xF3,77
000875 df96      	RCALL _lcd_print
                 ; 0000 035F             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0xFB:
000876 e0e1      	LDI  R30,LOW(1)
000877 15e7      	CP   R30,R7
000878 f421      	BRNE _0xFE
000879 2400      	CLR  R0
00087a 1404      	CP   R0,R4
00087b 0405      	CPC  R0,R5
00087c f009      	BREQ _0xFF
                 _0xFE:
00087d c001      	RJMP _0xFD
                 _0xFF:
                 ; 0000 0360                 ;
00087e cff7      	RJMP _0xFB
                 _0xFD:
                 ; 0000 0361         }
                 ; 0000 0362         else if (page_num == 2)
00087f c027      	RJMP _0x100
                 _0xFA:
000880 e0e2      	LDI  R30,LOW(2)
000881 15e7      	CP   R30,R7
000882 f489      	BRNE _0x101
                 ; 0000 0363         {
                 ; 0000 0364             lcd_print("5: Retrieve Student Data");
                +
000883 eea8     +LDI R26 , LOW ( _0xF3 + ( 103 ) )
000884 e0b6     +LDI R27 , HIGH ( _0xF3 + ( 103 ) )
                 	__POINTW2MN _0xF3,103
000885 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 0365             lcd_gotoxy(1, 2);
                 ; 0000 0366             lcd_print("6: Traffic Monitoring");
                +
000887 e0a1     +LDI R26 , LOW ( _0xF3 + ( 128 ) )
000888 e0b7     +LDI R27 , HIGH ( _0xF3 + ( 128 ) )
                 	__POINTW2MN _0xF3,128
000889 df82      	RCALL _lcd_print
                 ; 0000 0367             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x102:
00088a e0e2      	LDI  R30,LOW(2)
00088b 15e7      	CP   R30,R7
00088c f421      	BRNE _0x105
00088d 2400      	CLR  R0
00088e 1404      	CP   R0,R4
00088f 0405      	CPC  R0,R5
000890 f009      	BREQ _0x106
                 _0x105:
000891 c001      	RJMP _0x104
                 _0x106:
                 ; 0000 0368                 ;
000892 cff7      	RJMP _0x102
                 _0x104:
                 ; 0000 0369         }
                 ; 0000 036A         else if (page_num == 3)
000893 c013      	RJMP _0x107
                 _0x101:
000894 e0e3      	LDI  R30,LOW(3)
000895 15e7      	CP   R30,R7
000896 f481      	BRNE _0x108
                 ; 0000 036B         {
                 ; 0000 036C             lcd_print("7: Login With Admin");
                +
000897 e1a7     +LDI R26 , LOW ( _0xF3 + ( 150 ) )
000898 e0b7     +LDI R27 , HIGH ( _0xF3 + ( 150 ) )
                 	__POINTW2MN _0xF3,150
000899 940e 0add 	CALL SUBOPT_0x2
                 ; 0000 036D             lcd_gotoxy(1, 2);
                 ; 0000 036E             lcd_print("8: Logout");
                +
00089b e2ab     +LDI R26 , LOW ( _0xF3 + ( 170 ) )
00089c e0b7     +LDI R27 , HIGH ( _0xF3 + ( 170 ) )
                 	__POINTW2MN _0xF3,170
00089d df6e      	RCALL _lcd_print
                 ; 0000 036F             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x109:
00089e e0e3      	LDI  R30,LOW(3)
00089f 15e7      	CP   R30,R7
0008a0 f421      	BRNE _0x10C
0008a1 2400      	CLR  R0
0008a2 1404      	CP   R0,R4
0008a3 0405      	CPC  R0,R5
0008a4 f009      	BREQ _0x10D
                 _0x10C:
0008a5 c001      	RJMP _0x10B
                 _0x10D:
                 ; 0000 0370                 ;
0008a6 cff7      	RJMP _0x109
                 _0x10B:
                 ; 0000 0371         }
                 ; 0000 0372     }
                 _0x108:
                 _0x107:
                 _0x100:
                 _0xF9:
0008a7 cfac      	RJMP _0xEF
                 _0xF1:
                 ; 0000 0373 }
0008a8 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xF3:
000681           	.BYTE 0xB4
                 ;
                 ;void clear_eeprom()
                 ; 0000 0376 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0377     unsigned int i;
                 ; 0000 0378 
                 ; 0000 0379     for (i = 0; i <= 1023; i++)
0008a9 931a      	ST   -Y,R17
0008aa 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0008ab e000     +LDI R16 , LOW ( 0 )
0008ac e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x10F:
                +
0008ad 3000     +CPI R16 , LOW ( 1024 )
0008ae e0e4     +LDI R30 , HIGH ( 1024 )
0008af 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
0008b0 f478      	BRSH _0x110
                 ; 0000 037A     {
                 ; 0000 037B         // Wait for the previous write to complete
                 ; 0000 037C         while (EECR & (1 << EEWE))
                 _0x111:
0008b1 99e1      	SBIC 0x1C,1
                 ; 0000 037D             ;
0008b2 cffe      	RJMP _0x111
                 ; 0000 037E 
                 ; 0000 037F         // Set up address registers
                 ; 0000 0380         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
0008b3 2fe1      	MOV  R30,R17
0008b4 70f0      	ANDI R31,HIGH(0x0)
0008b5 70e3      	ANDI R30,LOW(0x3)
0008b6 bbef      	OUT  0x1F,R30
                 ; 0000 0381         EEARL = i & 0xFF;        // Low byte (bits 0-7)
0008b7 2fe0      	MOV  R30,R16
0008b8 bbee      	OUT  0x1E,R30
                 ; 0000 0382 
                 ; 0000 0383         // Set up data register
                 ; 0000 0384         EEDR = 0; // Write 0 to EEPROM
0008b9 e0e0      	LDI  R30,LOW(0)
0008ba bbed      	OUT  0x1D,R30
                 ; 0000 0385 
                 ; 0000 0386         // Enable write
                 ; 0000 0387         EECR |= (1 << EEMWE); // Master write enable
0008bb 9ae2      	SBI  0x1C,2
                 ; 0000 0388         EECR |= (1 << EEWE);  // Start EEPROM write
0008bc 9ae1      	SBI  0x1C,1
                 ; 0000 0389     }
                +
0008bd 5f0f     +SUBI R16 , LOW ( - 1 )
0008be 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0008bf cfed      	RJMP _0x10F
                 _0x110:
                 ; 0000 038A }
0008c0 9109      	LD   R16,Y+
0008c1 9119      	LD   R17,Y+
0008c2 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 038D {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 038E     unsigned char x;
                 ; 0000 038F     // Wait for the previous write to complete
                 ; 0000 0390     while (EECR & (1 << EEWE))
0008c3 93ba      	ST   -Y,R27
0008c4 93aa      	ST   -Y,R26
0008c5 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x114:
0008c6 99e1      	SBIC 0x1C,1
                 ; 0000 0391         ;
0008c7 cffe      	RJMP _0x114
                 ; 0000 0392 
                 ; 0000 0393     // Set up address registers
                 ; 0000 0394     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0008c8 940e 0ba8 	CALL SUBOPT_0x22
                 ; 0000 0395     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 0396     EECR |= (1 << EERE);        // Read Enable
0008ca 9ae0      	SBI  0x1C,0
                 ; 0000 0397     x = EEDR;
0008cb b31d      	IN   R17,29
                 ; 0000 0398     return x;
0008cc 2fe1      	MOV  R30,R17
0008cd 8118      	LDD  R17,Y+0
0008ce c009      	RJMP _0x20A0006
                 ; 0000 0399 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 039C {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 039D     // Wait for the previous write to complete
                 ; 0000 039E     while (EECR & (1 << EEWE))
0008cf 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x117:
0008d0 99e1      	SBIC 0x1C,1
                 ; 0000 039F         ;
0008d1 cffe      	RJMP _0x117
                 ; 0000 03A0 
                 ; 0000 03A1     // Set up address registers
                 ; 0000 03A2     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0008d2 940e 0ba8 	CALL SUBOPT_0x22
                 ; 0000 03A3     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 03A4 
                 ; 0000 03A5     // Set up data register
                 ; 0000 03A6     EEDR = value; // Write 0 to EEPROM
0008d4 81e8      	LD   R30,Y
0008d5 bbed      	OUT  0x1D,R30
                 ; 0000 03A7 
                 ; 0000 03A8     // Enable write
                 ; 0000 03A9     EECR |= (1 << EEMWE); // Master write enable
0008d6 9ae2      	SBI  0x1C,2
                 ; 0000 03AA     EECR |= (1 << EEWE);  // Start EEPROM write
0008d7 9ae1      	SBI  0x1C,1
                 ; 0000 03AB }
                 _0x20A0006:
0008d8 9623      	ADIW R28,3
0008d9 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 03AE {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 03AF     while (!(UCSRA & (1 << UDRE)))
0008da 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x11A:
0008db 9b5d      	SBIS 0xB,5
                 ; 0000 03B0         ;
0008dc cffe      	RJMP _0x11A
                 ; 0000 03B1     UDR = data;
0008dd 81e8      	LD   R30,Y
0008de b9ec      	OUT  0xC,R30
                 ; 0000 03B2 }
                 _0x20A0005:
0008df 9621      	ADIW R28,1
0008e0 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 03B5 {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 03B6     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x11D:
0008e1 995f      	SBIC 0xB,7
0008e2 c003      	RJMP _0x120
0008e3 940e 0af1 	CALL SUBOPT_0x5
0008e5 f009      	BREQ _0x121
                 _0x120:
0008e6 c001      	RJMP _0x11F
                 _0x121:
0008e7 cff9      	RJMP _0x11D
                 _0x11F:
                 ; 0000 03B7     return UDR;
0008e8 b1ec      	IN   R30,0xC
0008e9 9508      	RET
                 ; 0000 03B8 }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 03BB {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 03BC     UBRRL = (unsigned char)ubrr;
0008ea 93ba      	ST   -Y,R27
0008eb 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
0008ec 81e8      	LD   R30,Y
0008ed b9e9      	OUT  0x9,R30
                 ; 0000 03BD     UBRRH = (unsigned char)(ubrr >> 8);
0008ee 81e9      	LDD  R30,Y+1
0008ef 70f0      	ANDI R31,HIGH(0x0)
0008f0 bde0      	OUT  0x20,R30
                 ; 0000 03BE     UCSRB = (1 << RXEN) | (1 << TXEN);
0008f1 e1e8      	LDI  R30,LOW(24)
0008f2 b9ea      	OUT  0xA,R30
                 ; 0000 03BF     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
0008f3 e0e6      	LDI  R30,LOW(6)
0008f4 bde0      	OUT  0x20,R30
                 ; 0000 03C0 }
0008f5 9622      	ADIW R28,2
0008f6 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 03C3 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 03C4     unsigned char st_counts, i, j;
                 ; 0000 03C5     char temp[10];
                 ; 0000 03C6 
                 ; 0000 03C7     st_counts = read_byte_from_eeprom(0x0);
0008f7 972a      	SBIW R28,10
0008f8 940e 0d86 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
0008fa 940e 0b20 	CALL SUBOPT_0xD
0008fc 2f1e      	MOV  R17,R30
                 ; 0000 03C8 
                 ; 0000 03C9     for (i = 0; i < st_counts; i++)
0008fd e000      	LDI  R16,LOW(0)
                 _0x123:
0008fe 1701      	CP   R16,R17
0008ff f5e0      	BRSH _0x124
                 ; 0000 03CA     {
                 ; 0000 03CB         memset(temp, 0, 10);
000900 01fe      	MOVW R30,R28
000901 9634      	ADIW R30,4
000902 93fa      	ST   -Y,R31
000903 93ea      	ST   -Y,R30
000904 e0e0      	LDI  R30,LOW(0)
000905 93ea      	ST   -Y,R30
000906 e0aa      	LDI  R26,LOW(10)
000907 e0b0      	LDI  R27,0
000908 940e 0a9b 	CALL _memset
                 ; 0000 03CC         for (j = 0; j < 8; j++)
00090a e030      	LDI  R19,LOW(0)
                 _0x126:
00090b 3038      	CPI  R19,8
00090c f4a8      	BRSH _0x127
                 ; 0000 03CD         {
                 ; 0000 03CE             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
00090d 2fe3      	MOV  R30,R19
00090e e0f0      	LDI  R31,0
00090f 01de      	MOVW R26,R28
000910 9614      	ADIW R26,4
000911 0fea      	ADD  R30,R26
000912 1ffb      	ADC  R31,R27
000913 93ff      	PUSH R31
000914 93ef      	PUSH R30
000915 2fa3      	MOV  R26,R19
000916 27bb      	CLR  R27
000917 2fe0      	MOV  R30,R16
000918 940e 0b7e 	CALL SUBOPT_0x1D
00091a 0fae      	ADD  R26,R30
00091b 1fbf      	ADC  R27,R31
00091c dfa6      	RCALL _read_byte_from_eeprom
00091d 91af      	POP  R26
00091e 91bf      	POP  R27
00091f 93ec      	ST   X,R30
                 ; 0000 03CF         }
000920 5f3f      	SUBI R19,-1
000921 cfe9      	RJMP _0x126
                 _0x127:
                 ; 0000 03D0         temp[j] = '\0';
000922 2fe3      	MOV  R30,R19
000923 e0f0      	LDI  R31,0
000924 01de      	MOVW R26,R28
000925 9614      	ADIW R26,4
000926 0fae      	ADD  R26,R30
000927 1fbf      	ADC  R27,R31
000928 e0e0      	LDI  R30,LOW(0)
000929 93ec      	ST   X,R30
                 ; 0000 03D1         if (strncmp(temp, buffer, 8) == 0)
00092a 01fe      	MOVW R30,R28
00092b 9634      	ADIW R30,4
00092c 93fa      	ST   -Y,R31
00092d 93ea      	ST   -Y,R30
00092e e6ef      	LDI  R30,LOW(_buffer)
00092f e0f7      	LDI  R31,HIGH(_buffer)
000930 93fa      	ST   -Y,R31
000931 93ea      	ST   -Y,R30
000932 e0a8      	LDI  R26,LOW(8)
000933 940e 0ab7 	CALL _strncmp
000935 30e0      	CPI  R30,0
000936 f419      	BRNE _0x128
                 ; 0000 03D2             return (i + 1);
000937 2fe0      	MOV  R30,R16
000938 5fef      	SUBI R30,-LOW(1)
000939 c003      	RJMP _0x20A0004
                 ; 0000 03D3     }
                 _0x128:
00093a 5f0f      	SUBI R16,-1
00093b cfc2      	RJMP _0x123
                 _0x124:
                 ; 0000 03D4 
                 ; 0000 03D5     return 0;
00093c e0e0      	LDI  R30,LOW(0)
                 _0x20A0004:
00093d 940e 0d8d 	CALL __LOADLOCR4
00093f 962e      	ADIW R28,14
000940 9508      	RET
                 ; 0000 03D6 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 03D9 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 03DA     unsigned char st_counts, i, j;
                 ; 0000 03DB     unsigned char temp;
                 ; 0000 03DC 
                 ; 0000 03DD     st_counts = read_byte_from_eeprom(0x0);
000941 93aa      	ST   -Y,R26
000942 940e 0d86 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000944 940e 0b20 	CALL SUBOPT_0xD
000946 2f1e      	MOV  R17,R30
                 ; 0000 03DE 
                 ; 0000 03DF     for (i = index; i <= st_counts; i++)
000947 810c      	LDD  R16,Y+4
                 _0x12A:
000948 1710      	CP   R17,R16
000949 f0d8      	BRLO _0x12B
                 ; 0000 03E0     {
                 ; 0000 03E1         for (j = 0; j < 8; j++)
00094a e030      	LDI  R19,LOW(0)
                 _0x12D:
00094b 3038      	CPI  R19,8
00094c f4b0      	BRSH _0x12E
                 ; 0000 03E2         {
                 ; 0000 03E3             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
00094d 2fa3      	MOV  R26,R19
00094e 27bb      	CLR  R27
00094f 2fe0      	MOV  R30,R16
000950 940e 0b7e 	CALL SUBOPT_0x1D
000952 0fae      	ADD  R26,R30
000953 1fbf      	ADC  R27,R31
000954 df6e      	RCALL _read_byte_from_eeprom
000955 2f2e      	MOV  R18,R30
                 ; 0000 03E4             write_byte_to_eeprom(j + ((i) * 8), temp);
000956 2fa3      	MOV  R26,R19
000957 27bb      	CLR  R27
000958 e0e8      	LDI  R30,LOW(8)
000959 9fe0      	MUL  R30,R16
00095a 01f0      	MOVW R30,R0
00095b 0fea      	ADD  R30,R26
00095c 1ffb      	ADC  R31,R27
00095d 93fa      	ST   -Y,R31
00095e 93ea      	ST   -Y,R30
00095f 2fa2      	MOV  R26,R18
000960 df6e      	RCALL _write_byte_to_eeprom
                 ; 0000 03E5         }
000961 5f3f      	SUBI R19,-1
000962 cfe8      	RJMP _0x12D
                 _0x12E:
                 ; 0000 03E6     }
000963 5f0f      	SUBI R16,-1
000964 cfe3      	RJMP _0x12A
                 _0x12B:
                 ; 0000 03E7     write_byte_to_eeprom(0x0, st_counts - 1);
000965 e0e0      	LDI  R30,LOW(0)
000966 e0f0      	LDI  R31,HIGH(0)
000967 93fa      	ST   -Y,R31
000968 93ea      	ST   -Y,R30
000969 2fa1      	MOV  R26,R17
00096a 50a1      	SUBI R26,LOW(1)
00096b df63      	RCALL _write_byte_to_eeprom
                 ; 0000 03E8 }
00096c 940e 0d8d 	CALL __LOADLOCR4
00096e 940c 0aa9 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 03EB {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 03EC     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000970 9a8d      	SBI  0x11,5
                 ; 0000 03ED     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000971 988e      	CBI  0x11,6
                 ; 0000 03EE }
000972 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 03F1 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 03F2     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000973 9a95      	SBI  0x12,5
                 ; 0000 03F3     delay_us(15);                   // Wait for 15 microseconds
                +
000974 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
000975 958a     +DEC R24
000976 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 03F4     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000977 9895      	CBI  0x12,5
                 ; 0000 03F5 }
000978 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 03F8 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 03F9     uint32_t i, result;
                 ; 0000 03FA 
                 ; 0000 03FB     // Wait for rising edge on Echo pin
                 ; 0000 03FC     for (i = 0; i < 600000; i++)
000979 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
00097a e0e0      	LDI  R30,LOW(0)
                +
00097b 83ec     +STD Y + 4 , R30
00097c 83ed     +STD Y + 4 + 1 , R30
00097d 83ee     +STD Y + 4 + 2 , R30
00097e 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x130:
00097f 940e 0baf 	CALL SUBOPT_0x23
000981 f430      	BRSH _0x131
                 ; 0000 03FD     {
                 ; 0000 03FE         if (!(US_PIN & (1 << US_ECHO_POS)))
000982 9b86      	SBIS 0x10,6
                 ; 0000 03FF             continue;
000983 c001      	RJMP _0x12F
                 ; 0000 0400         else
                 ; 0000 0401             break;
000984 c003      	RJMP _0x131
                 ; 0000 0402     }
                 _0x12F:
000985 940e 0bbb 	CALL SUBOPT_0x24
000987 cff7      	RJMP _0x130
                 _0x131:
                 ; 0000 0403 
                 ; 0000 0404     if (i == 600000)
000988 940e 0baf 	CALL SUBOPT_0x23
00098a f419      	BRNE _0x134
                 ; 0000 0405         return US_ERROR; // Timeout error if no rising edge detected
00098b efef      	LDI  R30,LOW(65535)
00098c efff      	LDI  R31,HIGH(65535)
00098d c036      	RJMP _0x20A0003
                 ; 0000 0406 
                 ; 0000 0407     // Start timer with prescaler 8
                 ; 0000 0408     TCCR1A = 0x00;
                 _0x134:
00098e e0e0      	LDI  R30,LOW(0)
00098f bdef      	OUT  0x2F,R30
                 ; 0000 0409     TCCR1B = (1 << CS11) | (1 << CS10);
000990 e0e3      	LDI  R30,LOW(3)
000991 bdee      	OUT  0x2E,R30
                 ; 0000 040A     TCNT1 = 0x00; // Reset timer
000992 e0e0      	LDI  R30,LOW(0)
000993 e0f0      	LDI  R31,HIGH(0)
000994 bdfd      	OUT  0x2C+1,R31
000995 bdec      	OUT  0x2C,R30
                 ; 0000 040B 
                 ; 0000 040C     // Wait for falling edge on Echo pin
                 ; 0000 040D     for (i = 0; i < 600000; i++)
                +
000996 83ec     +STD Y + 4 , R30
000997 83ed     +STD Y + 4 + 1 , R30
000998 83ee     +STD Y + 4 + 2 , R30
000999 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x136:
00099a 940e 0baf 	CALL SUBOPT_0x23
00099c f470      	BRSH _0x137
                 ; 0000 040E     {
                 ; 0000 040F         if (!(US_PIN & (1 << US_ECHO_POS)))
00099d 9b86      	SBIS 0x10,6
                 ; 0000 0410             break; // Falling edge detected
00099e c00c      	RJMP _0x137
                 ; 0000 0411         if (TCNT1 > 60000)
00099f b5ec      	IN   R30,0x2C
0009a0 b5fd      	IN   R31,0x2C+1
0009a1 36e1      	CPI  R30,LOW(0xEA61)
0009a2 eeaa      	LDI  R26,HIGH(0xEA61)
0009a3 07fa      	CPC  R31,R26
0009a4 f018      	BRLO _0x139
                 ; 0000 0412             return US_NO_OBSTACLE; // No obstacle in range
0009a5 efee      	LDI  R30,LOW(65534)
0009a6 efff      	LDI  R31,HIGH(65534)
0009a7 c01c      	RJMP _0x20A0003
                 ; 0000 0413     }
                 _0x139:
0009a8 940e 0bbb 	CALL SUBOPT_0x24
0009aa cfef      	RJMP _0x136
                 _0x137:
                 ; 0000 0414 
                 ; 0000 0415     result = TCNT1; // Capture timer value
0009ab b5ec      	IN   R30,0x2C
0009ac b5fd      	IN   R31,0x2C+1
0009ad 2766      	CLR  R22
0009ae 2777      	CLR  R23
0009af 940e 0d7f 	CALL __PUTD1S0
                 ; 0000 0416     TCCR1B = 0x00;  // Stop timer
0009b1 e0e0      	LDI  R30,LOW(0)
0009b2 bdee      	OUT  0x2E,R30
                 ; 0000 0417 
                 ; 0000 0418     if (result > 60000)
0009b3 940e 0d7a 	CALL __GETD2S0
                +
0009b5 36a1     +CPI R26 , LOW ( 0xEA61 )
0009b6 eeea     +LDI R30 , HIGH ( 0xEA61 )
0009b7 07be     +CPC R27 , R30
0009b8 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
0009b9 078e     +CPC R24 , R30
0009ba e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
0009bb 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
0009bc f018      	BRLO _0x13A
                 ; 0000 0419         return US_NO_OBSTACLE;
0009bd efee      	LDI  R30,LOW(65534)
0009be efff      	LDI  R31,HIGH(65534)
0009bf c004      	RJMP _0x20A0003
                 ; 0000 041A     else
                 _0x13A:
                 ; 0000 041B         return (result >> 1); // Return the measured pulse width
0009c0 940e 0d75 	CALL __GETD1S0
0009c2 940e 0d61 	CALL __LSRD1
                 ; 0000 041C }
                 _0x20A0003:
0009c4 9628      	ADIW R28,8
0009c5 9508      	RET
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 041F {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 0420     char numberString[16];
                 ; 0000 0421     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 0422     int distance, previous_distance = -1;
                 ; 0000 0423     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0424 
                 ; 0000 0425     lcdCommand(0x01);
0009c6 9760      	SBIW R28,16
0009c7 940e 0d84 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
0009c9 ef4f     +LDI R20 , LOW ( - 1 )
0009ca ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
0009cb 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0426     lcd_gotoxy(1, 1);
                 ; 0000 0427     lcd_print("Distance: ");
                +
0009cd e3a5     +LDI R26 , LOW ( _0x13D + ( 0 ) )
0009ce e0b7     +LDI R27 , HIGH ( _0x13D + ( 0 ) )
                 	__POINTW2MN _0x13D,0
0009cf de3c      	RCALL _lcd_print
                 ; 0000 0428 
                 ; 0000 0429     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x13E:
0009d0 940e 0b43 	CALL SUBOPT_0x13
0009d2 f009      	BREQ PC+2
0009d3 c072      	RJMP _0x140
                 ; 0000 042A     {
                 ; 0000 042B         HCSR04Trigger();              // Send trigger pulse
0009d4 df9e      	RCALL _HCSR04Trigger
                 ; 0000 042C         pulseWidth = GetPulseWidth(); // Measure echo pulse
0009d5 dfa3      	RCALL _GetPulseWidth
0009d6 018f      	MOVW R16,R30
                 ; 0000 042D 
                 ; 0000 042E         if (pulseWidth == US_ERROR)
0009d7 efef      	LDI  R30,LOW(65535)
0009d8 efff      	LDI  R31,HIGH(65535)
0009d9 17e0      	CP   R30,R16
0009da 07f1      	CPC  R31,R17
0009db f429      	BRNE _0x141
                 ; 0000 042F         {
                 ; 0000 0430             lcdCommand(0x01);
0009dc 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0431             lcd_gotoxy(1, 1);
                 ; 0000 0432             lcd_print("Error"); // Display error message
                +
0009de e4a0     +LDI R26 , LOW ( _0x13D + ( 11 ) )
0009df e0b7     +LDI R27 , HIGH ( _0x13D + ( 11 ) )
                 	__POINTW2MN _0x13D,11
0009e0 c05f      	RJMP _0x151
                 ; 0000 0433         }
                 ; 0000 0434         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x141:
0009e1 efee      	LDI  R30,LOW(65534)
0009e2 efff      	LDI  R31,HIGH(65534)
0009e3 17e0      	CP   R30,R16
0009e4 07f1      	CPC  R31,R17
0009e5 f429      	BRNE _0x143
                 ; 0000 0435         {
                 ; 0000 0436             lcdCommand(0x01);
0009e6 940e 0ad5 	CALL SUBOPT_0x1
                 ; 0000 0437             lcd_gotoxy(1, 1);
                 ; 0000 0438             lcd_print("No Obstacle"); // Display no obstacle message
                +
0009e8 e4a6     +LDI R26 , LOW ( _0x13D + ( 17 ) )
0009e9 e0b7     +LDI R27 , HIGH ( _0x13D + ( 17 ) )
                 	__POINTW2MN _0x13D,17
0009ea c055      	RJMP _0x151
                 ; 0000 0439         }
                 ; 0000 043A         else
                 _0x143:
                 ; 0000 043B         {
                 ; 0000 043C             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
0009eb 01f8      	MOVW R30,R16
0009ec 2766      	CLR  R22
0009ed 2777      	CLR  R23
0009ee 940e 0c38 	CALL __CDF1
                +
0009f0 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
0009f1 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
0009f2 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
0009f3 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
0009f4 940e 0cbb 	CALL __MULF12
0009f6 01df      	MOVW R26,R30
0009f7 01cb      	MOVW R24,R22
                +
0009f8 e0e0     +LDI R30 , LOW ( 0x40000000 )
0009f9 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0009fa e060     +LDI R22 , BYTE3 ( 0x40000000 )
0009fb e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0009fc 940e 0d09 	CALL __DIVF21
                +
0009fe e0a0     +LDI R26 , LOW ( 0x3F000000 )
0009ff e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000a00 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000a01 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000a02 940e 0c6b 	CALL __ADDF12
000a04 940e 0c01 	CALL __CFD1
000a06 019f      	MOVW R18,R30
                 ; 0000 043D 
                 ; 0000 043E             if (distance != previous_distance)
                +
000a07 1742     +CP R20 , R18
000a08 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000a09 f089      	BREQ _0x145
                 ; 0000 043F             {
                 ; 0000 0440                 previous_distance = distance;
000a0a 01a9      	MOVW R20,R18
                 ; 0000 0441                 // Display distance on LCD
                 ; 0000 0442                 itoa(distance, numberString); // Convert distance to string
000a0b 933a      	ST   -Y,R19
000a0c 932a      	ST   -Y,R18
000a0d 01de      	MOVW R26,R28
000a0e 9618      	ADIW R26,8
000a0f 940e 0a6d 	CALL _itoa
                 ; 0000 0443                 lcd_gotoxy(11, 1);
000a11 e0eb      	LDI  R30,LOW(11)
000a12 93ea      	ST   -Y,R30
000a13 e0a1      	LDI  R26,LOW(1)
000a14 dddf      	RCALL _lcd_gotoxy
                 ; 0000 0444                 lcd_print(numberString);
000a15 01de      	MOVW R26,R28
000a16 9616      	ADIW R26,6
000a17 ddf4      	RCALL _lcd_print
                 ; 0000 0445                 lcd_print(" cm ");
                +
000a18 e5a2     +LDI R26 , LOW ( _0x13D + ( 29 ) )
000a19 e0b7     +LDI R27 , HIGH ( _0x13D + ( 29 ) )
                 	__POINTW2MN _0x13D,29
000a1a ddf1      	RCALL _lcd_print
                 ; 0000 0446             }
                 ; 0000 0447             // Counting logic based on distance
                 ; 0000 0448             if (distance < 6)
                 _0x145:
                +
000a1b 3026     +CPI R18 , LOW ( 6 )
000a1c e0e0     +LDI R30 , HIGH ( 6 )
000a1d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000a1e f40c      	BRGE _0x146
                 ; 0000 0449             {
                 ; 0000 044A                 US_count++; // Increment count if distance is below threshold
000a1f 9463      	INC  R6
                 ; 0000 044B             }
                 ; 0000 044C 
                 ; 0000 044D             // Update count on LCD only if it changes
                 ; 0000 044E             if (US_count != previous_count)
                 _0x146:
000a20 91e0 078f 	LDS  R30,_previous_count_S0000014000
000a22 91f0 0790 	LDS  R31,_previous_count_S0000014000+1
000a24 2da6      	MOV  R26,R6
000a25 e0b0      	LDI  R27,0
000a26 17ea      	CP   R30,R26
000a27 07fb      	CPC  R31,R27
000a28 f0c1      	BREQ _0x147
                 ; 0000 044F             {
                 ; 0000 0450                 previous_count = US_count;
000a29 2de6      	MOV  R30,R6
000a2a e0f0      	LDI  R31,0
000a2b 93e0 078f 	STS  _previous_count_S0000014000,R30
000a2d 93f0 0790 	STS  _previous_count_S0000014000+1,R31
                 ; 0000 0451                 lcd_gotoxy(1, 2); // Move to second line
000a2f e0e1      	LDI  R30,LOW(1)
000a30 93ea      	ST   -Y,R30
000a31 e0a2      	LDI  R26,LOW(2)
000a32 ddc1      	RCALL _lcd_gotoxy
                 ; 0000 0452                 itoa(US_count, numberString);
000a33 2de6      	MOV  R30,R6
000a34 e0f0      	LDI  R31,0
000a35 93fa      	ST   -Y,R31
000a36 93ea      	ST   -Y,R30
000a37 01de      	MOVW R26,R28
000a38 9618      	ADIW R26,8
000a39 940e 0a6d 	CALL _itoa
                 ; 0000 0453                 lcd_print("Count: ");
                +
000a3b e5a7     +LDI R26 , LOW ( _0x13D + ( 34 ) )
000a3c e0b7     +LDI R27 , HIGH ( _0x13D + ( 34 ) )
                 	__POINTW2MN _0x13D,34
000a3d ddce      	RCALL _lcd_print
                 ; 0000 0454                 lcd_print(numberString);
000a3e 01de      	MOVW R26,R28
000a3f 9616      	ADIW R26,6
                 _0x151:
000a40 ddcb      	RCALL _lcd_print
                 ; 0000 0455             }
                 ; 0000 0456         }
                 _0x147:
                 ; 0000 0457         delay_ms(100);
000a41 e6a4      	LDI  R26,LOW(100)
000a42 e0b0      	LDI  R27,0
000a43 940e 0bc8 	CALL _delay_ms
                 ; 0000 0458     }
000a45 cf8a      	RJMP _0x13E
                 _0x140:
                 ; 0000 0459 }
000a46 940e 0d8b 	CALL __LOADLOCR6
000a48 9666      	ADIW R28,22
000a49 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x13D:
000735           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 045C {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 045D     unsigned int hash = 0;
                 ; 0000 045E     while (*str)
000a4a 93ba      	ST   -Y,R27
000a4b 93aa      	ST   -Y,R26
000a4c 931a      	ST   -Y,R17
000a4d 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000a4e e000     +LDI R16 , LOW ( 0 )
000a4f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x148:
000a50 81aa      	LDD  R26,Y+2
000a51 81bb      	LDD  R27,Y+2+1
000a52 91ec      	LD   R30,X
000a53 30e0      	CPI  R30,0
000a54 f099      	BREQ _0x14A
                 ; 0000 045F     {
                 ; 0000 0460         hash = (hash * 31) + *str; // A basic hash formula
                +
000a55 e1af     +LDI R26 , 31
000a56 9fa0     +MUL R26 , R16
000a57 01f0     +MOVW R30 , R0
000a58 9fa1     +MUL R26 , R17
000a59 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000a5a 010f      	MOVW R0,R30
000a5b 81aa      	LDD  R26,Y+2
000a5c 81bb      	LDD  R27,Y+2+1
000a5d 91ec      	LD   R30,X
000a5e e0f0      	LDI  R31,0
000a5f 0de0      	ADD  R30,R0
000a60 1df1      	ADC  R31,R1
000a61 018f      	MOVW R16,R30
                 ; 0000 0461         str++;
000a62 81ea      	LDD  R30,Y+2
000a63 81fb      	LDD  R31,Y+2+1
000a64 9631      	ADIW R30,1
000a65 83ea      	STD  Y+2,R30
000a66 83fb      	STD  Y+2+1,R31
                 ; 0000 0462     }
000a67 cfe8      	RJMP _0x148
                 _0x14A:
                 ; 0000 0463     return hash;
000a68 01f8      	MOVW R30,R16
000a69 8119      	LDD  R17,Y+1
000a6a 8108      	LDD  R16,Y+0
                 _0x20A0002:
000a6b 9624      	ADIW R28,4
000a6c 9508      	RET
                 ; 0000 0464 }
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000a6d 93ba      	ST   -Y,R27
000a6e 93aa      	ST   -Y,R26
000a6f 91a9          ld   r26,y+
000a70 91b9          ld   r27,y+
000a71 91e9          ld   r30,y+
000a72 91f9          ld   r31,y+
000a73 9630          adiw r30,0
000a74 f42a          brpl __itoa0
000a75 95e0          com  r30
000a76 95f0          com  r31
000a77 9631          adiw r30,1
000a78 e26d          ldi  r22,'-'
000a79 936d          st   x+,r22
                 __itoa0:
000a7a 94e8          clt
000a7b e180          ldi  r24,low(10000)
000a7c e297          ldi  r25,high(10000)
000a7d d00d          rcall __itoa1
000a7e ee88          ldi  r24,low(1000)
000a7f e093          ldi  r25,high(1000)
000a80 d00a          rcall __itoa1
000a81 e684          ldi  r24,100
000a82 2799          clr  r25
000a83 d007          rcall __itoa1
000a84 e08a          ldi  r24,10
000a85 d005          rcall __itoa1
000a86 2f6e          mov  r22,r30
000a87 d010          rcall __itoa5
000a88 2766          clr  r22
000a89 936c          st   x,r22
000a8a 9508          ret
                 
                 __itoa1:
000a8b 2766          clr	 r22
                 __itoa2:
000a8c 17e8          cp   r30,r24
000a8d 07f9          cpc  r31,r25
000a8e f020          brlo __itoa3
000a8f 9563          inc  r22
000a90 1be8          sub  r30,r24
000a91 0bf9          sbc  r31,r25
000a92 f7c9          brne __itoa2
                 __itoa3:
000a93 2366          tst  r22
000a94 f411          brne __itoa4
000a95 f016          brts __itoa5
000a96 9508          ret
                 __itoa4:
000a97 9468          set
                 __itoa5:
000a98 5d60          subi r22,-0x30
000a99 936d          st   x+,r22
000a9a 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000a9b 93ba      	ST   -Y,R27
000a9c 93aa      	ST   -Y,R26
000a9d 81b9          ldd  r27,y+1
000a9e 81a8          ld   r26,y
000a9f 9610          adiw r26,0
000aa0 f031          breq memset1
000aa1 81fc          ldd  r31,y+4
000aa2 81eb          ldd  r30,y+3
000aa3 816a          ldd  r22,y+2
                 memset0:
000aa4 9361          st   z+,r22
000aa5 9711          sbiw r26,1
000aa6 f7e9          brne memset0
                 memset1:
000aa7 81eb          ldd  r30,y+3
000aa8 81fc          ldd  r31,y+4
                 _0x20A0001:
000aa9 9625      	ADIW R28,5
000aaa 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000aab 93ba      	ST   -Y,R27
000aac 93aa      	ST   -Y,R26
000aad 91a9          ld   r26,y+
000aae 91b9          ld   r27,y+
000aaf 27ee          clr  r30
000ab0 27ff          clr  r31
                 strlen0:
000ab1 916d          ld   r22,x+
000ab2 2366          tst  r22
000ab3 f011          breq strlen1
000ab4 9631          adiw r30,1
000ab5 cffb          rjmp strlen0
                 strlen1:
000ab6 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000ab7 93aa      	ST   -Y,R26
000ab8 2766          clr  r22
000ab9 2777          clr  r23
000aba 9189          ld   r24,y+
000abb 91e9          ld   r30,y+
000abc 91f9          ld   r31,y+
000abd 91a9          ld   r26,y+
000abe 91b9          ld   r27,y+
                 strncmp0:
000abf 2388          tst  r24
000ac0 f049          breq strncmp1
000ac1 958a          dec  r24
000ac2 916d          ld   r22,x+
000ac3 9171          ld   r23,z+
000ac4 1767          cp   r22,r23
000ac5 f421          brne strncmp1
000ac6 2366          tst  r22
000ac7 f7b9          brne strncmp0
                 strncmp3:
000ac8 27ee          clr  r30
000ac9 9508          ret
                 strncmp1:
000aca 1b67          sub  r22,r23
000acb f3e1          breq strncmp3
000acc e0e1          ldi  r30,1
000acd f408          brcc strncmp2
000ace 50e2          subi r30,2
                 strncmp2:
000acf 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
00075f           	.BYTE 0x10
                 _buffer:
00076f           	.BYTE 0x20
                 _previous_count_S0000014000:
00078f           	.BYTE 0x2
                 __seed_G100:
000791           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000ad0 e0e1      	LDI  R30,LOW(1)
000ad1 e0f0      	LDI  R31,HIGH(1)
000ad2 15e4      	CP   R30,R4
000ad3 05f5      	CPC  R31,R5
000ad4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 32 TIMES, CODE SIZE REDUCTION:183 WORDS
                 SUBOPT_0x1:
000ad5 e0a1      	LDI  R26,LOW(1)
000ad6 940e 07c3 	CALL _lcdCommand
000ad8 e0e1      	LDI  R30,LOW(1)
000ad9 93ea      	ST   -Y,R30
000ada e0a1      	LDI  R26,LOW(1)
000adb 940c 07f4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x2:
000add 940e 080c 	CALL _lcd_print
000adf e0e1      	LDI  R30,LOW(1)
000ae0 93ea      	ST   -Y,R30
000ae1 e0a2      	LDI  R26,LOW(2)
000ae2 940c 07f4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000ae4 e0e2      	LDI  R30,LOW(2)
000ae5 e0f0      	LDI  R31,HIGH(2)
000ae6 15e4      	CP   R30,R4
000ae7 05f5      	CPC  R31,R5
000ae8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
000ae9 e0af      	LDI  R26,LOW(15)
000aea 940e 07c3 	CALL _lcdCommand
                +
000aec e880     +LDI R24 , LOW ( 3200 )
000aed e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000aee 9701     +SBIW R24 , 1
000aef f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000af0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000af1 e0e3      	LDI  R30,LOW(3)
000af2 e0f0      	LDI  R31,HIGH(3)
000af3 15e4      	CP   R30,R4
000af4 05f5      	CPC  R31,R5
000af5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
000af6 e880     +LDI R24 , LOW ( 3200 )
000af7 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000af8 9701     +SBIW R24 , 1
000af9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000afa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:35 WORDS
                 SUBOPT_0x7:
000afb e6af      	LDI  R26,LOW(_buffer)
000afc e0b7      	LDI  R27,HIGH(_buffer)
000afd 940c 0aab 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000aff e6af      	LDI  R26,LOW(_buffer)
000b00 e0b7      	LDI  R27,HIGH(_buffer)
000b01 940c 080c 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:109 WORDS
                 SUBOPT_0x9:
000b03 e6ef      	LDI  R30,LOW(_buffer)
000b04 e0f7      	LDI  R31,HIGH(_buffer)
000b05 93fa      	ST   -Y,R31
000b06 93ea      	ST   -Y,R30
000b07 e0e0      	LDI  R30,LOW(0)
000b08 93ea      	ST   -Y,R30
000b09 e2a0      	LDI  R26,LOW(32)
000b0a e0b0      	LDI  R27,0
000b0b 940c 0a9b 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000b0d e0e4      	LDI  R30,LOW(4)
000b0e e0f0      	LDI  R31,HIGH(4)
000b0f 15e4      	CP   R30,R4
000b10 05f5      	CPC  R31,R5
000b11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000b12 e0e5      	LDI  R30,LOW(5)
000b13 e0f0      	LDI  R31,HIGH(5)
000b14 15e4      	CP   R30,R4
000b15 05f5      	CPC  R31,R5
000b16 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
000b17 01f8      	MOVW R30,R16
000b18 9631      	ADIW R30,1
000b19 940e 0d5a 	CALL __LSLW3
000b1b 0fe2      	ADD  R30,R18
000b1c 1ff3      	ADC  R31,R19
000b1d 01df      	MOVW R26,R30
000b1e 940c 08c3 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000b20 e0a0      	LDI  R26,LOW(0)
000b21 e0b0      	LDI  R27,0
000b22 940c 08c3 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
000b24 e0ad      	LDI  R26,LOW(13)
000b25 940e 08da 	CALL _USART_Transmit
000b27 e0ad      	LDI  R26,LOW(13)
000b28 940e 08da 	CALL _USART_Transmit
000b2a efa4      	LDI  R26,LOW(500)
000b2b e0b1      	LDI  R27,HIGH(500)
000b2c 940c 0bc8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xF:
000b2e 940e 080c 	CALL _lcd_print
000b30 eda0      	LDI  R26,LOW(2000)
000b31 e0b7      	LDI  R27,HIGH(2000)
000b32 940c 0bc8 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000b34 e0e7      	LDI  R30,LOW(7)
000b35 e0f0      	LDI  R31,HIGH(7)
000b36 15e4      	CP   R30,R4
000b37 05f5      	CPC  R31,R5
000b38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000b39 e0e8      	LDI  R30,LOW(8)
000b3a e0f0      	LDI  R31,HIGH(8)
000b3b 15e4      	CP   R30,R4
000b3c 05f5      	CPC  R31,R5
000b3d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000b3e e0e9      	LDI  R30,LOW(9)
000b3f e0f0      	LDI  R31,HIGH(9)
000b40 15e4      	CP   R30,R4
000b41 05f5      	CPC  R31,R5
000b42 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000b43 e0ea      	LDI  R30,LOW(10)
000b44 e0f0      	LDI  R31,HIGH(10)
000b45 15e4      	CP   R30,R4
000b46 05f5      	CPC  R31,R5
000b47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
000b48 e0eb      	LDI  R30,LOW(11)
000b49 e0f0      	LDI  R31,HIGH(11)
000b4a 15e4      	CP   R30,R4
000b4b 05f5      	CPC  R31,R5
000b4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x15:
000b4d 940e 07c3 	CALL _lcdCommand
000b4f cfa6      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000b50 bbe5      	OUT  0x15,R30
000b51 b3e3      	IN   R30,0x13
000b52 70ef      	ANDI R30,LOW(0xF)
000b53 2f1e      	MOV  R17,R30
000b54 301f      	CPI  R17,15
000b55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 39 TIMES, CODE SIZE REDUCTION:339 WORDS
                 SUBOPT_0x17:
000b56 2fe0      	MOV  R30,R16
000b57 e5af      	LDI  R26,LOW(_keypad)
000b58 e0b7      	LDI  R27,HIGH(_keypad)
000b59 e0f0      	LDI  R31,0
000b5a 940e 0d5c 	CALL __LSLW2
000b5c 0fae      	ADD  R26,R30
000b5d 1fbf      	ADC  R27,R31
000b5e 27ee      	CLR  R30
000b5f 0fa3      	ADD  R26,R19
000b60 1fbe      	ADC  R27,R30
000b61 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
000b62 59e1      	SUBI R30,LOW(-_buffer)
000b63 4ff8      	SBCI R31,HIGH(-_buffer)
000b64 010f      	MOVW R0,R30
000b65 cff0      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
000b66 91ec      	LD   R30,X
000b67 01d0      	MOVW R26,R0
000b68 93ec      	ST   X,R30
000b69 cf91      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1A:
                +
000b6a 59e0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000b6b 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000b6c e0a0      	LDI  R26,LOW(0)
000b6d 83a0      	STD  Z+0,R26
000b6e cfe7      	RJMP SUBOPT_0x17
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1B:
000b6f 2fe5      	MOV  R30,R21
000b70 e0f0      	LDI  R31,0
000b71 9731      	SBIW R30,1
000b72 59e1      	SUBI R30,LOW(-_buffer)
000b73 4ff8      	SBCI R31,HIGH(-_buffer)
000b74 e0a0      	LDI  R26,LOW(0)
000b75 83a0      	STD  Z+0,R26
000b76 e1a0      	LDI  R26,LOW(16)
000b77 940c 07c3 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1C:
000b79 940e 080c 	CALL _lcd_print
000b7b e1a0      	LDI  R26,LOW(16)
000b7c 940c 07c3 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000b7e e0f0      	LDI  R31,0
000b7f 9631      	ADIW R30,1
000b80 940e 0d5a 	CALL __LSLW3
000b82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1E:
000b83 9721      	SBIW R28,1
000b84 940e 08f7 	CALL _search_student_code
000b86 83e8      	ST   Y,R30
000b87 81a8      	LD   R26,Y
000b88 30a1      	CPI  R26,LOW(0x1)
000b89 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1F:
000b8a 93aa      	ST   -Y,R26
000b8b b3e8      	IN   R30,0x18
000b8c 70ef      	ANDI R30,LOW(0xF)
000b8d 2fae      	MOV  R26,R30
000b8e 81e8      	LD   R30,Y
000b8f 7fe0      	ANDI R30,LOW(0xF0)
000b90 2bea      	OR   R30,R26
000b91 bbe8      	OUT  0x18,R30
000b92 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000b93 98c1      	CBI  0x18,1
000b94 9ac2      	SBI  0x18,2
                +
000b95 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000b96 958a     +DEC R24
000b97 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000b98 98c2      	CBI  0x18,2
000b99 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x21:
000b9a b3e8      	IN   R30,0x18
000b9b 70ef      	ANDI R30,LOW(0xF)
000b9c 2fae      	MOV  R26,R30
000b9d 81e8      	LD   R30,Y
000b9e 95e2      	SWAP R30
000b9f 7fe0      	ANDI R30,0xF0
000ba0 2bea      	OR   R30,R26
000ba1 bbe8      	OUT  0x18,R30
000ba2 9ac2      	SBI  0x18,2
                +
000ba3 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000ba4 958a     +DEC R24
000ba5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000ba6 98c2      	CBI  0x18,2
000ba7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
000ba8 81ea      	LDD  R30,Y+2
000ba9 70f0      	ANDI R31,HIGH(0x0)
000baa 70e3      	ANDI R30,LOW(0x3)
000bab bbef      	OUT  0x1F,R30
000bac 81e9      	LDD  R30,Y+1
000bad bbee      	OUT  0x1E,R30
000bae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x23:
                +
000baf 81ac     +LDD R26 , Y + 4
000bb0 81bd     +LDD R27 , Y + 4 + 1
000bb1 818e     +LDD R24 , Y + 4 + 2
000bb2 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000bb3 3ca0     +CPI R26 , LOW ( 0x927C0 )
000bb4 e2e7     +LDI R30 , HIGH ( 0x927C0 )
000bb5 07be     +CPC R27 , R30
000bb6 e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000bb7 078e     +CPC R24 , R30
000bb8 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000bb9 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000bba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x24:
                +
000bbb 81ec     +LDD R30 , Y + 4
000bbc 81fd     +LDD R31 , Y + 4 + 1
000bbd 816e     +LDD R22 , Y + 4 + 2
000bbe 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000bbf 5fef     +SUBI R30 , LOW ( - 1 )
000bc0 4fff     +SBCI R31 , HIGH ( - 1 )
000bc1 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000bc2 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000bc3 83ec     +STD Y + 4 , R30
000bc4 83fd     +STD Y + 4 + 1 , R31
000bc5 836e     +STD Y + 4 + 2 , R22
000bc6 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000bc7 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000bc8 9610      	adiw r26,0
000bc9 f039      	breq __delay_ms1
                 __delay_ms0:
000bca 95a8      	wdr
                +
000bcb ed80     +LDI R24 , LOW ( 0x7D0 )
000bcc e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000bcd 9701     +SBIW R24 , 1
000bce f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000bcf 9711      	sbiw r26,1
000bd0 f7c9      	brne __delay_ms0
                 __delay_ms1:
000bd1 9508      	ret
                 
                 __ROUND_REPACK:
000bd2 2355      	TST  R21
000bd3 f442      	BRPL __REPACK
000bd4 3850      	CPI  R21,0x80
000bd5 f411      	BRNE __ROUND_REPACK0
000bd6 ffe0      	SBRS R30,0
000bd7 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000bd8 9631      	ADIW R30,1
000bd9 1f69      	ADC  R22,R25
000bda 1f79      	ADC  R23,R25
000bdb f06b      	BRVS __REPACK1
                 
                 __REPACK:
000bdc e850      	LDI  R21,0x80
000bdd 2757      	EOR  R21,R23
000bde f411      	BRNE __REPACK0
000bdf 935f      	PUSH R21
000be0 c0c8      	RJMP __ZERORES
                 __REPACK0:
000be1 3f5f      	CPI  R21,0xFF
000be2 f031      	BREQ __REPACK1
000be3 0f66      	LSL  R22
000be4 0c00      	LSL  R0
000be5 9557      	ROR  R21
000be6 9567      	ROR  R22
000be7 2f75      	MOV  R23,R21
000be8 9508      	RET
                 __REPACK1:
000be9 935f      	PUSH R21
000bea 2000      	TST  R0
000beb f00a      	BRMI __REPACK2
000bec c0c8      	RJMP __MAXRES
                 __REPACK2:
000bed c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000bee e850      	LDI  R21,0x80
000bef 2e19      	MOV  R1,R25
000bf0 2215      	AND  R1,R21
000bf1 0f88      	LSL  R24
000bf2 1f99      	ROL  R25
000bf3 2795      	EOR  R25,R21
000bf4 0f55      	LSL  R21
000bf5 9587      	ROR  R24
                 
                 __UNPACK1:
000bf6 e850      	LDI  R21,0x80
000bf7 2e07      	MOV  R0,R23
000bf8 2205      	AND  R0,R21
000bf9 0f66      	LSL  R22
000bfa 1f77      	ROL  R23
000bfb 2775      	EOR  R23,R21
000bfc 0f55      	LSL  R21
000bfd 9567      	ROR  R22
000bfe 9508      	RET
                 
                 __CFD1U:
000bff 9468      	SET
000c00 c001      	RJMP __CFD1U0
                 __CFD1:
000c01 94e8      	CLT
                 __CFD1U0:
000c02 935f      	PUSH R21
000c03 dff2      	RCALL __UNPACK1
000c04 3870      	CPI  R23,0x80
000c05 f018      	BRLO __CFD10
000c06 3f7f      	CPI  R23,0xFF
000c07 f408      	BRCC __CFD10
000c08 c0a0      	RJMP __ZERORES
                 __CFD10:
000c09 e156      	LDI  R21,22
000c0a 1b57      	SUB  R21,R23
000c0b f4aa      	BRPL __CFD11
000c0c 9551      	NEG  R21
000c0d 3058      	CPI  R21,8
000c0e f40e      	BRTC __CFD19
000c0f 3059      	CPI  R21,9
                 __CFD19:
000c10 f030      	BRLO __CFD17
000c11 efef      	SER  R30
000c12 efff      	SER  R31
000c13 ef6f      	SER  R22
000c14 e77f      	LDI  R23,0x7F
000c15 f977      	BLD  R23,7
000c16 c01a      	RJMP __CFD15
                 __CFD17:
000c17 2777      	CLR  R23
000c18 2355      	TST  R21
000c19 f0b9      	BREQ __CFD15
                 __CFD18:
000c1a 0fee      	LSL  R30
000c1b 1fff      	ROL  R31
000c1c 1f66      	ROL  R22
000c1d 1f77      	ROL  R23
000c1e 955a      	DEC  R21
000c1f f7d1      	BRNE __CFD18
000c20 c010      	RJMP __CFD15
                 __CFD11:
000c21 2777      	CLR  R23
                 __CFD12:
000c22 3058      	CPI  R21,8
000c23 f028      	BRLO __CFD13
000c24 2fef      	MOV  R30,R31
000c25 2ff6      	MOV  R31,R22
000c26 2f67      	MOV  R22,R23
000c27 5058      	SUBI R21,8
000c28 cff9      	RJMP __CFD12
                 __CFD13:
000c29 2355      	TST  R21
000c2a f031      	BREQ __CFD15
                 __CFD14:
000c2b 9576      	LSR  R23
000c2c 9567      	ROR  R22
000c2d 95f7      	ROR  R31
000c2e 95e7      	ROR  R30
000c2f 955a      	DEC  R21
000c30 f7d1      	BRNE __CFD14
                 __CFD15:
000c31 2000      	TST  R0
000c32 f40a      	BRPL __CFD16
000c33 d11e      	RCALL __ANEGD1
                 __CFD16:
000c34 915f      	POP  R21
000c35 9508      	RET
                 
                 __CDF1U:
000c36 9468      	SET
000c37 c001      	RJMP __CDF1U0
                 __CDF1:
000c38 94e8      	CLT
                 __CDF1U0:
000c39 9730      	SBIW R30,0
000c3a 4060      	SBCI R22,0
000c3b 4070      	SBCI R23,0
000c3c f0b1      	BREQ __CDF10
000c3d 2400      	CLR  R0
000c3e f026      	BRTS __CDF11
000c3f 2377      	TST  R23
000c40 f412      	BRPL __CDF11
000c41 9400      	COM  R0
000c42 d10f      	RCALL __ANEGD1
                 __CDF11:
000c43 2e17      	MOV  R1,R23
000c44 e17e      	LDI  R23,30
000c45 2011      	TST  R1
                 __CDF12:
000c46 f032      	BRMI __CDF13
000c47 957a      	DEC  R23
000c48 0fee      	LSL  R30
000c49 1fff      	ROL  R31
000c4a 1f66      	ROL  R22
000c4b 1c11      	ROL  R1
000c4c cff9      	RJMP __CDF12
                 __CDF13:
000c4d 2fef      	MOV  R30,R31
000c4e 2ff6      	MOV  R31,R22
000c4f 2d61      	MOV  R22,R1
000c50 935f      	PUSH R21
000c51 df8a      	RCALL __REPACK
000c52 915f      	POP  R21
                 __CDF10:
000c53 9508      	RET
                 
                 __SWAPACC:
000c54 934f      	PUSH R20
000c55 01af      	MOVW R20,R30
000c56 01fd      	MOVW R30,R26
000c57 01da      	MOVW R26,R20
000c58 01ab      	MOVW R20,R22
000c59 01bc      	MOVW R22,R24
000c5a 01ca      	MOVW R24,R20
000c5b 2d40      	MOV  R20,R0
000c5c 2c01      	MOV  R0,R1
000c5d 2e14      	MOV  R1,R20
000c5e 914f      	POP  R20
000c5f 9508      	RET
                 
                 __UADD12:
000c60 0fea      	ADD  R30,R26
000c61 1ffb      	ADC  R31,R27
000c62 1f68      	ADC  R22,R24
000c63 9508      	RET
                 
                 __NEGMAN1:
000c64 95e0      	COM  R30
000c65 95f0      	COM  R31
000c66 9560      	COM  R22
000c67 5fef      	SUBI R30,-1
000c68 4fff      	SBCI R31,-1
000c69 4f6f      	SBCI R22,-1
000c6a 9508      	RET
                 
                 __ADDF12:
000c6b 935f      	PUSH R21
000c6c df81      	RCALL __UNPACK
000c6d 3890      	CPI  R25,0x80
000c6e f139      	BREQ __ADDF129
                 
                 __ADDF120:
000c6f 3870      	CPI  R23,0x80
000c70 f121      	BREQ __ADDF128
                 __ADDF121:
000c71 2f57      	MOV  R21,R23
000c72 1b59      	SUB  R21,R25
000c73 f12b      	BRVS __ADDF1211
000c74 f412      	BRPL __ADDF122
000c75 dfde      	RCALL __SWAPACC
000c76 cffa      	RJMP __ADDF121
                 __ADDF122:
000c77 3158      	CPI  R21,24
000c78 f018      	BRLO __ADDF123
000c79 27aa      	CLR  R26
000c7a 27bb      	CLR  R27
000c7b 2788      	CLR  R24
                 __ADDF123:
000c7c 3058      	CPI  R21,8
000c7d f028      	BRLO __ADDF124
000c7e 2fab      	MOV  R26,R27
000c7f 2fb8      	MOV  R27,R24
000c80 2788      	CLR  R24
000c81 5058      	SUBI R21,8
000c82 cff9      	RJMP __ADDF123
                 __ADDF124:
000c83 2355      	TST  R21
000c84 f029      	BREQ __ADDF126
                 __ADDF125:
000c85 9586      	LSR  R24
000c86 95b7      	ROR  R27
000c87 95a7      	ROR  R26
000c88 955a      	DEC  R21
000c89 f7d9      	BRNE __ADDF125
                 __ADDF126:
000c8a 2d50      	MOV  R21,R0
000c8b 2551      	EOR  R21,R1
000c8c f072      	BRMI __ADDF127
000c8d dfd2      	RCALL __UADD12
000c8e f438      	BRCC __ADDF129
000c8f 9567      	ROR  R22
000c90 95f7      	ROR  R31
000c91 95e7      	ROR  R30
000c92 9573      	INC  R23
000c93 f413      	BRVC __ADDF129
000c94 c020      	RJMP __MAXRES
                 __ADDF128:
000c95 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000c96 df45      	RCALL __REPACK
000c97 915f      	POP  R21
000c98 9508      	RET
                 __ADDF1211:
000c99 f7d8      	BRCC __ADDF128
000c9a cffb      	RJMP __ADDF129
                 __ADDF127:
000c9b 1bea      	SUB  R30,R26
000c9c 0bfb      	SBC  R31,R27
000c9d 0b68      	SBC  R22,R24
000c9e f051      	BREQ __ZERORES
000c9f f410      	BRCC __ADDF1210
000ca0 9400      	COM  R0
000ca1 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000ca2 2366      	TST  R22
000ca3 f392      	BRMI __ADDF129
000ca4 0fee      	LSL  R30
000ca5 1fff      	ROL  R31
000ca6 1f66      	ROL  R22
000ca7 957a      	DEC  R23
000ca8 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000ca9 27ee      	CLR  R30
000caa 27ff      	CLR  R31
000cab 2766      	CLR  R22
000cac 2777      	CLR  R23
000cad 915f      	POP  R21
000cae 9508      	RET
                 
                 __MINRES:
000caf efef      	SER  R30
000cb0 efff      	SER  R31
000cb1 e76f      	LDI  R22,0x7F
000cb2 ef7f      	SER  R23
000cb3 915f      	POP  R21
000cb4 9508      	RET
                 
                 __MAXRES:
000cb5 efef      	SER  R30
000cb6 efff      	SER  R31
000cb7 e76f      	LDI  R22,0x7F
000cb8 e77f      	LDI  R23,0x7F
000cb9 915f      	POP  R21
000cba 9508      	RET
                 
                 __MULF12:
000cbb 935f      	PUSH R21
000cbc df31      	RCALL __UNPACK
000cbd 3870      	CPI  R23,0x80
000cbe f351      	BREQ __ZERORES
000cbf 3890      	CPI  R25,0x80
000cc0 f341      	BREQ __ZERORES
000cc1 2401      	EOR  R0,R1
000cc2 9408      	SEC
000cc3 1f79      	ADC  R23,R25
000cc4 f423      	BRVC __MULF124
000cc5 f31c      	BRLT __ZERORES
                 __MULF125:
000cc6 2000      	TST  R0
000cc7 f33a      	BRMI __MINRES
000cc8 cfec      	RJMP __MAXRES
                 __MULF124:
000cc9 920f      	PUSH R0
000cca 931f      	PUSH R17
000ccb 932f      	PUSH R18
000ccc 933f      	PUSH R19
000ccd 934f      	PUSH R20
000cce 2711      	CLR  R17
000ccf 2722      	CLR  R18
000cd0 2799      	CLR  R25
000cd1 9f68      	MUL  R22,R24
000cd2 01a0      	MOVW R20,R0
000cd3 9f8f      	MUL  R24,R31
000cd4 2d30      	MOV  R19,R0
000cd5 0d41      	ADD  R20,R1
000cd6 1f59      	ADC  R21,R25
000cd7 9f6b      	MUL  R22,R27
000cd8 0d30      	ADD  R19,R0
000cd9 1d41      	ADC  R20,R1
000cda 1f59      	ADC  R21,R25
000cdb 9f8e      	MUL  R24,R30
000cdc d027      	RCALL __MULF126
000cdd 9fbf      	MUL  R27,R31
000cde d025      	RCALL __MULF126
000cdf 9f6a      	MUL  R22,R26
000ce0 d023      	RCALL __MULF126
000ce1 9fbe      	MUL  R27,R30
000ce2 d01d      	RCALL __MULF127
000ce3 9faf      	MUL  R26,R31
000ce4 d01b      	RCALL __MULF127
000ce5 9fae      	MUL  R26,R30
000ce6 0d11      	ADD  R17,R1
000ce7 1f29      	ADC  R18,R25
000ce8 1f39      	ADC  R19,R25
000ce9 1f49      	ADC  R20,R25
000cea 1f59      	ADC  R21,R25
000ceb 2fe3      	MOV  R30,R19
000cec 2ff4      	MOV  R31,R20
000ced 2f65      	MOV  R22,R21
000cee 2f52      	MOV  R21,R18
000cef 914f      	POP  R20
000cf0 913f      	POP  R19
000cf1 912f      	POP  R18
000cf2 911f      	POP  R17
000cf3 900f      	POP  R0
000cf4 2366      	TST  R22
000cf5 f02a      	BRMI __MULF122
000cf6 0f55      	LSL  R21
000cf7 1fee      	ROL  R30
000cf8 1fff      	ROL  R31
000cf9 1f66      	ROL  R22
000cfa c002      	RJMP __MULF123
                 __MULF122:
000cfb 9573      	INC  R23
000cfc f24b      	BRVS __MULF125
                 __MULF123:
000cfd ded4      	RCALL __ROUND_REPACK
000cfe 915f      	POP  R21
000cff 9508      	RET
                 
                 __MULF127:
000d00 0d10      	ADD  R17,R0
000d01 1d21      	ADC  R18,R1
000d02 1f39      	ADC  R19,R25
000d03 c002      	RJMP __MULF128
                 __MULF126:
000d04 0d20      	ADD  R18,R0
000d05 1d31      	ADC  R19,R1
                 __MULF128:
000d06 1f49      	ADC  R20,R25
000d07 1f59      	ADC  R21,R25
000d08 9508      	RET
                 
                 __DIVF21:
000d09 935f      	PUSH R21
000d0a dee3      	RCALL __UNPACK
000d0b 3870      	CPI  R23,0x80
000d0c f421      	BRNE __DIVF210
000d0d 2011      	TST  R1
                 __DIVF211:
000d0e f40a      	BRPL __DIVF219
000d0f cf9f      	RJMP __MINRES
                 __DIVF219:
000d10 cfa4      	RJMP __MAXRES
                 __DIVF210:
000d11 3890      	CPI  R25,0x80
000d12 f409      	BRNE __DIVF218
                 __DIVF217:
000d13 cf95      	RJMP __ZERORES
                 __DIVF218:
000d14 2401      	EOR  R0,R1
000d15 9408      	SEC
000d16 0b97      	SBC  R25,R23
000d17 f41b      	BRVC __DIVF216
000d18 f3d4      	BRLT __DIVF217
000d19 2000      	TST  R0
000d1a cff3      	RJMP __DIVF211
                 __DIVF216:
000d1b 2f79      	MOV  R23,R25
000d1c 931f      	PUSH R17
000d1d 932f      	PUSH R18
000d1e 933f      	PUSH R19
000d1f 934f      	PUSH R20
000d20 2411      	CLR  R1
000d21 2711      	CLR  R17
000d22 2722      	CLR  R18
000d23 2733      	CLR  R19
000d24 2744      	CLR  R20
000d25 2755      	CLR  R21
000d26 e290      	LDI  R25,32
                 __DIVF212:
000d27 17ae      	CP   R26,R30
000d28 07bf      	CPC  R27,R31
000d29 0786      	CPC  R24,R22
000d2a 0741      	CPC  R20,R17
000d2b f030      	BRLO __DIVF213
000d2c 1bae      	SUB  R26,R30
000d2d 0bbf      	SBC  R27,R31
000d2e 0b86      	SBC  R24,R22
000d2f 0b41      	SBC  R20,R17
000d30 9408      	SEC
000d31 c001      	RJMP __DIVF214
                 __DIVF213:
000d32 9488      	CLC
                 __DIVF214:
000d33 1f55      	ROL  R21
000d34 1f22      	ROL  R18
000d35 1f33      	ROL  R19
000d36 1c11      	ROL  R1
000d37 1faa      	ROL  R26
000d38 1fbb      	ROL  R27
000d39 1f88      	ROL  R24
000d3a 1f44      	ROL  R20
000d3b 959a      	DEC  R25
000d3c f751      	BRNE __DIVF212
000d3d 01f9      	MOVW R30,R18
000d3e 2d61      	MOV  R22,R1
000d3f 914f      	POP  R20
000d40 913f      	POP  R19
000d41 912f      	POP  R18
000d42 911f      	POP  R17
000d43 2366      	TST  R22
000d44 f032      	BRMI __DIVF215
000d45 0f55      	LSL  R21
000d46 1fee      	ROL  R30
000d47 1fff      	ROL  R31
000d48 1f66      	ROL  R22
000d49 957a      	DEC  R23
000d4a f243      	BRVS __DIVF217
                 __DIVF215:
000d4b de86      	RCALL __ROUND_REPACK
000d4c 915f      	POP  R21
000d4d 9508      	RET
                 
                 __ANEGW1:
000d4e 95f1      	NEG  R31
000d4f 95e1      	NEG  R30
000d50 40f0      	SBCI R31,0
000d51 9508      	RET
                 
                 __ANEGD1:
000d52 95f0      	COM  R31
000d53 9560      	COM  R22
000d54 9570      	COM  R23
000d55 95e1      	NEG  R30
000d56 4fff      	SBCI R31,-1
000d57 4f6f      	SBCI R22,-1
000d58 4f7f      	SBCI R23,-1
000d59 9508      	RET
                 
                 __LSLW3:
000d5a 0fee      	LSL  R30
000d5b 1fff      	ROL  R31
                 __LSLW2:
000d5c 0fee      	LSL  R30
000d5d 1fff      	ROL  R31
000d5e 0fee      	LSL  R30
000d5f 1fff      	ROL  R31
000d60 9508      	RET
                 
                 __LSRD1:
000d61 9576      	LSR  R23
000d62 9567      	ROR  R22
000d63 95f7      	ROR  R31
000d64 95e7      	ROR  R30
000d65 9508      	RET
                 
                 __CWD1:
000d66 2f6f      	MOV  R22,R31
000d67 0f66      	ADD  R22,R22
000d68 0b66      	SBC  R22,R22
000d69 2f76      	MOV  R23,R22
000d6a 9508      	RET
                 
                 __MANDW12:
000d6b 94e8      	CLT
000d6c fff7      	SBRS R31,7
000d6d c002      	RJMP __MANDW121
000d6e dfdf      	RCALL __ANEGW1
000d6f 9468      	SET
                 __MANDW121:
000d70 23ea      	AND  R30,R26
000d71 23fb      	AND  R31,R27
000d72 f40e      	BRTC __MANDW122
000d73 dfda      	RCALL __ANEGW1
                 __MANDW122:
000d74 9508      	RET
                 
                 __GETD1S0:
000d75 81e8      	LD   R30,Y
000d76 81f9      	LDD  R31,Y+1
000d77 816a      	LDD  R22,Y+2
000d78 817b      	LDD  R23,Y+3
000d79 9508      	RET
                 
                 __GETD2S0:
000d7a 81a8      	LD   R26,Y
000d7b 81b9      	LDD  R27,Y+1
000d7c 818a      	LDD  R24,Y+2
000d7d 819b      	LDD  R25,Y+3
000d7e 9508      	RET
                 
                 __PUTD1S0:
000d7f 83e8      	ST   Y,R30
000d80 83f9      	STD  Y+1,R31
000d81 836a      	STD  Y+2,R22
000d82 837b      	STD  Y+3,R23
000d83 9508      	RET
                 
                 __SAVELOCR6:
000d84 935a      	ST   -Y,R21
                 __SAVELOCR5:
000d85 934a      	ST   -Y,R20
                 __SAVELOCR4:
000d86 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d87 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d88 931a      	ST   -Y,R17
000d89 930a      	ST   -Y,R16
000d8a 9508      	RET
                 
                 __LOADLOCR6:
000d8b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d8c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d8d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d8e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d8f 8119      	LDD  R17,Y+1
000d90 8108      	LD   R16,Y
000d91 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  53 r1 :  24 r2 :   0 r3 :   0 r4 :  47 r5 :  29 r6 :   4 r7 :  13 
r8 :   0 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  40 r17:  55 r18:  36 r19:  44 r20:  29 r21:  78 r22:  78 r23:  53 
r24:  59 r25:  45 r26: 309 r27: 144 r28:  33 r29:   1 r30: 481 r31: 197 
x  :  54 y  : 201 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  23 
adiw  :  34 and   :   4 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  50 
brge  :  11 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   2 brmi  :   7 brne  : 106 brpl  :   7 brsh  :  12 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 274 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  67 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  38 cpc   :  52 cpi   :  79 cpse  :   0 dec   :  12 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :   4 jmp   :  34 ld    :  82 ldd   :  55 ldi   : 458 
lds   :   2 lpm   :   7 lsl   :  14 lsr   :   3 mov   :  75 movw  :  58 
mul   :  12 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   0 out   :  37 pop   :  22 push  :  21 rcall :  77 ret   :  69 
reti  :   1 rjmp  : 162 rol   :  27 ror   :  15 sbc   :   8 sbci  :  23 
sbi   :  14 sbic  :   4 sbis  :   4 sbiw  :  35 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  97 std   :  27 sts   :   2 sub   :   6 subi  :  27 swap  :   1 
tst   :  23 wdr   :   1 
Instructions used: 74 out of 116 (63.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001b24   5514   1434   6948   32768  21.2%
[.dseg] 0x000060 0x000795      0   1333   1333    2048  65.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
