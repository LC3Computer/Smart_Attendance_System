
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Wed Dec 25 09:00:39 2024

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 	.DEF _logged_in=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0311 	JMP  __RESET
000002 940c 04e6 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002d 3837
00002e 4f39
00002f 3534
000030 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000031 3231
000032 4333
000033 304c
000034 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x4:
000035 0f64      	.DB  0x64,0xF
                 _0x141:
000036 ffff      	.DB  0xFF,0xFF
                 _0x0:
000037 3a31
000038 5320
000039 6275
00003a 696d      	.DB  0x31,0x3A,0x20,0x53,0x75,0x62,0x6D,0x69
00003b 2074
00003c 7453
00003d 6475
00003e 6e65      	.DB  0x74,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
00003f 2074
000040 6f43
000041 6564
000042 3200      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x0,0x32
000043 203a
000044 7553
000045 6d62
000046 7469      	.DB  0x3A,0x20,0x53,0x75,0x62,0x6D,0x69,0x74
000047 5720
000048 7469
000049 2068
00004a 6143      	.DB  0x20,0x57,0x69,0x74,0x68,0x20,0x43,0x61
00004b 6472
00004c 4500
00004d 746e
00004e 7265      	.DB  0x72,0x64,0x0,0x45,0x6E,0x74,0x65,0x72
00004f 7920
000050 756f
000051 2072
000052 7473      	.DB  0x20,0x79,0x6F,0x75,0x72,0x20,0x73,0x74
000053 6475
000054 6e65
000055 2074
000056 6f63      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x63,0x6F
000057 6564
000058 003a
000059 7242
00005a 6e69      	.DB  0x64,0x65,0x3A,0x0,0x42,0x72,0x69,0x6E
00005b 2067
00005c 6f79
00005d 7275
00005e 6320      	.DB  0x67,0x20,0x79,0x6F,0x75,0x72,0x20,0x63
00005f 7261
000060 2064
000061 656e
000062 7261      	.DB  0x61,0x72,0x64,0x20,0x6E,0x65,0x61,0x72
000063 6420
000064 7665
000065 6369
000066 3a65      	.DB  0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x3A
000067 3400
000068 0030
000069 6e49
00006a 6176      	.DB  0x0,0x34,0x30,0x0,0x49,0x6E,0x76,0x61
00006b 696c
00006c 2064
00006d 6143
00006e 6472      	.DB  0x6C,0x69,0x64,0x20,0x43,0x61,0x72,0x64
00006f 4400
000070 7075
000071 696c
000072 6163      	.DB  0x0,0x44,0x75,0x70,0x6C,0x69,0x63,0x61
000073 6574
000074 5320
000075 7574
000076 6564      	.DB  0x74,0x65,0x20,0x53,0x74,0x75,0x64,0x65
000077 746e
000078 4320
000079 646f
00007a 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
00007b 7453
00007c 6475
00007d 6e65
00007e 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
00007f 6461
000080 6564
000081 2064
000082 6977      	.DB  0x61,0x64,0x64,0x65,0x64,0x20,0x77,0x69
000083 6874
000084 4920
000085 3a44
000086 4e00      	.DB  0x74,0x68,0x20,0x49,0x44,0x3A,0x0,0x4E
000087 6d75
000088 6562
000089 2072
00008a 666f      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x6F,0x66
00008b 7320
00008c 7574
00008d 6564
00008e 746e      	.DB  0x20,0x73,0x74,0x75,0x64,0x65,0x6E,0x74
00008f 2073
000090 203a
000091 5000
000092 6572      	.DB  0x73,0x20,0x3A,0x20,0x0,0x50,0x72,0x65
000093 7373
000094 4320
000095 6e61
000096 6563      	.DB  0x73,0x73,0x20,0x43,0x61,0x6E,0x63,0x65
000097 206c
000098 6f54
000099 4720
00009a 206f      	.DB  0x6C,0x20,0x54,0x6F,0x20,0x47,0x6F,0x20
00009b 6142
00009c 6b63
00009d 5300
00009e 6174      	.DB  0x42,0x61,0x63,0x6B,0x0,0x53,0x74,0x61
00009f 7472
0000a0 5420
0000a1 6172
0000a2 736e      	.DB  0x72,0x74,0x20,0x54,0x72,0x61,0x6E,0x73
0000a3 6566
0000a4 7272
0000a5 6e69
0000a6 2e67      	.DB  0x66,0x65,0x72,0x72,0x69,0x6E,0x67,0x2E
0000a7 2e2e
0000a8 5500
0000a9 6173
0000aa 7472      	.DB  0x2E,0x2E,0x0,0x55,0x73,0x61,0x72,0x74
0000ab 5420
0000ac 6172
0000ad 736e
0000ae 696d      	.DB  0x20,0x54,0x72,0x61,0x6E,0x73,0x6D,0x69
0000af 2074
0000b0 6946
0000b1 696e
0000b2 6873      	.DB  0x74,0x20,0x46,0x69,0x6E,0x69,0x73,0x68
0000b3 6465
0000b4 3100
0000b5 203a
0000b6 6553      	.DB  0x65,0x64,0x0,0x31,0x3A,0x20,0x53,0x65
0000b7 7261
0000b8 6863
0000b9 5320
0000ba 7574      	.DB  0x61,0x72,0x63,0x68,0x20,0x53,0x74,0x75
0000bb 6564
0000bc 746e
0000bd 3200
0000be 203a      	.DB  0x64,0x65,0x6E,0x74,0x0,0x32,0x3A,0x20
0000bf 6544
0000c0 656c
0000c1 6574
0000c2 5320      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x20,0x53
0000c3 7574
0000c4 6564
0000c5 746e
0000c6 4500      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x0,0x45
0000c7 746e
0000c8 7265
0000c9 5320
0000ca 7574      	.DB  0x6E,0x74,0x65,0x72,0x20,0x53,0x74,0x75
0000cb 6564
0000cc 746e
0000cd 4320
0000ce 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
0000cf 2065
0000d0 6f46
0000d1 2072
0000d2 6553      	.DB  0x65,0x20,0x46,0x6F,0x72,0x20,0x53,0x65
0000d3 7261
0000d4 6863
0000d5 003a
0000d6 6e45      	.DB  0x61,0x72,0x63,0x68,0x3A,0x0,0x45,0x6E
0000d7 6574
0000d8 2072
0000d9 7453
0000da 6475      	.DB  0x74,0x65,0x72,0x20,0x53,0x74,0x75,0x64
0000db 6e65
0000dc 2074
0000dd 6f43
0000de 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
0000df 4620
0000e0 726f
0000e1 4420
0000e2 6c65      	.DB  0x20,0x46,0x6F,0x72,0x20,0x44,0x65,0x6C
0000e3 7465
0000e4 3a65
0000e5 4500
0000e6 746e      	.DB  0x65,0x74,0x65,0x3A,0x0,0x45,0x6E,0x74
0000e7 7265
0000e8 5320
0000e9 6365
0000ea 6572      	.DB  0x65,0x72,0x20,0x53,0x65,0x63,0x72,0x65
0000eb 2074
0000ec 6f43
0000ed 6564
0000ee 2820      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x28
0000ef 726f
0000f0 6320
0000f1 6e61
0000f2 6563      	.DB  0x6F,0x72,0x20,0x63,0x61,0x6E,0x63,0x65
0000f3 296c
0000f4 3100
0000f5 3a20
0000f6 4320      	.DB  0x6C,0x29,0x0,0x31,0x20,0x3A,0x20,0x43
0000f7 656c
0000f8 7261
0000f9 4520
0000fa 5045      	.DB  0x6C,0x65,0x61,0x72,0x20,0x45,0x45,0x50
0000fb 4f52
0000fc 004d
0000fd 2020
0000fe 2020      	.DB  0x52,0x4F,0x4D,0x0,0x20,0x20,0x20,0x20
0000ff 7270
000100 7365
000101 2073
000102 6163      	.DB  0x70,0x72,0x65,0x73,0x73,0x20,0x63,0x61
000103 636e
000104 6c65
000105 7420
000106 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x74,0x6F,0x20
000107 6162
000108 6b63
000109 4c00
00010a 676f      	.DB  0x62,0x61,0x63,0x6B,0x0,0x4C,0x6F,0x67
00010b 756f
00010c 2074
00010d 2e2e
00010e 002e      	.DB  0x6F,0x75,0x74,0x20,0x2E,0x2E,0x2E,0x0
00010f 6f47
000110 6e69
000111 2067
000112 6f54      	.DB  0x47,0x6F,0x69,0x6E,0x67,0x20,0x54,0x6F
000113 4120
000114 6d64
000115 6e69
000116 5020      	.DB  0x20,0x41,0x64,0x6D,0x69,0x6E,0x20,0x50
000117 6761
000118 2065
000119 6e49
00011a 3220      	.DB  0x61,0x67,0x65,0x20,0x49,0x6E,0x20,0x32
00011b 5320
00011c 6365
00011d 4900
00011e 636e      	.DB  0x20,0x53,0x65,0x63,0x0,0x49,0x6E,0x63
00011f 726f
000120 6572
000121 7463
000122 5320      	.DB  0x6F,0x72,0x72,0x65,0x63,0x74,0x20,0x53
000123 7574
000124 6564
000125 746e
000126 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
000127 646f
000128 2065
000129 6f46
00012a 6d72      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x6D
00012b 7461
00012c 5900
00012d 756f
00012e 5720      	.DB  0x61,0x74,0x0,0x59,0x6F,0x75,0x20,0x57
00012f 6c69
000130 206c
000131 6142
000132 6b63      	.DB  0x69,0x6C,0x6C,0x20,0x42,0x61,0x63,0x6B
000133 4d20
000134 6e65
000135 2075
000136 6e49      	.DB  0x20,0x4D,0x65,0x6E,0x75,0x20,0x49,0x6E
000137 3220
000138 5320
000139 6365
00013a 6e6f      	.DB  0x20,0x32,0x20,0x53,0x65,0x63,0x6F,0x6E
00013b 0064
00013c 7544
00013d 6c70
00013e 6369      	.DB  0x64,0x0,0x44,0x75,0x70,0x6C,0x69,0x63
00013f 7461
000140 2065
000141 7453
000142 6475      	.DB  0x61,0x74,0x65,0x20,0x53,0x74,0x75,0x64
000143 6e65
000144 2074
000145 6f43
000146 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
000147 4520
000148 746e
000149 7265
00014a 6465      	.DB  0x20,0x45,0x6E,0x74,0x65,0x72,0x65,0x64
00014b 5300
00014c 7574
00014d 6564
00014e 746e      	.DB  0x0,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00014f 4320
000150 646f
000151 2065
000152 7553      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x53,0x75
000153 6363
000154 7365
000155 6673
000156 6c75      	.DB  0x63,0x63,0x65,0x73,0x73,0x66,0x75,0x6C
000157 796c
000158 4120
000159 6464
00015a 6465      	.DB  0x6C,0x79,0x20,0x41,0x64,0x64,0x65,0x64
00015b 5900
00015c 756f
00015d 4d20
00015e 7375      	.DB  0x0,0x59,0x6F,0x75,0x20,0x4D,0x75,0x73
00015f 2074
000160 6946
000161 7372
000162 2074      	.DB  0x74,0x20,0x46,0x69,0x72,0x73,0x74,0x20
000163 6f4c
000164 6967
000165 006e
000166 6f59      	.DB  0x4C,0x6F,0x67,0x69,0x6E,0x0,0x59,0x6F
000167 2075
000168 6957
000169 6c6c
00016a 4720      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x47
00016b 206f
00016c 6441
00016d 696d
00016e 206e      	.DB  0x6F,0x20,0x41,0x64,0x6D,0x69,0x6E,0x20
00016f 6150
000170 6567
000171 3220
000172 5320      	.DB  0x50,0x61,0x67,0x65,0x20,0x32,0x20,0x53
000173 6365
000174 5300
000175 7574
000176 6564      	.DB  0x65,0x63,0x0,0x53,0x74,0x75,0x64,0x65
000177 746e
000178 4320
000179 646f
00017a 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
00017b 6f46
00017c 6e75
00017d 0064
00017e 704f      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x4F,0x70
00017f 2073
000180 202c
000181 7453
000182 6475      	.DB  0x73,0x20,0x2C,0x20,0x53,0x74,0x75,0x64
000183 6e65
000184 2074
000185 6f43
000186 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
000187 4e20
000188 746f
000189 4620
00018a 756f      	.DB  0x20,0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75
00018b 646e
00018c 5700
00018d 6961
00018e 2074      	.DB  0x6E,0x64,0x0,0x57,0x61,0x69,0x74,0x20
00018f 6f46
000190 2072
000191 6544
000192 656c      	.DB  0x46,0x6F,0x72,0x20,0x44,0x65,0x6C,0x65
000193 6574
000194 2e2e
000195 002e
000196 7453      	.DB  0x74,0x65,0x2E,0x2E,0x2E,0x0,0x53,0x74
000197 6475
000198 6e65
000199 2074
00019a 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
00019b 6564
00019c 5720
00019d 7361
00019e 4420      	.DB  0x64,0x65,0x20,0x57,0x61,0x73,0x20,0x44
00019f 6c65
0001a0 7465
0001a1 6465
0001a2 4c00      	.DB  0x65,0x6C,0x65,0x74,0x65,0x64,0x0,0x4C
0001a3 676f
0001a4 6e69
0001a5 5320
0001a6 6375      	.DB  0x6F,0x67,0x69,0x6E,0x20,0x53,0x75,0x63
0001a7 6563
0001a8 7373
0001a9 7566
0001aa 6c6c      	.DB  0x63,0x65,0x73,0x73,0x66,0x75,0x6C,0x6C
0001ab 0079
0001ac 6157
0001ad 7469
0001ae 2e2e      	.DB  0x79,0x0,0x57,0x61,0x69,0x74,0x2E,0x2E
0001af 002e
0001b0 704f
0001b1 2073
0001b2 202c      	.DB  0x2E,0x0,0x4F,0x70,0x73,0x20,0x2C,0x20
0001b3 6573
0001b4 7263
0001b5 7465
0001b6 6920      	.DB  0x73,0x65,0x63,0x72,0x65,0x74,0x20,0x69
0001b7 2073
0001b8 6e69
0001b9 6f63
0001ba 7272      	.DB  0x73,0x20,0x69,0x6E,0x63,0x6F,0x72,0x72
0001bb 6365
0001bc 0074
0001bd 6c43
0001be 6165      	.DB  0x65,0x63,0x74,0x0,0x43,0x6C,0x65,0x61
0001bf 6972
0001c0 676e
0001c1 4520
0001c2 5045      	.DB  0x72,0x69,0x6E,0x67,0x20,0x45,0x45,0x50
0001c3 4f52
0001c4 204d
0001c5 2e2e
0001c6 002e      	.DB  0x52,0x4F,0x4D,0x20,0x2E,0x2E,0x2E,0x0
0001c7 6574
0001c8 706d
0001c9 7265
0001ca 7461      	.DB  0x74,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
0001cb 7275
0001cc 2865
0001cd 2943
0001ce 003a      	.DB  0x75,0x72,0x65,0x28,0x43,0x29,0x3A,0x0
0001cf 3a31
0001d0 4120
0001d1 7474
0001d2 6e65      	.DB  0x31,0x3A,0x20,0x41,0x74,0x74,0x65,0x6E
0001d3 6164
0001d4 636e
0001d5 2065
0001d6 6e49      	.DB  0x64,0x61,0x6E,0x63,0x65,0x20,0x49,0x6E
0001d7 7469
0001d8 6169
0001d9 696c
0001da 617a      	.DB  0x69,0x74,0x69,0x61,0x6C,0x69,0x7A,0x61
0001db 6974
0001dc 6e6f
0001dd 3200
0001de 203a      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x32,0x3A,0x20
0001df 7453
0001e0 6475
0001e1 6e65
0001e2 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0001e3 614d
0001e4 616e
0001e5 6567
0001e6 656d      	.DB  0x4D,0x61,0x6E,0x61,0x67,0x65,0x6D,0x65
0001e7 746e
0001e8 3300
0001e9 203a
0001ea 6956      	.DB  0x6E,0x74,0x0,0x33,0x3A,0x20,0x56,0x69
0001eb 7765
0001ec 5020
0001ed 6572
0001ee 6573      	.DB  0x65,0x77,0x20,0x50,0x72,0x65,0x73,0x65
0001ef 746e
0001f0 5320
0001f1 7574
0001f2 6564      	.DB  0x6E,0x74,0x20,0x53,0x74,0x75,0x64,0x65
0001f3 746e
0001f4 2073
0001f5 3400
0001f6 203a      	.DB  0x6E,0x74,0x73,0x20,0x0,0x34,0x3A,0x20
0001f7 6554
0001f8 706d
0001f9 7265
0001fa 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
0001fb 7275
0001fc 2065
0001fd 6f4d
0001fe 696e      	.DB  0x75,0x72,0x65,0x20,0x4D,0x6F,0x6E,0x69
0001ff 6f74
000200 6972
000201 676e
000202 3500      	.DB  0x74,0x6F,0x72,0x69,0x6E,0x67,0x0,0x35
000203 203a
000204 6552
000205 7274
000206 6569      	.DB  0x3A,0x20,0x52,0x65,0x74,0x72,0x69,0x65
000207 6576
000208 5320
000209 7574
00020a 6564      	.DB  0x76,0x65,0x20,0x53,0x74,0x75,0x64,0x65
00020b 746e
00020c 4420
00020d 7461
00020e 0061      	.DB  0x6E,0x74,0x20,0x44,0x61,0x74,0x61,0x0
00020f 3a36
000210 5420
000211 6172
000212 6666      	.DB  0x36,0x3A,0x20,0x54,0x72,0x61,0x66,0x66
000213 6369
000214 4d20
000215 6e6f
000216 7469      	.DB  0x69,0x63,0x20,0x4D,0x6F,0x6E,0x69,0x74
000217 726f
000218 6e69
000219 0067
00021a 3a37      	.DB  0x6F,0x72,0x69,0x6E,0x67,0x0,0x37,0x3A
00021b 4c20
00021c 676f
00021d 6e69
00021e 5720      	.DB  0x20,0x4C,0x6F,0x67,0x69,0x6E,0x20,0x57
00021f 7469
000220 2068
000221 6441
000222 696d      	.DB  0x69,0x74,0x68,0x20,0x41,0x64,0x6D,0x69
000223 006e
000224 3a38
000225 4c20
000226 676f      	.DB  0x6E,0x0,0x38,0x3A,0x20,0x4C,0x6F,0x67
000227 756f
000228 0074
000229 6944
00022a 7473      	.DB  0x6F,0x75,0x74,0x0,0x44,0x69,0x73,0x74
00022b 6e61
00022c 6563
00022d 203a
00022e 4500      	.DB  0x61,0x6E,0x63,0x65,0x3A,0x20,0x0,0x45
00022f 7272
000230 726f
000231 4e00
000232 206f      	.DB  0x72,0x72,0x6F,0x72,0x0,0x4E,0x6F,0x20
000233 624f
000234 7473
000235 6361
000236 656c      	.DB  0x4F,0x62,0x73,0x74,0x61,0x63,0x6C,0x65
000237 2000
000238 6d63
000239 0020
00023a 6f43      	.DB  0x0,0x20,0x63,0x6D,0x20,0x0,0x43,0x6F
00023b 6e75
00023c 3a74
00023d 0020      	.DB  0x75,0x6E,0x74,0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1267): warning: .cseg .db misalignment - padding zero byte
00023e 0001      	.DB  0x1
                 _0x2000000:
00023f 4e2d
000240 4e41
000241 4900
000242 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1270): warning: .cseg .db misalignment - padding zero byte
000243 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000244 0006      	.DW  0x06
000245 0004      	.DW  0x04
000246 0054      	.DW  __REG_VARS*2
                 
000247 0010      	.DW  0x10
000248 0784      	.DW  _keypad
000249 005a      	.DW  _0x3*2
                 
00024a 0017      	.DW  0x17
00024b 0260      	.DW  _0xB
00024c 006e      	.DW  _0x0*2
                 
00024d 0014      	.DW  0x14
00024e 0277      	.DW  _0xB+23
00024f 0085      	.DW  _0x0*2+23
                 
000250 0019      	.DW  0x19
000251 028b      	.DW  _0xB+43
000252 0099      	.DW  _0x0*2+43
                 
000253 001d      	.DW  0x1D
000254 02a4      	.DW  _0xB+68
000255 00b2      	.DW  _0x0*2+68
                 
000256 0003      	.DW  0x03
000257 02c1      	.DW  _0xB+97
000258 00cf      	.DW  _0x0*2+97
                 
000259 000d      	.DW  0x0D
00025a 02c4      	.DW  _0xB+100
00025b 00d2      	.DW  _0x0*2+100
                 
00025c 0017      	.DW  0x17
00025d 02d1      	.DW  _0xB+113
00025e 00df      	.DW  _0x0*2+113
                 
00025f 0017      	.DW  0x17
000260 02e8      	.DW  _0xB+136
000261 00f6      	.DW  _0x0*2+136
                 
000262 0016      	.DW  0x16
000263 02ff      	.DW  _0xB+159
000264 010d      	.DW  _0x0*2+159
                 
000265 0018      	.DW  0x18
000266 0315      	.DW  _0xB+181
000267 0123      	.DW  _0x0*2+181
                 
000268 0016      	.DW  0x16
000269 032d      	.DW  _0xB+205
00026a 013b      	.DW  _0x0*2+205
                 
00026b 0018      	.DW  0x18
00026c 0343      	.DW  _0xB+227
00026d 0151      	.DW  _0x0*2+227
                 
00026e 0012      	.DW  0x12
00026f 035b      	.DW  _0xB+251
000270 0169      	.DW  _0x0*2+251
                 
000271 0012      	.DW  0x12
000272 036d      	.DW  _0xB+269
000273 017b      	.DW  _0x0*2+269
                 
000274 001f      	.DW  0x1F
000275 037f      	.DW  _0xB+287
000276 018d      	.DW  _0x0*2+287
                 
000277 001f      	.DW  0x1F
000278 039e      	.DW  _0xB+318
000279 01ac      	.DW  _0x0*2+318
                 
00027a 001e      	.DW  0x1E
00027b 03bd      	.DW  _0xB+349
00027c 01cb      	.DW  _0x0*2+349
                 
00027d 0011      	.DW  0x11
00027e 03db      	.DW  _0xB+379
00027f 01e9      	.DW  _0x0*2+379
                 
000280 0019      	.DW  0x19
000281 03ec      	.DW  _0xB+396
000282 01fa      	.DW  _0x0*2+396
                 
000283 000b      	.DW  0x0B
000284 0405      	.DW  _0x76
000285 0213      	.DW  _0x0*2+421
                 
000286 001d      	.DW  0x1D
000287 0410      	.DW  _0x76+11
000288 021e      	.DW  _0x0*2+432
                 
000289 0002      	.DW  0x02
00028a 042d      	.DW  _0x76+40
00028b 0121      	.DW  _0x0*2+179
                 
00028c 0003      	.DW  0x03
00028d 042f      	.DW  _0x76+42
00028e 00cf      	.DW  _0x0*2+97
                 
00028f 001e      	.DW  0x1E
000290 0432      	.DW  _0x76+45
000291 023b      	.DW  _0x0*2+461
                 
000292 001f      	.DW  0x1F
000293 0450      	.DW  _0x76+75
000294 0259      	.DW  _0x0*2+491
                 
000295 001f      	.DW  0x1F
000296 046f      	.DW  _0x76+106
000297 0278      	.DW  _0x0*2+522
                 
000298 001f      	.DW  0x1F
000299 048e      	.DW  _0x76+137
00029a 0259      	.DW  _0x0*2+491
                 
00029b 0020      	.DW  0x20
00029c 04ad      	.DW  _0x76+168
00029d 0297      	.DW  _0x0*2+553
                 
00029e 001f      	.DW  0x1F
00029f 04cd      	.DW  _0x76+200
0002a0 0259      	.DW  _0x0*2+491
                 
0002a1 0015      	.DW  0x15
0002a2 04ec      	.DW  _0x76+231
0002a3 02b7      	.DW  _0x0*2+585
                 
0002a4 001d      	.DW  0x1D
0002a5 0501      	.DW  _0x76+252
0002a6 02cc      	.DW  _0x0*2+606
                 
0002a7 0002      	.DW  0x02
0002a8 051e      	.DW  _0x76+281
0002a9 0121      	.DW  _0x0*2+179
                 
0002aa 0013      	.DW  0x13
0002ab 0520      	.DW  _0x76+283
0002ac 02e9      	.DW  _0x0*2+635
                 
0002ad 001f      	.DW  0x1F
0002ae 0533      	.DW  _0x76+302
0002af 0259      	.DW  _0x0*2+491
                 
0002b0 001d      	.DW  0x1D
0002b1 0552      	.DW  _0x76+333
0002b2 02fc      	.DW  _0x0*2+654
                 
0002b3 001f      	.DW  0x1F
0002b4 056f      	.DW  _0x76+362
0002b5 0259      	.DW  _0x0*2+491
                 
0002b6 0002      	.DW  0x02
0002b7 058e      	.DW  _0x76+393
0002b8 0121      	.DW  _0x0*2+179
                 
0002b9 0013      	.DW  0x13
0002ba 0590      	.DW  _0x76+395
0002bb 02e9      	.DW  _0x0*2+635
                 
0002bc 0013      	.DW  0x13
0002bd 05a3      	.DW  _0x76+414
0002be 0319      	.DW  _0x0*2+683
                 
0002bf 0019      	.DW  0x19
0002c0 05b6      	.DW  _0x76+433
0002c1 032c      	.DW  _0x0*2+702
                 
0002c2 001f      	.DW  0x1F
0002c3 05cf      	.DW  _0x76+458
0002c4 0259      	.DW  _0x0*2+491
                 
0002c5 001d      	.DW  0x1D
0002c6 05ee      	.DW  _0x76+489
0002c7 02fc      	.DW  _0x0*2+654
                 
0002c8 001f      	.DW  0x1F
0002c9 060b      	.DW  _0x76+518
0002ca 0259      	.DW  _0x0*2+491
                 
0002cb 0002      	.DW  0x02
0002cc 062a      	.DW  _0x76+549
0002cd 0121      	.DW  _0x0*2+179
                 
0002ce 0013      	.DW  0x13
0002cf 062c      	.DW  _0x76+551
0002d0 0345      	.DW  _0x0*2+727
                 
0002d1 0008      	.DW  0x08
0002d2 063f      	.DW  _0x76+570
0002d3 0358      	.DW  _0x0*2+746
                 
0002d4 001a      	.DW  0x1A
0002d5 0647      	.DW  _0x76+578
0002d6 0360      	.DW  _0x0*2+754
                 
0002d7 001f      	.DW  0x1F
0002d8 0661      	.DW  _0x76+604
0002d9 0259      	.DW  _0x0*2+491
                 
0002da 0014      	.DW  0x14
0002db 0680      	.DW  _0x76+635
0002dc 037a      	.DW  _0x0*2+780
                 
0002dd 0010      	.DW  0x10
0002de 0694      	.DW  _0xEC
0002df 038e      	.DW  _0x0*2+800
                 
0002e0 0002      	.DW  0x02
0002e1 06a4      	.DW  _0xEC+16
0002e2 0121      	.DW  _0x0*2+179
                 
0002e3 001d      	.DW  0x1D
0002e4 06a6      	.DW  _0xF8
0002e5 039e      	.DW  _0x0*2+816
                 
0002e6 0016      	.DW  0x16
0002e7 06c3      	.DW  _0xF8+29
0002e8 03bb      	.DW  _0x0*2+845
                 
0002e9 001a      	.DW  0x1A
0002ea 06d9      	.DW  _0xF8+51
0002eb 03d1      	.DW  _0x0*2+867
                 
0002ec 001a      	.DW  0x1A
0002ed 06f3      	.DW  _0xF8+77
0002ee 03eb      	.DW  _0x0*2+893
                 
0002ef 0019      	.DW  0x19
0002f0 070d      	.DW  _0xF8+103
0002f1 0405      	.DW  _0x0*2+919
                 
0002f2 0016      	.DW  0x16
0002f3 0726      	.DW  _0xF8+128
0002f4 041e      	.DW  _0x0*2+944
                 
0002f5 0014      	.DW  0x14
0002f6 073c      	.DW  _0xF8+150
0002f7 0434      	.DW  _0x0*2+966
                 
0002f8 000a      	.DW  0x0A
0002f9 0750      	.DW  _0xF8+170
0002fa 0448      	.DW  _0x0*2+986
                 
0002fb 0002      	.DW  0x02
0002fc 07b4      	.DW  _previous_count_S0000014000
0002fd 006c      	.DW  _0x141*2
                 
0002fe 000b      	.DW  0x0B
0002ff 075a      	.DW  _0x142
000300 0452      	.DW  _0x0*2+996
                 
000301 0006      	.DW  0x06
000302 0765      	.DW  _0x142+11
000303 045d      	.DW  _0x0*2+1007
                 
000304 000c      	.DW  0x0C
000305 076b      	.DW  _0x142+17
000306 0463      	.DW  _0x0*2+1013
                 
000307 0005      	.DW  0x05
000308 0777      	.DW  _0x142+29
000309 046f      	.DW  _0x0*2+1025
                 
00030a 0008      	.DW  0x08
00030b 077c      	.DW  _0x142+34
00030c 0474      	.DW  _0x0*2+1030
                 
00030d 0001      	.DW  0x01
00030e 07b6      	.DW  __seed_G100
00030f 047c      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000310 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000311 94f8      	CLI
000312 27ee      	CLR  R30
000313 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000314 e0f1      	LDI  R31,1
000315 bffb      	OUT  GICR,R31
000316 bfeb      	OUT  GICR,R30
000317 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000318 e08d      	LDI  R24,(14-2)+1
000319 e0a2      	LDI  R26,2
00031a 27bb      	CLR  R27
                 __CLEAR_REG:
00031b 93ed      	ST   X+,R30
00031c 958a      	DEC  R24
00031d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00031e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00031f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000320 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000321 93ed      	ST   X+,R30
000322 9701      	SBIW R24,1
000323 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000324 e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000325 e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000326 9185      	LPM  R24,Z+
000327 9195      	LPM  R25,Z+
000328 9700      	SBIW R24,0
000329 f061      	BREQ __GLOBAL_INI_END
00032a 91a5      	LPM  R26,Z+
00032b 91b5      	LPM  R27,Z+
00032c 9005      	LPM  R0,Z+
00032d 9015      	LPM  R1,Z+
00032e 01bf      	MOVW R22,R30
00032f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000330 9005      	LPM  R0,Z+
000331 920d      	ST   X+,R0
000332 9701      	SBIW R24,1
000333 f7e1      	BRNE __GLOBAL_INI_LOOP
000334 01fb      	MOVW R30,R22
000335 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000336 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000337 bfed      	OUT  SPL,R30
000338 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000339 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00033a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00033b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00033c 940c 033e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 4
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0064 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0065     int i, j;
                 ; 0000 0066     unsigned char st_counts;
                 ; 0000 0067     unsigned char data;
                 ; 0000 0068     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
00033e efe0      	LDI  R30,LOW(240)
00033f bbe4      	OUT  0x14,R30
                 ; 0000 0069     KEY_PRT = 0xFF;
000340 efef      	LDI  R30,LOW(255)
000341 bbe5      	OUT  0x15,R30
                 ; 0000 006A     KEY_PRT &= 0x0F;                  // ground all rows at once
000342 b3e5      	IN   R30,0x15
000343 70ef      	ANDI R30,LOW(0xF)
000344 bbe5      	OUT  0x15,R30
                 ; 0000 006B     MCUCR = 0x02;                     // make INT0 falling edge triggered
000345 e0e2      	LDI  R30,LOW(2)
000346 bfe5      	OUT  0x35,R30
                 ; 0000 006C     GICR = (1 << INT0);               // enable external interrupt 0
000347 e4e0      	LDI  R30,LOW(64)
000348 bfeb      	OUT  0x3B,R30
                 ; 0000 006D     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
000349 9a8f      	SBI  0x11,7
                 ; 0000 006E     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
00034a 9897      	CBI  0x12,7
                 ; 0000 006F     USART_init(0x33);
00034b e3a3      	LDI  R26,LOW(51)
00034c e0b0      	LDI  R27,0
00034d 940e 0951 	CALL _USART_init
                 ; 0000 0070     HCSR04Init(); // Initialize ultrasonic sensor
00034f 940e 09d3 	CALL _HCSR04Init
                 ; 0000 0071     lcd_init();
000351 d4ec      	RCALL _lcd_init
                 ; 0000 0072 
                 ; 0000 0073 #asm("sei")           // enable interrupts
000352 9478      	sei
                 ; 0000 0074     lcdCommand(0x01); // clear LCD
000353 e0a1      	LDI  R26,LOW(1)
000354 d4d5      	RCALL _lcdCommand
                 ; 0000 0075     while (1)
                 _0x5:
                 ; 0000 0076     {
                 ; 0000 0077         if (stage == STAGE_INIT_MENU)
000355 2c04      	MOV  R0,R4
000356 2805      	OR   R0,R5
000357 f411      	BRNE _0x8
                 ; 0000 0078         {
                 ; 0000 0079             show_menu();
000358 d562      	RCALL _show_menu
                 ; 0000 007A         }
                 ; 0000 007B         else if (stage == STAGE_ATTENDENC_MENU)
000359 c18a      	RJMP _0x9
                 _0x8:
00035a 940e 0b33 	CALL SUBOPT_0x0
00035c f469      	BRNE _0xA
                 ; 0000 007C         {
                 ; 0000 007D             lcdCommand(0x01);
00035d 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 007E             lcd_gotoxy(1, 1);
                 ; 0000 007F             lcd_print("1: Submit Student Code");
                +
00035f e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
000360 e0b2     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
000361 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0080             lcd_gotoxy(1, 2);
                 ; 0000 0081             lcd_print("2: Submit With Card");
                +
000363 e7a7     +LDI R26 , LOW ( _0xB + ( 23 ) )
000364 e0b2     +LDI R27 , HIGH ( _0xB + ( 23 ) )
                 	__POINTW2MN _0xB,23
000365 d50d      	RCALL _lcd_print
                 ; 0000 0082             while (stage == STAGE_ATTENDENC_MENU)
                 _0xC:
000366 940e 0b33 	CALL SUBOPT_0x0
000368 f3e9      	BREQ _0xC
                 ; 0000 0083                 ;
                 ; 0000 0084         }
                 ; 0000 0085         else if (stage == STAGE_SUBMIT_CODE)
000369 c17a      	RJMP _0xF
                 _0xA:
00036a 940e 0b47 	CALL SUBOPT_0x3
00036c f461      	BRNE _0x10
                 ; 0000 0086         {
                 ; 0000 0087             lcdCommand(0x01);
00036d 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0088             lcd_gotoxy(1, 1);
                 ; 0000 0089             lcd_print("Enter your student code:");
                +
00036f e8ab     +LDI R26 , LOW ( _0xB + ( 43 ) )
000370 e0b2     +LDI R27 , HIGH ( _0xB + ( 43 ) )
                 	__POINTW2MN _0xB,43
000371 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 008A             lcd_gotoxy(1, 2);
                 ; 0000 008B             lcdCommand(0x0f);   // display on, cursor blinking
000373 940e 0b4c 	CALL SUBOPT_0x4
                 ; 0000 008C             delay_us(100 * 16); // wait
                 ; 0000 008D             while (stage == STAGE_SUBMIT_CODE)
                 _0x11:
000375 940e 0b47 	CALL SUBOPT_0x3
000377 f3e9      	BREQ _0x11
                 ; 0000 008E                 ;
                 ; 0000 008F             lcdCommand(0x0c);   // display on, cursor off
000378 c168      	RJMP _0x150
                 ; 0000 0090             delay_us(100 * 16); // wait
                 ; 0000 0091         }
                 ; 0000 0092         else if(stage == STAGE_SUBMIT_WITH_CARD)
                 _0x10:
000379 940e 0b54 	CALL SUBOPT_0x5
00037b f009      	BREQ PC+2
00037c c072      	RJMP _0x15
                 ; 0000 0093         {
                 ; 0000 0094             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x16:
00037d 940e 0b54 	CALL SUBOPT_0x5
00037f f009      	BREQ PC+2
000380 c06d      	RJMP _0x18
                 ; 0000 0095             {
                 ; 0000 0096                 lcdCommand(0x01);
000381 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0097                 lcd_gotoxy(1, 1);
                 ; 0000 0098                 lcd_print("Bring your card near device:");
                +
000383 eaa4     +LDI R26 , LOW ( _0xB + ( 68 ) )
000384 e0b2     +LDI R27 , HIGH ( _0xB + ( 68 ) )
                 	__POINTW2MN _0xB,68
000385 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0099                 lcd_gotoxy(1, 2);
                 ; 0000 009A                 delay_us(100 * 16); // wait
000387 940e 0b59 	CALL SUBOPT_0x6
                 ; 0000 009B                 while((data = USART_Receive()) != '\r'){
                 _0x19:
000389 940e 0948 	CALL _USART_Receive
00038b 2f4e      	MOV  R20,R30
00038c 30ed      	CPI  R30,LOW(0xD)
00038d f049      	BREQ _0x1B
                 ; 0000 009C                     if(stage != STAGE_SUBMIT_WITH_CARD)
00038e 940e 0b54 	CALL SUBOPT_0x5
000390 f431      	BRNE _0x1B
                 ; 0000 009D                         break;
                 ; 0000 009E                     buffer[strlen(buffer)] = data;
000391 940e 0b5e 	CALL SUBOPT_0x7
000393 56ec      	SUBI R30,LOW(-_buffer)
000394 4ff8      	SBCI R31,HIGH(-_buffer)
000395 8340      	ST   Z,R20
                 ; 0000 009F                 }
000396 cff2      	RJMP _0x19
                 _0x1B:
                 ; 0000 00A0                 if(stage != STAGE_SUBMIT_WITH_CARD){
000397 940e 0b54 	CALL SUBOPT_0x5
000399 f029      	BREQ _0x1D
                 ; 0000 00A1                     memset(buffer,0,32);
00039a 940e 0b62 	CALL SUBOPT_0x8
00039c 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 00A2                     break;
00039e c04f      	RJMP _0x18
                 ; 0000 00A3                 }
                 ; 0000 00A4                 if (strncmp(buffer, "40", 2) != 0 ||
                 _0x1D:
                 ; 0000 00A5                         strlen(buffer) != 8)
00039f 940e 0b62 	CALL SUBOPT_0x8
                +
0003a1 ece1     +LDI R30 , LOW ( _0xB + ( 97 ) )
0003a2 e0f2     +LDI R31 , HIGH ( _0xB + ( 97 ) )
                 	__POINTW1MN _0xB,97
0003a3 940e 0b6d 	CALL SUBOPT_0xA
0003a5 f431      	BRNE _0x1F
0003a6 940e 0b5e 	CALL SUBOPT_0x7
0003a8 30e8      	CPI  R30,LOW(0x8)
0003a9 e0a0      	LDI  R26,HIGH(0x8)
0003aa 07fa      	CPC  R31,R26
0003ab f049      	BREQ _0x1E
                 _0x1F:
                 ; 0000 00A6                 {
                 ; 0000 00A7                     lcdCommand(0x01);
0003ac 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00A8                     lcd_gotoxy(1, 1);
                 ; 0000 00A9                     lcd_print("Invalid Card");
                +
0003ae eca4     +LDI R26 , LOW ( _0xB + ( 100 ) )
0003af e0b2     +LDI R27 , HIGH ( _0xB + ( 100 ) )
                 	__POINTW2MN _0xB,100
0003b0 d4c2      	RCALL _lcd_print
                 ; 0000 00AA                     BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0003b1 9a97      	SBI  0x12,7
                 ; 0000 00AB                     delay_ms(2000);
0003b2 940e 0b74 	CALL SUBOPT_0xB
                 ; 0000 00AC                     BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00AD                 }
                 ; 0000 00AE                 else{
0003b4 c034      	RJMP _0x21
                 _0x1E:
                 ; 0000 00AF                     if (search_student_code() > 0){
0003b5 d5a8      	RCALL _search_student_code
0003b6 30e1      	CPI  R30,LOW(0x1)
0003b7 f040      	BRLO _0x22
                 ; 0000 00B0                         BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0003b8 9a97      	SBI  0x12,7
                 ; 0000 00B1                         lcdCommand(0x01);
0003b9 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00B2                         lcd_gotoxy(1, 1);
                 ; 0000 00B3                         lcd_print("Duplicate Student Code");
                +
0003bb eda1     +LDI R26 , LOW ( _0xB + ( 113 ) )
0003bc e0b2     +LDI R27 , HIGH ( _0xB + ( 113 ) )
                 	__POINTW2MN _0xB,113
0003bd 940e 0b7a 	CALL SUBOPT_0xC
                 ; 0000 00B4                         delay_ms(2000);
                 ; 0000 00B5                         BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00B6                     }
                 ; 0000 00B7                     else{
0003bf c029      	RJMP _0x23
                 _0x22:
                 ; 0000 00B8                         // save the buffer to EEPROM
                 ; 0000 00B9                         st_counts = read_byte_from_eeprom(0x0);
0003c0 940e 0b7d 	CALL SUBOPT_0xD
                 ; 0000 00BA                         for (i = 0; i < 8; i++)
                +
0003c2 e000     +LDI R16 , LOW ( 0 )
0003c3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x25:
                +
0003c4 3008     +CPI R16 , LOW ( 8 )
0003c5 e0e0     +LDI R30 , HIGH ( 8 )
0003c6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0003c7 f484      	BRGE _0x26
                 ; 0000 00BB                         {
                 ; 0000 00BC                             write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
0003c8 2fe5      	MOV  R30,R21
0003c9 940e 0b83 	CALL SUBOPT_0xE
0003cb 0fe0      	ADD  R30,R16
0003cc 1ff1      	ADC  R31,R17
0003cd 93fa      	ST   -Y,R31
0003ce 93ea      	ST   -Y,R30
0003cf e9a4      	LDI  R26,LOW(_buffer)
0003d0 e0b7      	LDI  R27,HIGH(_buffer)
0003d1 0fa0      	ADD  R26,R16
0003d2 1fb1      	ADC  R27,R17
0003d3 91ac      	LD   R26,X
0003d4 d561      	RCALL _write_byte_to_eeprom
                 ; 0000 00BD                         }
                +
0003d5 5f0f     +SUBI R16 , LOW ( - 1 )
0003d6 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003d7 cfec      	RJMP _0x25
                 _0x26:
                 ; 0000 00BE                         write_byte_to_eeprom(0x0, st_counts + 1);
0003d8 940e 0b88 	CALL SUBOPT_0xF
0003da 2fa5      	MOV  R26,R21
0003db 5faf      	SUBI R26,-LOW(1)
0003dc d559      	RCALL _write_byte_to_eeprom
                 ; 0000 00BF                         lcdCommand(0x01);
0003dd 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00C0                         lcd_gotoxy(1, 1);
                 ; 0000 00C1                         lcd_print("Student added with ID:");
                +
0003df eea8     +LDI R26 , LOW ( _0xB + ( 136 ) )
0003e0 e0b2     +LDI R27 , HIGH ( _0xB + ( 136 ) )
                 	__POINTW2MN _0xB,136
0003e1 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 00C2                         lcd_gotoxy(1, 2);
                 ; 0000 00C3                         lcd_print(buffer);
0003e3 940e 0b8d 	CALL SUBOPT_0x10
                 ; 0000 00C4                         delay_ms(3000); // wait
0003e5 eba8      	LDI  R26,LOW(3000)
0003e6 e0bb      	LDI  R27,HIGH(3000)
0003e7 940e 0c47 	CALL _delay_ms
                 ; 0000 00C5                     }
                 _0x23:
                 ; 0000 00C6                 }
                 _0x21:
                 ; 0000 00C7                 memset(buffer,0,32);
0003e9 940e 0b62 	CALL SUBOPT_0x8
0003eb 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 00C8             }
0003ed cf8f      	RJMP _0x16
                 _0x18:
                 ; 0000 00C9         }
                 ; 0000 00CA         else if (stage == STAGE_TEMPERATURE_MONITORING)
0003ee c0f5      	RJMP _0x27
                 _0x15:
0003ef 940e 0b91 	CALL SUBOPT_0x11
0003f1 f411      	BRNE _0x28
                 ; 0000 00CB         {
                 ; 0000 00CC             show_temperature();
0003f2 d497      	RCALL _show_temperature
                 ; 0000 00CD         }
                 ; 0000 00CE         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0003f3 c0f0      	RJMP _0x29
                 _0x28:
0003f4 940e 0b96 	CALL SUBOPT_0x12
0003f6 f009      	BREQ PC+2
0003f7 c053      	RJMP _0x2A
                 ; 0000 00CF         {
                 ; 0000 00D0             lcdCommand(0x01);
0003f8 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00D1             lcd_gotoxy(1, 1);
                 ; 0000 00D2             lcd_print("Number of students : ");
                +
0003fa efaf     +LDI R26 , LOW ( _0xB + ( 159 ) )
0003fb e0b2     +LDI R27 , HIGH ( _0xB + ( 159 ) )
                 	__POINTW2MN _0xB,159
0003fc 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 00D3             lcd_gotoxy(1, 2);
                 ; 0000 00D4             st_counts = read_byte_from_eeprom(0x0);
0003fe 940e 0b7d 	CALL SUBOPT_0xD
                 ; 0000 00D5             memset(buffer, 0, 32);
000400 940e 0b62 	CALL SUBOPT_0x8
000402 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 00D6             itoa(st_counts, buffer);
000404 2fe5      	MOV  R30,R21
000405 e0f0      	LDI  R31,0
000406 93fa      	ST   -Y,R31
000407 93ea      	ST   -Y,R30
000408 e9a4      	LDI  R26,LOW(_buffer)
000409 e0b7      	LDI  R27,HIGH(_buffer)
00040a 940e 0ad0 	CALL _itoa
                 ; 0000 00D7             lcd_print(buffer);
00040c 940e 0b8d 	CALL SUBOPT_0x10
                 ; 0000 00D8             delay_ms(1000);
00040e eea8      	LDI  R26,LOW(1000)
00040f e0b3      	LDI  R27,HIGH(1000)
000410 940e 0c47 	CALL _delay_ms
                 ; 0000 00D9 
                 ; 0000 00DA             for (i = 0; i < st_counts; i++)
                +
000412 e000     +LDI R16 , LOW ( 0 )
000413 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2C:
000414 2fe5      	MOV  R30,R21
000415 01d8      	MOVW R26,R16
000416 e0f0      	LDI  R31,0
000417 17ae      	CP   R26,R30
000418 07bf      	CPC  R27,R31
000419 f544      	BRGE _0x2D
                 ; 0000 00DB             {
                 ; 0000 00DC                 memset(buffer, 0, 32);
00041a 940e 0b62 	CALL SUBOPT_0x8
00041c 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 00DD                 for (j = 0; j < 8; j++)
                +
00041e e020     +LDI R18 , LOW ( 0 )
00041f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2F:
                +
000420 3028     +CPI R18 , LOW ( 8 )
000421 e0e0     +LDI R30 , HIGH ( 8 )
000422 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000423 f46c      	BRGE _0x30
                 ; 0000 00DE                 {
                 ; 0000 00DF                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000424 01f9      	MOVW R30,R18
000425 56ec      	SUBI R30,LOW(-_buffer)
000426 4ff8      	SBCI R31,HIGH(-_buffer)
000427 93ff      	PUSH R31
000428 93ef      	PUSH R30
000429 940e 0b9b 	CALL SUBOPT_0x13
00042b 91af      	POP  R26
00042c 91bf      	POP  R27
00042d 93ec      	ST   X,R30
                 ; 0000 00E0                 }
                +
00042e 5f2f     +SUBI R18 , LOW ( - 1 )
00042f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000430 cfef      	RJMP _0x2F
                 _0x30:
                 ; 0000 00E1                 buffer[j] = '\0';
000431 e9a4      	LDI  R26,LOW(_buffer)
000432 e0b7      	LDI  R27,HIGH(_buffer)
000433 0fa2      	ADD  R26,R18
000434 1fb3      	ADC  R27,R19
000435 e0e0      	LDI  R30,LOW(0)
000436 93ec      	ST   X,R30
                 ; 0000 00E2                 lcdCommand(0x01);
000437 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00E3                 lcd_gotoxy(1, 1);
                 ; 0000 00E4                 lcd_print(buffer);
000439 940e 0b8d 	CALL SUBOPT_0x10
                 ; 0000 00E5                 delay_ms(1000);
00043b eea8      	LDI  R26,LOW(1000)
00043c e0b3      	LDI  R27,HIGH(1000)
00043d 940e 0c47 	CALL _delay_ms
                 ; 0000 00E6             }
                +
00043f 5f0f     +SUBI R16 , LOW ( - 1 )
000440 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000441 cfd2      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00E7 
                 ; 0000 00E8             lcdCommand(0x01);
000442 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00E9             lcd_gotoxy(1, 1);
                 ; 0000 00EA             lcd_print("Press Cancel To Go Back");
                +
000444 e1a5     +LDI R26 , LOW ( _0xB + ( 181 ) )
000445 e0b3     +LDI R27 , HIGH ( _0xB + ( 181 ) )
                 	__POINTW2MN _0xB,181
000446 d42c      	RCALL _lcd_print
                 ; 0000 00EB             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x31:
000447 940e 0b96 	CALL SUBOPT_0x12
000449 f3e9      	BREQ _0x31
                 ; 0000 00EC                 ;
                 ; 0000 00ED         }
                 ; 0000 00EE         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
00044a c099      	RJMP _0x34
                 _0x2A:
00044b e0e6      	LDI  R30,LOW(6)
00044c e0f0      	LDI  R31,HIGH(6)
00044d 15e4      	CP   R30,R4
00044e 05f5      	CPC  R31,R5
00044f f5b9      	BRNE _0x35
                 ; 0000 00EF         {
                 ; 0000 00F0             lcdCommand(0x01);
000450 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 00F1             lcd_gotoxy(1, 1);
                 ; 0000 00F2             lcd_print("Start Transferring...");
                +
000452 e2ad     +LDI R26 , LOW ( _0xB + ( 205 ) )
000453 e0b3     +LDI R27 , HIGH ( _0xB + ( 205 ) )
                 	__POINTW2MN _0xB,205
000454 d41e      	RCALL _lcd_print
                 ; 0000 00F3             st_counts = read_byte_from_eeprom(0x0);
000455 940e 0b7d 	CALL SUBOPT_0xD
                 ; 0000 00F4             for (i = 0; i < st_counts; i++)
                +
000457 e000     +LDI R16 , LOW ( 0 )
000458 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x37:
000459 2fe5      	MOV  R30,R21
00045a 01d8      	MOVW R26,R16
00045b e0f0      	LDI  R31,0
00045c 17ae      	CP   R26,R30
00045d 07bf      	CPC  R27,R31
00045e f494      	BRGE _0x38
                 ; 0000 00F5             {
                 ; 0000 00F6                 for (j = 0; j < 8; j++)
                +
00045f e020     +LDI R18 , LOW ( 0 )
000460 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3A:
                +
000461 3028     +CPI R18 , LOW ( 8 )
000462 e0e0     +LDI R30 , HIGH ( 8 )
000463 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000464 f43c      	BRGE _0x3B
                 ; 0000 00F7                 {
                 ; 0000 00F8                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
000465 940e 0b9b 	CALL SUBOPT_0x13
000467 2fae      	MOV  R26,R30
000468 d4d8      	RCALL _USART_Transmit
                 ; 0000 00F9                 }
                +
000469 5f2f     +SUBI R18 , LOW ( - 1 )
00046a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00046b cff5      	RJMP _0x3A
                 _0x3B:
                 ; 0000 00FA 
                 ; 0000 00FB                 USART_Transmit('\r');
00046c 940e 0ba4 	CALL SUBOPT_0x14
                 ; 0000 00FC                 USART_Transmit('\r');
                 ; 0000 00FD 
                 ; 0000 00FE                 delay_ms(500);
                 ; 0000 00FF             }
                +
00046e 5f0f     +SUBI R16 , LOW ( - 1 )
00046f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000470 cfe8      	RJMP _0x37
                 _0x38:
                 ; 0000 0100             for (j = 0; j < 8; j++)
                +
000471 e020     +LDI R18 , LOW ( 0 )
000472 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3D:
                +
000473 3028     +CPI R18 , LOW ( 8 )
000474 e0e0     +LDI R30 , HIGH ( 8 )
000475 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000476 f42c      	BRGE _0x3E
                 ; 0000 0101             {
                 ; 0000 0102                 USART_Transmit('=');
000477 e3ad      	LDI  R26,LOW(61)
000478 d4c8      	RCALL _USART_Transmit
                 ; 0000 0103             }
                +
000479 5f2f     +SUBI R18 , LOW ( - 1 )
00047a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00047b cff7      	RJMP _0x3D
                 _0x3E:
                 ; 0000 0104 
                 ; 0000 0105             USART_Transmit('\r');
00047c 940e 0ba4 	CALL SUBOPT_0x14
                 ; 0000 0106             USART_Transmit('\r');
                 ; 0000 0107             delay_ms(500);
                 ; 0000 0108 
                 ; 0000 0109             lcdCommand(0x01);
00047e 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 010A             lcd_gotoxy(1, 1);
                 ; 0000 010B             lcd_print("Usart Transmit Finished");
                +
000480 e4a3     +LDI R26 , LOW ( _0xB + ( 227 ) )
000481 e0b3     +LDI R27 , HIGH ( _0xB + ( 227 ) )
                 	__POINTW2MN _0xB,227
000482 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 010C             delay_ms(2000);
                 ; 0000 010D             stage = STAGE_INIT_MENU;
000484 2444      	CLR  R4
000485 2455      	CLR  R5
                 ; 0000 010E         }
                 ; 0000 010F         else if (stage == STAGE_STUDENT_MANAGMENT)
000486 c05d      	RJMP _0x3F
                 _0x35:
000487 940e 0bb4 	CALL SUBOPT_0x16
000489 f469      	BRNE _0x40
                 ; 0000 0110         {
                 ; 0000 0111             lcdCommand(0x01);
00048a 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0112             lcd_gotoxy(1, 1);
                 ; 0000 0113             lcd_print("1: Search Student");
                +
00048c e5ab     +LDI R26 , LOW ( _0xB + ( 251 ) )
00048d e0b3     +LDI R27 , HIGH ( _0xB + ( 251 ) )
                 	__POINTW2MN _0xB,251
00048e 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0114             lcd_gotoxy(1, 2);
                 ; 0000 0115             lcd_print("2: Delete Student");
                +
000490 e6ad     +LDI R26 , LOW ( _0xB + ( 269 ) )
000491 e0b3     +LDI R27 , HIGH ( _0xB + ( 269 ) )
                 	__POINTW2MN _0xB,269
000492 d3e0      	RCALL _lcd_print
                 ; 0000 0116             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x41:
000493 940e 0bb4 	CALL SUBOPT_0x16
000495 f3e9      	BREQ _0x41
                 ; 0000 0117                 ;
                 ; 0000 0118         }
                 ; 0000 0119         else if (stage == STAGE_SEARCH_STUDENT)
000496 c04d      	RJMP _0x44
                 _0x40:
000497 940e 0bb9 	CALL SUBOPT_0x17
000499 f461      	BRNE _0x45
                 ; 0000 011A         {
                 ; 0000 011B             lcdCommand(0x01);
00049a 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 011C             lcd_gotoxy(1, 1);
                 ; 0000 011D             lcd_print("Enter Student Code For Search:");
                +
00049c e7af     +LDI R26 , LOW ( _0xB + ( 287 ) )
00049d e0b3     +LDI R27 , HIGH ( _0xB + ( 287 ) )
                 	__POINTW2MN _0xB,287
00049e 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 011E             lcd_gotoxy(1, 2);
                 ; 0000 011F             lcdCommand(0x0f);   // display on, cursor blinking
0004a0 940e 0b4c 	CALL SUBOPT_0x4
                 ; 0000 0120             delay_us(100 * 16); // wait
                 ; 0000 0121             while (stage == STAGE_SEARCH_STUDENT)
                 _0x46:
0004a2 940e 0bb9 	CALL SUBOPT_0x17
0004a4 f3e9      	BREQ _0x46
                 ; 0000 0122                 ;
                 ; 0000 0123             lcdCommand(0x0c);   // display on, cursor off
0004a5 c03b      	RJMP _0x150
                 ; 0000 0124             delay_us(100 * 16); // wait
                 ; 0000 0125         }
                 ; 0000 0126         else if (stage == STAGE_DELETE_STUDENT)
                 _0x45:
0004a6 940e 0bbe 	CALL SUBOPT_0x18
0004a8 f461      	BRNE _0x4A
                 ; 0000 0127         {
                 ; 0000 0128             lcdCommand(0x01);
0004a9 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0129             lcd_gotoxy(1, 1);
                 ; 0000 012A             lcd_print("Enter Student Code For Delete:");
                +
0004ab e9ae     +LDI R26 , LOW ( _0xB + ( 318 ) )
0004ac e0b3     +LDI R27 , HIGH ( _0xB + ( 318 ) )
                 	__POINTW2MN _0xB,318
0004ad 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 012B             lcd_gotoxy(1, 2);
                 ; 0000 012C             lcdCommand(0x0f);   // display on, cursor blinking
0004af 940e 0b4c 	CALL SUBOPT_0x4
                 ; 0000 012D             delay_us(100 * 16); // wait
                 ; 0000 012E             while (stage == STAGE_DELETE_STUDENT)
                 _0x4B:
0004b1 940e 0bbe 	CALL SUBOPT_0x18
0004b3 f3e9      	BREQ _0x4B
                 ; 0000 012F                 ;
                 ; 0000 0130             lcdCommand(0x0c); // display on, cursor off
0004b4 c02c      	RJMP _0x150
                 ; 0000 0131             delay_us(100 * 16);
                 ; 0000 0132         }
                 ; 0000 0133         else if (stage == STAGE_TRAFFIC_MONITORING)
                 _0x4A:
0004b5 940e 0bc3 	CALL SUBOPT_0x19
0004b7 f421      	BRNE _0x4F
                 ; 0000 0134         {
                 ; 0000 0135             startSonar();
0004b8 d570      	RCALL _startSonar
                 ; 0000 0136             stage = STAGE_INIT_MENU;
0004b9 2444      	CLR  R4
0004ba 2455      	CLR  R5
                 ; 0000 0137         }
                 ; 0000 0138         else if (stage == STAGE_LOGIN_WITH_ADMIN)
0004bb c028      	RJMP _0x50
                 _0x4F:
0004bc 940e 0bc8 	CALL SUBOPT_0x1A
0004be f529      	BRNE _0x51
                 ; 0000 0139         {
                 ; 0000 013A             lcdCommand(0x01);
0004bf 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 013B             lcd_gotoxy(1, 1);
                 ; 0000 013C             lcd_print("Enter Secret Code (or cancel)");
                +
0004c1 ebad     +LDI R26 , LOW ( _0xB + ( 349 ) )
0004c2 e0b3     +LDI R27 , HIGH ( _0xB + ( 349 ) )
                 	__POINTW2MN _0xB,349
0004c3 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 013D             lcd_gotoxy(1, 2);
                 ; 0000 013E             lcdCommand(0x0f);   // display on, cursor blinking
0004c5 940e 0b4c 	CALL SUBOPT_0x4
                 ; 0000 013F             delay_us(100 * 16); // wait
                 ; 0000 0140             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x52:
0004c7 940e 0bc8 	CALL SUBOPT_0x1A
0004c9 f411      	BRNE _0x55
0004ca 2099      	TST  R9
0004cb f009      	BREQ _0x56
                 _0x55:
0004cc c001      	RJMP _0x54
                 _0x56:
                 ; 0000 0141                 ;
0004cd cff9      	RJMP _0x52
                 _0x54:
                 ; 0000 0142             if (logged_in == 1)
0004ce e0e1      	LDI  R30,LOW(1)
0004cf 15e9      	CP   R30,R9
0004d0 f481      	BRNE _0x57
                 ; 0000 0143             {
                 ; 0000 0144                 lcdCommand(0x0c); // display on, cursor off
0004d1 e0ac      	LDI  R26,LOW(12)
0004d2 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0145                 delay_us(100 * 16);
                 ; 0000 0146                 lcdCommand(0x01);
0004d4 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0147                 lcd_gotoxy(1, 1);
                 ; 0000 0148                 lcd_print("1 : Clear EEPROM");
                +
0004d6 edab     +LDI R26 , LOW ( _0xB + ( 379 ) )
0004d7 e0b3     +LDI R27 , HIGH ( _0xB + ( 379 ) )
                 	__POINTW2MN _0xB,379
0004d8 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0149                 lcd_gotoxy(1, 2);
                 ; 0000 014A                 lcd_print("    press cancel to back");
                +
0004da eeac     +LDI R26 , LOW ( _0xB + ( 396 ) )
0004db e0b3     +LDI R27 , HIGH ( _0xB + ( 396 ) )
                 	__POINTW2MN _0xB,396
0004dc d396      	RCALL _lcd_print
                 ; 0000 014B                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x58:
0004dd 940e 0bc8 	CALL SUBOPT_0x1A
0004df f3e9      	BREQ _0x58
                 ; 0000 014C                     ;
                 ; 0000 014D             }
                 ; 0000 014E             else
0004e0 c003      	RJMP _0x5B
                 _0x57:
                 ; 0000 014F             {
                 ; 0000 0150                 lcdCommand(0x0c); // display on, cursor off
                 _0x150:
0004e1 e0ac      	LDI  R26,LOW(12)
0004e2 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0151                 delay_us(100 * 16);
                 ; 0000 0152             }
                 _0x5B:
                 ; 0000 0153         }
                 ; 0000 0154     }
                 _0x51:
                 _0x50:
                 _0x44:
                 _0x3F:
                 _0x34:
                 _0x29:
                 _0x27:
                 _0xF:
                 _0x9:
0004e4 ce70      	RJMP _0x5
                 ; 0000 0155 }
                 _0x5C:
0004e5 cfff      	RJMP _0x5C
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000260           	.BYTE 0x1A5
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 0159 {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
0004e6 920a      	ST   -Y,R0
0004e7 921a      	ST   -Y,R1
0004e8 92fa      	ST   -Y,R15
0004e9 936a      	ST   -Y,R22
0004ea 937a      	ST   -Y,R23
0004eb 938a      	ST   -Y,R24
0004ec 939a      	ST   -Y,R25
0004ed 93aa      	ST   -Y,R26
0004ee 93ba      	ST   -Y,R27
0004ef 93ea      	ST   -Y,R30
0004f0 93fa      	ST   -Y,R31
0004f1 b7ef      	IN   R30,SREG
0004f2 93ea      	ST   -Y,R30
                 ; 0000 015A     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 015B     int i;
                 ; 0000 015C 
                 ; 0000 015D     // detect the key
                 ; 0000 015E     while (1)
0004f3 9722      	SBIW R28,2
0004f4 940e 0e03 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 015F     {
                 ; 0000 0160         KEY_PRT = 0xEF;            // ground row 0
0004f6 eeef      	LDI  R30,LOW(239)
0004f7 940e 0bd0 	CALL SUBOPT_0x1C
                 ; 0000 0161         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0162         if (colloc != 0x0F)        // column detected
0004f9 f011      	BREQ _0x60
                 ; 0000 0163         {
                 ; 0000 0164             rowloc = 0; // save row location
0004fa e000      	LDI  R16,LOW(0)
                 ; 0000 0165             break;      // exit while loop
0004fb c012      	RJMP _0x5F
                 ; 0000 0166         }
                 ; 0000 0167         KEY_PRT = 0xDF;            // ground row 1
                 _0x60:
0004fc edef      	LDI  R30,LOW(223)
0004fd 940e 0bd0 	CALL SUBOPT_0x1C
                 ; 0000 0168         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0169         if (colloc != 0x0F)        // column detected
0004ff f011      	BREQ _0x61
                 ; 0000 016A         {
                 ; 0000 016B             rowloc = 1; // save row location
000500 e001      	LDI  R16,LOW(1)
                 ; 0000 016C             break;      // exit while loop
000501 c00c      	RJMP _0x5F
                 ; 0000 016D         }
                 ; 0000 016E         KEY_PRT = 0xBF;            // ground row 2
                 _0x61:
000502 ebef      	LDI  R30,LOW(191)
000503 940e 0bd0 	CALL SUBOPT_0x1C
                 ; 0000 016F         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0170         if (colloc != 0x0F)        // column detected
000505 f011      	BREQ _0x62
                 ; 0000 0171         {
                 ; 0000 0172             rowloc = 2; // save row location
000506 e002      	LDI  R16,LOW(2)
                 ; 0000 0173             break;      // exit while loop
000507 c006      	RJMP _0x5F
                 ; 0000 0174         }
                 ; 0000 0175         KEY_PRT = 0x7F;            // ground row 3
                 _0x62:
000508 e7ef      	LDI  R30,LOW(127)
000509 bbe5      	OUT  0x15,R30
                 ; 0000 0176         colloc = (KEY_PIN & 0x0F); // read the columns
00050a b3e3      	IN   R30,0x13
00050b 70ef      	ANDI R30,LOW(0xF)
00050c 2f1e      	MOV  R17,R30
                 ; 0000 0177         rowloc = 3;                // save row location
00050d e003      	LDI  R16,LOW(3)
                 ; 0000 0178         break;                     // exit while loop
                 ; 0000 0179     }
                 _0x5F:
                 ; 0000 017A     // check column and send result to Port D
                 ; 0000 017B     if (colloc == 0x0E)
00050e 301e      	CPI  R17,14
00050f f411      	BRNE _0x63
                 ; 0000 017C         cl = 0;
000510 e030      	LDI  R19,LOW(0)
                 ; 0000 017D     else if (colloc == 0x0D)
000511 c009      	RJMP _0x64
                 _0x63:
000512 301d      	CPI  R17,13
000513 f411      	BRNE _0x65
                 ; 0000 017E         cl = 1;
000514 e031      	LDI  R19,LOW(1)
                 ; 0000 017F     else if (colloc == 0x0B)
000515 c005      	RJMP _0x66
                 _0x65:
000516 301b      	CPI  R17,11
000517 f411      	BRNE _0x67
                 ; 0000 0180         cl = 2;
000518 e032      	LDI  R19,LOW(2)
                 ; 0000 0181     else
000519 c001      	RJMP _0x68
                 _0x67:
                 ; 0000 0182         cl = 3;
00051a e033      	LDI  R19,LOW(3)
                 ; 0000 0183 
                 ; 0000 0184     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x68:
                 _0x66:
                 _0x64:
00051b b3e5      	IN   R30,0x15
00051c 70ef      	ANDI R30,LOW(0xF)
00051d bbe5      	OUT  0x15,R30
                 ; 0000 0185 
                 ; 0000 0186     // inside menu level 1
                 ; 0000 0187     if (stage == STAGE_INIT_MENU)
00051e 2c04      	MOV  R0,R4
00051f 2805      	OR   R0,R5
000520 f009      	BREQ PC+2
000521 c070      	RJMP _0x69
                 ; 0000 0188     {
                 ; 0000 0189         switch (keypad[rowloc][cl] - '0')
000522 940e 0bd6 	CALL SUBOPT_0x1D
000524 91ec      	LD   R30,X
000525 e0f0      	LDI  R31,0
000526 97f0      	SBIW R30,48
                 ; 0000 018A         {
                 ; 0000 018B         case OPTION_ATTENDENCE:
000527 30e1      	CPI  R30,LOW(0x1)
000528 e0a0      	LDI  R26,HIGH(0x1)
000529 07fa      	CPC  R31,R26
00052a f421      	BRNE _0x6D
                 ; 0000 018C             stage = STAGE_ATTENDENC_MENU;
00052b e0e1      	LDI  R30,LOW(1)
00052c e0f0      	LDI  R31,HIGH(1)
00052d 012f      	MOVW R4,R30
                 ; 0000 018D             break;
00052e c047      	RJMP _0x6C
                 ; 0000 018E         case OPTION_TEMPERATURE_MONITORING:
                 _0x6D:
00052f 30e4      	CPI  R30,LOW(0x4)
000530 e0a0      	LDI  R26,HIGH(0x4)
000531 07fa      	CPC  R31,R26
000532 f421      	BRNE _0x6E
                 ; 0000 018F             stage = STAGE_TEMPERATURE_MONITORING;
000533 e0e4      	LDI  R30,LOW(4)
000534 e0f0      	LDI  R31,HIGH(4)
000535 012f      	MOVW R4,R30
                 ; 0000 0190             break;
000536 c03f      	RJMP _0x6C
                 ; 0000 0191         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x6E:
000537 30e3      	CPI  R30,LOW(0x3)
000538 e0a0      	LDI  R26,HIGH(0x3)
000539 07fa      	CPC  R31,R26
00053a f421      	BRNE _0x6F
                 ; 0000 0192             stage = STAGE_VIEW_PRESENT_STUDENTS;
00053b e0e5      	LDI  R30,LOW(5)
00053c e0f0      	LDI  R31,HIGH(5)
00053d 012f      	MOVW R4,R30
                 ; 0000 0193             break;
00053e c037      	RJMP _0x6C
                 ; 0000 0194         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x6F:
00053f 30e5      	CPI  R30,LOW(0x5)
000540 e0a0      	LDI  R26,HIGH(0x5)
000541 07fa      	CPC  R31,R26
000542 f421      	BRNE _0x70
                 ; 0000 0195             stage = STAGE_RETRIEVE_STUDENT_DATA;
000543 e0e6      	LDI  R30,LOW(6)
000544 e0f0      	LDI  R31,HIGH(6)
000545 012f      	MOVW R4,R30
                 ; 0000 0196             break;
000546 c02f      	RJMP _0x6C
                 ; 0000 0197         case OPTION_STUDENT_MANAGEMENT:
                 _0x70:
000547 30e2      	CPI  R30,LOW(0x2)
000548 e0a0      	LDI  R26,HIGH(0x2)
000549 07fa      	CPC  R31,R26
00054a f421      	BRNE _0x71
                 ; 0000 0198             stage = STAGE_STUDENT_MANAGMENT;
00054b e0e7      	LDI  R30,LOW(7)
00054c e0f0      	LDI  R31,HIGH(7)
00054d 012f      	MOVW R4,R30
                 ; 0000 0199             break;
00054e c027      	RJMP _0x6C
                 ; 0000 019A         case OPTION_TRAFFIC_MONITORING:
                 _0x71:
00054f 30e6      	CPI  R30,LOW(0x6)
000550 e0a0      	LDI  R26,HIGH(0x6)
000551 07fa      	CPC  R31,R26
000552 f421      	BRNE _0x72
                 ; 0000 019B             stage = STAGE_TRAFFIC_MONITORING;
000553 e0ea      	LDI  R30,LOW(10)
000554 e0f0      	LDI  R31,HIGH(10)
000555 012f      	MOVW R4,R30
                 ; 0000 019C             break;
000556 c01f      	RJMP _0x6C
                 ; 0000 019D         case OPTION_LOGIN_WITH_ADMIN:
                 _0x72:
000557 30e7      	CPI  R30,LOW(0x7)
000558 e0a0      	LDI  R26,HIGH(0x7)
000559 07fa      	CPC  R31,R26
00055a f421      	BRNE _0x73
                 ; 0000 019E             stage = STAGE_LOGIN_WITH_ADMIN;
00055b e0eb      	LDI  R30,LOW(11)
00055c e0f0      	LDI  R31,HIGH(11)
00055d 012f      	MOVW R4,R30
                 ; 0000 019F             break;
00055e c017      	RJMP _0x6C
                 ; 0000 01A0         case OPTION_LOGOUT:
                 _0x73:
00055f 30e8      	CPI  R30,LOW(0x8)
000560 e0a0      	LDI  R26,HIGH(0x8)
000561 07fa      	CPC  R31,R26
000562 f499      	BRNE _0x77
                 ; 0000 01A1 #asm("cli") // disable interrupts
000563 94f8      	cli
                 ; 0000 01A2             if (logged_in == 1)
000564 e0e1      	LDI  R30,LOW(1)
000565 15e9      	CP   R30,R9
000566 f479      	BRNE _0x75
                 ; 0000 01A3             {
                 ; 0000 01A4                 lcdCommand(0x1);
000567 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 01A5                 lcd_gotoxy(1, 1);
                 ; 0000 01A6                 lcd_print("Logout ...");
                +
000569 e0a5     +LDI R26 , LOW ( _0x76 + ( 0 ) )
00056a e0b4     +LDI R27 , HIGH ( _0x76 + ( 0 ) )
                 	__POINTW2MN _0x76,0
00056b 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 01A7                 lcd_gotoxy(1, 2);
                 ; 0000 01A8                 lcd_print("Going To Admin Page In 2 Sec");
                +
00056d e1a0     +LDI R26 , LOW ( _0x76 + ( 11 ) )
00056e e0b4     +LDI R27 , HIGH ( _0x76 + ( 11 ) )
                 	__POINTW2MN _0x76,11
00056f 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 01A9                 delay_ms(2000);
                 ; 0000 01AA                 logged_in = 0;
000571 2499      	CLR  R9
                 ; 0000 01AB #asm("sei")
000572 9478      	sei
                 ; 0000 01AC                 stage = STAGE_LOGIN_WITH_ADMIN;
000573 e0eb      	LDI  R30,LOW(11)
000574 e0f0      	LDI  R31,HIGH(11)
000575 012f      	MOVW R4,R30
                 ; 0000 01AD             }
                 ; 0000 01AE             break;
                 _0x75:
                 ; 0000 01AF         default:
                 _0x77:
                 ; 0000 01B0             break;
                 ; 0000 01B1         }
                 _0x6C:
                 ; 0000 01B2 
                 ; 0000 01B3         if (keypad[rowloc][cl] == 'L')
000576 940e 0bd6 	CALL SUBOPT_0x1D
000578 91ac      	LD   R26,X
000579 34ac      	CPI  R26,LOW(0x4C)
00057a f449      	BRNE _0x78
                 ; 0000 01B4         {
                 ; 0000 01B5             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
00057b e0e0      	LDI  R30,LOW(0)
00057c 15e7      	CP   R30,R7
00057d f420      	BRSH _0x79
00057e 2de7      	MOV  R30,R7
00057f e0f0      	LDI  R31,0
000580 9731      	SBIW R30,1
000581 c001      	RJMP _0x7A
                 _0x79:
000582 e0e3      	LDI  R30,LOW(3)
                 _0x7A:
000583 2e7e      	MOV  R7,R30
                 ; 0000 01B6         }
                 ; 0000 01B7         if (keypad[rowloc][cl] == 'R')
                 _0x78:
000584 940e 0bd6 	CALL SUBOPT_0x1D
000586 91ac      	LD   R26,X
000587 35a2      	CPI  R26,LOW(0x52)
000588 f441      	BRNE _0x7C
                 ; 0000 01B8         {
                 ; 0000 01B9             page_num = (page_num + 1) % MENU_PAGE_COUNT;
000589 2de7      	MOV  R30,R7
00058a e0f0      	LDI  R31,0
00058b 9631      	ADIW R30,1
00058c e0a3      	LDI  R26,LOW(3)
00058d e0b0      	LDI  R27,HIGH(3)
00058e 940e 0dea 	CALL __MANDW12
000590 2e7e      	MOV  R7,R30
                 ; 0000 01BA         }
                 ; 0000 01BB     }
                 _0x7C:
                 ; 0000 01BC     else if (stage == STAGE_ATTENDENC_MENU)
000591 c287      	RJMP _0x7D
                 _0x69:
000592 940e 0b33 	CALL SUBOPT_0x0
000594 f519      	BRNE _0x7E
                 ; 0000 01BD     {
                 ; 0000 01BE         switch (keypad[rowloc][cl])
000595 940e 0bd6 	CALL SUBOPT_0x1D
000597 91ec      	LD   R30,X
000598 e0f0      	LDI  R31,0
                 ; 0000 01BF         {
                 ; 0000 01C0         case 'C':
000599 34e3      	CPI  R30,LOW(0x43)
00059a e0a0      	LDI  R26,HIGH(0x43)
00059b 07fa      	CPC  R31,R26
00059c f419      	BRNE _0x82
                 ; 0000 01C1             stage = STAGE_INIT_MENU;
00059d 2444      	CLR  R4
00059e 2455      	CLR  R5
                 ; 0000 01C2             break;
00059f c017      	RJMP _0x81
                 ; 0000 01C3         case '1':
                 _0x82:
0005a0 33e1      	CPI  R30,LOW(0x31)
0005a1 e0a0      	LDI  R26,HIGH(0x31)
0005a2 07fa      	CPC  R31,R26
0005a3 f441      	BRNE _0x83
                 ; 0000 01C4             memset(buffer, 0, 32);
0005a4 940e 0b62 	CALL SUBOPT_0x8
0005a6 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 01C5             stage = STAGE_SUBMIT_CODE;
0005a8 e0e2      	LDI  R30,LOW(2)
0005a9 e0f0      	LDI  R31,HIGH(2)
0005aa 012f      	MOVW R4,R30
                 ; 0000 01C6             break;
0005ab c00b      	RJMP _0x81
                 ; 0000 01C7         case '2':
                 _0x83:
0005ac 33e2      	CPI  R30,LOW(0x32)
0005ad e0a0      	LDI  R26,HIGH(0x32)
0005ae 07fa      	CPC  R31,R26
0005af f439      	BRNE _0x85
                 ; 0000 01C8             memset(buffer, 0, 32);
0005b0 940e 0b62 	CALL SUBOPT_0x8
0005b2 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 01C9             stage = STAGE_SUBMIT_WITH_CARD;
0005b4 e0e3      	LDI  R30,LOW(3)
0005b5 e0f0      	LDI  R31,HIGH(3)
0005b6 012f      	MOVW R4,R30
                 ; 0000 01CA             break;
                 ; 0000 01CB         default:
                 _0x85:
                 ; 0000 01CC             break;
                 ; 0000 01CD         }
                 _0x81:
                 ; 0000 01CE     }
                 ; 0000 01CF     else if (stage == STAGE_SUBMIT_CODE)
0005b7 c261      	RJMP _0x86
                 _0x7E:
0005b8 940e 0b47 	CALL SUBOPT_0x3
0005ba f009      	BREQ PC+2
0005bb c09e      	RJMP _0x87
                 ; 0000 01D0     {
                 ; 0000 01D1 
                 ; 0000 01D2         if (keypad[rowloc][cl] == 'C')
0005bc 940e 0bd6 	CALL SUBOPT_0x1D
0005be 91ac      	LD   R26,X
0005bf 34a3      	CPI  R26,LOW(0x43)
0005c0 f439      	BRNE _0x88
                 ; 0000 01D3         {
                 ; 0000 01D4             memset(buffer, 0, 32);
0005c1 940e 0b62 	CALL SUBOPT_0x8
0005c3 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 01D5             stage = STAGE_ATTENDENC_MENU;
0005c5 e0e1      	LDI  R30,LOW(1)
0005c6 e0f0      	LDI  R31,HIGH(1)
0005c7 012f      	MOVW R4,R30
                 ; 0000 01D6         }
                 ; 0000 01D7         if ((keypad[rowloc][cl] - '0') < 10)
                 _0x88:
0005c8 940e 0bd6 	CALL SUBOPT_0x1D
0005ca 91ec      	LD   R30,X
0005cb e0f0      	LDI  R31,0
0005cc 97fa      	SBIW R30,58
0005cd f47c      	BRGE _0x89
                 ; 0000 01D8         {
                 ; 0000 01D9             if (strlen(buffer) <= 30)
0005ce 940e 0b5e 	CALL SUBOPT_0x7
0005d0 977f      	SBIW R30,31
0005d1 f450      	BRSH _0x8A
                 ; 0000 01DA             {
                 ; 0000 01DB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0005d2 940e 0b5e 	CALL SUBOPT_0x7
0005d4 940e 0be2 	CALL SUBOPT_0x1E
0005d6 940e 0be6 	CALL SUBOPT_0x1F
                 ; 0000 01DC                 buffer[strlen(buffer) + 1] = '\0';
0005d8 940e 0bea 	CALL SUBOPT_0x20
                 ; 0000 01DD                 lcdData(keypad[rowloc][cl]);
0005da 91ac      	LD   R26,X
0005db d25a      	RCALL _lcdData
                 ; 0000 01DE             }
                 ; 0000 01DF         }
                 _0x8A:
                 ; 0000 01E0         else if (keypad[rowloc][cl] == 'D')
0005dc c07c      	RJMP _0x8B
                 _0x89:
0005dd 940e 0bd6 	CALL SUBOPT_0x1D
0005df 91ac      	LD   R26,X
0005e0 34a4      	CPI  R26,LOW(0x44)
0005e1 f461      	BRNE _0x8C
                 ; 0000 01E1         {
                 ; 0000 01E2             buffer_len = strlen(buffer);
0005e2 940e 0b5e 	CALL SUBOPT_0x7
0005e4 2f5e      	MOV  R21,R30
                 ; 0000 01E3             if (buffer_len > 0)
0005e5 3051      	CPI  R21,1
0005e6 f030      	BRLO _0x8D
                 ; 0000 01E4             {
                 ; 0000 01E5                 buffer[buffer_len - 1] = '\0';
0005e7 940e 0bef 	CALL SUBOPT_0x21
                 ; 0000 01E6                 lcdCommand(0x10);
                 ; 0000 01E7                 lcd_print(" ");
                +
0005e9 e2ad     +LDI R26 , LOW ( _0x76 + ( 40 ) )
0005ea e0b4     +LDI R27 , HIGH ( _0x76 + ( 40 ) )
                 	__POINTW2MN _0x76,40
0005eb 940e 0bf9 	CALL SUBOPT_0x22
                 ; 0000 01E8                 lcdCommand(0x10);
                 ; 0000 01E9             }
                 ; 0000 01EA         }
                 _0x8D:
                 ; 0000 01EB         else if (keypad[rowloc][cl] == 'E')
0005ed c06b      	RJMP _0x8E
                 _0x8C:
0005ee 940e 0bd6 	CALL SUBOPT_0x1D
0005f0 91ac      	LD   R26,X
0005f1 34a5      	CPI  R26,LOW(0x45)
0005f2 f009      	BREQ PC+2
0005f3 c05d      	RJMP _0x8F
                 ; 0000 01EC         {
                 ; 0000 01ED 
                 ; 0000 01EE #asm("cli")
0005f4 94f8      	cli
                 ; 0000 01EF 
                 ; 0000 01F0             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 01F1                 strlen(buffer) != 8)
0005f5 940e 0b62 	CALL SUBOPT_0x8
                +
0005f7 e2ef     +LDI R30 , LOW ( _0x76 + ( 42 ) )
0005f8 e0f4     +LDI R31 , HIGH ( _0x76 + ( 42 ) )
                 	__POINTW1MN _0x76,42
0005f9 940e 0b6d 	CALL SUBOPT_0xA
0005fb f431      	BRNE _0x91
0005fc 940e 0b5e 	CALL SUBOPT_0x7
0005fe 30e8      	CPI  R30,LOW(0x8)
0005ff e0a0      	LDI  R26,HIGH(0x8)
000600 07fa      	CPC  R31,R26
000601 f061      	BREQ _0x90
                 _0x91:
                 ; 0000 01F2             {
                 ; 0000 01F3 
                 ; 0000 01F4                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000602 9a97      	SBI  0x12,7
                 ; 0000 01F5                 lcdCommand(0x01);
000603 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 01F6                 lcd_gotoxy(1, 1);
                 ; 0000 01F7                 lcd_print("Incorrect Student Code Format");
                +
000605 e3a2     +LDI R26 , LOW ( _0x76 + ( 45 ) )
000606 e0b4     +LDI R27 , HIGH ( _0x76 + ( 45 ) )
                 	__POINTW2MN _0x76,45
000607 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 01F8                 lcd_gotoxy(1, 2);
                 ; 0000 01F9                 lcd_print("You Will Back Menu In 2 Second");
                +
000609 e5a0     +LDI R26 , LOW ( _0x76 + ( 75 ) )
00060a e0b4     +LDI R27 , HIGH ( _0x76 + ( 75 ) )
                 	__POINTW2MN _0x76,75
00060b 940e 0b7a 	CALL SUBOPT_0xC
                 ; 0000 01FA                 delay_ms(2000);
                 ; 0000 01FB                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 01FC             }
                 ; 0000 01FD             else if (search_student_code() > 0)
00060d c03d      	RJMP _0x93
                 _0x90:
00060e d34f      	RCALL _search_student_code
00060f 30e1      	CPI  R30,LOW(0x1)
000610 f060      	BRLO _0x94
                 ; 0000 01FE             {
                 ; 0000 01FF                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000611 9a97      	SBI  0x12,7
                 ; 0000 0200                 lcdCommand(0x01);
000612 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0201                 lcd_gotoxy(1, 1);
                 ; 0000 0202                 lcd_print("Duplicate Student Code Entered");
                +
000614 e6af     +LDI R26 , LOW ( _0x76 + ( 106 ) )
000615 e0b4     +LDI R27 , HIGH ( _0x76 + ( 106 ) )
                 	__POINTW2MN _0x76,106
000616 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0203                 lcd_gotoxy(1, 2);
                 ; 0000 0204                 lcd_print("You Will Back Menu In 2 Second");
                +
000618 e8ae     +LDI R26 , LOW ( _0x76 + ( 137 ) )
000619 e0b4     +LDI R27 , HIGH ( _0x76 + ( 137 ) )
                 	__POINTW2MN _0x76,137
00061a 940e 0b7a 	CALL SUBOPT_0xC
                 ; 0000 0205                 delay_ms(2000);
                 ; 0000 0206                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0207             }
                 ; 0000 0208             else
00061c c02e      	RJMP _0x95
                 _0x94:
                 ; 0000 0209             {
                 ; 0000 020A                 // save the buffer to EEPROM
                 ; 0000 020B                 st_counts = read_byte_from_eeprom(0x0);
00061d 940e 0bfe 	CALL SUBOPT_0x23
00061f 2f2e      	MOV  R18,R30
                 ; 0000 020C                 for (i = 0; i < 8; i++)
000620 e0e0      	LDI  R30,LOW(0)
000621 83ee      	STD  Y+6,R30
000622 83ef      	STD  Y+6+1,R30
                 _0x97:
000623 81ae      	LDD  R26,Y+6
000624 81bf      	LDD  R27,Y+6+1
000625 9718      	SBIW R26,8
000626 f4ac      	BRGE _0x98
                 ; 0000 020D                 {
                 ; 0000 020E                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000627 2fe2      	MOV  R30,R18
000628 940e 0b83 	CALL SUBOPT_0xE
00062a 81ae      	LDD  R26,Y+6
00062b 81bf      	LDD  R27,Y+6+1
00062c 0fea      	ADD  R30,R26
00062d 1ffb      	ADC  R31,R27
00062e 93fa      	ST   -Y,R31
00062f 93ea      	ST   -Y,R30
000630 85e8      	LDD  R30,Y+8
000631 85f9      	LDD  R31,Y+8+1
000632 56ec      	SUBI R30,LOW(-_buffer)
000633 4ff8      	SBCI R31,HIGH(-_buffer)
000634 81a0      	LD   R26,Z
000635 d300      	RCALL _write_byte_to_eeprom
                 ; 0000 020F                 }
000636 81ee      	LDD  R30,Y+6
000637 81ff      	LDD  R31,Y+6+1
000638 9631      	ADIW R30,1
000639 83ee      	STD  Y+6,R30
00063a 83ff      	STD  Y+6+1,R31
00063b cfe7      	RJMP _0x97
                 _0x98:
                 ; 0000 0210                 write_byte_to_eeprom(0x0, st_counts + 1);
00063c 940e 0b88 	CALL SUBOPT_0xF
00063e 2fa2      	MOV  R26,R18
00063f 5faf      	SUBI R26,-LOW(1)
000640 d2f5      	RCALL _write_byte_to_eeprom
                 ; 0000 0211 
                 ; 0000 0212                 lcdCommand(0x01);
000641 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0213                 lcd_gotoxy(1, 1);
                 ; 0000 0214                 lcd_print("Student Code Successfully Added");
                +
000643 eaad     +LDI R26 , LOW ( _0x76 + ( 168 ) )
000644 e0b4     +LDI R27 , HIGH ( _0x76 + ( 168 ) )
                 	__POINTW2MN _0x76,168
000645 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0215                 lcd_gotoxy(1, 2);
                 ; 0000 0216                 lcd_print("You Will Back Menu In 2 Second");
                +
000647 ecad     +LDI R26 , LOW ( _0x76 + ( 200 ) )
000648 e0b4     +LDI R27 , HIGH ( _0x76 + ( 200 ) )
                 	__POINTW2MN _0x76,200
000649 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 0217                 delay_ms(2000);
                 ; 0000 0218             }
                 _0x95:
                 _0x93:
                 ; 0000 0219             memset(buffer, 0, 32);
00064b 940e 0b62 	CALL SUBOPT_0x8
00064d 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 021A #asm("sei")
00064f 9478      	sei
                 ; 0000 021B             stage = STAGE_ATTENDENC_MENU;
000650 c005      	RJMP _0x151
                 ; 0000 021C         }
                 ; 0000 021D         else if (keypad[rowloc][cl] == 'C')
                 _0x8F:
000651 940e 0bd6 	CALL SUBOPT_0x1D
000653 91ac      	LD   R26,X
000654 34a3      	CPI  R26,LOW(0x43)
000655 f419      	BRNE _0x9A
                 ; 0000 021E             stage = STAGE_ATTENDENC_MENU;
                 _0x151:
000656 e0e1      	LDI  R30,LOW(1)
000657 e0f0      	LDI  R31,HIGH(1)
000658 012f      	MOVW R4,R30
                 ; 0000 021F     }
                 _0x9A:
                 _0x8E:
                 _0x8B:
                 ; 0000 0220     else if (stage == STAGE_SUBMIT_WITH_CARD)
000659 c1bf      	RJMP _0x9B
                 _0x87:
00065a 940e 0b54 	CALL SUBOPT_0x5
00065c f469      	BRNE _0x9C
                 ; 0000 0221     {
                 ; 0000 0222         if (keypad[rowloc][cl] == 'C')
00065d 940e 0bd6 	CALL SUBOPT_0x1D
00065f 91ac      	LD   R26,X
000660 34a3      	CPI  R26,LOW(0x43)
000661 f439      	BRNE _0x9D
                 ; 0000 0223         {
                 ; 0000 0224             memset(buffer, 0, 32);
000662 940e 0b62 	CALL SUBOPT_0x8
000664 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 0225             stage = STAGE_ATTENDENC_MENU;
000666 e0e1      	LDI  R30,LOW(1)
000667 e0f0      	LDI  R31,HIGH(1)
000668 012f      	MOVW R4,R30
                 ; 0000 0226         }
                 ; 0000 0227     }
                 _0x9D:
                 ; 0000 0228     else if (stage == STAGE_TEMPERATURE_MONITORING)
000669 c1af      	RJMP _0x9E
                 _0x9C:
00066a 940e 0b91 	CALL SUBOPT_0x11
00066c f441      	BRNE _0x9F
                 ; 0000 0229     {
                 ; 0000 022A 
                 ; 0000 022B         if (keypad[rowloc][cl] == 'C')
00066d 940e 0bd6 	CALL SUBOPT_0x1D
00066f 91ac      	LD   R26,X
000670 34a3      	CPI  R26,LOW(0x43)
000671 f411      	BRNE _0xA0
                 ; 0000 022C             stage = STAGE_INIT_MENU;
000672 2444      	CLR  R4
000673 2455      	CLR  R5
                 ; 0000 022D     }
                 _0xA0:
                 ; 0000 022E     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000674 c1a4      	RJMP _0xA1
                 _0x9F:
000675 940e 0b96 	CALL SUBOPT_0x12
000677 f441      	BRNE _0xA2
                 ; 0000 022F     {
                 ; 0000 0230         if (keypad[rowloc][cl] == 'C')
000678 940e 0bd6 	CALL SUBOPT_0x1D
00067a 91ac      	LD   R26,X
00067b 34a3      	CPI  R26,LOW(0x43)
00067c f411      	BRNE _0xA3
                 ; 0000 0231             stage = STAGE_INIT_MENU;
00067d 2444      	CLR  R4
00067e 2455      	CLR  R5
                 ; 0000 0232     }
                 _0xA3:
                 ; 0000 0233     else if (stage == STAGE_STUDENT_MANAGMENT)
00067f c199      	RJMP _0xA4
                 _0xA2:
000680 940e 0bb4 	CALL SUBOPT_0x16
000682 f591      	BRNE _0xA5
                 ; 0000 0234     {
                 ; 0000 0235         if (keypad[rowloc][cl] == 'C')
000683 940e 0bd6 	CALL SUBOPT_0x1D
000685 91ac      	LD   R26,X
000686 34a3      	CPI  R26,LOW(0x43)
000687 f419      	BRNE _0xA6
                 ; 0000 0236             stage = STAGE_INIT_MENU;
000688 2444      	CLR  R4
000689 2455      	CLR  R5
                 ; 0000 0237         else if (keypad[rowloc][cl] == '1')
00068a c029      	RJMP _0xA7
                 _0xA6:
00068b 940e 0bd6 	CALL SUBOPT_0x1D
00068d 91ac      	LD   R26,X
00068e 33a1      	CPI  R26,LOW(0x31)
00068f f419      	BRNE _0xA8
                 ; 0000 0238             stage = STAGE_SEARCH_STUDENT;
000690 e0e8      	LDI  R30,LOW(8)
000691 e0f0      	LDI  R31,HIGH(8)
000692 c020      	RJMP _0x152
                 ; 0000 0239         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xA8:
000693 940e 0bd6 	CALL SUBOPT_0x1D
000695 91ac      	LD   R26,X
000696 33a2      	CPI  R26,LOW(0x32)
000697 f419      	BRNE _0xAB
000698 e0e1      	LDI  R30,LOW(1)
000699 15e9      	CP   R30,R9
00069a f009      	BREQ _0xAC
                 _0xAB:
00069b c003      	RJMP _0xAA
                 _0xAC:
                 ; 0000 023A             stage = STAGE_DELETE_STUDENT;
00069c e0e9      	LDI  R30,LOW(9)
00069d e0f0      	LDI  R31,HIGH(9)
00069e c014      	RJMP _0x152
                 ; 0000 023B         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xAA:
00069f 940e 0bd6 	CALL SUBOPT_0x1D
0006a1 91ac      	LD   R26,X
0006a2 33a2      	CPI  R26,LOW(0x32)
0006a3 f411      	BRNE _0xAF
0006a4 2099      	TST  R9
0006a5 f009      	BREQ _0xB0
                 _0xAF:
0006a6 c00d      	RJMP _0xAE
                 _0xB0:
                 ; 0000 023C         {
                 ; 0000 023D             lcdCommand(0x01);
0006a7 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 023E             lcd_gotoxy(1, 1);
                 ; 0000 023F             lcd_print("You Must First Login");
                +
0006a9 eeac     +LDI R26 , LOW ( _0x76 + ( 231 ) )
0006aa e0b4     +LDI R27 , HIGH ( _0x76 + ( 231 ) )
                 	__POINTW2MN _0x76,231
0006ab 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0240             lcd_gotoxy(1, 2);
                 ; 0000 0241             lcd_print("You Will Go Admin Page 2 Sec");
                +
0006ad e0a1     +LDI R26 , LOW ( _0x76 + ( 252 ) )
0006ae e0b5     +LDI R27 , HIGH ( _0x76 + ( 252 ) )
                 	__POINTW2MN _0x76,252
0006af 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 0242             delay_ms(2000);
                 ; 0000 0243             stage = STAGE_LOGIN_WITH_ADMIN;
0006b1 e0eb      	LDI  R30,LOW(11)
0006b2 e0f0      	LDI  R31,HIGH(11)
                 _0x152:
0006b3 012f      	MOVW R4,R30
                 ; 0000 0244         }
                 ; 0000 0245     }
                 _0xAE:
                 _0xA7:
                 ; 0000 0246     else if (stage == STAGE_SEARCH_STUDENT)
0006b4 c164      	RJMP _0xB1
                 _0xA5:
0006b5 940e 0bb9 	CALL SUBOPT_0x17
0006b7 f009      	BREQ PC+2
0006b8 c060      	RJMP _0xB2
                 ; 0000 0247     {
                 ; 0000 0248         if (keypad[rowloc][cl] == 'C')
0006b9 940e 0bd6 	CALL SUBOPT_0x1D
0006bb 91ac      	LD   R26,X
0006bc 34a3      	CPI  R26,LOW(0x43)
0006bd f429      	BRNE _0xB3
                 ; 0000 0249         {
                 ; 0000 024A             memset(buffer, 0, 32);
0006be 940e 0b62 	CALL SUBOPT_0x8
0006c0 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 024B             stage = STAGE_STUDENT_MANAGMENT;
0006c2 c052      	RJMP _0x153
                 ; 0000 024C         }
                 ; 0000 024D         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xB3:
0006c3 940e 0bd6 	CALL SUBOPT_0x1D
0006c5 91ec      	LD   R30,X
0006c6 e0f0      	LDI  R31,0
0006c7 97fa      	SBIW R30,58
0006c8 f47c      	BRGE _0xB5
                 ; 0000 024E         {
                 ; 0000 024F             if (strlen(buffer) <= 30)
0006c9 940e 0b5e 	CALL SUBOPT_0x7
0006cb 977f      	SBIW R30,31
0006cc f450      	BRSH _0xB6
                 ; 0000 0250             {
                 ; 0000 0251                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0006cd 940e 0b5e 	CALL SUBOPT_0x7
0006cf 940e 0be2 	CALL SUBOPT_0x1E
0006d1 940e 0be6 	CALL SUBOPT_0x1F
                 ; 0000 0252                 buffer[strlen(buffer) + 1] = '\0';
0006d3 940e 0bea 	CALL SUBOPT_0x20
                 ; 0000 0253                 lcdData(keypad[rowloc][cl]);
0006d5 91ac      	LD   R26,X
0006d6 d15f      	RCALL _lcdData
                 ; 0000 0254             }
                 ; 0000 0255         }
                 _0xB6:
                 ; 0000 0256         else if (keypad[rowloc][cl] == 'D')
0006d7 c040      	RJMP _0xB7
                 _0xB5:
0006d8 940e 0bd6 	CALL SUBOPT_0x1D
0006da 91ac      	LD   R26,X
0006db 34a4      	CPI  R26,LOW(0x44)
0006dc f461      	BRNE _0xB8
                 ; 0000 0257         {
                 ; 0000 0258             buffer_len = strlen(buffer);
0006dd 940e 0b5e 	CALL SUBOPT_0x7
0006df 2f5e      	MOV  R21,R30
                 ; 0000 0259             if (buffer_len > 0)
0006e0 3051      	CPI  R21,1
0006e1 f030      	BRLO _0xB9
                 ; 0000 025A             {
                 ; 0000 025B                 buffer[buffer_len - 1] = '\0';
0006e2 940e 0bef 	CALL SUBOPT_0x21
                 ; 0000 025C                 lcdCommand(0x10);
                 ; 0000 025D                 lcd_print(" ");
                +
0006e4 e1ae     +LDI R26 , LOW ( _0x76 + ( 281 ) )
0006e5 e0b5     +LDI R27 , HIGH ( _0x76 + ( 281 ) )
                 	__POINTW2MN _0x76,281
0006e6 940e 0bf9 	CALL SUBOPT_0x22
                 ; 0000 025E                 lcdCommand(0x10);
                 ; 0000 025F             }
                 ; 0000 0260         }
                 _0xB9:
                 ; 0000 0261         else if (keypad[rowloc][cl] == 'E')
0006e8 c02f      	RJMP _0xBA
                 _0xB8:
0006e9 940e 0bd6 	CALL SUBOPT_0x1D
0006eb 91ac      	LD   R26,X
0006ec 34a5      	CPI  R26,LOW(0x45)
0006ed f511      	BRNE _0xBB
                 ; 0000 0262         {
                 ; 0000 0263             // search from eeprom data
                 ; 0000 0264             unsigned char result = search_student_code();
                 ; 0000 0265 
                 ; 0000 0266             if (result > 0)
0006ee 940e 0c02 	CALL SUBOPT_0x24
                 ;	i -> Y+7
                 ;	result -> Y+0
0006f0 f048      	BRLO _0xBC
                 ; 0000 0267             {
                 ; 0000 0268                 lcdCommand(0x01);
0006f1 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0269                 lcd_gotoxy(1, 1);
                 ; 0000 026A                 lcd_print("Student Code Found");
                +
0006f3 e2a0     +LDI R26 , LOW ( _0x76 + ( 283 ) )
0006f4 e0b5     +LDI R27 , HIGH ( _0x76 + ( 283 ) )
                 	__POINTW2MN _0x76,283
0006f5 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 026B                 lcd_gotoxy(1, 2);
                 ; 0000 026C                 lcd_print("You Will Back Menu In 2 Second");
                +
0006f7 e3a3     +LDI R26 , LOW ( _0x76 + ( 302 ) )
0006f8 e0b5     +LDI R27 , HIGH ( _0x76 + ( 302 ) )
                 	__POINTW2MN _0x76,302
0006f9 c008      	RJMP _0x154
                 ; 0000 026D                 delay_ms(2000);
                 ; 0000 026E             }
                 ; 0000 026F             else
                 _0xBC:
                 ; 0000 0270             {
                 ; 0000 0271                 lcdCommand(0x01);
0006fa 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0272                 lcd_gotoxy(1, 1);
                 ; 0000 0273                 lcd_print("Ops , Student Code Not Found");
                +
0006fc e5a2     +LDI R26 , LOW ( _0x76 + ( 333 ) )
0006fd e0b5     +LDI R27 , HIGH ( _0x76 + ( 333 ) )
                 	__POINTW2MN _0x76,333
0006fe 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0274                 lcd_gotoxy(1, 2);
                 ; 0000 0275                 lcd_print("You Will Back Menu In 2 Second");
                +
000700 e6af     +LDI R26 , LOW ( _0x76 + ( 362 ) )
000701 e0b5     +LDI R27 , HIGH ( _0x76 + ( 362 ) )
                 	__POINTW2MN _0x76,362
                 _0x154:
000702 d170      	RCALL _lcd_print
                 ; 0000 0276                 delay_ms(2000);
000703 eda0      	LDI  R26,LOW(2000)
000704 e0b7      	LDI  R27,HIGH(2000)
000705 940e 0c47 	CALL _delay_ms
                 ; 0000 0277             }
                 ; 0000 0278             memset(buffer, 0, 32);
000707 940e 0b62 	CALL SUBOPT_0x8
000709 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 0279             stage = STAGE_STUDENT_MANAGMENT;
00070b e0e7      	LDI  R30,LOW(7)
00070c e0f0      	LDI  R31,HIGH(7)
00070d 012f      	MOVW R4,R30
                 ; 0000 027A         }
00070e 9621      	ADIW R28,1
                 ; 0000 027B         else if (keypad[rowloc][cl] == 'C')
00070f c008      	RJMP _0xBE
                 _0xBB:
000710 940e 0bd6 	CALL SUBOPT_0x1D
000712 91ac      	LD   R26,X
000713 34a3      	CPI  R26,LOW(0x43)
000714 f419      	BRNE _0xBF
                 ; 0000 027C             stage = STAGE_STUDENT_MANAGMENT;
                 _0x153:
000715 e0e7      	LDI  R30,LOW(7)
000716 e0f0      	LDI  R31,HIGH(7)
000717 012f      	MOVW R4,R30
                 ; 0000 027D     }
                 _0xBF:
                 _0xBE:
                 _0xBA:
                 _0xB7:
                 ; 0000 027E     else if (stage == STAGE_DELETE_STUDENT)
000718 c100      	RJMP _0xC0
                 _0xB2:
000719 940e 0bbe 	CALL SUBOPT_0x18
00071b f009      	BREQ PC+2
00071c c065      	RJMP _0xC1
                 ; 0000 027F     {
                 ; 0000 0280         if (keypad[rowloc][cl] == 'C')
00071d 940e 0bd6 	CALL SUBOPT_0x1D
00071f 91ac      	LD   R26,X
000720 34a3      	CPI  R26,LOW(0x43)
000721 f441      	BRNE _0xC2
                 ; 0000 0281         {
                 ; 0000 0282             memset(buffer, 0, 32);
000722 940e 0b62 	CALL SUBOPT_0x8
000724 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 0283             stage = STAGE_STUDENT_MANAGMENT;
000726 e0e7      	LDI  R30,LOW(7)
000727 e0f0      	LDI  R31,HIGH(7)
000728 012f      	MOVW R4,R30
                 ; 0000 0284         }
                 ; 0000 0285         else if ((keypad[rowloc][cl] - '0') < 10)
000729 c057      	RJMP _0xC3
                 _0xC2:
00072a 940e 0bd6 	CALL SUBOPT_0x1D
00072c 91ec      	LD   R30,X
00072d e0f0      	LDI  R31,0
00072e 97fa      	SBIW R30,58
00072f f47c      	BRGE _0xC4
                 ; 0000 0286         {
                 ; 0000 0287             if (strlen(buffer) <= 30)
000730 940e 0b5e 	CALL SUBOPT_0x7
000732 977f      	SBIW R30,31
000733 f450      	BRSH _0xC5
                 ; 0000 0288             {
                 ; 0000 0289                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000734 940e 0b5e 	CALL SUBOPT_0x7
000736 940e 0be2 	CALL SUBOPT_0x1E
000738 940e 0be6 	CALL SUBOPT_0x1F
                 ; 0000 028A                 buffer[strlen(buffer) + 1] = '\0';
00073a 940e 0bea 	CALL SUBOPT_0x20
                 ; 0000 028B                 lcdData(keypad[rowloc][cl]);
00073c 91ac      	LD   R26,X
00073d d0f8      	RCALL _lcdData
                 ; 0000 028C             }
                 ; 0000 028D         }
                 _0xC5:
                 ; 0000 028E         else if (keypad[rowloc][cl] == 'D')
00073e c042      	RJMP _0xC6
                 _0xC4:
00073f 940e 0bd6 	CALL SUBOPT_0x1D
000741 91ac      	LD   R26,X
000742 34a4      	CPI  R26,LOW(0x44)
000743 f461      	BRNE _0xC7
                 ; 0000 028F         {
                 ; 0000 0290             buffer_len = strlen(buffer);
000744 940e 0b5e 	CALL SUBOPT_0x7
000746 2f5e      	MOV  R21,R30
                 ; 0000 0291             if (buffer_len > 0)
000747 3051      	CPI  R21,1
000748 f030      	BRLO _0xC8
                 ; 0000 0292             {
                 ; 0000 0293                 buffer[buffer_len - 1] = '\0';
000749 940e 0bef 	CALL SUBOPT_0x21
                 ; 0000 0294                 lcdCommand(0x10);
                 ; 0000 0295                 lcd_print(" ");
                +
00074b e8ae     +LDI R26 , LOW ( _0x76 + ( 393 ) )
00074c e0b5     +LDI R27 , HIGH ( _0x76 + ( 393 ) )
                 	__POINTW2MN _0x76,393
00074d 940e 0bf9 	CALL SUBOPT_0x22
                 ; 0000 0296                 lcdCommand(0x10);
                 ; 0000 0297             }
                 ; 0000 0298         }
                 _0xC8:
                 ; 0000 0299         else if (keypad[rowloc][cl] == 'E')
00074f c031      	RJMP _0xC9
                 _0xC7:
000750 940e 0bd6 	CALL SUBOPT_0x1D
000752 91ac      	LD   R26,X
000753 34a5      	CPI  R26,LOW(0x45)
000754 f561      	BRNE _0xCA
                 ; 0000 029A         {
                 ; 0000 029B             // search from eeprom data
                 ; 0000 029C             unsigned char result = search_student_code();
                 ; 0000 029D 
                 ; 0000 029E             if (result > 0)
000755 940e 0c02 	CALL SUBOPT_0x24
                 ;	i -> Y+7
                 ;	result -> Y+0
000757 f0a0      	BRLO _0xCB
                 ; 0000 029F             {
                 ; 0000 02A0                 lcdCommand(0x01);
000758 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 02A1                 lcd_gotoxy(1, 1);
                 ; 0000 02A2                 lcd_print("Student Code Found");
                +
00075a e9a0     +LDI R26 , LOW ( _0x76 + ( 395 ) )
00075b e0b5     +LDI R27 , HIGH ( _0x76 + ( 395 ) )
                 	__POINTW2MN _0x76,395
00075c 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 02A3                 lcd_gotoxy(1, 2);
                 ; 0000 02A4                 lcd_print("Wait For Delete...");
                +
00075e eaa3     +LDI R26 , LOW ( _0x76 + ( 414 ) )
00075f e0b5     +LDI R27 , HIGH ( _0x76 + ( 414 ) )
                 	__POINTW2MN _0x76,414
000760 d112      	RCALL _lcd_print
                 ; 0000 02A5                 delete_student_code(result);
000761 81a8      	LD   R26,Y
000762 d243      	RCALL _delete_student_code
                 ; 0000 02A6                 lcdCommand(0x01);
000763 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 02A7                 lcd_gotoxy(1, 1);
                 ; 0000 02A8                 lcd_print("Student Code Was Deleted");
                +
000765 eba6     +LDI R26 , LOW ( _0x76 + ( 433 ) )
000766 e0b5     +LDI R27 , HIGH ( _0x76 + ( 433 ) )
                 	__POINTW2MN _0x76,433
000767 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 02A9                 lcd_gotoxy(1, 2);
                 ; 0000 02AA                 lcd_print("You Will Back Menu In 2 Second");
                +
000769 ecaf     +LDI R26 , LOW ( _0x76 + ( 458 ) )
00076a e0b5     +LDI R27 , HIGH ( _0x76 + ( 458 ) )
                 	__POINTW2MN _0x76,458
00076b c008      	RJMP _0x155
                 ; 0000 02AB                 delay_ms(2000);
                 ; 0000 02AC             }
                 ; 0000 02AD             else
                 _0xCB:
                 ; 0000 02AE             {
                 ; 0000 02AF                 lcdCommand(0x01);
00076c 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 02B0                 lcd_gotoxy(1, 1);
                 ; 0000 02B1                 lcd_print("Ops , Student Code Not Found");
                +
00076e eeae     +LDI R26 , LOW ( _0x76 + ( 489 ) )
00076f e0b5     +LDI R27 , HIGH ( _0x76 + ( 489 ) )
                 	__POINTW2MN _0x76,489
000770 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 02B2                 lcd_gotoxy(1, 2);
                 ; 0000 02B3                 lcd_print("You Will Back Menu In 2 Second");
                +
000772 e0ab     +LDI R26 , LOW ( _0x76 + ( 518 ) )
000773 e0b6     +LDI R27 , HIGH ( _0x76 + ( 518 ) )
                 	__POINTW2MN _0x76,518
                 _0x155:
000774 d0fe      	RCALL _lcd_print
                 ; 0000 02B4                 delay_ms(2000);
000775 eda0      	LDI  R26,LOW(2000)
000776 e0b7      	LDI  R27,HIGH(2000)
000777 940e 0c47 	CALL _delay_ms
                 ; 0000 02B5             }
                 ; 0000 02B6             memset(buffer, 0, 32);
000779 940e 0b62 	CALL SUBOPT_0x8
00077b 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 02B7             stage = STAGE_STUDENT_MANAGMENT;
00077d e0e7      	LDI  R30,LOW(7)
00077e e0f0      	LDI  R31,HIGH(7)
00077f 012f      	MOVW R4,R30
                 ; 0000 02B8         }
000780 9621      	ADIW R28,1
                 ; 0000 02B9     }
                 _0xCA:
                 _0xC9:
                 _0xC6:
                 _0xC3:
                 ; 0000 02BA     else if (stage == STAGE_TRAFFIC_MONITORING)
000781 c097      	RJMP _0xCD
                 _0xC1:
000782 940e 0bc3 	CALL SUBOPT_0x19
000784 f441      	BRNE _0xCE
                 ; 0000 02BB     {
                 ; 0000 02BC         if (keypad[rowloc][cl] == 'C')
000785 940e 0bd6 	CALL SUBOPT_0x1D
000787 91ac      	LD   R26,X
000788 34a3      	CPI  R26,LOW(0x43)
000789 f411      	BRNE _0xCF
                 ; 0000 02BD             stage = STAGE_INIT_MENU;
00078a 2444      	CLR  R4
00078b 2455      	CLR  R5
                 ; 0000 02BE     }
                 _0xCF:
                 ; 0000 02BF     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
00078c c08c      	RJMP _0xD0
                 _0xCE:
00078d 940e 0bc8 	CALL SUBOPT_0x1A
00078f f419      	BRNE _0xD2
000790 e0e1      	LDI  R30,LOW(1)
000791 15e9      	CP   R30,R9
000792 f409      	BRNE _0xD3
                 _0xD2:
000793 c062      	RJMP _0xD1
                 _0xD3:
                 ; 0000 02C0     {
                 ; 0000 02C1         if (keypad[rowloc][cl] == 'C')
000794 940e 0bd6 	CALL SUBOPT_0x1D
000796 91ac      	LD   R26,X
000797 34a3      	CPI  R26,LOW(0x43)
000798 f439      	BRNE _0xD4
                 ; 0000 02C2         {
                 ; 0000 02C3             memset(buffer, 0, 32);
000799 940e 0b62 	CALL SUBOPT_0x8
00079b 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 02C4             stage = STAGE_INIT_MENU;
00079d 2444      	CLR  R4
00079e 2455      	CLR  R5
                 ; 0000 02C5         }
                 ; 0000 02C6 
                 ; 0000 02C7         else if ((keypad[rowloc][cl] - '0') < 10)
00079f c055      	RJMP _0xD5
                 _0xD4:
0007a0 940e 0bd6 	CALL SUBOPT_0x1D
0007a2 91ec      	LD   R30,X
0007a3 e0f0      	LDI  R31,0
0007a4 97fa      	SBIW R30,58
0007a5 f47c      	BRGE _0xD6
                 ; 0000 02C8         {
                 ; 0000 02C9             if (strlen(buffer) <= 30)
0007a6 940e 0b5e 	CALL SUBOPT_0x7
0007a8 977f      	SBIW R30,31
0007a9 f450      	BRSH _0xD7
                 ; 0000 02CA             {
                 ; 0000 02CB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0007aa 940e 0b5e 	CALL SUBOPT_0x7
0007ac 940e 0be2 	CALL SUBOPT_0x1E
0007ae 940e 0be6 	CALL SUBOPT_0x1F
                 ; 0000 02CC                 buffer[strlen(buffer) + 1] = '\0';
0007b0 940e 0bea 	CALL SUBOPT_0x20
                 ; 0000 02CD                 lcdData(keypad[rowloc][cl]);
0007b2 91ac      	LD   R26,X
0007b3 d082      	RCALL _lcdData
                 ; 0000 02CE             }
                 ; 0000 02CF         }
                 _0xD7:
                 ; 0000 02D0         else if (keypad[rowloc][cl] == 'D')
0007b4 c040      	RJMP _0xD8
                 _0xD6:
0007b5 940e 0bd6 	CALL SUBOPT_0x1D
0007b7 91ac      	LD   R26,X
0007b8 34a4      	CPI  R26,LOW(0x44)
0007b9 f461      	BRNE _0xD9
                 ; 0000 02D1         {
                 ; 0000 02D2             buffer_len = strlen(buffer);
0007ba 940e 0b5e 	CALL SUBOPT_0x7
0007bc 2f5e      	MOV  R21,R30
                 ; 0000 02D3             if (buffer_len > 0)
0007bd 3051      	CPI  R21,1
0007be f030      	BRLO _0xDA
                 ; 0000 02D4             {
                 ; 0000 02D5                 buffer[buffer_len - 1] = '\0';
0007bf 940e 0bef 	CALL SUBOPT_0x21
                 ; 0000 02D6                 lcdCommand(0x10);
                 ; 0000 02D7                 lcd_print(" ");
                +
0007c1 e2aa     +LDI R26 , LOW ( _0x76 + ( 549 ) )
0007c2 e0b6     +LDI R27 , HIGH ( _0x76 + ( 549 ) )
                 	__POINTW2MN _0x76,549
0007c3 940e 0bf9 	CALL SUBOPT_0x22
                 ; 0000 02D8                 lcdCommand(0x10);
                 ; 0000 02D9             }
                 ; 0000 02DA         }
                 _0xDA:
                 ; 0000 02DB         else if (keypad[rowloc][cl] == 'E')
0007c5 c02f      	RJMP _0xDB
                 _0xD9:
0007c6 940e 0bd6 	CALL SUBOPT_0x1D
0007c8 91ac      	LD   R26,X
0007c9 34a5      	CPI  R26,LOW(0x45)
0007ca f551      	BRNE _0xDC
                 ; 0000 02DC         {
                 ; 0000 02DD             // search from eeprom data
                 ; 0000 02DE             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 02DF 
                 ; 0000 02E0             if (input_hash == secret)
0007cb 9722      	SBIW R28,2
                 ;	i -> Y+8
                 ;	input_hash -> Y+0
0007cc e9a4      	LDI  R26,LOW(_buffer)
0007cd e0b7      	LDI  R27,HIGH(_buffer)
0007ce d2de      	RCALL _simple_hash
0007cf 83e8      	ST   Y,R30
0007d0 83f9      	STD  Y+1,R31
0007d1 81a8      	LD   R26,Y
0007d2 81b9      	LDD  R27,Y+1
0007d3 36a4      	CPI  R26,LOW(0xF64)
0007d4 e0ef      	LDI  R30,HIGH(0xF64)
0007d5 07be      	CPC  R27,R30
0007d6 f469      	BRNE _0xDD
                 ; 0000 02E1             {
                 ; 0000 02E2                 lcdCommand(0x01);
0007d7 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 02E3                 lcd_gotoxy(1, 1);
                 ; 0000 02E4                 lcd_print("Login Successfully");
                +
0007d9 e2ac     +LDI R26 , LOW ( _0x76 + ( 551 ) )
0007da e0b6     +LDI R27 , HIGH ( _0x76 + ( 551 ) )
                 	__POINTW2MN _0x76,551
0007db 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 02E5                 lcd_gotoxy(1, 2);
                 ; 0000 02E6                 lcd_print("Wait...");
                +
0007dd e3af     +LDI R26 , LOW ( _0x76 + ( 570 ) )
0007de e0b6     +LDI R27 , HIGH ( _0x76 + ( 570 ) )
                 	__POINTW2MN _0x76,570
0007df 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 02E7                 delay_ms(2000);
                 ; 0000 02E8                 logged_in = 1;
0007e1 e0e1      	LDI  R30,LOW(1)
0007e2 2e9e      	MOV  R9,R30
                 ; 0000 02E9             }
                 ; 0000 02EA             else
0007e3 c00a      	RJMP _0xDE
                 _0xDD:
                 ; 0000 02EB             {
                 ; 0000 02EC                 lcdCommand(0x01);
0007e4 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 02ED                 lcd_gotoxy(1, 1);
                 ; 0000 02EE                 lcd_print("Ops , secret is incorrect");
                +
0007e6 e4a7     +LDI R26 , LOW ( _0x76 + ( 578 ) )
0007e7 e0b6     +LDI R27 , HIGH ( _0x76 + ( 578 ) )
                 	__POINTW2MN _0x76,578
0007e8 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 02EF                 lcd_gotoxy(1, 2);
                 ; 0000 02F0                 lcd_print("You Will Back Menu In 2 Second");
                +
0007ea e6a1     +LDI R26 , LOW ( _0x76 + ( 604 ) )
0007eb e0b6     +LDI R27 , HIGH ( _0x76 + ( 604 ) )
                 	__POINTW2MN _0x76,604
0007ec 940e 0bae 	CALL SUBOPT_0x15
                 ; 0000 02F1                 delay_ms(2000);
                 ; 0000 02F2             }
                 _0xDE:
                 ; 0000 02F3             memset(buffer, 0, 32);
0007ee 940e 0b62 	CALL SUBOPT_0x8
0007f0 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 02F4             stage = STAGE_INIT_MENU;
0007f2 2444      	CLR  R4
0007f3 2455      	CLR  R5
                 ; 0000 02F5         }
0007f4 9622      	ADIW R28,2
                 ; 0000 02F6     }
                 _0xDC:
                 _0xDB:
                 _0xD8:
                 _0xD5:
                 ; 0000 02F7     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
0007f5 c023      	RJMP _0xDF
                 _0xD1:
0007f6 940e 0bc8 	CALL SUBOPT_0x1A
0007f8 f411      	BRNE _0xE1
0007f9 2099      	TST  R9
0007fa f409      	BRNE _0xE2
                 _0xE1:
0007fb c01d      	RJMP _0xE0
                 _0xE2:
                 ; 0000 02F8     {
                 ; 0000 02F9         switch (keypad[rowloc][cl])
0007fc 940e 0bd6 	CALL SUBOPT_0x1D
0007fe 91ec      	LD   R30,X
0007ff e0f0      	LDI  R31,0
                 ; 0000 02FA         {
                 ; 0000 02FB         case 'C':
000800 34e3      	CPI  R30,LOW(0x43)
000801 e0a0      	LDI  R26,HIGH(0x43)
000802 07fa      	CPC  R31,R26
000803 f419      	BRNE _0xE6
                 ; 0000 02FC             stage = STAGE_INIT_MENU;
000804 2444      	CLR  R4
000805 2455      	CLR  R5
                 ; 0000 02FD             break;
000806 c00c      	RJMP _0xE5
                 ; 0000 02FE         case '1':
                 _0xE6:
000807 33e1      	CPI  R30,LOW(0x31)
000808 e0a0      	LDI  R26,HIGH(0x31)
000809 07fa      	CPC  R31,R26
00080a f441      	BRNE _0xE8
                 ; 0000 02FF #asm("cli") // disable interrupts
00080b 94f8      	cli
                 ; 0000 0300             lcdCommand(0x1);
00080c 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0301             lcd_gotoxy(1, 1);
                 ; 0000 0302             lcd_print("Clearing EEPROM ...");
                +
00080e e8a0     +LDI R26 , LOW ( _0x76 + ( 635 ) )
00080f e0b6     +LDI R27 , HIGH ( _0x76 + ( 635 ) )
                 	__POINTW2MN _0x76,635
000810 d062      	RCALL _lcd_print
                 ; 0000 0303             clear_eeprom();
000811 d0fe      	RCALL _clear_eeprom
                 ; 0000 0304 #asm("sei") // enable interrupts
000812 9478      	sei
                 ; 0000 0305             break;
                 ; 0000 0306         default:
                 _0xE8:
                 ; 0000 0307             break;
                 ; 0000 0308         }
                 _0xE5:
                 ; 0000 0309         memset(buffer, 0, 32);
000813 940e 0b62 	CALL SUBOPT_0x8
000815 940e 0b67 	CALL SUBOPT_0x9
                 ; 0000 030A         stage = STAGE_INIT_MENU;
000817 2444      	CLR  R4
000818 2455      	CLR  R5
                 ; 0000 030B     }
                 ; 0000 030C }
                 _0xE0:
                 _0xDF:
                 _0xD0:
                 _0xCD:
                 _0xC0:
                 _0xB1:
                 _0xA4:
                 _0xA1:
                 _0x9E:
                 _0x9B:
                 _0x86:
                 _0x7D:
000819 940e 0e0a 	CALL __LOADLOCR6
00081b 9628      	ADIW R28,8
00081c 91e9      	LD   R30,Y+
00081d bfef      	OUT  SREG,R30
00081e 91f9      	LD   R31,Y+
00081f 91e9      	LD   R30,Y+
000820 91b9      	LD   R27,Y+
000821 91a9      	LD   R26,Y+
000822 9199      	LD   R25,Y+
000823 9189      	LD   R24,Y+
000824 9179      	LD   R23,Y+
000825 9169      	LD   R22,Y+
000826 90f9      	LD   R15,Y+
000827 9019      	LD   R1,Y+
000828 9009      	LD   R0,Y+
000829 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x76:
000405           	.BYTE 0x28F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 030F {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 0310     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
00082a 940e 0c09 	CALL SUBOPT_0x25
                 ;	cmnd -> Y+0
                 ; 0000 0311     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
00082c 98c0      	CBI  0x18,0
                 ; 0000 0312     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
00082d 940e 0c12 	CALL SUBOPT_0x26
                 ; 0000 0313     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0314     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0315     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0316     delay_us(20 * 16);         // wait
                +
00082f e880     +LDI R24 , LOW ( 640 )
000830 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
000831 9701     +SBIW R24 , 1
000832 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 0317     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000833 940e 0c19 	CALL SUBOPT_0x27
                 ; 0000 0318     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0319     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 031A     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 031B }
000835 c110      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 031D {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 031E     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
000836 940e 0c09 	CALL SUBOPT_0x25
                 ;	data -> Y+0
                 ; 0000 031F     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
000838 9ac0      	SBI  0x18,0
                 ; 0000 0320     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000839 940e 0c12 	CALL SUBOPT_0x26
                 ; 0000 0321     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0322     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0323     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0324     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
00083b 940e 0c19 	CALL SUBOPT_0x27
                 ; 0000 0325     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0326     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0327     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0328 }
00083d c108      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 032A {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 032B     LCD_DDR = 0xFF;            // LCD port is output
00083e efef      	LDI  R30,LOW(255)
00083f bbe7      	OUT  0x17,R30
                 ; 0000 032C     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000840 98c2      	CBI  0x18,2
                 ; 0000 032D     delay_us(2000 * 16);       // wait for stable power
                +
000841 e080     +LDI R24 , LOW ( 64000 )
000842 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000843 9701     +SBIW R24 , 1
000844 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 032E     lcdCommand(0x33);          //$33 for 4-bit mode
000845 e3a3      	LDI  R26,LOW(51)
000846 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 032F     delay_us(100 * 16);        // wait
                 ; 0000 0330     lcdCommand(0x32);          //$32 for 4-bit mode
000848 e3a2      	LDI  R26,LOW(50)
000849 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0331     delay_us(100 * 16);        // wait
                 ; 0000 0332     lcdCommand(0x28);          //$28 for 4-bit mode
00084b e2a8      	LDI  R26,LOW(40)
00084c 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0333     delay_us(100 * 16);        // wait
                 ; 0000 0334     lcdCommand(0x0c);          // display on, cursor off
00084e e0ac      	LDI  R26,LOW(12)
00084f 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0335     delay_us(100 * 16);        // wait
                 ; 0000 0336     lcdCommand(0x01);          // clear LCD
000851 e0a1      	LDI  R26,LOW(1)
000852 dfd7      	RCALL _lcdCommand
                 ; 0000 0337     delay_us(2000 * 16);       // wait
                +
000853 e080     +LDI R24 , LOW ( 64000 )
000854 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000855 9701     +SBIW R24 , 1
000856 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0338     lcdCommand(0x06);          // shift cursor right
000857 e0a6      	LDI  R26,LOW(6)
000858 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 0339     delay_us(100 * 16);
                 ; 0000 033A }
00085a 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 033C {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 033D     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 033E     lcdCommand(firstCharAdr[y - 1] + x - 1);
00085b 93aa      	ST   -Y,R26
00085c 9724      	SBIW R28,4
00085d e8e0      	LDI  R30,LOW(128)
00085e 83e8      	ST   Y,R30
00085f ece0      	LDI  R30,LOW(192)
000860 83e9      	STD  Y+1,R30
000861 e9e4      	LDI  R30,LOW(148)
000862 83ea      	STD  Y+2,R30
000863 ede4      	LDI  R30,LOW(212)
000864 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000865 81ec      	LDD  R30,Y+4
000866 e0f0      	LDI  R31,0
000867 9731      	SBIW R30,1
000868 01de      	MOVW R26,R28
000869 0fae      	ADD  R26,R30
00086a 1fbf      	ADC  R27,R31
00086b 91ec      	LD   R30,X
00086c 81ad      	LDD  R26,Y+5
00086d 0fae      	ADD  R26,R30
00086e 50a1      	SUBI R26,LOW(1)
00086f 940e 0bcd 	CALL SUBOPT_0x1B
                 ; 0000 033F     delay_us(100 * 16);
                 ; 0000 0340 }
000871 9626      	ADIW R28,6
000872 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0342 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0343     unsigned char i = 0;
                 ; 0000 0344     while (str[i] != 0)
000873 93ba      	ST   -Y,R27
000874 93aa      	ST   -Y,R26
000875 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000876 e010      	LDI  R17,0
                 _0xE9:
000877 81a9      	LDD  R26,Y+1
000878 81ba      	LDD  R27,Y+1+1
000879 27ee      	CLR  R30
00087a 0fa1      	ADD  R26,R17
00087b 1fbe      	ADC  R27,R30
00087c 91ec      	LD   R30,X
00087d 30e0      	CPI  R30,0
00087e f049      	BREQ _0xEB
                 ; 0000 0345     {
                 ; 0000 0346         lcdData(str[i]);
00087f 81a9      	LDD  R26,Y+1
000880 81ba      	LDD  R27,Y+1+1
000881 27ee      	CLR  R30
000882 0fa1      	ADD  R26,R17
000883 1fbe      	ADC  R27,R30
000884 91ac      	LD   R26,X
000885 dfb0      	RCALL _lcdData
                 ; 0000 0347         i++;
000886 5f1f      	SUBI R17,-1
                 ; 0000 0348     }
000887 cfef      	RJMP _0xE9
                 _0xEB:
                 ; 0000 0349 }
000888 8118      	LDD  R17,Y+0
000889 c0b5      	RJMP _0x20A0006
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 034C {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 034D     unsigned char temperatureVal = 0;
                 ; 0000 034E     unsigned char temperatureRep[3];
                 ; 0000 034F 
                 ; 0000 0350     ADMUX = 0xE0;
00088a 9723      	SBIW R28,3
00088b 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
00088c e010      	LDI  R17,0
00088d eee0      	LDI  R30,LOW(224)
00088e b9e7      	OUT  0x7,R30
                 ; 0000 0351     ADCSRA = 0x87;
00088f e8e7      	LDI  R30,LOW(135)
000890 b9e6      	OUT  0x6,R30
                 ; 0000 0352 
                 ; 0000 0353     lcdCommand(0x01);
000891 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0354     lcd_gotoxy(1, 1);
                 ; 0000 0355     lcd_print("temperature(C):");
                +
000893 e9a4     +LDI R26 , LOW ( _0xEC + ( 0 ) )
000894 e0b6     +LDI R27 , HIGH ( _0xEC + ( 0 ) )
                 	__POINTW2MN _0xEC,0
000895 dfdd      	RCALL _lcd_print
                 ; 0000 0356 
                 ; 0000 0357     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xED:
000896 940e 0b91 	CALL SUBOPT_0x11
000898 f4f1      	BRNE _0xEF
                 ; 0000 0358     {
                 ; 0000 0359         ADCSRA |= (1 << ADSC);
000899 9a36      	SBI  0x6,6
                 ; 0000 035A         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xF0:
00089a 9b34      	SBIS 0x6,4
                 ; 0000 035B             ;
00089b cffe      	RJMP _0xF0
                 ; 0000 035C         if (ADCH != temperatureVal)
00089c b1e5      	IN   R30,0x5
00089d 171e      	CP   R17,R30
00089e f099      	BREQ _0xF3
                 ; 0000 035D         {
                 ; 0000 035E             temperatureVal = ADCH;
00089f b115      	IN   R17,5
                 ; 0000 035F             itoa(temperatureVal, temperatureRep);
0008a0 2fe1      	MOV  R30,R17
0008a1 e0f0      	LDI  R31,0
0008a2 93fa      	ST   -Y,R31
0008a3 93ea      	ST   -Y,R30
0008a4 01de      	MOVW R26,R28
0008a5 9613      	ADIW R26,3
0008a6 940e 0ad0 	CALL _itoa
                 ; 0000 0360             lcd_gotoxy(17, 1);
0008a8 e1e1      	LDI  R30,LOW(17)
0008a9 93ea      	ST   -Y,R30
0008aa e0a1      	LDI  R26,LOW(1)
0008ab dfaf      	RCALL _lcd_gotoxy
                 ; 0000 0361             lcd_print(temperatureRep);
0008ac 01de      	MOVW R26,R28
0008ad 9611      	ADIW R26,1
0008ae dfc4      	RCALL _lcd_print
                 ; 0000 0362             lcd_print(" ");
                +
0008af eaa4     +LDI R26 , LOW ( _0xEC + ( 16 ) )
0008b0 e0b6     +LDI R27 , HIGH ( _0xEC + ( 16 ) )
                 	__POINTW2MN _0xEC,16
0008b1 dfc1      	RCALL _lcd_print
                 ; 0000 0363         }
                 ; 0000 0364         delay_ms(500);
                 _0xF3:
0008b2 efa4      	LDI  R26,LOW(500)
0008b3 e0b1      	LDI  R27,HIGH(500)
0008b4 940e 0c47 	CALL _delay_ms
                 ; 0000 0365     }
0008b6 cfdf      	RJMP _0xED
                 _0xEF:
                 ; 0000 0366 
                 ; 0000 0367     ADCSRA = 0x0;
0008b7 e0e0      	LDI  R30,LOW(0)
0008b8 b9e6      	OUT  0x6,R30
                 ; 0000 0368 }
0008b9 8118      	LDD  R17,Y+0
0008ba c213      	RJMP _0x20A0002
                 ; .FEND
                 
                 	.DSEG
                 _0xEC:
000694           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 036B {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 036C 
                 ; 0000 036D     while (stage == STAGE_INIT_MENU)
                 _0xF4:
0008bb 2c04      	MOV  R0,R4
0008bc 2805      	OR   R0,R5
0008bd f009      	BREQ PC+2
0008be c050      	RJMP _0xF6
                 ; 0000 036E     {
                 ; 0000 036F         lcdCommand(0x01);
0008bf 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0370         lcd_gotoxy(1, 1);
                 ; 0000 0371         if (page_num == 0)
0008c1 2077      	TST  R7
0008c2 f481      	BRNE _0xF7
                 ; 0000 0372         {
                 ; 0000 0373             lcd_print("1: Attendance Initialization");
                +
0008c3 eaa6     +LDI R26 , LOW ( _0xF8 + ( 0 ) )
0008c4 e0b6     +LDI R27 , HIGH ( _0xF8 + ( 0 ) )
                 	__POINTW2MN _0xF8,0
0008c5 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0374             lcd_gotoxy(1, 2);
                 ; 0000 0375             lcd_print("2: Student Management");
                +
0008c7 eca3     +LDI R26 , LOW ( _0xF8 + ( 29 ) )
0008c8 e0b6     +LDI R27 , HIGH ( _0xF8 + ( 29 ) )
                 	__POINTW2MN _0xF8,29
0008c9 dfa9      	RCALL _lcd_print
                 ; 0000 0376             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xF9:
0008ca 2077      	TST  R7
0008cb f421      	BRNE _0xFC
0008cc 2400      	CLR  R0
0008cd 1404      	CP   R0,R4
0008ce 0405      	CPC  R0,R5
0008cf f009      	BREQ _0xFD
                 _0xFC:
0008d0 c001      	RJMP _0xFB
                 _0xFD:
                 ; 0000 0377                 ;
0008d1 cff8      	RJMP _0xF9
                 _0xFB:
                 ; 0000 0378         }
                 ; 0000 0379         else if (page_num == 1)
0008d2 c03b      	RJMP _0xFE
                 _0xF7:
0008d3 e0e1      	LDI  R30,LOW(1)
0008d4 15e7      	CP   R30,R7
0008d5 f489      	BRNE _0xFF
                 ; 0000 037A         {
                 ; 0000 037B             lcd_print("3: View Present Students ");
                +
0008d6 eda9     +LDI R26 , LOW ( _0xF8 + ( 51 ) )
0008d7 e0b6     +LDI R27 , HIGH ( _0xF8 + ( 51 ) )
                 	__POINTW2MN _0xF8,51
0008d8 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 037C             lcd_gotoxy(1, 2);
                 ; 0000 037D             lcd_print("4: Temperature Monitoring");
                +
0008da efa3     +LDI R26 , LOW ( _0xF8 + ( 77 ) )
0008db e0b6     +LDI R27 , HIGH ( _0xF8 + ( 77 ) )
                 	__POINTW2MN _0xF8,77
0008dc df96      	RCALL _lcd_print
                 ; 0000 037E             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0x100:
0008dd e0e1      	LDI  R30,LOW(1)
0008de 15e7      	CP   R30,R7
0008df f421      	BRNE _0x103
0008e0 2400      	CLR  R0
0008e1 1404      	CP   R0,R4
0008e2 0405      	CPC  R0,R5
0008e3 f009      	BREQ _0x104
                 _0x103:
0008e4 c001      	RJMP _0x102
                 _0x104:
                 ; 0000 037F                 ;
0008e5 cff7      	RJMP _0x100
                 _0x102:
                 ; 0000 0380         }
                 ; 0000 0381         else if (page_num == 2)
0008e6 c027      	RJMP _0x105
                 _0xFF:
0008e7 e0e2      	LDI  R30,LOW(2)
0008e8 15e7      	CP   R30,R7
0008e9 f489      	BRNE _0x106
                 ; 0000 0382         {
                 ; 0000 0383             lcd_print("5: Retrieve Student Data");
                +
0008ea e0ad     +LDI R26 , LOW ( _0xF8 + ( 103 ) )
0008eb e0b7     +LDI R27 , HIGH ( _0xF8 + ( 103 ) )
                 	__POINTW2MN _0xF8,103
0008ec 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 0384             lcd_gotoxy(1, 2);
                 ; 0000 0385             lcd_print("6: Traffic Monitoring");
                +
0008ee e2a6     +LDI R26 , LOW ( _0xF8 + ( 128 ) )
0008ef e0b7     +LDI R27 , HIGH ( _0xF8 + ( 128 ) )
                 	__POINTW2MN _0xF8,128
0008f0 df82      	RCALL _lcd_print
                 ; 0000 0386             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x107:
0008f1 e0e2      	LDI  R30,LOW(2)
0008f2 15e7      	CP   R30,R7
0008f3 f421      	BRNE _0x10A
0008f4 2400      	CLR  R0
0008f5 1404      	CP   R0,R4
0008f6 0405      	CPC  R0,R5
0008f7 f009      	BREQ _0x10B
                 _0x10A:
0008f8 c001      	RJMP _0x109
                 _0x10B:
                 ; 0000 0387                 ;
0008f9 cff7      	RJMP _0x107
                 _0x109:
                 ; 0000 0388         }
                 ; 0000 0389         else if (page_num == 3)
0008fa c013      	RJMP _0x10C
                 _0x106:
0008fb e0e3      	LDI  R30,LOW(3)
0008fc 15e7      	CP   R30,R7
0008fd f481      	BRNE _0x10D
                 ; 0000 038A         {
                 ; 0000 038B             lcd_print("7: Login With Admin");
                +
0008fe e3ac     +LDI R26 , LOW ( _0xF8 + ( 150 ) )
0008ff e0b7     +LDI R27 , HIGH ( _0xF8 + ( 150 ) )
                 	__POINTW2MN _0xF8,150
000900 940e 0b40 	CALL SUBOPT_0x2
                 ; 0000 038C             lcd_gotoxy(1, 2);
                 ; 0000 038D             lcd_print("8: Logout");
                +
000902 e5a0     +LDI R26 , LOW ( _0xF8 + ( 170 ) )
000903 e0b7     +LDI R27 , HIGH ( _0xF8 + ( 170 ) )
                 	__POINTW2MN _0xF8,170
000904 df6e      	RCALL _lcd_print
                 ; 0000 038E             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x10E:
000905 e0e3      	LDI  R30,LOW(3)
000906 15e7      	CP   R30,R7
000907 f421      	BRNE _0x111
000908 2400      	CLR  R0
000909 1404      	CP   R0,R4
00090a 0405      	CPC  R0,R5
00090b f009      	BREQ _0x112
                 _0x111:
00090c c001      	RJMP _0x110
                 _0x112:
                 ; 0000 038F                 ;
00090d cff7      	RJMP _0x10E
                 _0x110:
                 ; 0000 0390         }
                 ; 0000 0391     }
                 _0x10D:
                 _0x10C:
                 _0x105:
                 _0xFE:
00090e cfac      	RJMP _0xF4
                 _0xF6:
                 ; 0000 0392 }
00090f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xF8:
0006a6           	.BYTE 0xB4
                 ;
                 ;void clear_eeprom()
                 ; 0000 0395 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0396     unsigned int i;
                 ; 0000 0397 
                 ; 0000 0398     for (i = 0; i <= 1023; i++)
000910 931a      	ST   -Y,R17
000911 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000912 e000     +LDI R16 , LOW ( 0 )
000913 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x114:
                +
000914 3000     +CPI R16 , LOW ( 1024 )
000915 e0e4     +LDI R30 , HIGH ( 1024 )
000916 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000917 f478      	BRSH _0x115
                 ; 0000 0399     {
                 ; 0000 039A         // Wait for the previous write to complete
                 ; 0000 039B         while (EECR & (1 << EEWE))
                 _0x116:
000918 99e1      	SBIC 0x1C,1
                 ; 0000 039C             ;
000919 cffe      	RJMP _0x116
                 ; 0000 039D 
                 ; 0000 039E         // Set up address registers
                 ; 0000 039F         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
00091a 2fe1      	MOV  R30,R17
00091b 70f0      	ANDI R31,HIGH(0x0)
00091c 70e3      	ANDI R30,LOW(0x3)
00091d bbef      	OUT  0x1F,R30
                 ; 0000 03A0         EEARL = i & 0xFF;        // Low byte (bits 0-7)
00091e 2fe0      	MOV  R30,R16
00091f bbee      	OUT  0x1E,R30
                 ; 0000 03A1 
                 ; 0000 03A2         // Set up data register
                 ; 0000 03A3         EEDR = 0; // Write 0 to EEPROM
000920 e0e0      	LDI  R30,LOW(0)
000921 bbed      	OUT  0x1D,R30
                 ; 0000 03A4 
                 ; 0000 03A5         // Enable write
                 ; 0000 03A6         EECR |= (1 << EEMWE); // Master write enable
000922 9ae2      	SBI  0x1C,2
                 ; 0000 03A7         EECR |= (1 << EEWE);  // Start EEPROM write
000923 9ae1      	SBI  0x1C,1
                 ; 0000 03A8     }
                +
000924 5f0f     +SUBI R16 , LOW ( - 1 )
000925 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000926 cfed      	RJMP _0x114
                 _0x115:
                 ; 0000 03A9 }
000927 9109      	LD   R16,Y+
000928 9119      	LD   R17,Y+
000929 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 03AC {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 03AD     unsigned char x;
                 ; 0000 03AE     // Wait for the previous write to complete
                 ; 0000 03AF     while (EECR & (1 << EEWE))
00092a 93ba      	ST   -Y,R27
00092b 93aa      	ST   -Y,R26
00092c 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x119:
00092d 99e1      	SBIC 0x1C,1
                 ; 0000 03B0         ;
00092e cffe      	RJMP _0x119
                 ; 0000 03B1 
                 ; 0000 03B2     // Set up address registers
                 ; 0000 03B3     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
00092f 940e 0c27 	CALL SUBOPT_0x28
                 ; 0000 03B4     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 03B5     EECR |= (1 << EERE);        // Read Enable
000931 9ae0      	SBI  0x1C,0
                 ; 0000 03B6     x = EEDR;
000932 b31d      	IN   R17,29
                 ; 0000 03B7     return x;
000933 2fe1      	MOV  R30,R17
000934 8118      	LDD  R17,Y+0
000935 c009      	RJMP _0x20A0006
                 ; 0000 03B8 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 03BB {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 03BC     // Wait for the previous write to complete
                 ; 0000 03BD     while (EECR & (1 << EEWE))
000936 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x11C:
000937 99e1      	SBIC 0x1C,1
                 ; 0000 03BE         ;
000938 cffe      	RJMP _0x11C
                 ; 0000 03BF 
                 ; 0000 03C0     // Set up address registers
                 ; 0000 03C1     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000939 940e 0c27 	CALL SUBOPT_0x28
                 ; 0000 03C2     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 03C3 
                 ; 0000 03C4     // Set up data register
                 ; 0000 03C5     EEDR = value; // Write 0 to EEPROM
00093b 81e8      	LD   R30,Y
00093c bbed      	OUT  0x1D,R30
                 ; 0000 03C6 
                 ; 0000 03C7     // Enable write
                 ; 0000 03C8     EECR |= (1 << EEMWE); // Master write enable
00093d 9ae2      	SBI  0x1C,2
                 ; 0000 03C9     EECR |= (1 << EEWE);  // Start EEPROM write
00093e 9ae1      	SBI  0x1C,1
                 ; 0000 03CA }
                 _0x20A0006:
00093f 9623      	ADIW R28,3
000940 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 03CD {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 03CE     while (!(UCSRA & (1 << UDRE)))
000941 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x11F:
000942 9b5d      	SBIS 0xB,5
                 ; 0000 03CF         ;
000943 cffe      	RJMP _0x11F
                 ; 0000 03D0     UDR = data;
000944 81e8      	LD   R30,Y
000945 b9ec      	OUT  0xC,R30
                 ; 0000 03D1 }
                 _0x20A0005:
000946 9621      	ADIW R28,1
000947 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 03D4 {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 03D5     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x122:
000948 995f      	SBIC 0xB,7
000949 c003      	RJMP _0x125
00094a 940e 0b54 	CALL SUBOPT_0x5
00094c f009      	BREQ _0x126
                 _0x125:
00094d c001      	RJMP _0x124
                 _0x126:
00094e cff9      	RJMP _0x122
                 _0x124:
                 ; 0000 03D6     return UDR;
00094f b1ec      	IN   R30,0xC
000950 9508      	RET
                 ; 0000 03D7 }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 03DA {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 03DB     UBRRL = (unsigned char)ubrr;
000951 93ba      	ST   -Y,R27
000952 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000953 81e8      	LD   R30,Y
000954 b9e9      	OUT  0x9,R30
                 ; 0000 03DC     UBRRH = (unsigned char)(ubrr >> 8);
000955 81e9      	LDD  R30,Y+1
000956 70f0      	ANDI R31,HIGH(0x0)
000957 bde0      	OUT  0x20,R30
                 ; 0000 03DD     UCSRB = (1 << RXEN) | (1 << TXEN);
000958 e1e8      	LDI  R30,LOW(24)
000959 b9ea      	OUT  0xA,R30
                 ; 0000 03DE     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
00095a e0e6      	LDI  R30,LOW(6)
00095b bde0      	OUT  0x20,R30
                 ; 0000 03DF }
00095c 9622      	ADIW R28,2
00095d 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 03E2 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 03E3     unsigned char st_counts, i, j;
                 ; 0000 03E4     char temp[10];
                 ; 0000 03E5 
                 ; 0000 03E6     st_counts = read_byte_from_eeprom(0x0);
00095e 972a      	SBIW R28,10
00095f 940e 0e05 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
000961 940e 0bfe 	CALL SUBOPT_0x23
000963 2f1e      	MOV  R17,R30
                 ; 0000 03E7 
                 ; 0000 03E8     for (i = 0; i < st_counts; i++)
000964 e000      	LDI  R16,LOW(0)
                 _0x128:
000965 1701      	CP   R16,R17
000966 f5d0      	BRSH _0x129
                 ; 0000 03E9     {
                 ; 0000 03EA         memset(temp, 0, 10);
000967 01fe      	MOVW R30,R28
000968 9634      	ADIW R30,4
000969 93fa      	ST   -Y,R31
00096a 93ea      	ST   -Y,R30
00096b e0e0      	LDI  R30,LOW(0)
00096c 93ea      	ST   -Y,R30
00096d e0aa      	LDI  R26,LOW(10)
00096e e0b0      	LDI  R27,0
00096f 940e 0afe 	CALL _memset
                 ; 0000 03EB         for (j = 0; j < 8; j++)
000971 e030      	LDI  R19,LOW(0)
                 _0x12B:
000972 3038      	CPI  R19,8
000973 f4a8      	BRSH _0x12C
                 ; 0000 03EC         {
                 ; 0000 03ED             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000974 2fe3      	MOV  R30,R19
000975 e0f0      	LDI  R31,0
000976 01de      	MOVW R26,R28
000977 9614      	ADIW R26,4
000978 0fea      	ADD  R30,R26
000979 1ffb      	ADC  R31,R27
00097a 93ff      	PUSH R31
00097b 93ef      	PUSH R30
00097c 2fa3      	MOV  R26,R19
00097d 27bb      	CLR  R27
00097e 2fe0      	MOV  R30,R16
00097f 940e 0b83 	CALL SUBOPT_0xE
000981 0fae      	ADD  R26,R30
000982 1fbf      	ADC  R27,R31
000983 dfa6      	RCALL _read_byte_from_eeprom
000984 91af      	POP  R26
000985 91bf      	POP  R27
000986 93ec      	ST   X,R30
                 ; 0000 03EE         }
000987 5f3f      	SUBI R19,-1
000988 cfe9      	RJMP _0x12B
                 _0x12C:
                 ; 0000 03EF         temp[j] = '\0';
000989 2fe3      	MOV  R30,R19
00098a e0f0      	LDI  R31,0
00098b 01de      	MOVW R26,R28
00098c 9614      	ADIW R26,4
00098d 0fae      	ADD  R26,R30
00098e 1fbf      	ADC  R27,R31
00098f e0e0      	LDI  R30,LOW(0)
000990 93ec      	ST   X,R30
                 ; 0000 03F0         if (strncmp(temp, buffer, 8) == 0)
000991 01fe      	MOVW R30,R28
000992 9634      	ADIW R30,4
000993 93fa      	ST   -Y,R31
000994 93ea      	ST   -Y,R30
000995 940e 0b62 	CALL SUBOPT_0x8
000997 e0a8      	LDI  R26,LOW(8)
000998 940e 0b1a 	CALL _strncmp
00099a 30e0      	CPI  R30,0
00099b f419      	BRNE _0x12D
                 ; 0000 03F1             return (i + 1);
00099c 2fe0      	MOV  R30,R16
00099d 5fef      	SUBI R30,-LOW(1)
00099e c003      	RJMP _0x20A0004
                 ; 0000 03F2     }
                 _0x12D:
00099f 5f0f      	SUBI R16,-1
0009a0 cfc4      	RJMP _0x128
                 _0x129:
                 ; 0000 03F3 
                 ; 0000 03F4     return 0;
0009a1 e0e0      	LDI  R30,LOW(0)
                 _0x20A0004:
0009a2 940e 0e0c 	CALL __LOADLOCR4
0009a4 962e      	ADIW R28,14
0009a5 9508      	RET
                 ; 0000 03F5 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 03F8 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 03F9     unsigned char st_counts, i, j;
                 ; 0000 03FA     unsigned char temp;
                 ; 0000 03FB 
                 ; 0000 03FC     st_counts = read_byte_from_eeprom(0x0);
0009a6 93aa      	ST   -Y,R26
0009a7 940e 0e05 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
0009a9 940e 0bfe 	CALL SUBOPT_0x23
0009ab 2f1e      	MOV  R17,R30
                 ; 0000 03FD 
                 ; 0000 03FE     for (i = index; i <= st_counts; i++)
0009ac 810c      	LDD  R16,Y+4
                 _0x12F:
0009ad 1710      	CP   R17,R16
0009ae f0d8      	BRLO _0x130
                 ; 0000 03FF     {
                 ; 0000 0400         for (j = 0; j < 8; j++)
0009af e030      	LDI  R19,LOW(0)
                 _0x132:
0009b0 3038      	CPI  R19,8
0009b1 f4b0      	BRSH _0x133
                 ; 0000 0401         {
                 ; 0000 0402             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
0009b2 2fa3      	MOV  R26,R19
0009b3 27bb      	CLR  R27
0009b4 2fe0      	MOV  R30,R16
0009b5 940e 0b83 	CALL SUBOPT_0xE
0009b7 0fae      	ADD  R26,R30
0009b8 1fbf      	ADC  R27,R31
0009b9 df70      	RCALL _read_byte_from_eeprom
0009ba 2f2e      	MOV  R18,R30
                 ; 0000 0403             write_byte_to_eeprom(j + ((i) * 8), temp);
0009bb 2fa3      	MOV  R26,R19
0009bc 27bb      	CLR  R27
0009bd e0e8      	LDI  R30,LOW(8)
0009be 9fe0      	MUL  R30,R16
0009bf 01f0      	MOVW R30,R0
0009c0 0fea      	ADD  R30,R26
0009c1 1ffb      	ADC  R31,R27
0009c2 93fa      	ST   -Y,R31
0009c3 93ea      	ST   -Y,R30
0009c4 2fa2      	MOV  R26,R18
0009c5 df70      	RCALL _write_byte_to_eeprom
                 ; 0000 0404         }
0009c6 5f3f      	SUBI R19,-1
0009c7 cfe8      	RJMP _0x132
                 _0x133:
                 ; 0000 0405     }
0009c8 5f0f      	SUBI R16,-1
0009c9 cfe3      	RJMP _0x12F
                 _0x130:
                 ; 0000 0406     write_byte_to_eeprom(0x0, st_counts - 1);
0009ca 940e 0b88 	CALL SUBOPT_0xF
0009cc 2fa1      	MOV  R26,R17
0009cd 50a1      	SUBI R26,LOW(1)
0009ce df67      	RCALL _write_byte_to_eeprom
                 ; 0000 0407 }
0009cf 940e 0e0c 	CALL __LOADLOCR4
0009d1 940c 0b0c 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 040A {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 040B     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
0009d3 9a8d      	SBI  0x11,5
                 ; 0000 040C     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
0009d4 988e      	CBI  0x11,6
                 ; 0000 040D }
0009d5 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 0410 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 0411     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
0009d6 9a95      	SBI  0x12,5
                 ; 0000 0412     delay_us(15);                   // Wait for 15 microseconds
                +
0009d7 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
0009d8 958a     +DEC R24
0009d9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 0413     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
0009da 9895      	CBI  0x12,5
                 ; 0000 0414 }
0009db 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0417 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 0418     uint32_t i, result;
                 ; 0000 0419 
                 ; 0000 041A     // Wait for rising edge on Echo pin
                 ; 0000 041B     for (i = 0; i < 600000; i++)
0009dc 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
0009dd e0e0      	LDI  R30,LOW(0)
                +
0009de 83ec     +STD Y + 4 , R30
0009df 83ed     +STD Y + 4 + 1 , R30
0009e0 83ee     +STD Y + 4 + 2 , R30
0009e1 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x135:
0009e2 940e 0c2e 	CALL SUBOPT_0x29
0009e4 f430      	BRSH _0x136
                 ; 0000 041C     {
                 ; 0000 041D         if (!(US_PIN & (1 << US_ECHO_POS)))
0009e5 9b86      	SBIS 0x10,6
                 ; 0000 041E             continue;
0009e6 c001      	RJMP _0x134
                 ; 0000 041F         else
                 ; 0000 0420             break;
0009e7 c003      	RJMP _0x136
                 ; 0000 0421     }
                 _0x134:
0009e8 940e 0c3a 	CALL SUBOPT_0x2A
0009ea cff7      	RJMP _0x135
                 _0x136:
                 ; 0000 0422 
                 ; 0000 0423     if (i == 600000)
0009eb 940e 0c2e 	CALL SUBOPT_0x29
0009ed f419      	BRNE _0x139
                 ; 0000 0424         return US_ERROR; // Timeout error if no rising edge detected
0009ee efef      	LDI  R30,LOW(65535)
0009ef efff      	LDI  R31,HIGH(65535)
0009f0 c036      	RJMP _0x20A0003
                 ; 0000 0425 
                 ; 0000 0426     // Start timer with prescaler 8
                 ; 0000 0427     TCCR1A = 0x00;
                 _0x139:
0009f1 e0e0      	LDI  R30,LOW(0)
0009f2 bdef      	OUT  0x2F,R30
                 ; 0000 0428     TCCR1B = (1 << CS11) | (1 << CS10);
0009f3 e0e3      	LDI  R30,LOW(3)
0009f4 bdee      	OUT  0x2E,R30
                 ; 0000 0429     TCNT1 = 0x00; // Reset timer
0009f5 e0e0      	LDI  R30,LOW(0)
0009f6 e0f0      	LDI  R31,HIGH(0)
0009f7 bdfd      	OUT  0x2C+1,R31
0009f8 bdec      	OUT  0x2C,R30
                 ; 0000 042A 
                 ; 0000 042B     // Wait for falling edge on Echo pin
                 ; 0000 042C     for (i = 0; i < 600000; i++)
                +
0009f9 83ec     +STD Y + 4 , R30
0009fa 83ed     +STD Y + 4 + 1 , R30
0009fb 83ee     +STD Y + 4 + 2 , R30
0009fc 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x13B:
0009fd 940e 0c2e 	CALL SUBOPT_0x29
0009ff f470      	BRSH _0x13C
                 ; 0000 042D     {
                 ; 0000 042E         if (!(US_PIN & (1 << US_ECHO_POS)))
000a00 9b86      	SBIS 0x10,6
                 ; 0000 042F             break; // Falling edge detected
000a01 c00c      	RJMP _0x13C
                 ; 0000 0430         if (TCNT1 > 60000)
000a02 b5ec      	IN   R30,0x2C
000a03 b5fd      	IN   R31,0x2C+1
000a04 36e1      	CPI  R30,LOW(0xEA61)
000a05 eeaa      	LDI  R26,HIGH(0xEA61)
000a06 07fa      	CPC  R31,R26
000a07 f018      	BRLO _0x13E
                 ; 0000 0431             return US_NO_OBSTACLE; // No obstacle in range
000a08 efee      	LDI  R30,LOW(65534)
000a09 efff      	LDI  R31,HIGH(65534)
000a0a c01c      	RJMP _0x20A0003
                 ; 0000 0432     }
                 _0x13E:
000a0b 940e 0c3a 	CALL SUBOPT_0x2A
000a0d cfef      	RJMP _0x13B
                 _0x13C:
                 ; 0000 0433 
                 ; 0000 0434     result = TCNT1; // Capture timer value
000a0e b5ec      	IN   R30,0x2C
000a0f b5fd      	IN   R31,0x2C+1
000a10 2766      	CLR  R22
000a11 2777      	CLR  R23
000a12 940e 0dfe 	CALL __PUTD1S0
                 ; 0000 0435     TCCR1B = 0x00;  // Stop timer
000a14 e0e0      	LDI  R30,LOW(0)
000a15 bdee      	OUT  0x2E,R30
                 ; 0000 0436 
                 ; 0000 0437     if (result > 60000)
000a16 940e 0df9 	CALL __GETD2S0
                +
000a18 36a1     +CPI R26 , LOW ( 0xEA61 )
000a19 eeea     +LDI R30 , HIGH ( 0xEA61 )
000a1a 07be     +CPC R27 , R30
000a1b e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000a1c 078e     +CPC R24 , R30
000a1d e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000a1e 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000a1f f018      	BRLO _0x13F
                 ; 0000 0438         return US_NO_OBSTACLE;
000a20 efee      	LDI  R30,LOW(65534)
000a21 efff      	LDI  R31,HIGH(65534)
000a22 c004      	RJMP _0x20A0003
                 ; 0000 0439     else
                 _0x13F:
                 ; 0000 043A         return (result >> 1); // Return the measured pulse width
000a23 940e 0df4 	CALL __GETD1S0
000a25 940e 0de0 	CALL __LSRD1
                 ; 0000 043B }
                 _0x20A0003:
000a27 9628      	ADIW R28,8
000a28 9508      	RET
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 043E {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 043F     char numberString[16];
                 ; 0000 0440     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 0441     int distance, previous_distance = -1;
                 ; 0000 0442     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0443 
                 ; 0000 0444     lcdCommand(0x01);
000a29 9760      	SBIW R28,16
000a2a 940e 0e03 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
000a2c ef4f     +LDI R20 , LOW ( - 1 )
000a2d ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000a2e 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0445     lcd_gotoxy(1, 1);
                 ; 0000 0446     lcd_print("Distance: ");
                +
000a30 e5aa     +LDI R26 , LOW ( _0x142 + ( 0 ) )
000a31 e0b7     +LDI R27 , HIGH ( _0x142 + ( 0 ) )
                 	__POINTW2MN _0x142,0
000a32 de40      	RCALL _lcd_print
                 ; 0000 0447 
                 ; 0000 0448     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x143:
000a33 940e 0bc3 	CALL SUBOPT_0x19
000a35 f009      	BREQ PC+2
000a36 c072      	RJMP _0x145
                 ; 0000 0449     {
                 ; 0000 044A         HCSR04Trigger();              // Send trigger pulse
000a37 df9e      	RCALL _HCSR04Trigger
                 ; 0000 044B         pulseWidth = GetPulseWidth(); // Measure echo pulse
000a38 dfa3      	RCALL _GetPulseWidth
000a39 018f      	MOVW R16,R30
                 ; 0000 044C 
                 ; 0000 044D         if (pulseWidth == US_ERROR)
000a3a efef      	LDI  R30,LOW(65535)
000a3b efff      	LDI  R31,HIGH(65535)
000a3c 17e0      	CP   R30,R16
000a3d 07f1      	CPC  R31,R17
000a3e f429      	BRNE _0x146
                 ; 0000 044E         {
                 ; 0000 044F             lcdCommand(0x01);
000a3f 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0450             lcd_gotoxy(1, 1);
                 ; 0000 0451             lcd_print("Error"); // Display error message
                +
000a41 e6a5     +LDI R26 , LOW ( _0x142 + ( 11 ) )
000a42 e0b7     +LDI R27 , HIGH ( _0x142 + ( 11 ) )
                 	__POINTW2MN _0x142,11
000a43 c05f      	RJMP _0x156
                 ; 0000 0452         }
                 ; 0000 0453         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x146:
000a44 efee      	LDI  R30,LOW(65534)
000a45 efff      	LDI  R31,HIGH(65534)
000a46 17e0      	CP   R30,R16
000a47 07f1      	CPC  R31,R17
000a48 f429      	BRNE _0x148
                 ; 0000 0454         {
                 ; 0000 0455             lcdCommand(0x01);
000a49 940e 0b38 	CALL SUBOPT_0x1
                 ; 0000 0456             lcd_gotoxy(1, 1);
                 ; 0000 0457             lcd_print("No Obstacle"); // Display no obstacle message
                +
000a4b e6ab     +LDI R26 , LOW ( _0x142 + ( 17 ) )
000a4c e0b7     +LDI R27 , HIGH ( _0x142 + ( 17 ) )
                 	__POINTW2MN _0x142,17
000a4d c055      	RJMP _0x156
                 ; 0000 0458         }
                 ; 0000 0459         else
                 _0x148:
                 ; 0000 045A         {
                 ; 0000 045B             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
000a4e 01f8      	MOVW R30,R16
000a4f 2766      	CLR  R22
000a50 2777      	CLR  R23
000a51 940e 0cb7 	CALL __CDF1
                +
000a53 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000a54 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000a55 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000a56 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000a57 940e 0d3a 	CALL __MULF12
000a59 01df      	MOVW R26,R30
000a5a 01cb      	MOVW R24,R22
                +
000a5b e0e0     +LDI R30 , LOW ( 0x40000000 )
000a5c e0f0     +LDI R31 , HIGH ( 0x40000000 )
000a5d e060     +LDI R22 , BYTE3 ( 0x40000000 )
000a5e e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000a5f 940e 0d88 	CALL __DIVF21
                +
000a61 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000a62 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000a63 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000a64 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000a65 940e 0cea 	CALL __ADDF12
000a67 940e 0c80 	CALL __CFD1
000a69 019f      	MOVW R18,R30
                 ; 0000 045C 
                 ; 0000 045D             if (distance != previous_distance)
                +
000a6a 1742     +CP R20 , R18
000a6b 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000a6c f089      	BREQ _0x14A
                 ; 0000 045E             {
                 ; 0000 045F                 previous_distance = distance;
000a6d 01a9      	MOVW R20,R18
                 ; 0000 0460                 // Display distance on LCD
                 ; 0000 0461                 itoa(distance, numberString); // Convert distance to string
000a6e 933a      	ST   -Y,R19
000a6f 932a      	ST   -Y,R18
000a70 01de      	MOVW R26,R28
000a71 9618      	ADIW R26,8
000a72 940e 0ad0 	CALL _itoa
                 ; 0000 0462                 lcd_gotoxy(11, 1);
000a74 e0eb      	LDI  R30,LOW(11)
000a75 93ea      	ST   -Y,R30
000a76 e0a1      	LDI  R26,LOW(1)
000a77 dde3      	RCALL _lcd_gotoxy
                 ; 0000 0463                 lcd_print(numberString);
000a78 01de      	MOVW R26,R28
000a79 9616      	ADIW R26,6
000a7a ddf8      	RCALL _lcd_print
                 ; 0000 0464                 lcd_print(" cm ");
                +
000a7b e7a7     +LDI R26 , LOW ( _0x142 + ( 29 ) )
000a7c e0b7     +LDI R27 , HIGH ( _0x142 + ( 29 ) )
                 	__POINTW2MN _0x142,29
000a7d ddf5      	RCALL _lcd_print
                 ; 0000 0465             }
                 ; 0000 0466             // Counting logic based on distance
                 ; 0000 0467             if (distance < 6)
                 _0x14A:
                +
000a7e 3026     +CPI R18 , LOW ( 6 )
000a7f e0e0     +LDI R30 , HIGH ( 6 )
000a80 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000a81 f40c      	BRGE _0x14B
                 ; 0000 0468             {
                 ; 0000 0469                 US_count++; // Increment count if distance is below threshold
000a82 9463      	INC  R6
                 ; 0000 046A             }
                 ; 0000 046B 
                 ; 0000 046C             // Update count on LCD only if it changes
                 ; 0000 046D             if (US_count != previous_count)
                 _0x14B:
000a83 91e0 07b4 	LDS  R30,_previous_count_S0000014000
000a85 91f0 07b5 	LDS  R31,_previous_count_S0000014000+1
000a87 2da6      	MOV  R26,R6
000a88 e0b0      	LDI  R27,0
000a89 17ea      	CP   R30,R26
000a8a 07fb      	CPC  R31,R27
000a8b f0c1      	BREQ _0x14C
                 ; 0000 046E             {
                 ; 0000 046F                 previous_count = US_count;
000a8c 2de6      	MOV  R30,R6
000a8d e0f0      	LDI  R31,0
000a8e 93e0 07b4 	STS  _previous_count_S0000014000,R30
000a90 93f0 07b5 	STS  _previous_count_S0000014000+1,R31
                 ; 0000 0470                 lcd_gotoxy(1, 2); // Move to second line
000a92 e0e1      	LDI  R30,LOW(1)
000a93 93ea      	ST   -Y,R30
000a94 e0a2      	LDI  R26,LOW(2)
000a95 ddc5      	RCALL _lcd_gotoxy
                 ; 0000 0471                 itoa(US_count, numberString);
000a96 2de6      	MOV  R30,R6
000a97 e0f0      	LDI  R31,0
000a98 93fa      	ST   -Y,R31
000a99 93ea      	ST   -Y,R30
000a9a 01de      	MOVW R26,R28
000a9b 9618      	ADIW R26,8
000a9c 940e 0ad0 	CALL _itoa
                 ; 0000 0472                 lcd_print("Count: ");
                +
000a9e e7ac     +LDI R26 , LOW ( _0x142 + ( 34 ) )
000a9f e0b7     +LDI R27 , HIGH ( _0x142 + ( 34 ) )
                 	__POINTW2MN _0x142,34
000aa0 ddd2      	RCALL _lcd_print
                 ; 0000 0473                 lcd_print(numberString);
000aa1 01de      	MOVW R26,R28
000aa2 9616      	ADIW R26,6
                 _0x156:
000aa3 ddcf      	RCALL _lcd_print
                 ; 0000 0474             }
                 ; 0000 0475         }
                 _0x14C:
                 ; 0000 0476         delay_ms(100);
000aa4 e6a4      	LDI  R26,LOW(100)
000aa5 e0b0      	LDI  R27,0
000aa6 940e 0c47 	CALL _delay_ms
                 ; 0000 0477     }
000aa8 cf8a      	RJMP _0x143
                 _0x145:
                 ; 0000 0478 }
000aa9 940e 0e0a 	CALL __LOADLOCR6
000aab 9666      	ADIW R28,22
000aac 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x142:
00075a           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 047B {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 047C     unsigned int hash = 0;
                 ; 0000 047D     while (*str)
000aad 93ba      	ST   -Y,R27
000aae 93aa      	ST   -Y,R26
000aaf 931a      	ST   -Y,R17
000ab0 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000ab1 e000     +LDI R16 , LOW ( 0 )
000ab2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x14D:
000ab3 81aa      	LDD  R26,Y+2
000ab4 81bb      	LDD  R27,Y+2+1
000ab5 91ec      	LD   R30,X
000ab6 30e0      	CPI  R30,0
000ab7 f099      	BREQ _0x14F
                 ; 0000 047E     {
                 ; 0000 047F         hash = (hash * 31) + *str; // A basic hash formula
                +
000ab8 e1af     +LDI R26 , 31
000ab9 9fa0     +MUL R26 , R16
000aba 01f0     +MOVW R30 , R0
000abb 9fa1     +MUL R26 , R17
000abc 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000abd 010f      	MOVW R0,R30
000abe 81aa      	LDD  R26,Y+2
000abf 81bb      	LDD  R27,Y+2+1
000ac0 91ec      	LD   R30,X
000ac1 e0f0      	LDI  R31,0
000ac2 0de0      	ADD  R30,R0
000ac3 1df1      	ADC  R31,R1
000ac4 018f      	MOVW R16,R30
                 ; 0000 0480         str++;
000ac5 81ea      	LDD  R30,Y+2
000ac6 81fb      	LDD  R31,Y+2+1
000ac7 9631      	ADIW R30,1
000ac8 83ea      	STD  Y+2,R30
000ac9 83fb      	STD  Y+2+1,R31
                 ; 0000 0481     }
000aca cfe8      	RJMP _0x14D
                 _0x14F:
                 ; 0000 0482     return hash;
000acb 01f8      	MOVW R30,R16
000acc 8119      	LDD  R17,Y+1
000acd 8108      	LDD  R16,Y+0
                 _0x20A0002:
000ace 9624      	ADIW R28,4
000acf 9508      	RET
                 ; 0000 0483 }
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000ad0 93ba      	ST   -Y,R27
000ad1 93aa      	ST   -Y,R26
000ad2 91a9          ld   r26,y+
000ad3 91b9          ld   r27,y+
000ad4 91e9          ld   r30,y+
000ad5 91f9          ld   r31,y+
000ad6 9630          adiw r30,0
000ad7 f42a          brpl __itoa0
000ad8 95e0          com  r30
000ad9 95f0          com  r31
000ada 9631          adiw r30,1
000adb e26d          ldi  r22,'-'
000adc 936d          st   x+,r22
                 __itoa0:
000add 94e8          clt
000ade e180          ldi  r24,low(10000)
000adf e297          ldi  r25,high(10000)
000ae0 d00d          rcall __itoa1
000ae1 ee88          ldi  r24,low(1000)
000ae2 e093          ldi  r25,high(1000)
000ae3 d00a          rcall __itoa1
000ae4 e684          ldi  r24,100
000ae5 2799          clr  r25
000ae6 d007          rcall __itoa1
000ae7 e08a          ldi  r24,10
000ae8 d005          rcall __itoa1
000ae9 2f6e          mov  r22,r30
000aea d010          rcall __itoa5
000aeb 2766          clr  r22
000aec 936c          st   x,r22
000aed 9508          ret
                 
                 __itoa1:
000aee 2766          clr	 r22
                 __itoa2:
000aef 17e8          cp   r30,r24
000af0 07f9          cpc  r31,r25
000af1 f020          brlo __itoa3
000af2 9563          inc  r22
000af3 1be8          sub  r30,r24
000af4 0bf9          sbc  r31,r25
000af5 f7c9          brne __itoa2
                 __itoa3:
000af6 2366          tst  r22
000af7 f411          brne __itoa4
000af8 f016          brts __itoa5
000af9 9508          ret
                 __itoa4:
000afa 9468          set
                 __itoa5:
000afb 5d60          subi r22,-0x30
000afc 936d          st   x+,r22
000afd 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000afe 93ba      	ST   -Y,R27
000aff 93aa      	ST   -Y,R26
000b00 81b9          ldd  r27,y+1
000b01 81a8          ld   r26,y
000b02 9610          adiw r26,0
000b03 f031          breq memset1
000b04 81fc          ldd  r31,y+4
000b05 81eb          ldd  r30,y+3
000b06 816a          ldd  r22,y+2
                 memset0:
000b07 9361          st   z+,r22
000b08 9711          sbiw r26,1
000b09 f7e9          brne memset0
                 memset1:
000b0a 81eb          ldd  r30,y+3
000b0b 81fc          ldd  r31,y+4
                 _0x20A0001:
000b0c 9625      	ADIW R28,5
000b0d 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000b0e 93ba      	ST   -Y,R27
000b0f 93aa      	ST   -Y,R26
000b10 91a9          ld   r26,y+
000b11 91b9          ld   r27,y+
000b12 27ee          clr  r30
000b13 27ff          clr  r31
                 strlen0:
000b14 916d          ld   r22,x+
000b15 2366          tst  r22
000b16 f011          breq strlen1
000b17 9631          adiw r30,1
000b18 cffb          rjmp strlen0
                 strlen1:
000b19 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000b1a 93aa      	ST   -Y,R26
000b1b 2766          clr  r22
000b1c 2777          clr  r23
000b1d 9189          ld   r24,y+
000b1e 91e9          ld   r30,y+
000b1f 91f9          ld   r31,y+
000b20 91a9          ld   r26,y+
000b21 91b9          ld   r27,y+
                 strncmp0:
000b22 2388          tst  r24
000b23 f049          breq strncmp1
000b24 958a          dec  r24
000b25 916d          ld   r22,x+
000b26 9171          ld   r23,z+
000b27 1767          cp   r22,r23
000b28 f421          brne strncmp1
000b29 2366          tst  r22
000b2a f7b9          brne strncmp0
                 strncmp3:
000b2b 27ee          clr  r30
000b2c 9508          ret
                 strncmp1:
000b2d 1b67          sub  r22,r23
000b2e f3e1          breq strncmp3
000b2f e0e1          ldi  r30,1
000b30 f408          brcc strncmp2
000b31 50e2          subi r30,2
                 strncmp2:
000b32 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000784           	.BYTE 0x10
                 _buffer:
000794           	.BYTE 0x20
                 _previous_count_S0000014000:
0007b4           	.BYTE 0x2
                 __seed_G100:
0007b6           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000b33 e0e1      	LDI  R30,LOW(1)
000b34 e0f0      	LDI  R31,HIGH(1)
000b35 15e4      	CP   R30,R4
000b36 05f5      	CPC  R31,R5
000b37 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:195 WORDS
                 SUBOPT_0x1:
000b38 e0a1      	LDI  R26,LOW(1)
000b39 940e 082a 	CALL _lcdCommand
000b3b e0e1      	LDI  R30,LOW(1)
000b3c 93ea      	ST   -Y,R30
000b3d e0a1      	LDI  R26,LOW(1)
000b3e 940c 085b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x2:
000b40 940e 0873 	CALL _lcd_print
000b42 e0e1      	LDI  R30,LOW(1)
000b43 93ea      	ST   -Y,R30
000b44 e0a2      	LDI  R26,LOW(2)
000b45 940c 085b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000b47 e0e2      	LDI  R30,LOW(2)
000b48 e0f0      	LDI  R31,HIGH(2)
000b49 15e4      	CP   R30,R4
000b4a 05f5      	CPC  R31,R5
000b4b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
000b4c e0af      	LDI  R26,LOW(15)
000b4d 940e 082a 	CALL _lcdCommand
                +
000b4f e880     +LDI R24 , LOW ( 3200 )
000b50 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000b51 9701     +SBIW R24 , 1
000b52 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000b53 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000b54 e0e3      	LDI  R30,LOW(3)
000b55 e0f0      	LDI  R31,HIGH(3)
000b56 15e4      	CP   R30,R4
000b57 05f5      	CPC  R31,R5
000b58 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
                +
000b59 e880     +LDI R24 , LOW ( 3200 )
000b5a e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000b5b 9701     +SBIW R24 , 1
000b5c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000b5d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x7:
000b5e e9a4      	LDI  R26,LOW(_buffer)
000b5f e0b7      	LDI  R27,HIGH(_buffer)
000b60 940c 0b0e 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x8:
000b62 e9e4      	LDI  R30,LOW(_buffer)
000b63 e0f7      	LDI  R31,HIGH(_buffer)
000b64 93fa      	ST   -Y,R31
000b65 93ea      	ST   -Y,R30
000b66 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x9:
000b67 e0e0      	LDI  R30,LOW(0)
000b68 93ea      	ST   -Y,R30
000b69 e2a0      	LDI  R26,LOW(32)
000b6a e0b0      	LDI  R27,0
000b6b 940c 0afe 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000b6d 93fa      	ST   -Y,R31
000b6e 93ea      	ST   -Y,R30
000b6f e0a2      	LDI  R26,LOW(2)
000b70 940e 0b1a 	CALL _strncmp
000b72 30e0      	CPI  R30,0
000b73 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
000b74 eda0      	LDI  R26,LOW(2000)
000b75 e0b7      	LDI  R27,HIGH(2000)
000b76 940e 0c47 	CALL _delay_ms
000b78 9897      	CBI  0x12,7
000b79 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000b7a 940e 0873 	CALL _lcd_print
000b7c cff7      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000b7d e0a0      	LDI  R26,LOW(0)
000b7e e0b0      	LDI  R27,0
000b7f 940e 092a 	CALL _read_byte_from_eeprom
000b81 2f5e      	MOV  R21,R30
000b82 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000b83 e0f0      	LDI  R31,0
000b84 9631      	ADIW R30,1
000b85 940e 0dd9 	CALL __LSLW3
000b87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000b88 e0e0      	LDI  R30,LOW(0)
000b89 e0f0      	LDI  R31,HIGH(0)
000b8a 93fa      	ST   -Y,R31
000b8b 93ea      	ST   -Y,R30
000b8c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000b8d e9a4      	LDI  R26,LOW(_buffer)
000b8e e0b7      	LDI  R27,HIGH(_buffer)
000b8f 940c 0873 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000b91 e0e4      	LDI  R30,LOW(4)
000b92 e0f0      	LDI  R31,HIGH(4)
000b93 15e4      	CP   R30,R4
000b94 05f5      	CPC  R31,R5
000b95 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000b96 e0e5      	LDI  R30,LOW(5)
000b97 e0f0      	LDI  R31,HIGH(5)
000b98 15e4      	CP   R30,R4
000b99 05f5      	CPC  R31,R5
000b9a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x13:
000b9b 01f8      	MOVW R30,R16
000b9c 9631      	ADIW R30,1
000b9d 940e 0dd9 	CALL __LSLW3
000b9f 0fe2      	ADD  R30,R18
000ba0 1ff3      	ADC  R31,R19
000ba1 01df      	MOVW R26,R30
000ba2 940c 092a 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x14:
000ba4 e0ad      	LDI  R26,LOW(13)
000ba5 940e 0941 	CALL _USART_Transmit
000ba7 e0ad      	LDI  R26,LOW(13)
000ba8 940e 0941 	CALL _USART_Transmit
000baa efa4      	LDI  R26,LOW(500)
000bab e0b1      	LDI  R27,HIGH(500)
000bac 940c 0c47 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x15:
000bae 940e 0873 	CALL _lcd_print
000bb0 eda0      	LDI  R26,LOW(2000)
000bb1 e0b7      	LDI  R27,HIGH(2000)
000bb2 940c 0c47 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
000bb4 e0e7      	LDI  R30,LOW(7)
000bb5 e0f0      	LDI  R31,HIGH(7)
000bb6 15e4      	CP   R30,R4
000bb7 05f5      	CPC  R31,R5
000bb8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000bb9 e0e8      	LDI  R30,LOW(8)
000bba e0f0      	LDI  R31,HIGH(8)
000bbb 15e4      	CP   R30,R4
000bbc 05f5      	CPC  R31,R5
000bbd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000bbe e0e9      	LDI  R30,LOW(9)
000bbf e0f0      	LDI  R31,HIGH(9)
000bc0 15e4      	CP   R30,R4
000bc1 05f5      	CPC  R31,R5
000bc2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000bc3 e0ea      	LDI  R30,LOW(10)
000bc4 e0f0      	LDI  R31,HIGH(10)
000bc5 15e4      	CP   R30,R4
000bc6 05f5      	CPC  R31,R5
000bc7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1A:
000bc8 e0eb      	LDI  R30,LOW(11)
000bc9 e0f0      	LDI  R31,HIGH(11)
000bca 15e4      	CP   R30,R4
000bcb 05f5      	CPC  R31,R5
000bcc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1B:
000bcd 940e 082a 	CALL _lcdCommand
000bcf cf89      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000bd0 bbe5      	OUT  0x15,R30
000bd1 b3e3      	IN   R30,0x13
000bd2 70ef      	ANDI R30,LOW(0xF)
000bd3 2f1e      	MOV  R17,R30
000bd4 301f      	CPI  R17,15
000bd5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 39 TIMES, CODE SIZE REDUCTION:339 WORDS
                 SUBOPT_0x1D:
000bd6 2fe0      	MOV  R30,R16
000bd7 e8a4      	LDI  R26,LOW(_keypad)
000bd8 e0b7      	LDI  R27,HIGH(_keypad)
000bd9 e0f0      	LDI  R31,0
000bda 940e 0ddb 	CALL __LSLW2
000bdc 0fae      	ADD  R26,R30
000bdd 1fbf      	ADC  R27,R31
000bde 27ee      	CLR  R30
000bdf 0fa3      	ADD  R26,R19
000be0 1fbe      	ADC  R27,R30
000be1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1E:
000be2 56ec      	SUBI R30,LOW(-_buffer)
000be3 4ff8      	SBCI R31,HIGH(-_buffer)
000be4 010f      	MOVW R0,R30
000be5 cff0      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1F:
000be6 91ec      	LD   R30,X
000be7 01d0      	MOVW R26,R0
000be8 93ec      	ST   X,R30
000be9 cf74      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
                +
000bea 56eb     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000beb 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000bec e0a0      	LDI  R26,LOW(0)
000bed 83a0      	STD  Z+0,R26
000bee cfe7      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x21:
000bef 2fe5      	MOV  R30,R21
000bf0 e0f0      	LDI  R31,0
000bf1 9731      	SBIW R30,1
000bf2 56ec      	SUBI R30,LOW(-_buffer)
000bf3 4ff8      	SBCI R31,HIGH(-_buffer)
000bf4 e0a0      	LDI  R26,LOW(0)
000bf5 83a0      	STD  Z+0,R26
000bf6 e1a0      	LDI  R26,LOW(16)
000bf7 940c 082a 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000bf9 940e 0873 	CALL _lcd_print
000bfb e1a0      	LDI  R26,LOW(16)
000bfc 940c 082a 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
000bfe e0a0      	LDI  R26,LOW(0)
000bff e0b0      	LDI  R27,0
000c00 940c 092a 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000c02 9721      	SBIW R28,1
000c03 940e 095e 	CALL _search_student_code
000c05 83e8      	ST   Y,R30
000c06 81a8      	LD   R26,Y
000c07 30a1      	CPI  R26,LOW(0x1)
000c08 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x25:
000c09 93aa      	ST   -Y,R26
000c0a b3e8      	IN   R30,0x18
000c0b 70ef      	ANDI R30,LOW(0xF)
000c0c 2fae      	MOV  R26,R30
000c0d 81e8      	LD   R30,Y
000c0e 7fe0      	ANDI R30,LOW(0xF0)
000c0f 2bea      	OR   R30,R26
000c10 bbe8      	OUT  0x18,R30
000c11 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000c12 98c1      	CBI  0x18,1
000c13 9ac2      	SBI  0x18,2
                +
000c14 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000c15 958a     +DEC R24
000c16 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000c17 98c2      	CBI  0x18,2
000c18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x27:
000c19 b3e8      	IN   R30,0x18
000c1a 70ef      	ANDI R30,LOW(0xF)
000c1b 2fae      	MOV  R26,R30
000c1c 81e8      	LD   R30,Y
000c1d 95e2      	SWAP R30
000c1e 7fe0      	ANDI R30,0xF0
000c1f 2bea      	OR   R30,R26
000c20 bbe8      	OUT  0x18,R30
000c21 9ac2      	SBI  0x18,2
                +
000c22 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000c23 958a     +DEC R24
000c24 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000c25 98c2      	CBI  0x18,2
000c26 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000c27 81ea      	LDD  R30,Y+2
000c28 70f0      	ANDI R31,HIGH(0x0)
000c29 70e3      	ANDI R30,LOW(0x3)
000c2a bbef      	OUT  0x1F,R30
000c2b 81e9      	LDD  R30,Y+1
000c2c bbee      	OUT  0x1E,R30
000c2d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x29:
                +
000c2e 81ac     +LDD R26 , Y + 4
000c2f 81bd     +LDD R27 , Y + 4 + 1
000c30 818e     +LDD R24 , Y + 4 + 2
000c31 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000c32 3ca0     +CPI R26 , LOW ( 0x927C0 )
000c33 e2e7     +LDI R30 , HIGH ( 0x927C0 )
000c34 07be     +CPC R27 , R30
000c35 e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000c36 078e     +CPC R24 , R30
000c37 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000c38 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000c39 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2A:
                +
000c3a 81ec     +LDD R30 , Y + 4
000c3b 81fd     +LDD R31 , Y + 4 + 1
000c3c 816e     +LDD R22 , Y + 4 + 2
000c3d 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000c3e 5fef     +SUBI R30 , LOW ( - 1 )
000c3f 4fff     +SBCI R31 , HIGH ( - 1 )
000c40 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000c41 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000c42 83ec     +STD Y + 4 , R30
000c43 83fd     +STD Y + 4 + 1 , R31
000c44 836e     +STD Y + 4 + 2 , R22
000c45 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000c46 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000c47 9610      	adiw r26,0
000c48 f039      	breq __delay_ms1
                 __delay_ms0:
000c49 95a8      	wdr
                +
000c4a ed80     +LDI R24 , LOW ( 0x7D0 )
000c4b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000c4c 9701     +SBIW R24 , 1
000c4d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000c4e 9711      	sbiw r26,1
000c4f f7c9      	brne __delay_ms0
                 __delay_ms1:
000c50 9508      	ret
                 
                 __ROUND_REPACK:
000c51 2355      	TST  R21
000c52 f442      	BRPL __REPACK
000c53 3850      	CPI  R21,0x80
000c54 f411      	BRNE __ROUND_REPACK0
000c55 ffe0      	SBRS R30,0
000c56 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000c57 9631      	ADIW R30,1
000c58 1f69      	ADC  R22,R25
000c59 1f79      	ADC  R23,R25
000c5a f06b      	BRVS __REPACK1
                 
                 __REPACK:
000c5b e850      	LDI  R21,0x80
000c5c 2757      	EOR  R21,R23
000c5d f411      	BRNE __REPACK0
000c5e 935f      	PUSH R21
000c5f c0c8      	RJMP __ZERORES
                 __REPACK0:
000c60 3f5f      	CPI  R21,0xFF
000c61 f031      	BREQ __REPACK1
000c62 0f66      	LSL  R22
000c63 0c00      	LSL  R0
000c64 9557      	ROR  R21
000c65 9567      	ROR  R22
000c66 2f75      	MOV  R23,R21
000c67 9508      	RET
                 __REPACK1:
000c68 935f      	PUSH R21
000c69 2000      	TST  R0
000c6a f00a      	BRMI __REPACK2
000c6b c0c8      	RJMP __MAXRES
                 __REPACK2:
000c6c c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000c6d e850      	LDI  R21,0x80
000c6e 2e19      	MOV  R1,R25
000c6f 2215      	AND  R1,R21
000c70 0f88      	LSL  R24
000c71 1f99      	ROL  R25
000c72 2795      	EOR  R25,R21
000c73 0f55      	LSL  R21
000c74 9587      	ROR  R24
                 
                 __UNPACK1:
000c75 e850      	LDI  R21,0x80
000c76 2e07      	MOV  R0,R23
000c77 2205      	AND  R0,R21
000c78 0f66      	LSL  R22
000c79 1f77      	ROL  R23
000c7a 2775      	EOR  R23,R21
000c7b 0f55      	LSL  R21
000c7c 9567      	ROR  R22
000c7d 9508      	RET
                 
                 __CFD1U:
000c7e 9468      	SET
000c7f c001      	RJMP __CFD1U0
                 __CFD1:
000c80 94e8      	CLT
                 __CFD1U0:
000c81 935f      	PUSH R21
000c82 dff2      	RCALL __UNPACK1
000c83 3870      	CPI  R23,0x80
000c84 f018      	BRLO __CFD10
000c85 3f7f      	CPI  R23,0xFF
000c86 f408      	BRCC __CFD10
000c87 c0a0      	RJMP __ZERORES
                 __CFD10:
000c88 e156      	LDI  R21,22
000c89 1b57      	SUB  R21,R23
000c8a f4aa      	BRPL __CFD11
000c8b 9551      	NEG  R21
000c8c 3058      	CPI  R21,8
000c8d f40e      	BRTC __CFD19
000c8e 3059      	CPI  R21,9
                 __CFD19:
000c8f f030      	BRLO __CFD17
000c90 efef      	SER  R30
000c91 efff      	SER  R31
000c92 ef6f      	SER  R22
000c93 e77f      	LDI  R23,0x7F
000c94 f977      	BLD  R23,7
000c95 c01a      	RJMP __CFD15
                 __CFD17:
000c96 2777      	CLR  R23
000c97 2355      	TST  R21
000c98 f0b9      	BREQ __CFD15
                 __CFD18:
000c99 0fee      	LSL  R30
000c9a 1fff      	ROL  R31
000c9b 1f66      	ROL  R22
000c9c 1f77      	ROL  R23
000c9d 955a      	DEC  R21
000c9e f7d1      	BRNE __CFD18
000c9f c010      	RJMP __CFD15
                 __CFD11:
000ca0 2777      	CLR  R23
                 __CFD12:
000ca1 3058      	CPI  R21,8
000ca2 f028      	BRLO __CFD13
000ca3 2fef      	MOV  R30,R31
000ca4 2ff6      	MOV  R31,R22
000ca5 2f67      	MOV  R22,R23
000ca6 5058      	SUBI R21,8
000ca7 cff9      	RJMP __CFD12
                 __CFD13:
000ca8 2355      	TST  R21
000ca9 f031      	BREQ __CFD15
                 __CFD14:
000caa 9576      	LSR  R23
000cab 9567      	ROR  R22
000cac 95f7      	ROR  R31
000cad 95e7      	ROR  R30
000cae 955a      	DEC  R21
000caf f7d1      	BRNE __CFD14
                 __CFD15:
000cb0 2000      	TST  R0
000cb1 f40a      	BRPL __CFD16
000cb2 d11e      	RCALL __ANEGD1
                 __CFD16:
000cb3 915f      	POP  R21
000cb4 9508      	RET
                 
                 __CDF1U:
000cb5 9468      	SET
000cb6 c001      	RJMP __CDF1U0
                 __CDF1:
000cb7 94e8      	CLT
                 __CDF1U0:
000cb8 9730      	SBIW R30,0
000cb9 4060      	SBCI R22,0
000cba 4070      	SBCI R23,0
000cbb f0b1      	BREQ __CDF10
000cbc 2400      	CLR  R0
000cbd f026      	BRTS __CDF11
000cbe 2377      	TST  R23
000cbf f412      	BRPL __CDF11
000cc0 9400      	COM  R0
000cc1 d10f      	RCALL __ANEGD1
                 __CDF11:
000cc2 2e17      	MOV  R1,R23
000cc3 e17e      	LDI  R23,30
000cc4 2011      	TST  R1
                 __CDF12:
000cc5 f032      	BRMI __CDF13
000cc6 957a      	DEC  R23
000cc7 0fee      	LSL  R30
000cc8 1fff      	ROL  R31
000cc9 1f66      	ROL  R22
000cca 1c11      	ROL  R1
000ccb cff9      	RJMP __CDF12
                 __CDF13:
000ccc 2fef      	MOV  R30,R31
000ccd 2ff6      	MOV  R31,R22
000cce 2d61      	MOV  R22,R1
000ccf 935f      	PUSH R21
000cd0 df8a      	RCALL __REPACK
000cd1 915f      	POP  R21
                 __CDF10:
000cd2 9508      	RET
                 
                 __SWAPACC:
000cd3 934f      	PUSH R20
000cd4 01af      	MOVW R20,R30
000cd5 01fd      	MOVW R30,R26
000cd6 01da      	MOVW R26,R20
000cd7 01ab      	MOVW R20,R22
000cd8 01bc      	MOVW R22,R24
000cd9 01ca      	MOVW R24,R20
000cda 2d40      	MOV  R20,R0
000cdb 2c01      	MOV  R0,R1
000cdc 2e14      	MOV  R1,R20
000cdd 914f      	POP  R20
000cde 9508      	RET
                 
                 __UADD12:
000cdf 0fea      	ADD  R30,R26
000ce0 1ffb      	ADC  R31,R27
000ce1 1f68      	ADC  R22,R24
000ce2 9508      	RET
                 
                 __NEGMAN1:
000ce3 95e0      	COM  R30
000ce4 95f0      	COM  R31
000ce5 9560      	COM  R22
000ce6 5fef      	SUBI R30,-1
000ce7 4fff      	SBCI R31,-1
000ce8 4f6f      	SBCI R22,-1
000ce9 9508      	RET
                 
                 __ADDF12:
000cea 935f      	PUSH R21
000ceb df81      	RCALL __UNPACK
000cec 3890      	CPI  R25,0x80
000ced f139      	BREQ __ADDF129
                 
                 __ADDF120:
000cee 3870      	CPI  R23,0x80
000cef f121      	BREQ __ADDF128
                 __ADDF121:
000cf0 2f57      	MOV  R21,R23
000cf1 1b59      	SUB  R21,R25
000cf2 f12b      	BRVS __ADDF1211
000cf3 f412      	BRPL __ADDF122
000cf4 dfde      	RCALL __SWAPACC
000cf5 cffa      	RJMP __ADDF121
                 __ADDF122:
000cf6 3158      	CPI  R21,24
000cf7 f018      	BRLO __ADDF123
000cf8 27aa      	CLR  R26
000cf9 27bb      	CLR  R27
000cfa 2788      	CLR  R24
                 __ADDF123:
000cfb 3058      	CPI  R21,8
000cfc f028      	BRLO __ADDF124
000cfd 2fab      	MOV  R26,R27
000cfe 2fb8      	MOV  R27,R24
000cff 2788      	CLR  R24
000d00 5058      	SUBI R21,8
000d01 cff9      	RJMP __ADDF123
                 __ADDF124:
000d02 2355      	TST  R21
000d03 f029      	BREQ __ADDF126
                 __ADDF125:
000d04 9586      	LSR  R24
000d05 95b7      	ROR  R27
000d06 95a7      	ROR  R26
000d07 955a      	DEC  R21
000d08 f7d9      	BRNE __ADDF125
                 __ADDF126:
000d09 2d50      	MOV  R21,R0
000d0a 2551      	EOR  R21,R1
000d0b f072      	BRMI __ADDF127
000d0c dfd2      	RCALL __UADD12
000d0d f438      	BRCC __ADDF129
000d0e 9567      	ROR  R22
000d0f 95f7      	ROR  R31
000d10 95e7      	ROR  R30
000d11 9573      	INC  R23
000d12 f413      	BRVC __ADDF129
000d13 c020      	RJMP __MAXRES
                 __ADDF128:
000d14 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000d15 df45      	RCALL __REPACK
000d16 915f      	POP  R21
000d17 9508      	RET
                 __ADDF1211:
000d18 f7d8      	BRCC __ADDF128
000d19 cffb      	RJMP __ADDF129
                 __ADDF127:
000d1a 1bea      	SUB  R30,R26
000d1b 0bfb      	SBC  R31,R27
000d1c 0b68      	SBC  R22,R24
000d1d f051      	BREQ __ZERORES
000d1e f410      	BRCC __ADDF1210
000d1f 9400      	COM  R0
000d20 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000d21 2366      	TST  R22
000d22 f392      	BRMI __ADDF129
000d23 0fee      	LSL  R30
000d24 1fff      	ROL  R31
000d25 1f66      	ROL  R22
000d26 957a      	DEC  R23
000d27 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000d28 27ee      	CLR  R30
000d29 27ff      	CLR  R31
000d2a 2766      	CLR  R22
000d2b 2777      	CLR  R23
000d2c 915f      	POP  R21
000d2d 9508      	RET
                 
                 __MINRES:
000d2e efef      	SER  R30
000d2f efff      	SER  R31
000d30 e76f      	LDI  R22,0x7F
000d31 ef7f      	SER  R23
000d32 915f      	POP  R21
000d33 9508      	RET
                 
                 __MAXRES:
000d34 efef      	SER  R30
000d35 efff      	SER  R31
000d36 e76f      	LDI  R22,0x7F
000d37 e77f      	LDI  R23,0x7F
000d38 915f      	POP  R21
000d39 9508      	RET
                 
                 __MULF12:
000d3a 935f      	PUSH R21
000d3b df31      	RCALL __UNPACK
000d3c 3870      	CPI  R23,0x80
000d3d f351      	BREQ __ZERORES
000d3e 3890      	CPI  R25,0x80
000d3f f341      	BREQ __ZERORES
000d40 2401      	EOR  R0,R1
000d41 9408      	SEC
000d42 1f79      	ADC  R23,R25
000d43 f423      	BRVC __MULF124
000d44 f31c      	BRLT __ZERORES
                 __MULF125:
000d45 2000      	TST  R0
000d46 f33a      	BRMI __MINRES
000d47 cfec      	RJMP __MAXRES
                 __MULF124:
000d48 920f      	PUSH R0
000d49 931f      	PUSH R17
000d4a 932f      	PUSH R18
000d4b 933f      	PUSH R19
000d4c 934f      	PUSH R20
000d4d 2711      	CLR  R17
000d4e 2722      	CLR  R18
000d4f 2799      	CLR  R25
000d50 9f68      	MUL  R22,R24
000d51 01a0      	MOVW R20,R0
000d52 9f8f      	MUL  R24,R31
000d53 2d30      	MOV  R19,R0
000d54 0d41      	ADD  R20,R1
000d55 1f59      	ADC  R21,R25
000d56 9f6b      	MUL  R22,R27
000d57 0d30      	ADD  R19,R0
000d58 1d41      	ADC  R20,R1
000d59 1f59      	ADC  R21,R25
000d5a 9f8e      	MUL  R24,R30
000d5b d027      	RCALL __MULF126
000d5c 9fbf      	MUL  R27,R31
000d5d d025      	RCALL __MULF126
000d5e 9f6a      	MUL  R22,R26
000d5f d023      	RCALL __MULF126
000d60 9fbe      	MUL  R27,R30
000d61 d01d      	RCALL __MULF127
000d62 9faf      	MUL  R26,R31
000d63 d01b      	RCALL __MULF127
000d64 9fae      	MUL  R26,R30
000d65 0d11      	ADD  R17,R1
000d66 1f29      	ADC  R18,R25
000d67 1f39      	ADC  R19,R25
000d68 1f49      	ADC  R20,R25
000d69 1f59      	ADC  R21,R25
000d6a 2fe3      	MOV  R30,R19
000d6b 2ff4      	MOV  R31,R20
000d6c 2f65      	MOV  R22,R21
000d6d 2f52      	MOV  R21,R18
000d6e 914f      	POP  R20
000d6f 913f      	POP  R19
000d70 912f      	POP  R18
000d71 911f      	POP  R17
000d72 900f      	POP  R0
000d73 2366      	TST  R22
000d74 f02a      	BRMI __MULF122
000d75 0f55      	LSL  R21
000d76 1fee      	ROL  R30
000d77 1fff      	ROL  R31
000d78 1f66      	ROL  R22
000d79 c002      	RJMP __MULF123
                 __MULF122:
000d7a 9573      	INC  R23
000d7b f24b      	BRVS __MULF125
                 __MULF123:
000d7c ded4      	RCALL __ROUND_REPACK
000d7d 915f      	POP  R21
000d7e 9508      	RET
                 
                 __MULF127:
000d7f 0d10      	ADD  R17,R0
000d80 1d21      	ADC  R18,R1
000d81 1f39      	ADC  R19,R25
000d82 c002      	RJMP __MULF128
                 __MULF126:
000d83 0d20      	ADD  R18,R0
000d84 1d31      	ADC  R19,R1
                 __MULF128:
000d85 1f49      	ADC  R20,R25
000d86 1f59      	ADC  R21,R25
000d87 9508      	RET
                 
                 __DIVF21:
000d88 935f      	PUSH R21
000d89 dee3      	RCALL __UNPACK
000d8a 3870      	CPI  R23,0x80
000d8b f421      	BRNE __DIVF210
000d8c 2011      	TST  R1
                 __DIVF211:
000d8d f40a      	BRPL __DIVF219
000d8e cf9f      	RJMP __MINRES
                 __DIVF219:
000d8f cfa4      	RJMP __MAXRES
                 __DIVF210:
000d90 3890      	CPI  R25,0x80
000d91 f409      	BRNE __DIVF218
                 __DIVF217:
000d92 cf95      	RJMP __ZERORES
                 __DIVF218:
000d93 2401      	EOR  R0,R1
000d94 9408      	SEC
000d95 0b97      	SBC  R25,R23
000d96 f41b      	BRVC __DIVF216
000d97 f3d4      	BRLT __DIVF217
000d98 2000      	TST  R0
000d99 cff3      	RJMP __DIVF211
                 __DIVF216:
000d9a 2f79      	MOV  R23,R25
000d9b 931f      	PUSH R17
000d9c 932f      	PUSH R18
000d9d 933f      	PUSH R19
000d9e 934f      	PUSH R20
000d9f 2411      	CLR  R1
000da0 2711      	CLR  R17
000da1 2722      	CLR  R18
000da2 2733      	CLR  R19
000da3 2744      	CLR  R20
000da4 2755      	CLR  R21
000da5 e290      	LDI  R25,32
                 __DIVF212:
000da6 17ae      	CP   R26,R30
000da7 07bf      	CPC  R27,R31
000da8 0786      	CPC  R24,R22
000da9 0741      	CPC  R20,R17
000daa f030      	BRLO __DIVF213
000dab 1bae      	SUB  R26,R30
000dac 0bbf      	SBC  R27,R31
000dad 0b86      	SBC  R24,R22
000dae 0b41      	SBC  R20,R17
000daf 9408      	SEC
000db0 c001      	RJMP __DIVF214
                 __DIVF213:
000db1 9488      	CLC
                 __DIVF214:
000db2 1f55      	ROL  R21
000db3 1f22      	ROL  R18
000db4 1f33      	ROL  R19
000db5 1c11      	ROL  R1
000db6 1faa      	ROL  R26
000db7 1fbb      	ROL  R27
000db8 1f88      	ROL  R24
000db9 1f44      	ROL  R20
000dba 959a      	DEC  R25
000dbb f751      	BRNE __DIVF212
000dbc 01f9      	MOVW R30,R18
000dbd 2d61      	MOV  R22,R1
000dbe 914f      	POP  R20
000dbf 913f      	POP  R19
000dc0 912f      	POP  R18
000dc1 911f      	POP  R17
000dc2 2366      	TST  R22
000dc3 f032      	BRMI __DIVF215
000dc4 0f55      	LSL  R21
000dc5 1fee      	ROL  R30
000dc6 1fff      	ROL  R31
000dc7 1f66      	ROL  R22
000dc8 957a      	DEC  R23
000dc9 f243      	BRVS __DIVF217
                 __DIVF215:
000dca de86      	RCALL __ROUND_REPACK
000dcb 915f      	POP  R21
000dcc 9508      	RET
                 
                 __ANEGW1:
000dcd 95f1      	NEG  R31
000dce 95e1      	NEG  R30
000dcf 40f0      	SBCI R31,0
000dd0 9508      	RET
                 
                 __ANEGD1:
000dd1 95f0      	COM  R31
000dd2 9560      	COM  R22
000dd3 9570      	COM  R23
000dd4 95e1      	NEG  R30
000dd5 4fff      	SBCI R31,-1
000dd6 4f6f      	SBCI R22,-1
000dd7 4f7f      	SBCI R23,-1
000dd8 9508      	RET
                 
                 __LSLW3:
000dd9 0fee      	LSL  R30
000dda 1fff      	ROL  R31
                 __LSLW2:
000ddb 0fee      	LSL  R30
000ddc 1fff      	ROL  R31
000ddd 0fee      	LSL  R30
000dde 1fff      	ROL  R31
000ddf 9508      	RET
                 
                 __LSRD1:
000de0 9576      	LSR  R23
000de1 9567      	ROR  R22
000de2 95f7      	ROR  R31
000de3 95e7      	ROR  R30
000de4 9508      	RET
                 
                 __CWD1:
000de5 2f6f      	MOV  R22,R31
000de6 0f66      	ADD  R22,R22
000de7 0b66      	SBC  R22,R22
000de8 2f76      	MOV  R23,R22
000de9 9508      	RET
                 
                 __MANDW12:
000dea 94e8      	CLT
000deb fff7      	SBRS R31,7
000dec c002      	RJMP __MANDW121
000ded dfdf      	RCALL __ANEGW1
000dee 9468      	SET
                 __MANDW121:
000def 23ea      	AND  R30,R26
000df0 23fb      	AND  R31,R27
000df1 f40e      	BRTC __MANDW122
000df2 dfda      	RCALL __ANEGW1
                 __MANDW122:
000df3 9508      	RET
                 
                 __GETD1S0:
000df4 81e8      	LD   R30,Y
000df5 81f9      	LDD  R31,Y+1
000df6 816a      	LDD  R22,Y+2
000df7 817b      	LDD  R23,Y+3
000df8 9508      	RET
                 
                 __GETD2S0:
000df9 81a8      	LD   R26,Y
000dfa 81b9      	LDD  R27,Y+1
000dfb 818a      	LDD  R24,Y+2
000dfc 819b      	LDD  R25,Y+3
000dfd 9508      	RET
                 
                 __PUTD1S0:
000dfe 83e8      	ST   Y,R30
000dff 83f9      	STD  Y+1,R31
000e00 836a      	STD  Y+2,R22
000e01 837b      	STD  Y+3,R23
000e02 9508      	RET
                 
                 __SAVELOCR6:
000e03 935a      	ST   -Y,R21
                 __SAVELOCR5:
000e04 934a      	ST   -Y,R20
                 __SAVELOCR4:
000e05 933a      	ST   -Y,R19
                 __SAVELOCR3:
000e06 932a      	ST   -Y,R18
                 __SAVELOCR2:
000e07 931a      	ST   -Y,R17
000e08 930a      	ST   -Y,R16
000e09 9508      	RET
                 
                 __LOADLOCR6:
000e0a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000e0b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000e0c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000e0d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000e0e 8119      	LDD  R17,Y+1
000e0f 8108      	LD   R16,Y
000e10 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  53 r1 :  24 r2 :   0 r3 :   0 r4 :  47 r5 :  29 r6 :   4 r7 :  13 
r8 :   0 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  45 r17:  60 r18:  36 r19:  44 r20:  29 r21:  79 r22:  78 r23:  53 
r24:  59 r25:  45 r26: 319 r27: 149 r28:  33 r29:   1 r30: 480 r31: 195 
x  :  55 y  : 197 z  :  13 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  33 add   :  25 
adiw  :  34 and   :   4 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  53 
brge  :  12 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  18 
brlt  :   2 brmi  :   7 brne  : 105 brpl  :   7 brsh  :  11 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 309 
cbi   :   9 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  67 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  38 cpc   :  54 cpi   :  82 cpse  :   0 dec   :  12 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :   4 jmp   :  34 ld    :  83 ldd   :  55 ldi   : 466 
lds   :   2 lpm   :   7 lsl   :  14 lsr   :   3 mov   :  76 movw  :  58 
mul   :  12 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   0 out   :  37 pop   :  22 push  :  21 rcall :  79 ret   :  74 
reti  :   1 rjmp  : 167 rol   :  27 ror   :  15 sbc   :   8 sbci  :  24 
sbi   :  16 sbic  :   4 sbis  :   4 sbiw  :  33 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  93 std   :  27 sts   :   2 sub   :   6 subi  :  29 swap  :   1 
tst   :  23 wdr   :   1 
Instructions used: 74 out of 116 (63.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001c22   5716   1486   7202   32768  22.0%
[.dseg] 0x000060 0x0007ba      0   1370   1370    2048  66.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
