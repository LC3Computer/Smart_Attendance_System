
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Sat Dec 14 04:31:18 2024

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0242 	JMP  __RESET
000002 940c 036a 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 3837
00002d 4f39
00002e 3534
00002f 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000030 3231
000031 4333
000032 304c
000033 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0xE8:
000034 ffff      	.DB  0xFF,0xFF
                 _0x0:
000035 2031
000036 203a
000037 7553
000038 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000039 7469
00003a 5320
00003b 7574
00003c 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003d 746e
00003e 4320
00003f 646f
000040 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000041 2020
000042 2020
000043 7270
000044 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000045 2073
000046 6163
000047 636e
000048 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000049 7420
00004a 206f
00004b 6162
00004c 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004d 4500
00004e 746e
00004f 7265
000050 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000051 756f
000052 2072
000053 7473
000054 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000055 6e65
000056 2074
000057 6f63
000058 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
000059 003a
00005a 754e
00005b 626d
00005c 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005d 6f20
00005e 2066
00005f 7473
000060 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
000061 6e65
000062 7374
000063 3a20
000064 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000065 7250
000066 7365
000067 2073
000068 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000069 636e
00006a 6c65
00006b 5420
00006c 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006d 6f47
00006e 4220
00006f 6361
000070 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
000071 7453
000072 7261
000073 2074
000074 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000075 6e61
000076 6673
000077 7265
000078 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000079 676e
00007a 2e2e
00007b 002e
00007c 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007d 7261
00007e 2074
00007f 7254
000080 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
000081 6d73
000082 7469
000083 4620
000084 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
000085 7369
000086 6568
000087 0064
000088 3a31      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x3A
000089 5320
00008a 6165
00008b 6372
00008c 2068      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x20
00008d 7453
00008e 6475
00008f 6e65
000090 0074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x0
000091 3a32
000092 4420
000093 6c65
000094 7465      	.DB  0x32,0x3A,0x20,0x44,0x65,0x6C,0x65,0x74
000095 2065
000096 7453
000097 6475
000098 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000099 0074
00009a 6e45
00009b 6574
00009c 2072      	.DB  0x74,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00009d 7453
00009e 6475
00009f 6e65
0000a0 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a1 6f43
0000a2 6564
0000a3 4620
0000a4 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a5 5320
0000a6 6165
0000a7 6372
0000a8 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000a9 4500
0000aa 746e
0000ab 7265
0000ac 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
0000ad 7574
0000ae 6564
0000af 746e
0000b0 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000b1 646f
0000b2 2065
0000b3 6f46
0000b4 2072      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x20
0000b5 6544
0000b6 656c
0000b7 6574
0000b8 003a      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x3A,0x0
0000b9 6c43
0000ba 6165
0000bb 6972
0000bc 676e      	.DB  0x43,0x6C,0x65,0x61,0x72,0x69,0x6E,0x67
0000bd 4520
0000be 5045
0000bf 4f52
0000c0 204d      	.DB  0x20,0x45,0x45,0x50,0x52,0x4F,0x4D,0x20
0000c1 2e2e
0000c2 002e
0000c3 3034
0000c4 4900      	.DB  0x2E,0x2E,0x2E,0x0,0x34,0x30,0x0,0x49
0000c5 636e
0000c6 726f
0000c7 6572
0000c8 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
0000c9 5320
0000ca 7574
0000cb 6564
0000cc 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000cd 4320
0000ce 646f
0000cf 2065
0000d0 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
0000d1 6d72
0000d2 7461
0000d3 5900
0000d4 756f      	.DB  0x72,0x6D,0x61,0x74,0x0,0x59,0x6F,0x75
0000d5 5720
0000d6 6c69
0000d7 206c
0000d8 6142      	.DB  0x20,0x57,0x69,0x6C,0x6C,0x20,0x42,0x61
0000d9 6b63
0000da 4d20
0000db 6e65
0000dc 2075      	.DB  0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20
0000dd 6e49
0000de 3220
0000df 5320
0000e0 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
0000e1 6e6f
0000e2 0064
0000e3 7544
0000e4 6c70      	.DB  0x6F,0x6E,0x64,0x0,0x44,0x75,0x70,0x6C
0000e5 6369
0000e6 7461
0000e7 2065
0000e8 7453      	.DB  0x69,0x63,0x61,0x74,0x65,0x20,0x53,0x74
0000e9 6475
0000ea 6e65
0000eb 2074
0000ec 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0000ed 6564
0000ee 4520
0000ef 746e
0000f0 7265      	.DB  0x64,0x65,0x20,0x45,0x6E,0x74,0x65,0x72
0000f1 6465
0000f2 5300
0000f3 7574
0000f4 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
0000f5 746e
0000f6 4320
0000f7 646f
0000f8 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
0000f9 7553
0000fa 6363
0000fb 7365
0000fc 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0000fd 6c75
0000fe 796c
0000ff 4120
000100 6464      	.DB  0x75,0x6C,0x6C,0x79,0x20,0x41,0x64,0x64
000101 6465
000102 5300
000103 7574
000104 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
000105 746e
000106 4320
000107 646f
000108 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000109 6f46
00010a 6e75
00010b 0064
00010c 6f59      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x59,0x6F
00010d 2075
00010e 6957
00010f 6c6c
000110 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
000111 6361
000112 206b
000113 654d
000114 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
000115 4920
000116 206e
000117 2035
000118 6553      	.DB  0x20,0x49,0x6E,0x20,0x35,0x20,0x53,0x65
000119 6f63
00011a 646e
00011b 4f00
00011c 7370      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x4F,0x70,0x73
00011d 2c20
00011e 5320
00011f 7574
000120 6564      	.DB  0x20,0x2C,0x20,0x53,0x74,0x75,0x64,0x65
000121 746e
000122 4320
000123 646f
000124 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000125 6f4e
000126 2074
000127 6f46
000128 6e75      	.DB  0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75,0x6E
000129 0064
00012a 6157
00012b 7469
00012c 4620      	.DB  0x64,0x0,0x57,0x61,0x69,0x74,0x20,0x46
00012d 726f
00012e 4420
00012f 6c65
000130 7465      	.DB  0x6F,0x72,0x20,0x44,0x65,0x6C,0x65,0x74
000131 2e65
000132 2e2e
000133 5300
000134 7574      	.DB  0x65,0x2E,0x2E,0x2E,0x0,0x53,0x74,0x75
000135 6564
000136 746e
000137 4320
000138 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
000139 2065
00013a 6157
00013b 2073
00013c 6544      	.DB  0x65,0x20,0x57,0x61,0x73,0x20,0x44,0x65
00013d 656c
00013e 6574
00013f 0064
000140 6574      	.DB  0x6C,0x65,0x74,0x65,0x64,0x0,0x74,0x65
000141 706d
000142 7265
000143 7461
000144 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000145 2865
000146 2943
000147 003a
000148 3a31      	.DB  0x65,0x28,0x43,0x29,0x3A,0x0,0x31,0x3A
000149 4120
00014a 7474
00014b 6e65
00014c 6164      	.DB  0x20,0x41,0x74,0x74,0x65,0x6E,0x64,0x61
00014d 636e
00014e 2065
00014f 6e49
000150 7469      	.DB  0x6E,0x63,0x65,0x20,0x49,0x6E,0x69,0x74
000151 6169
000152 696c
000153 617a
000154 6974      	.DB  0x69,0x61,0x6C,0x69,0x7A,0x61,0x74,0x69
000155 6e6f
000156 3200
000157 203a
000158 7453      	.DB  0x6F,0x6E,0x0,0x32,0x3A,0x20,0x53,0x74
000159 6475
00015a 6e65
00015b 2074
00015c 614d      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x4D,0x61
00015d 616e
00015e 6567
00015f 656d
000160 746e      	.DB  0x6E,0x61,0x67,0x65,0x6D,0x65,0x6E,0x74
000161 3300
000162 203a
000163 6956
000164 7765      	.DB  0x0,0x33,0x3A,0x20,0x56,0x69,0x65,0x77
000165 5020
000166 6572
000167 6573
000168 746e      	.DB  0x20,0x50,0x72,0x65,0x73,0x65,0x6E,0x74
000169 5320
00016a 7574
00016b 6564
00016c 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00016d 2073
00016e 3400
00016f 203a
000170 6554      	.DB  0x73,0x20,0x0,0x34,0x3A,0x20,0x54,0x65
000171 706d
000172 7265
000173 7461
000174 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000175 2065
000176 6f4d
000177 696e
000178 6f74      	.DB  0x65,0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F
000179 6972
00017a 676e
00017b 3500
00017c 203a      	.DB  0x72,0x69,0x6E,0x67,0x0,0x35,0x3A,0x20
00017d 6552
00017e 7274
00017f 6569
000180 6576      	.DB  0x52,0x65,0x74,0x72,0x69,0x65,0x76,0x65
000181 5320
000182 7574
000183 6564
000184 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000185 4420
000186 7461
000187 0061
000188 3a36      	.DB  0x20,0x44,0x61,0x74,0x61,0x0,0x36,0x3A
000189 5420
00018a 6172
00018b 6666
00018c 6369      	.DB  0x20,0x54,0x72,0x61,0x66,0x66,0x69,0x63
00018d 4d20
00018e 6e6f
00018f 7469
000190 726f      	.DB  0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72
000191 6e69
000192 0067
000193 6944
000194 7473      	.DB  0x69,0x6E,0x67,0x0,0x44,0x69,0x73,0x74
000195 6e61
000196 6563
000197 203a
000198 4500      	.DB  0x61,0x6E,0x63,0x65,0x3A,0x20,0x0,0x45
000199 7272
00019a 726f
00019b 4e00
00019c 206f      	.DB  0x72,0x72,0x6F,0x72,0x0,0x4E,0x6F,0x20
00019d 624f
00019e 7473
00019f 6361
0001a0 656c      	.DB  0x4F,0x62,0x73,0x74,0x61,0x63,0x6C,0x65
0001a1 2000
0001a2 6d63
0001a3 0020
0001a4 6f43      	.DB  0x0,0x20,0x63,0x6D,0x20,0x0,0x43,0x6F
0001a5 6e75
0001a6 3a74
0001a7 0020      	.DB  0x75,0x6E,0x74,0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1226): warning: .cseg .db misalignment - padding zero byte
0001a8 0001      	.DB  0x1
                 _0x2000000:
0001a9 4e2d
0001aa 4e41
0001ab 4900
0001ac 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1229): warning: .cseg .db misalignment - padding zero byte
0001ad 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0001ae 0004      	.DW  0x04
0001af 0004      	.DW  0x04
0001b0 0054      	.DW  __REG_VARS*2
                 
0001b1 0010      	.DW  0x10
0001b2 0619      	.DW  _keypad
0001b3 0058      	.DW  _0x3*2
                 
0001b4 0018      	.DW  0x18
0001b5 0260      	.DW  _0xA
0001b6 006a      	.DW  _0x0*2
                 
0001b7 0019      	.DW  0x19
0001b8 0278      	.DW  _0xA+24
0001b9 0082      	.DW  _0x0*2+24
                 
0001ba 0019      	.DW  0x19
0001bb 0291      	.DW  _0xA+49
0001bc 009b      	.DW  _0x0*2+49
                 
0001bd 0016      	.DW  0x16
0001be 02aa      	.DW  _0xA+74
0001bf 00b4      	.DW  _0x0*2+74
                 
0001c0 0018      	.DW  0x18
0001c1 02c0      	.DW  _0xA+96
0001c2 00ca      	.DW  _0x0*2+96
                 
0001c3 0016      	.DW  0x16
0001c4 02d8      	.DW  _0xA+120
0001c5 00e2      	.DW  _0x0*2+120
                 
0001c6 0018      	.DW  0x18
0001c7 02ee      	.DW  _0xA+142
0001c8 00f8      	.DW  _0x0*2+142
                 
0001c9 0012      	.DW  0x12
0001ca 0306      	.DW  _0xA+166
0001cb 0110      	.DW  _0x0*2+166
                 
0001cc 0012      	.DW  0x12
0001cd 0318      	.DW  _0xA+184
0001ce 0122      	.DW  _0x0*2+184
                 
0001cf 001f      	.DW  0x1F
0001d0 032a      	.DW  _0xA+202
0001d1 0134      	.DW  _0x0*2+202
                 
0001d2 001f      	.DW  0x1F
0001d3 0349      	.DW  _0xA+233
0001d4 0153      	.DW  _0x0*2+233
                 
0001d5 0014      	.DW  0x14
0001d6 0368      	.DW  _0x51
0001d7 0172      	.DW  _0x0*2+264
                 
0001d8 0002      	.DW  0x02
0001d9 037c      	.DW  _0x51+20
0001da 00c8      	.DW  _0x0*2+94
                 
0001db 0003      	.DW  0x03
0001dc 037e      	.DW  _0x51+22
0001dd 0186      	.DW  _0x0*2+284
                 
0001de 001e      	.DW  0x1E
0001df 0381      	.DW  _0x51+25
0001e0 0189      	.DW  _0x0*2+287
                 
0001e1 001f      	.DW  0x1F
0001e2 039f      	.DW  _0x51+55
0001e3 01a7      	.DW  _0x0*2+317
                 
0001e4 001f      	.DW  0x1F
0001e5 03be      	.DW  _0x51+86
0001e6 01c6      	.DW  _0x0*2+348
                 
0001e7 001f      	.DW  0x1F
0001e8 03dd      	.DW  _0x51+117
0001e9 01a7      	.DW  _0x0*2+317
                 
0001ea 0020      	.DW  0x20
0001eb 03fc      	.DW  _0x51+148
0001ec 01e5      	.DW  _0x0*2+379
                 
0001ed 001f      	.DW  0x1F
0001ee 041c      	.DW  _0x51+180
0001ef 01a7      	.DW  _0x0*2+317
                 
0001f0 0002      	.DW  0x02
0001f1 043b      	.DW  _0x51+211
0001f2 00c8      	.DW  _0x0*2+94
                 
0001f3 0013      	.DW  0x13
0001f4 043d      	.DW  _0x51+213
0001f5 0205      	.DW  _0x0*2+411
                 
0001f6 001f      	.DW  0x1F
0001f7 0450      	.DW  _0x51+232
0001f8 0218      	.DW  _0x0*2+430
                 
0001f9 001d      	.DW  0x1D
0001fa 046f      	.DW  _0x51+263
0001fb 0237      	.DW  _0x0*2+461
                 
0001fc 001f      	.DW  0x1F
0001fd 048c      	.DW  _0x51+292
0001fe 0218      	.DW  _0x0*2+430
                 
0001ff 0002      	.DW  0x02
000200 04ab      	.DW  _0x51+323
000201 00c8      	.DW  _0x0*2+94
                 
000202 0013      	.DW  0x13
000203 04ad      	.DW  _0x51+325
000204 0205      	.DW  _0x0*2+411
                 
000205 0013      	.DW  0x13
000206 04c0      	.DW  _0x51+344
000207 0254      	.DW  _0x0*2+490
                 
000208 0019      	.DW  0x19
000209 04d3      	.DW  _0x51+363
00020a 0267      	.DW  _0x0*2+509
                 
00020b 001f      	.DW  0x1F
00020c 04ec      	.DW  _0x51+388
00020d 01a7      	.DW  _0x0*2+317
                 
00020e 001d      	.DW  0x1D
00020f 050b      	.DW  _0x51+419
000210 0237      	.DW  _0x0*2+461
                 
000211 001f      	.DW  0x1F
000212 0528      	.DW  _0x51+448
000213 01a7      	.DW  _0x0*2+317
                 
000214 0010      	.DW  0x10
000215 0547      	.DW  _0x9F
000216 0280      	.DW  _0x0*2+534
                 
000217 0002      	.DW  0x02
000218 0557      	.DW  _0x9F+16
000219 00c8      	.DW  _0x0*2+94
                 
00021a 001d      	.DW  0x1D
00021b 0559      	.DW  _0xAB
00021c 0290      	.DW  _0x0*2+550
                 
00021d 0016      	.DW  0x16
00021e 0576      	.DW  _0xAB+29
00021f 02ad      	.DW  _0x0*2+579
                 
000220 001a      	.DW  0x1A
000221 058c      	.DW  _0xAB+51
000222 02c3      	.DW  _0x0*2+601
                 
000223 001a      	.DW  0x1A
000224 05a6      	.DW  _0xAB+77
000225 02dd      	.DW  _0x0*2+627
                 
000226 0019      	.DW  0x19
000227 05c0      	.DW  _0xAB+103
000228 02f7      	.DW  _0x0*2+653
                 
000229 0016      	.DW  0x16
00022a 05d9      	.DW  _0xAB+128
00022b 0310      	.DW  _0x0*2+678
                 
00022c 0002      	.DW  0x02
00022d 0649      	.DW  _previous_count_S0000013000
00022e 0068      	.DW  _0xE8*2
                 
00022f 000b      	.DW  0x0B
000230 05ef      	.DW  _0xE9
000231 0326      	.DW  _0x0*2+700
                 
000232 0006      	.DW  0x06
000233 05fa      	.DW  _0xE9+11
000234 0331      	.DW  _0x0*2+711
                 
000235 000c      	.DW  0x0C
000236 0600      	.DW  _0xE9+17
000237 0337      	.DW  _0x0*2+717
                 
000238 0005      	.DW  0x05
000239 060c      	.DW  _0xE9+29
00023a 0343      	.DW  _0x0*2+729
                 
00023b 0008      	.DW  0x08
00023c 0611      	.DW  _0xE9+34
00023d 0348      	.DW  _0x0*2+734
                 
00023e 0001      	.DW  0x01
00023f 064b      	.DW  __seed_G100
000240 0350      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000241 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000242 94f8      	CLI
000243 27ee      	CLR  R30
000244 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000245 e0f1      	LDI  R31,1
000246 bffb      	OUT  GICR,R31
000247 bfeb      	OUT  GICR,R30
000248 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000249 e08d      	LDI  R24,(14-2)+1
00024a e0a2      	LDI  R26,2
00024b 27bb      	CLR  R27
                 __CLEAR_REG:
00024c 93ed      	ST   X+,R30
00024d 958a      	DEC  R24
00024e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00024f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000250 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000251 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000252 93ed      	ST   X+,R30
000253 9701      	SBIW R24,1
000254 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000255 e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000256 e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000257 9185      	LPM  R24,Z+
000258 9195      	LPM  R25,Z+
000259 9700      	SBIW R24,0
00025a f061      	BREQ __GLOBAL_INI_END
00025b 91a5      	LPM  R26,Z+
00025c 91b5      	LPM  R27,Z+
00025d 9005      	LPM  R0,Z+
00025e 9015      	LPM  R1,Z+
00025f 01bf      	MOVW R22,R30
000260 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000261 9005      	LPM  R0,Z+
000262 920d      	ST   X+,R0
000263 9701      	SBIW R24,1
000264 f7e1      	BRNE __GLOBAL_INI_LOOP
000265 01fb      	MOVW R30,R22
000266 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000267 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000268 bfed      	OUT  SPL,R30
000269 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00026a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00026b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00026c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00026d 940c 026f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 3
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5   // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6   // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 005B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 005C     int i, j;
                 ; 0000 005D     unsigned char st_counts;
                 ; 0000 005E     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
00026f efe0      	LDI  R30,LOW(240)
000270 bbe4      	OUT  0x14,R30
                 ; 0000 005F     KEY_PRT = 0xFF;
000271 efef      	LDI  R30,LOW(255)
000272 bbe5      	OUT  0x15,R30
                 ; 0000 0060     KEY_PRT &= 0x0F;                  // ground all rows at once
000273 b3e5      	IN   R30,0x15
000274 70ef      	ANDI R30,LOW(0xF)
000275 bbe5      	OUT  0x15,R30
                 ; 0000 0061     MCUCR = 0x02;                     // make INT0 falling edge triggered
000276 e0e2      	LDI  R30,LOW(2)
000277 bfe5      	OUT  0x35,R30
                 ; 0000 0062     GICR = (1 << INT0);               // enable external interrupt 0
000278 e4e0      	LDI  R30,LOW(64)
000279 bfeb      	OUT  0x3B,R30
                 ; 0000 0063     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
00027a 9a8f      	SBI  0x11,7
                 ; 0000 0064     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
00027b 9897      	CBI  0x12,7
                 ; 0000 0065     USART_init(0x33);
00027c e3a3      	LDI  R26,LOW(51)
00027d e0b0      	LDI  R27,0
00027e d445      	RCALL _USART_init
                 ; 0000 0066     HCSR04Init(); // Initialize ultrasonic sensor
00027f d4ca      	RCALL _HCSR04Init
                 ; 0000 0067     lcd_init();
000280 d34e      	RCALL _lcd_init
                 ; 0000 0068 
                 ; 0000 0069 #asm("sei")           // enable interrupts
000281 9478      	sei
                 ; 0000 006A     lcdCommand(0x01); // clear LCD
000282 e0a1      	LDI  R26,LOW(1)
000283 d337      	RCALL _lcdCommand
                 ; 0000 006B     while (1)
                 _0x4:
                 ; 0000 006C     {
                 ; 0000 006D         if (stage == STAGE_INIT_MENU)
000284 2c04      	MOV  R0,R4
000285 2805      	OR   R0,R5
000286 f411      	BRNE _0x7
                 ; 0000 006E         {
                 ; 0000 006F             show_menu();
000287 d3c4      	RCALL _show_menu
                 ; 0000 0070         }
                 ; 0000 0071         else if (stage == STAGE_ATTENDENC_MENU)
000288 c0df      	RJMP _0x8
                 _0x7:
000289 940e 0887 	CALL SUBOPT_0x0
00028b f469      	BRNE _0x9
                 ; 0000 0072         {
                 ; 0000 0073             lcdCommand(0x01);
00028c 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0074             lcd_gotoxy(1, 1);
                 ; 0000 0075             lcd_print("1 : Submit Student Code");
                +
00028e e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
00028f e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
000290 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0076             lcd_gotoxy(1, 2);
                 ; 0000 0077             lcd_print("    press cancel to back");
                +
000292 e7a8     +LDI R26 , LOW ( _0xA + ( 24 ) )
000293 e0b2     +LDI R27 , HIGH ( _0xA + ( 24 ) )
                 	__POINTW2MN _0xA,24
000294 d36e      	RCALL _lcd_print
                 ; 0000 0078             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
000295 940e 0887 	CALL SUBOPT_0x0
000297 f3e9      	BREQ _0xB
                 ; 0000 0079                 ;
                 ; 0000 007A         }
                 ; 0000 007B         else if (stage == STAGE_SUBMIT_CODE)
000298 c0cf      	RJMP _0xE
                 _0x9:
000299 940e 089b 	CALL SUBOPT_0x3
00029b f471      	BRNE _0xF
                 ; 0000 007C         {
                 ; 0000 007D             lcdCommand(0x01);
00029c 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 007E             lcd_gotoxy(1, 1);
                 ; 0000 007F             lcd_print("Enter your student code:");
                +
00029e e9a1     +LDI R26 , LOW ( _0xA + ( 49 ) )
00029f e0b2     +LDI R27 , HIGH ( _0xA + ( 49 ) )
                 	__POINTW2MN _0xA,49
0002a0 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0080             lcd_gotoxy(1, 2);
                 ; 0000 0081             lcdCommand(0x0f);   // display on, cursor blinking
0002a2 940e 08a0 	CALL SUBOPT_0x4
                 ; 0000 0082             delay_us(100 * 16); // wait
                 ; 0000 0083             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
0002a4 940e 089b 	CALL SUBOPT_0x3
0002a6 f3e9      	BREQ _0x10
                 ; 0000 0084                 ;
                 ; 0000 0085             lcdCommand(0x0c);   // display on, cursor off
0002a7 940e 08a8 	CALL SUBOPT_0x5
                 ; 0000 0086             delay_us(100 * 16); // wait
                 ; 0000 0087         }
                 ; 0000 0088         else if (stage == STAGE_TEMPERATURE_MONITORING)
0002a9 c0be      	RJMP _0x13
                 _0xF:
0002aa 940e 08b0 	CALL SUBOPT_0x6
0002ac f411      	BRNE _0x14
                 ; 0000 0089         {
                 ; 0000 008A             show_temperature();
0002ad d36c      	RCALL _show_temperature
                 ; 0000 008B         }
                 ; 0000 008C         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0002ae c0b9      	RJMP _0x15
                 _0x14:
0002af 940e 08b5 	CALL SUBOPT_0x7
0002b1 f009      	BREQ PC+2
0002b2 c049      	RJMP _0x16
                 ; 0000 008D         {
                 ; 0000 008E             lcdCommand(0x01);
0002b3 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 008F             lcd_gotoxy(1, 1);
                 ; 0000 0090             lcd_print("Number of students : ");
                +
0002b5 eaaa     +LDI R26 , LOW ( _0xA + ( 74 ) )
0002b6 e0b2     +LDI R27 , HIGH ( _0xA + ( 74 ) )
                 	__POINTW2MN _0xA,74
0002b7 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0091             lcd_gotoxy(1, 2);
                 ; 0000 0092             st_counts = read_byte_from_eeprom(0x0);
0002b9 e0a0      	LDI  R26,LOW(0)
0002ba e0b0      	LDI  R27,0
0002bb d3ea      	RCALL _read_byte_from_eeprom
0002bc 2f5e      	MOV  R21,R30
                 ; 0000 0093             memset(buffer, 0, 32);
0002bd 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 0094             itoa(st_counts, buffer);
0002bf 2fe5      	MOV  R30,R21
0002c0 e0f0      	LDI  R31,0
0002c1 93fa      	ST   -Y,R31
0002c2 93ea      	ST   -Y,R30
0002c3 e2a9      	LDI  R26,LOW(_buffer)
0002c4 e0b6      	LDI  R27,HIGH(_buffer)
0002c5 940e 0824 	CALL _itoa
                 ; 0000 0095             lcd_print(buffer);
0002c7 940e 08c4 	CALL SUBOPT_0x9
                 ; 0000 0096             delay_ms(1000);
                 ; 0000 0097 
                 ; 0000 0098             for (i = 0; i < st_counts; i++)
                +
0002c9 e000     +LDI R16 , LOW ( 0 )
0002ca e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
0002cb 2fe5      	MOV  R30,R21
0002cc 01d8      	MOVW R26,R16
0002cd e0f0      	LDI  R31,0
0002ce 17ae      	CP   R26,R30
0002cf 07bf      	CPC  R27,R31
0002d0 f514      	BRGE _0x19
                 ; 0000 0099             {
                 ; 0000 009A                 memset(buffer, 0, 32);
0002d1 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 009B                 for (j = 0; j < 8; j++)
                +
0002d3 e020     +LDI R18 , LOW ( 0 )
0002d4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1B:
                +
0002d5 3028     +CPI R18 , LOW ( 8 )
0002d6 e0e0     +LDI R30 , HIGH ( 8 )
0002d7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002d8 f46c      	BRGE _0x1C
                 ; 0000 009C                 {
                 ; 0000 009D                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0002d9 01f9      	MOVW R30,R18
0002da 5de7      	SUBI R30,LOW(-_buffer)
0002db 4ff9      	SBCI R31,HIGH(-_buffer)
0002dc 93ff      	PUSH R31
0002dd 93ef      	PUSH R30
0002de 940e 08cc 	CALL SUBOPT_0xA
0002e0 91af      	POP  R26
0002e1 91bf      	POP  R27
0002e2 93ec      	ST   X,R30
                 ; 0000 009E                 }
                +
0002e3 5f2f     +SUBI R18 , LOW ( - 1 )
0002e4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002e5 cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 009F                 buffer[j] = '\0';
0002e6 e2a9      	LDI  R26,LOW(_buffer)
0002e7 e0b6      	LDI  R27,HIGH(_buffer)
0002e8 0fa2      	ADD  R26,R18
0002e9 1fb3      	ADC  R27,R19
0002ea e0e0      	LDI  R30,LOW(0)
0002eb 93ec      	ST   X,R30
                 ; 0000 00A0                 lcdCommand(0x01);
0002ec 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00A1                 lcd_gotoxy(1, 1);
                 ; 0000 00A2                 lcd_print(buffer);
0002ee 940e 08c4 	CALL SUBOPT_0x9
                 ; 0000 00A3                 delay_ms(1000);
                 ; 0000 00A4             }
                +
0002f0 5f0f     +SUBI R16 , LOW ( - 1 )
0002f1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002f2 cfd8      	RJMP _0x18
                 _0x19:
                 ; 0000 00A5 
                 ; 0000 00A6             lcdCommand(0x01);
0002f3 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00A7             lcd_gotoxy(1, 1);
                 ; 0000 00A8             lcd_print("Press Cancel To Go Back");
                +
0002f5 eca0     +LDI R26 , LOW ( _0xA + ( 96 ) )
0002f6 e0b2     +LDI R27 , HIGH ( _0xA + ( 96 ) )
                 	__POINTW2MN _0xA,96
0002f7 d30b      	RCALL _lcd_print
                 ; 0000 00A9             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1D:
0002f8 940e 08b5 	CALL SUBOPT_0x7
0002fa f3e9      	BREQ _0x1D
                 ; 0000 00AA                 ;
                 ; 0000 00AB         }
                 ; 0000 00AC         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
0002fb c06c      	RJMP _0x20
                 _0x16:
0002fc e0e5      	LDI  R30,LOW(5)
0002fd e0f0      	LDI  R31,HIGH(5)
0002fe 15e4      	CP   R30,R4
0002ff 05f5      	CPC  R31,R5
000300 f579      	BRNE _0x21
                 ; 0000 00AD         {
                 ; 0000 00AE             lcdCommand(0x01);
000301 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00AF             lcd_gotoxy(1, 1);
                 ; 0000 00B0             lcd_print("Start Transferring...");
                +
000303 eda8     +LDI R26 , LOW ( _0xA + ( 120 ) )
000304 e0b2     +LDI R27 , HIGH ( _0xA + ( 120 ) )
                 	__POINTW2MN _0xA,120
000305 d2fd      	RCALL _lcd_print
                 ; 0000 00B1             st_counts = read_byte_from_eeprom(0x0);
000306 940e 08d5 	CALL SUBOPT_0xB
000308 2f5e      	MOV  R21,R30
                 ; 0000 00B2             for (i = 0; i < st_counts; i++)
                +
000309 e000     +LDI R16 , LOW ( 0 )
00030a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
00030b 2fe5      	MOV  R30,R21
00030c 01d8      	MOVW R26,R16
00030d e0f0      	LDI  R31,0
00030e 17ae      	CP   R26,R30
00030f 07bf      	CPC  R27,R31
000310 f4c4      	BRGE _0x24
                 ; 0000 00B3             {
                 ; 0000 00B4                 for (j = 0; j < 8; j++)
                +
000311 e020     +LDI R18 , LOW ( 0 )
000312 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
000313 3028     +CPI R18 , LOW ( 8 )
000314 e0e0     +LDI R30 , HIGH ( 8 )
000315 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000316 f43c      	BRGE _0x27
                 ; 0000 00B5                 {
                 ; 0000 00B6                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
000317 940e 08cc 	CALL SUBOPT_0xA
000319 2fae      	MOV  R26,R30
00031a d3a2      	RCALL _USART_Transmit
                 ; 0000 00B7                 }
                +
00031b 5f2f     +SUBI R18 , LOW ( - 1 )
00031c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00031d cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 00B8                 USART_Transmit('\r');
00031e e0ad      	LDI  R26,LOW(13)
00031f d39d      	RCALL _USART_Transmit
                 ; 0000 00B9                 USART_Transmit('\r');
000320 e0ad      	LDI  R26,LOW(13)
000321 d39b      	RCALL _USART_Transmit
                 ; 0000 00BA                 delay_ms(500);
000322 efa4      	LDI  R26,LOW(500)
000323 e0b1      	LDI  R27,HIGH(500)
000324 940e 0976 	CALL _delay_ms
                 ; 0000 00BB             }
                +
000326 5f0f     +SUBI R16 , LOW ( - 1 )
000327 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000328 cfe2      	RJMP _0x23
                 _0x24:
                 ; 0000 00BC             lcdCommand(0x01);
000329 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00BD             lcd_gotoxy(1, 1);
                 ; 0000 00BE             lcd_print("Usart Transmit Finished");
                +
00032b eeae     +LDI R26 , LOW ( _0xA + ( 142 ) )
00032c e0b2     +LDI R27 , HIGH ( _0xA + ( 142 ) )
                 	__POINTW2MN _0xA,142
00032d 940e 08d9 	CALL SUBOPT_0xC
                 ; 0000 00BF             delay_ms(2000);
                 ; 0000 00C0             stage = STAGE_INIT_MENU;
00032f c036      	RJMP _0xF4
                 ; 0000 00C1         }
                 ; 0000 00C2         else if (stage == STAGE_STUDENT_MANAGMENT)
                 _0x21:
000330 940e 08df 	CALL SUBOPT_0xD
000332 f469      	BRNE _0x29
                 ; 0000 00C3         {
                 ; 0000 00C4             lcdCommand(0x01);
000333 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00C5             lcd_gotoxy(1, 1);
                 ; 0000 00C6             lcd_print("1: Search Student");
                +
000335 e0a6     +LDI R26 , LOW ( _0xA + ( 166 ) )
000336 e0b3     +LDI R27 , HIGH ( _0xA + ( 166 ) )
                 	__POINTW2MN _0xA,166
000337 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 00C7             lcd_gotoxy(1, 2);
                 ; 0000 00C8             lcd_print("2: Delete Student");
                +
000339 e1a8     +LDI R26 , LOW ( _0xA + ( 184 ) )
00033a e0b3     +LDI R27 , HIGH ( _0xA + ( 184 ) )
                 	__POINTW2MN _0xA,184
00033b d2c7      	RCALL _lcd_print
                 ; 0000 00C9             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2A:
00033c 940e 08df 	CALL SUBOPT_0xD
00033e f3e9      	BREQ _0x2A
                 ; 0000 00CA                 ;
                 ; 0000 00CB         }
                 ; 0000 00CC         else if (stage == STAGE_SEARCH_STUDENT)
00033f c028      	RJMP _0x2D
                 _0x29:
000340 940e 08e4 	CALL SUBOPT_0xE
000342 f471      	BRNE _0x2E
                 ; 0000 00CD         {
                 ; 0000 00CE             lcdCommand(0x01);
000343 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00CF             lcd_gotoxy(1, 1);
                 ; 0000 00D0             lcd_print("Enter Student Code For Search:");
                +
000345 e2aa     +LDI R26 , LOW ( _0xA + ( 202 ) )
000346 e0b3     +LDI R27 , HIGH ( _0xA + ( 202 ) )
                 	__POINTW2MN _0xA,202
000347 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 00D1             lcd_gotoxy(1, 2);
                 ; 0000 00D2             lcdCommand(0x0f);   // display on, cursor blinking
000349 940e 08a0 	CALL SUBOPT_0x4
                 ; 0000 00D3             delay_us(100 * 16); // wait
                 ; 0000 00D4             while (stage == STAGE_SEARCH_STUDENT)
                 _0x2F:
00034b 940e 08e4 	CALL SUBOPT_0xE
00034d f3e9      	BREQ _0x2F
                 ; 0000 00D5                 ;
                 ; 0000 00D6             lcdCommand(0x0c);   // display on, cursor off
00034e 940e 08a8 	CALL SUBOPT_0x5
                 ; 0000 00D7             delay_us(100 * 16); // wait
                 ; 0000 00D8         }
                 ; 0000 00D9         else if (stage == STAGE_DELETE_STUDENT)
000350 c017      	RJMP _0x32
                 _0x2E:
000351 940e 08e9 	CALL SUBOPT_0xF
000353 f471      	BRNE _0x33
                 ; 0000 00DA         {
                 ; 0000 00DB             lcdCommand(0x01);
000354 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 00DC             lcd_gotoxy(1, 1);
                 ; 0000 00DD             lcd_print("Enter Student Code For Delete:");
                +
000356 e4a9     +LDI R26 , LOW ( _0xA + ( 233 ) )
000357 e0b3     +LDI R27 , HIGH ( _0xA + ( 233 ) )
                 	__POINTW2MN _0xA,233
000358 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 00DE             lcd_gotoxy(1, 2);
                 ; 0000 00DF             lcdCommand(0x0f);   // display on, cursor blinking
00035a 940e 08a0 	CALL SUBOPT_0x4
                 ; 0000 00E0             delay_us(100 * 16); // wait
                 ; 0000 00E1             while (stage == STAGE_DELETE_STUDENT)
                 _0x34:
00035c 940e 08e9 	CALL SUBOPT_0xF
00035e f3e9      	BREQ _0x34
                 ; 0000 00E2                 ;
                 ; 0000 00E3             lcdCommand(0x0c); // display on, cursor off
00035f 940e 08a8 	CALL SUBOPT_0x5
                 ; 0000 00E4             delay_us(100 * 16);
                 ; 0000 00E5         }
                 ; 0000 00E6         else if(stage == STAGE_TRAFFIC_MONITORING)
000361 c006      	RJMP _0x37
                 _0x33:
000362 940e 08ee 	CALL SUBOPT_0x10
000364 f419      	BRNE _0x38
                 ; 0000 00E7         {
                 ; 0000 00E8             startSonar();
000365 d43a      	RCALL _startSonar
                 ; 0000 00E9             stage = STAGE_INIT_MENU;
                 _0xF4:
000366 2444      	CLR  R4
000367 2455      	CLR  R5
                 ; 0000 00EA         }
                 ; 0000 00EB     }
                 _0x38:
                 _0x37:
                 _0x32:
                 _0x2D:
                 _0x20:
                 _0x15:
                 _0x13:
                 _0xE:
                 _0x8:
000368 cf1b      	RJMP _0x4
                 ; 0000 00EC }
                 _0x39:
000369 cfff      	RJMP _0x39
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0x108
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 00F0 {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
00036a 920a      	ST   -Y,R0
00036b 921a      	ST   -Y,R1
00036c 92fa      	ST   -Y,R15
00036d 936a      	ST   -Y,R22
00036e 937a      	ST   -Y,R23
00036f 938a      	ST   -Y,R24
000370 939a      	ST   -Y,R25
000371 93aa      	ST   -Y,R26
000372 93ba      	ST   -Y,R27
000373 93ea      	ST   -Y,R30
000374 93fa      	ST   -Y,R31
000375 b7ef      	IN   R30,SREG
000376 93ea      	ST   -Y,R30
                 ; 0000 00F1     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 00F2     int i;
                 ; 0000 00F3 
                 ; 0000 00F4     // detect the key
                 ; 0000 00F5     while (1)
000377 9722      	SBIW R28,2
000378 940e 0b49 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 00F6     {
                 ; 0000 00F7         KEY_PRT = 0xEF;            // ground row 0
00037a eeef      	LDI  R30,LOW(239)
00037b 940e 08f3 	CALL SUBOPT_0x11
                 ; 0000 00F8         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00F9         if (colloc != 0x0F)        // column detected
00037d f011      	BREQ _0x3D
                 ; 0000 00FA         {
                 ; 0000 00FB             rowloc = 0; // save row location
00037e e000      	LDI  R16,LOW(0)
                 ; 0000 00FC             break;      // exit while loop
00037f c012      	RJMP _0x3C
                 ; 0000 00FD         }
                 ; 0000 00FE         KEY_PRT = 0xDF;            // ground row 1
                 _0x3D:
000380 edef      	LDI  R30,LOW(223)
000381 940e 08f3 	CALL SUBOPT_0x11
                 ; 0000 00FF         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0100         if (colloc != 0x0F)        // column detected
000383 f011      	BREQ _0x3E
                 ; 0000 0101         {
                 ; 0000 0102             rowloc = 1; // save row location
000384 e001      	LDI  R16,LOW(1)
                 ; 0000 0103             break;      // exit while loop
000385 c00c      	RJMP _0x3C
                 ; 0000 0104         }
                 ; 0000 0105         KEY_PRT = 0xBF;            // ground row 2
                 _0x3E:
000386 ebef      	LDI  R30,LOW(191)
000387 940e 08f3 	CALL SUBOPT_0x11
                 ; 0000 0106         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0107         if (colloc != 0x0F)        // column detected
000389 f011      	BREQ _0x3F
                 ; 0000 0108         {
                 ; 0000 0109             rowloc = 2; // save row location
00038a e002      	LDI  R16,LOW(2)
                 ; 0000 010A             break;      // exit while loop
00038b c006      	RJMP _0x3C
                 ; 0000 010B         }
                 ; 0000 010C         KEY_PRT = 0x7F;            // ground row 3
                 _0x3F:
00038c e7ef      	LDI  R30,LOW(127)
00038d bbe5      	OUT  0x15,R30
                 ; 0000 010D         colloc = (KEY_PIN & 0x0F); // read the columns
00038e b3e3      	IN   R30,0x13
00038f 70ef      	ANDI R30,LOW(0xF)
000390 2f1e      	MOV  R17,R30
                 ; 0000 010E         rowloc = 3;                // save row location
000391 e003      	LDI  R16,LOW(3)
                 ; 0000 010F         break;                     // exit while loop
                 ; 0000 0110     }
                 _0x3C:
                 ; 0000 0111     // check column and send result to Port D
                 ; 0000 0112     if (colloc == 0x0E)
000392 301e      	CPI  R17,14
000393 f411      	BRNE _0x40
                 ; 0000 0113         cl = 0;
000394 e030      	LDI  R19,LOW(0)
                 ; 0000 0114     else if (colloc == 0x0D)
000395 c009      	RJMP _0x41
                 _0x40:
000396 301d      	CPI  R17,13
000397 f411      	BRNE _0x42
                 ; 0000 0115         cl = 1;
000398 e031      	LDI  R19,LOW(1)
                 ; 0000 0116     else if (colloc == 0x0B)
000399 c005      	RJMP _0x43
                 _0x42:
00039a 301b      	CPI  R17,11
00039b f411      	BRNE _0x44
                 ; 0000 0117         cl = 2;
00039c e032      	LDI  R19,LOW(2)
                 ; 0000 0118     else
00039d c001      	RJMP _0x45
                 _0x44:
                 ; 0000 0119         cl = 3;
00039e e033      	LDI  R19,LOW(3)
                 ; 0000 011A 
                 ; 0000 011B     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x45:
                 _0x43:
                 _0x41:
00039f b3e5      	IN   R30,0x15
0003a0 70ef      	ANDI R30,LOW(0xF)
0003a1 bbe5      	OUT  0x15,R30
                 ; 0000 011C 
                 ; 0000 011D     // inside menu level 1
                 ; 0000 011E     if (stage == STAGE_INIT_MENU)
0003a2 2c04      	MOV  R0,R4
0003a3 2805      	OR   R0,R5
0003a4 f009      	BREQ PC+2
0003a5 c060      	RJMP _0x46
                 ; 0000 011F     {
                 ; 0000 0120         switch (keypad[rowloc][cl] - '0')
0003a6 940e 08f9 	CALL SUBOPT_0x12
0003a8 91ec      	LD   R30,X
0003a9 e0f0      	LDI  R31,0
0003aa 97f0      	SBIW R30,48
                 ; 0000 0121         {
                 ; 0000 0122         case OPTION_ATTENDENCE:
0003ab 30e1      	CPI  R30,LOW(0x1)
0003ac e0a0      	LDI  R26,HIGH(0x1)
0003ad 07fa      	CPC  R31,R26
0003ae f421      	BRNE _0x4A
                 ; 0000 0123             stage = STAGE_ATTENDENC_MENU;
0003af e0e1      	LDI  R30,LOW(1)
0003b0 e0f0      	LDI  R31,HIGH(1)
0003b1 012f      	MOVW R4,R30
                 ; 0000 0124             break;
0003b2 c036      	RJMP _0x49
                 ; 0000 0125 
                 ; 0000 0126         case OPTION_TEMPERATURE_MONITORING:
                 _0x4A:
0003b3 30e4      	CPI  R30,LOW(0x4)
0003b4 e0a0      	LDI  R26,HIGH(0x4)
0003b5 07fa      	CPC  R31,R26
0003b6 f421      	BRNE _0x4B
                 ; 0000 0127             stage = STAGE_TEMPERATURE_MONITORING;
0003b7 e0e3      	LDI  R30,LOW(3)
0003b8 e0f0      	LDI  R31,HIGH(3)
0003b9 012f      	MOVW R4,R30
                 ; 0000 0128             break;
0003ba c02e      	RJMP _0x49
                 ; 0000 0129         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x4B:
0003bb 30e3      	CPI  R30,LOW(0x3)
0003bc e0a0      	LDI  R26,HIGH(0x3)
0003bd 07fa      	CPC  R31,R26
0003be f421      	BRNE _0x4C
                 ; 0000 012A             stage = STAGE_VIEW_PRESENT_STUDENTS;
0003bf e0e4      	LDI  R30,LOW(4)
0003c0 e0f0      	LDI  R31,HIGH(4)
0003c1 012f      	MOVW R4,R30
                 ; 0000 012B             break;
0003c2 c026      	RJMP _0x49
                 ; 0000 012C         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x4C:
0003c3 30e5      	CPI  R30,LOW(0x5)
0003c4 e0a0      	LDI  R26,HIGH(0x5)
0003c5 07fa      	CPC  R31,R26
0003c6 f421      	BRNE _0x4D
                 ; 0000 012D             stage = STAGE_RETRIEVE_STUDENT_DATA;
0003c7 e0e5      	LDI  R30,LOW(5)
0003c8 e0f0      	LDI  R31,HIGH(5)
0003c9 012f      	MOVW R4,R30
                 ; 0000 012E             break;
0003ca c01e      	RJMP _0x49
                 ; 0000 012F         case OPTION_STUDENT_MANAGEMENT:
                 _0x4D:
0003cb 30e2      	CPI  R30,LOW(0x2)
0003cc e0a0      	LDI  R26,HIGH(0x2)
0003cd 07fa      	CPC  R31,R26
0003ce f421      	BRNE _0x4E
                 ; 0000 0130             stage = STAGE_STUDENT_MANAGMENT;
0003cf e0e6      	LDI  R30,LOW(6)
0003d0 e0f0      	LDI  R31,HIGH(6)
0003d1 012f      	MOVW R4,R30
                 ; 0000 0131             break;
0003d2 c016      	RJMP _0x49
                 ; 0000 0132         case OPTION_TRAFFIC_MONITORING:
                 _0x4E:
0003d3 30e6      	CPI  R30,LOW(0x6)
0003d4 e0a0      	LDI  R26,HIGH(0x6)
0003d5 07fa      	CPC  R31,R26
0003d6 f421      	BRNE _0x4F
                 ; 0000 0133             stage = STAGE_TRAFFIC_MONITORING;
0003d7 e0e9      	LDI  R30,LOW(9)
0003d8 e0f0      	LDI  R31,HIGH(9)
0003d9 012f      	MOVW R4,R30
                 ; 0000 0134             break;
0003da c00e      	RJMP _0x49
                 ; 0000 0135         case 9:
                 _0x4F:
0003db 30e9      	CPI  R30,LOW(0x9)
0003dc e0a0      	LDI  R26,HIGH(0x9)
0003dd 07fa      	CPC  R31,R26
0003de f451      	BRNE _0x52
                 ; 0000 0136 #asm("cli") // disable interrupts
0003df 94f8      	cli
                 ; 0000 0137 
                 ; 0000 0138             lcdCommand(0x1);
0003e0 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0139             lcd_gotoxy(1, 1);
                 ; 0000 013A             lcd_print("Clearing EEPROM ...");
                +
0003e2 e6a8     +LDI R26 , LOW ( _0x51 + ( 0 ) )
0003e3 e0b3     +LDI R27 , HIGH ( _0x51 + ( 0 ) )
                 	__POINTW2MN _0x51,0
0003e4 d21e      	RCALL _lcd_print
                 ; 0000 013B             clear_eeprom();
0003e5 d2a6      	RCALL _clear_eeprom
                 ; 0000 013C #asm("sei") // enable interrupts
0003e6 9478      	sei
                 ; 0000 013D             stage = STAGE_INIT_MENU;
0003e7 2444      	CLR  R4
0003e8 2455      	CLR  R5
                 ; 0000 013E         default:
                 _0x52:
                 ; 0000 013F             break;
                 ; 0000 0140         }
                 _0x49:
                 ; 0000 0141 
                 ; 0000 0142         if (keypad[rowloc][cl] == 'L')
0003e9 940e 08f9 	CALL SUBOPT_0x12
0003eb 91ac      	LD   R26,X
0003ec 34ac      	CPI  R26,LOW(0x4C)
0003ed f449      	BRNE _0x53
                 ; 0000 0143         {
                 ; 0000 0144             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0003ee e0e0      	LDI  R30,LOW(0)
0003ef 15e7      	CP   R30,R7
0003f0 f420      	BRSH _0x54
0003f1 2de7      	MOV  R30,R7
0003f2 e0f0      	LDI  R31,0
0003f3 9731      	SBIW R30,1
0003f4 c001      	RJMP _0x55
                 _0x54:
0003f5 e0e2      	LDI  R30,LOW(2)
                 _0x55:
0003f6 2e7e      	MOV  R7,R30
                 ; 0000 0145         }
                 ; 0000 0146         if (keypad[rowloc][cl] == 'R')
                 _0x53:
0003f7 940e 08f9 	CALL SUBOPT_0x12
0003f9 91ac      	LD   R26,X
0003fa 35a2      	CPI  R26,LOW(0x52)
0003fb f449      	BRNE _0x57
                 ; 0000 0147         {
                 ; 0000 0148             page_num = (page_num + 1) % MENU_PAGE_COUNT;
0003fc 2de7      	MOV  R30,R7
0003fd e0f0      	LDI  R31,0
0003fe 9631      	ADIW R30,1
0003ff 01df      	MOVW R26,R30
000400 e0e3      	LDI  R30,LOW(3)
000401 e0f0      	LDI  R31,HIGH(3)
000402 940e 0b2c 	CALL __MODW21
000404 2e7e      	MOV  R7,R30
                 ; 0000 0149         }
                 ; 0000 014A     }
                 _0x57:
                 ; 0000 014B     else if (stage == STAGE_ATTENDENC_MENU)
000405 c1a4      	RJMP _0x58
                 _0x46:
000406 940e 0887 	CALL SUBOPT_0x0
000408 f4a9      	BRNE _0x59
                 ; 0000 014C     {
                 ; 0000 014D         switch (keypad[rowloc][cl])
000409 940e 08f9 	CALL SUBOPT_0x12
00040b 91ec      	LD   R30,X
00040c e0f0      	LDI  R31,0
                 ; 0000 014E         {
                 ; 0000 014F         case 'C':
00040d 34e3      	CPI  R30,LOW(0x43)
00040e e0a0      	LDI  R26,HIGH(0x43)
00040f 07fa      	CPC  R31,R26
000410 f419      	BRNE _0x5D
                 ; 0000 0150             stage = STAGE_INIT_MENU;
000411 2444      	CLR  R4
000412 2455      	CLR  R5
                 ; 0000 0151             break;
000413 c009      	RJMP _0x5C
                 ; 0000 0152         case '1':
                 _0x5D:
000414 33e1      	CPI  R30,LOW(0x31)
000415 e0a0      	LDI  R26,HIGH(0x31)
000416 07fa      	CPC  R31,R26
000417 f429      	BRNE _0x5F
                 ; 0000 0153             memset(buffer, 0, 32);
000418 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 0154             stage = STAGE_SUBMIT_CODE;
00041a e0e2      	LDI  R30,LOW(2)
00041b e0f0      	LDI  R31,HIGH(2)
00041c 012f      	MOVW R4,R30
                 ; 0000 0155             break;
                 ; 0000 0156         default:
                 _0x5F:
                 ; 0000 0157             break;
                 ; 0000 0158         }
                 _0x5C:
                 ; 0000 0159     }
                 ; 0000 015A     else if (stage == STAGE_SUBMIT_CODE)
00041d c18c      	RJMP _0x60
                 _0x59:
00041e 940e 089b 	CALL SUBOPT_0x3
000420 f009      	BREQ PC+2
000421 c09a      	RJMP _0x61
                 ; 0000 015B     {
                 ; 0000 015C 
                 ; 0000 015D         if ((keypad[rowloc][cl] - '0') < 10)
000422 940e 08f9 	CALL SUBOPT_0x12
000424 91ec      	LD   R30,X
000425 e0f0      	LDI  R31,0
000426 97fa      	SBIW R30,58
000427 f47c      	BRGE _0x62
                 ; 0000 015E         {
                 ; 0000 015F             if (strlen(buffer) <= 30)
000428 940e 0905 	CALL SUBOPT_0x13
00042a 977f      	SBIW R30,31
00042b f450      	BRSH _0x63
                 ; 0000 0160             {
                 ; 0000 0161                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00042c 940e 0905 	CALL SUBOPT_0x13
00042e 940e 0909 	CALL SUBOPT_0x14
000430 940e 090d 	CALL SUBOPT_0x15
                 ; 0000 0162                 buffer[strlen(buffer) + 1] = '\0';
000432 940e 0911 	CALL SUBOPT_0x16
                 ; 0000 0163                 lcdData(keypad[rowloc][cl]);
000434 91ac      	LD   R26,X
000435 d191      	RCALL _lcdData
                 ; 0000 0164             }
                 ; 0000 0165         }
                 _0x63:
                 ; 0000 0166         else if (keypad[rowloc][cl] == 'D')
000436 c084      	RJMP _0x64
                 _0x62:
000437 940e 08f9 	CALL SUBOPT_0x12
000439 91ac      	LD   R26,X
00043a 34a4      	CPI  R26,LOW(0x44)
00043b f461      	BRNE _0x65
                 ; 0000 0167         {
                 ; 0000 0168             buffer_len = strlen(buffer);
00043c 940e 0905 	CALL SUBOPT_0x13
00043e 2f5e      	MOV  R21,R30
                 ; 0000 0169             if (buffer_len > 0)
00043f 3051      	CPI  R21,1
000440 f030      	BRLO _0x66
                 ; 0000 016A             {
                 ; 0000 016B                 buffer[buffer_len - 1] = '\0';
000441 940e 0916 	CALL SUBOPT_0x17
                 ; 0000 016C                 lcdCommand(0x10);
                 ; 0000 016D                 lcd_print(" ");
                +
000443 e7ac     +LDI R26 , LOW ( _0x51 + ( 20 ) )
000444 e0b3     +LDI R27 , HIGH ( _0x51 + ( 20 ) )
                 	__POINTW2MN _0x51,20
000445 940e 0920 	CALL SUBOPT_0x18
                 ; 0000 016E                 lcdCommand(0x10);
                 ; 0000 016F             }
                 ; 0000 0170         }
                 _0x66:
                 ; 0000 0171         else if (keypad[rowloc][cl] == 'E')
000447 c073      	RJMP _0x67
                 _0x65:
000448 940e 08f9 	CALL SUBOPT_0x12
00044a 91ac      	LD   R26,X
00044b 34a5      	CPI  R26,LOW(0x45)
00044c f009      	BREQ PC+2
00044d c065      	RJMP _0x68
                 ; 0000 0172         {
                 ; 0000 0173 
                 ; 0000 0174 #asm("cli")
00044e 94f8      	cli
                 ; 0000 0175 
                 ; 0000 0176             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0177                 strlen(buffer) != 8)
00044f e2e9      	LDI  R30,LOW(_buffer)
000450 e0f6      	LDI  R31,HIGH(_buffer)
000451 93fa      	ST   -Y,R31
000452 93ea      	ST   -Y,R30
                +
000453 e7ee     +LDI R30 , LOW ( _0x51 + ( 22 ) )
000454 e0f3     +LDI R31 , HIGH ( _0x51 + ( 22 ) )
                 	__POINTW1MN _0x51,22
000455 93fa      	ST   -Y,R31
000456 93ea      	ST   -Y,R30
000457 e0a2      	LDI  R26,LOW(2)
000458 940e 086e 	CALL _strncmp
00045a 30e0      	CPI  R30,0
00045b f431      	BRNE _0x6A
00045c 940e 0905 	CALL SUBOPT_0x13
00045e 30e8      	CPI  R30,LOW(0x8)
00045f e0a0      	LDI  R26,HIGH(0x8)
000460 07fa      	CPC  R31,R26
000461 f069      	BREQ _0x69
                 _0x6A:
                 ; 0000 0178             {
                 ; 0000 0179 
                 ; 0000 017A                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000462 9a97      	SBI  0x12,7
                 ; 0000 017B                 lcdCommand(0x01);
000463 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 017C                 lcd_gotoxy(1, 1);
                 ; 0000 017D                 lcd_print("Incorrect Student Code Format");
                +
000465 e8a1     +LDI R26 , LOW ( _0x51 + ( 25 ) )
000466 e0b3     +LDI R27 , HIGH ( _0x51 + ( 25 ) )
                 	__POINTW2MN _0x51,25
000467 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 017E                 lcd_gotoxy(1, 2);
                 ; 0000 017F                 lcd_print("You Will Back Menu In 2 Second");
                +
000469 e9af     +LDI R26 , LOW ( _0x51 + ( 55 ) )
00046a e0b3     +LDI R27 , HIGH ( _0x51 + ( 55 ) )
                 	__POINTW2MN _0x51,55
00046b 940e 08d9 	CALL SUBOPT_0xC
                 ; 0000 0180                 delay_ms(2000);
                 ; 0000 0181                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
00046d 9897      	CBI  0x12,7
                 ; 0000 0182             }
                 ; 0000 0183             else if (search_student_code() > 0)
00046e c040      	RJMP _0x6C
                 _0x69:
00046f d261      	RCALL _search_student_code
000470 30e1      	CPI  R30,LOW(0x1)
000471 f068      	BRLO _0x6D
                 ; 0000 0184             {
                 ; 0000 0185                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000472 9a97      	SBI  0x12,7
                 ; 0000 0186                 lcdCommand(0x01);
000473 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0187                 lcd_gotoxy(1, 1);
                 ; 0000 0188                 lcd_print("Duplicate Student Code Entered");
                +
000475 ebae     +LDI R26 , LOW ( _0x51 + ( 86 ) )
000476 e0b3     +LDI R27 , HIGH ( _0x51 + ( 86 ) )
                 	__POINTW2MN _0x51,86
000477 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0189                 lcd_gotoxy(1, 2);
                 ; 0000 018A                 lcd_print("You Will Back Menu In 2 Second");
                +
000479 edad     +LDI R26 , LOW ( _0x51 + ( 117 ) )
00047a e0b3     +LDI R27 , HIGH ( _0x51 + ( 117 ) )
                 	__POINTW2MN _0x51,117
00047b 940e 08d9 	CALL SUBOPT_0xC
                 ; 0000 018B                 delay_ms(2000);
                 ; 0000 018C                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
00047d 9897      	CBI  0x12,7
                 ; 0000 018D             }
                 ; 0000 018E             else
00047e c030      	RJMP _0x6E
                 _0x6D:
                 ; 0000 018F             {
                 ; 0000 0190                 // save the buffer to EEPROM
                 ; 0000 0191                 st_counts = read_byte_from_eeprom(0x0);
00047f 940e 08d5 	CALL SUBOPT_0xB
000481 2f2e      	MOV  R18,R30
                 ; 0000 0192                 for (i = 0; i < 8; i++)
000482 e0e0      	LDI  R30,LOW(0)
000483 83ee      	STD  Y+6,R30
000484 83ef      	STD  Y+6+1,R30
                 _0x70:
000485 81ae      	LDD  R26,Y+6
000486 81bf      	LDD  R27,Y+6+1
000487 9718      	SBIW R26,8
000488 f4ac      	BRGE _0x71
                 ; 0000 0193                 {
                 ; 0000 0194                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000489 2fe2      	MOV  R30,R18
00048a 940e 0925 	CALL SUBOPT_0x19
00048c 81ae      	LDD  R26,Y+6
00048d 81bf      	LDD  R27,Y+6+1
00048e 0fea      	ADD  R30,R26
00048f 1ffb      	ADC  R31,R27
000490 93fa      	ST   -Y,R31
000491 93ea      	ST   -Y,R30
000492 85e8      	LDD  R30,Y+8
000493 85f9      	LDD  R31,Y+8+1
000494 5de7      	SUBI R30,LOW(-_buffer)
000495 4ff9      	SBCI R31,HIGH(-_buffer)
000496 81a0      	LD   R26,Z
000497 d21a      	RCALL _write_byte_to_eeprom
                 ; 0000 0195                 }
000498 81ee      	LDD  R30,Y+6
000499 81ff      	LDD  R31,Y+6+1
00049a 9631      	ADIW R30,1
00049b 83ee      	STD  Y+6,R30
00049c 83ff      	STD  Y+6+1,R31
00049d cfe7      	RJMP _0x70
                 _0x71:
                 ; 0000 0196                 write_byte_to_eeprom(0x0, st_counts + 1);
00049e e0e0      	LDI  R30,LOW(0)
00049f e0f0      	LDI  R31,HIGH(0)
0004a0 93fa      	ST   -Y,R31
0004a1 93ea      	ST   -Y,R30
0004a2 2fa2      	MOV  R26,R18
0004a3 5faf      	SUBI R26,-LOW(1)
0004a4 d20d      	RCALL _write_byte_to_eeprom
                 ; 0000 0197 
                 ; 0000 0198                 lcdCommand(0x01);
0004a5 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0199                 lcd_gotoxy(1, 1);
                 ; 0000 019A                 lcd_print("Student Code Successfully Added");
                +
0004a7 efac     +LDI R26 , LOW ( _0x51 + ( 148 ) )
0004a8 e0b3     +LDI R27 , HIGH ( _0x51 + ( 148 ) )
                 	__POINTW2MN _0x51,148
0004a9 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 019B                 lcd_gotoxy(1, 2);
                 ; 0000 019C                 lcd_print("You Will Back Menu In 2 Second");
                +
0004ab e1ac     +LDI R26 , LOW ( _0x51 + ( 180 ) )
0004ac e0b4     +LDI R27 , HIGH ( _0x51 + ( 180 ) )
                 	__POINTW2MN _0x51,180
0004ad 940e 08d9 	CALL SUBOPT_0xC
                 ; 0000 019D                 delay_ms(2000);
                 ; 0000 019E             }
                 _0x6E:
                 _0x6C:
                 ; 0000 019F             memset(buffer, 0, 32);
0004af 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 01A0 #asm("sei")
0004b1 9478      	sei
                 ; 0000 01A1             stage = STAGE_ATTENDENC_MENU;
0004b2 c005      	RJMP _0xF5
                 ; 0000 01A2         }
                 ; 0000 01A3         else if (keypad[rowloc][cl] == 'C')
                 _0x68:
0004b3 940e 08f9 	CALL SUBOPT_0x12
0004b5 91ac      	LD   R26,X
0004b6 34a3      	CPI  R26,LOW(0x43)
0004b7 f419      	BRNE _0x73
                 ; 0000 01A4             stage = STAGE_ATTENDENC_MENU;
                 _0xF5:
0004b8 e0e1      	LDI  R30,LOW(1)
0004b9 e0f0      	LDI  R31,HIGH(1)
0004ba 012f      	MOVW R4,R30
                 ; 0000 01A5     }
                 _0x73:
                 _0x67:
                 _0x64:
                 ; 0000 01A6     else if (stage == STAGE_TEMPERATURE_MONITORING)
0004bb c0ee      	RJMP _0x74
                 _0x61:
0004bc 940e 08b0 	CALL SUBOPT_0x6
0004be f441      	BRNE _0x75
                 ; 0000 01A7     {
                 ; 0000 01A8 
                 ; 0000 01A9         if (keypad[rowloc][cl] == 'C')
0004bf 940e 08f9 	CALL SUBOPT_0x12
0004c1 91ac      	LD   R26,X
0004c2 34a3      	CPI  R26,LOW(0x43)
0004c3 f411      	BRNE _0x76
                 ; 0000 01AA             stage = STAGE_INIT_MENU;
0004c4 2444      	CLR  R4
0004c5 2455      	CLR  R5
                 ; 0000 01AB     }
                 _0x76:
                 ; 0000 01AC     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0004c6 c0e3      	RJMP _0x77
                 _0x75:
0004c7 940e 08b5 	CALL SUBOPT_0x7
0004c9 f441      	BRNE _0x78
                 ; 0000 01AD     {
                 ; 0000 01AE         if (keypad[rowloc][cl] == 'C')
0004ca 940e 08f9 	CALL SUBOPT_0x12
0004cc 91ac      	LD   R26,X
0004cd 34a3      	CPI  R26,LOW(0x43)
0004ce f411      	BRNE _0x79
                 ; 0000 01AF             stage = STAGE_INIT_MENU;
0004cf 2444      	CLR  R4
0004d0 2455      	CLR  R5
                 ; 0000 01B0     }
                 _0x79:
                 ; 0000 01B1     else if (stage == STAGE_STUDENT_MANAGMENT)
0004d1 c0d8      	RJMP _0x7A
                 _0x78:
0004d2 940e 08df 	CALL SUBOPT_0xD
0004d4 f4c9      	BRNE _0x7B
                 ; 0000 01B2     {
                 ; 0000 01B3         if (keypad[rowloc][cl] == 'C')
0004d5 940e 08f9 	CALL SUBOPT_0x12
0004d7 91ac      	LD   R26,X
0004d8 34a3      	CPI  R26,LOW(0x43)
0004d9 f419      	BRNE _0x7C
                 ; 0000 01B4             stage = STAGE_INIT_MENU;
0004da 2444      	CLR  R4
0004db 2455      	CLR  R5
                 ; 0000 01B5         else if (keypad[rowloc][cl] == '1')
0004dc c010      	RJMP _0x7D
                 _0x7C:
0004dd 940e 08f9 	CALL SUBOPT_0x12
0004df 91ac      	LD   R26,X
0004e0 33a1      	CPI  R26,LOW(0x31)
0004e1 f419      	BRNE _0x7E
                 ; 0000 01B6             stage = STAGE_SEARCH_STUDENT;
0004e2 e0e7      	LDI  R30,LOW(7)
0004e3 e0f0      	LDI  R31,HIGH(7)
0004e4 c007      	RJMP _0xF6
                 ; 0000 01B7         else if (keypad[rowloc][cl] == '2')
                 _0x7E:
0004e5 940e 08f9 	CALL SUBOPT_0x12
0004e7 91ac      	LD   R26,X
0004e8 33a2      	CPI  R26,LOW(0x32)
0004e9 f419      	BRNE _0x80
                 ; 0000 01B8             stage = STAGE_DELETE_STUDENT;
0004ea e0e8      	LDI  R30,LOW(8)
0004eb e0f0      	LDI  R31,HIGH(8)
                 _0xF6:
0004ec 012f      	MOVW R4,R30
                 ; 0000 01B9     }
                 _0x80:
                 _0x7D:
                 ; 0000 01BA     else if (stage == STAGE_SEARCH_STUDENT)
0004ed c0bc      	RJMP _0x81
                 _0x7B:
0004ee 940e 08e4 	CALL SUBOPT_0xE
0004f0 f009      	BREQ PC+2
0004f1 c054      	RJMP _0x82
                 ; 0000 01BB     {
                 ; 0000 01BC         if ((keypad[rowloc][cl] - '0') < 10)
0004f2 940e 08f9 	CALL SUBOPT_0x12
0004f4 91ec      	LD   R30,X
0004f5 e0f0      	LDI  R31,0
0004f6 97fa      	SBIW R30,58
0004f7 f47c      	BRGE _0x83
                 ; 0000 01BD         {
                 ; 0000 01BE             if (strlen(buffer) <= 30)
0004f8 940e 0905 	CALL SUBOPT_0x13
0004fa 977f      	SBIW R30,31
0004fb f450      	BRSH _0x84
                 ; 0000 01BF             {
                 ; 0000 01C0                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0004fc 940e 0905 	CALL SUBOPT_0x13
0004fe 940e 0909 	CALL SUBOPT_0x14
000500 940e 090d 	CALL SUBOPT_0x15
                 ; 0000 01C1                 buffer[strlen(buffer) + 1] = '\0';
000502 940e 0911 	CALL SUBOPT_0x16
                 ; 0000 01C2                 lcdData(keypad[rowloc][cl]);
000504 91ac      	LD   R26,X
000505 d0c1      	RCALL _lcdData
                 ; 0000 01C3             }
                 ; 0000 01C4         }
                 _0x84:
                 ; 0000 01C5         else if (keypad[rowloc][cl] == 'D')
000506 c03e      	RJMP _0x85
                 _0x83:
000507 940e 08f9 	CALL SUBOPT_0x12
000509 91ac      	LD   R26,X
00050a 34a4      	CPI  R26,LOW(0x44)
00050b f461      	BRNE _0x86
                 ; 0000 01C6         {
                 ; 0000 01C7             buffer_len = strlen(buffer);
00050c 940e 0905 	CALL SUBOPT_0x13
00050e 2f5e      	MOV  R21,R30
                 ; 0000 01C8             if (buffer_len > 0)
00050f 3051      	CPI  R21,1
000510 f030      	BRLO _0x87
                 ; 0000 01C9             {
                 ; 0000 01CA                 buffer[buffer_len - 1] = '\0';
000511 940e 0916 	CALL SUBOPT_0x17
                 ; 0000 01CB                 lcdCommand(0x10);
                 ; 0000 01CC                 lcd_print(" ");
                +
000513 e3ab     +LDI R26 , LOW ( _0x51 + ( 211 ) )
000514 e0b4     +LDI R27 , HIGH ( _0x51 + ( 211 ) )
                 	__POINTW2MN _0x51,211
000515 940e 0920 	CALL SUBOPT_0x18
                 ; 0000 01CD                 lcdCommand(0x10);
                 ; 0000 01CE             }
                 ; 0000 01CF         }
                 _0x87:
                 ; 0000 01D0         else if (keypad[rowloc][cl] == 'E')
000517 c02d      	RJMP _0x88
                 _0x86:
000518 940e 08f9 	CALL SUBOPT_0x12
00051a 91ac      	LD   R26,X
00051b 34a5      	CPI  R26,LOW(0x45)
00051c f501      	BRNE _0x89
                 ; 0000 01D1         {
                 ; 0000 01D2             // search from eeprom data
                 ; 0000 01D3             unsigned char result = search_student_code();
                 ; 0000 01D4 
                 ; 0000 01D5             if (result > 0)
00051d 940e 092a 	CALL SUBOPT_0x1A
                 ;	i -> Y+7
                 ;	result -> Y+0
00051f f048      	BRLO _0x8A
                 ; 0000 01D6             {
                 ; 0000 01D7                 lcdCommand(0x01);
000520 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 01D8                 lcd_gotoxy(1, 1);
                 ; 0000 01D9                 lcd_print("Student Code Found");
                +
000522 e3ad     +LDI R26 , LOW ( _0x51 + ( 213 ) )
000523 e0b4     +LDI R27 , HIGH ( _0x51 + ( 213 ) )
                 	__POINTW2MN _0x51,213
000524 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 01DA                 lcd_gotoxy(1, 2);
                 ; 0000 01DB                 lcd_print("You Will Back Menu In 5 Second");
                +
000526 e5a0     +LDI R26 , LOW ( _0x51 + ( 232 ) )
000527 e0b4     +LDI R27 , HIGH ( _0x51 + ( 232 ) )
                 	__POINTW2MN _0x51,232
000528 c008      	RJMP _0xF7
                 ; 0000 01DC                 delay_ms(5000);
                 ; 0000 01DD             }
                 ; 0000 01DE             else
                 _0x8A:
                 ; 0000 01DF             {
                 ; 0000 01E0                 lcdCommand(0x01);
000529 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 01E1                 lcd_gotoxy(1, 1);
                 ; 0000 01E2                 lcd_print("Ops , Student Code Not Found");
                +
00052b e6af     +LDI R26 , LOW ( _0x51 + ( 263 ) )
00052c e0b4     +LDI R27 , HIGH ( _0x51 + ( 263 ) )
                 	__POINTW2MN _0x51,263
00052d 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 01E3                 lcd_gotoxy(1, 2);
                 ; 0000 01E4                 lcd_print("You Will Back Menu In 5 Second");
                +
00052f e8ac     +LDI R26 , LOW ( _0x51 + ( 292 ) )
000530 e0b4     +LDI R27 , HIGH ( _0x51 + ( 292 ) )
                 	__POINTW2MN _0x51,292
                 _0xF7:
000531 d0d1      	RCALL _lcd_print
                 ; 0000 01E5                 delay_ms(5000);
000532 e8a8      	LDI  R26,LOW(5000)
000533 e1b3      	LDI  R27,HIGH(5000)
000534 940e 0976 	CALL _delay_ms
                 ; 0000 01E6             }
                 ; 0000 01E7             memset(buffer, 0, 32);
000536 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 01E8             stage = STAGE_STUDENT_MANAGMENT;
000538 e0e6      	LDI  R30,LOW(6)
000539 e0f0      	LDI  R31,HIGH(6)
00053a 012f      	MOVW R4,R30
                 ; 0000 01E9         }
00053b 9621      	ADIW R28,1
                 ; 0000 01EA         else if (keypad[rowloc][cl] == 'C')
00053c c008      	RJMP _0x8C
                 _0x89:
00053d 940e 08f9 	CALL SUBOPT_0x12
00053f 91ac      	LD   R26,X
000540 34a3      	CPI  R26,LOW(0x43)
000541 f419      	BRNE _0x8D
                 ; 0000 01EB             stage = STAGE_STUDENT_MANAGMENT;
000542 e0e6      	LDI  R30,LOW(6)
000543 e0f0      	LDI  R31,HIGH(6)
000544 012f      	MOVW R4,R30
                 ; 0000 01EC     }
                 _0x8D:
                 _0x8C:
                 _0x88:
                 _0x85:
                 ; 0000 01ED     else if (stage == STAGE_DELETE_STUDENT)
000545 c064      	RJMP _0x8E
                 _0x82:
000546 940e 08e9 	CALL SUBOPT_0xF
000548 f009      	BREQ PC+2
000549 c056      	RJMP _0x8F
                 ; 0000 01EE     {
                 ; 0000 01EF         if ((keypad[rowloc][cl] - '0') < 10)
00054a 940e 08f9 	CALL SUBOPT_0x12
00054c 91ec      	LD   R30,X
00054d e0f0      	LDI  R31,0
00054e 97fa      	SBIW R30,58
00054f f47c      	BRGE _0x90
                 ; 0000 01F0         {
                 ; 0000 01F1             if (strlen(buffer) <= 30)
000550 940e 0905 	CALL SUBOPT_0x13
000552 977f      	SBIW R30,31
000553 f450      	BRSH _0x91
                 ; 0000 01F2             {
                 ; 0000 01F3                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000554 940e 0905 	CALL SUBOPT_0x13
000556 940e 0909 	CALL SUBOPT_0x14
000558 940e 090d 	CALL SUBOPT_0x15
                 ; 0000 01F4                 buffer[strlen(buffer) + 1] = '\0';
00055a 940e 0911 	CALL SUBOPT_0x16
                 ; 0000 01F5                 lcdData(keypad[rowloc][cl]);
00055c 91ac      	LD   R26,X
00055d d069      	RCALL _lcdData
                 ; 0000 01F6             }
                 ; 0000 01F7         }
                 _0x91:
                 ; 0000 01F8         else if (keypad[rowloc][cl] == 'D')
00055e c040      	RJMP _0x92
                 _0x90:
00055f 940e 08f9 	CALL SUBOPT_0x12
000561 91ac      	LD   R26,X
000562 34a4      	CPI  R26,LOW(0x44)
000563 f461      	BRNE _0x93
                 ; 0000 01F9         {
                 ; 0000 01FA             buffer_len = strlen(buffer);
000564 940e 0905 	CALL SUBOPT_0x13
000566 2f5e      	MOV  R21,R30
                 ; 0000 01FB             if (buffer_len > 0)
000567 3051      	CPI  R21,1
000568 f030      	BRLO _0x94
                 ; 0000 01FC             {
                 ; 0000 01FD                 buffer[buffer_len - 1] = '\0';
000569 940e 0916 	CALL SUBOPT_0x17
                 ; 0000 01FE                 lcdCommand(0x10);
                 ; 0000 01FF                 lcd_print(" ");
                +
00056b eaab     +LDI R26 , LOW ( _0x51 + ( 323 ) )
00056c e0b4     +LDI R27 , HIGH ( _0x51 + ( 323 ) )
                 	__POINTW2MN _0x51,323
00056d 940e 0920 	CALL SUBOPT_0x18
                 ; 0000 0200                 lcdCommand(0x10);
                 ; 0000 0201             }
                 ; 0000 0202         }
                 _0x94:
                 ; 0000 0203         else if (keypad[rowloc][cl] == 'E')
00056f c02f      	RJMP _0x95
                 _0x93:
000570 940e 08f9 	CALL SUBOPT_0x12
000572 91ac      	LD   R26,X
000573 34a5      	CPI  R26,LOW(0x45)
000574 f551      	BRNE _0x96
                 ; 0000 0204         {
                 ; 0000 0205             // search from eeprom data
                 ; 0000 0206             unsigned char result = search_student_code();
                 ; 0000 0207 
                 ; 0000 0208             if (result > 0)
000575 940e 092a 	CALL SUBOPT_0x1A
                 ;	i -> Y+7
                 ;	result -> Y+0
000577 f0a0      	BRLO _0x97
                 ; 0000 0209             {
                 ; 0000 020A                 lcdCommand(0x01);
000578 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 020B                 lcd_gotoxy(1, 1);
                 ; 0000 020C                 lcd_print("Student Code Found");
                +
00057a eaad     +LDI R26 , LOW ( _0x51 + ( 325 ) )
00057b e0b4     +LDI R27 , HIGH ( _0x51 + ( 325 ) )
                 	__POINTW2MN _0x51,325
00057c 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 020D                 lcd_gotoxy(1, 2);
                 ; 0000 020E                 lcd_print("Wait For Delete...");
                +
00057e eca0     +LDI R26 , LOW ( _0x51 + ( 344 ) )
00057f e0b4     +LDI R27 , HIGH ( _0x51 + ( 344 ) )
                 	__POINTW2MN _0x51,344
000580 d082      	RCALL _lcd_print
                 ; 0000 020F                 delete_student_code(result);
000581 81a8      	LD   R26,Y
000582 d198      	RCALL _delete_student_code
                 ; 0000 0210                 lcdCommand(0x01);
000583 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0211                 lcd_gotoxy(1, 1);
                 ; 0000 0212                 lcd_print("Student Code Was Deleted");
                +
000585 eda3     +LDI R26 , LOW ( _0x51 + ( 363 ) )
000586 e0b4     +LDI R27 , HIGH ( _0x51 + ( 363 ) )
                 	__POINTW2MN _0x51,363
000587 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0213                 lcd_gotoxy(1, 2);
                 ; 0000 0214                 lcd_print("You Will Back Menu In 2 Second");
                +
000589 eeac     +LDI R26 , LOW ( _0x51 + ( 388 ) )
00058a e0b4     +LDI R27 , HIGH ( _0x51 + ( 388 ) )
                 	__POINTW2MN _0x51,388
00058b c008      	RJMP _0xF8
                 ; 0000 0215                 delay_ms(2000);
                 ; 0000 0216             }
                 ; 0000 0217             else
                 _0x97:
                 ; 0000 0218             {
                 ; 0000 0219                 lcdCommand(0x01);
00058c 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 021A                 lcd_gotoxy(1, 1);
                 ; 0000 021B                 lcd_print("Ops , Student Code Not Found");
                +
00058e e0ab     +LDI R26 , LOW ( _0x51 + ( 419 ) )
00058f e0b5     +LDI R27 , HIGH ( _0x51 + ( 419 ) )
                 	__POINTW2MN _0x51,419
000590 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 021C                 lcd_gotoxy(1, 2);
                 ; 0000 021D                 lcd_print("You Will Back Menu In 2 Second");
                +
000592 e2a8     +LDI R26 , LOW ( _0x51 + ( 448 ) )
000593 e0b5     +LDI R27 , HIGH ( _0x51 + ( 448 ) )
                 	__POINTW2MN _0x51,448
                 _0xF8:
000594 d06e      	RCALL _lcd_print
                 ; 0000 021E                 delay_ms(2000);
000595 eda0      	LDI  R26,LOW(2000)
000596 e0b7      	LDI  R27,HIGH(2000)
000597 940e 0976 	CALL _delay_ms
                 ; 0000 021F             }
                 ; 0000 0220             memset(buffer, 0, 32);
000599 940e 08ba 	CALL SUBOPT_0x8
                 ; 0000 0221             stage = STAGE_STUDENT_MANAGMENT;
00059b e0e6      	LDI  R30,LOW(6)
00059c e0f0      	LDI  R31,HIGH(6)
00059d 012f      	MOVW R4,R30
                 ; 0000 0222         }
00059e 9621      	ADIW R28,1
                 ; 0000 0223     }
                 _0x96:
                 _0x95:
                 _0x92:
                 ; 0000 0224     else if (stage == STAGE_TRAFFIC_MONITORING)
00059f c00a      	RJMP _0x99
                 _0x8F:
0005a0 940e 08ee 	CALL SUBOPT_0x10
0005a2 f439      	BRNE _0x9A
                 ; 0000 0225     {
                 ; 0000 0226         if (keypad[rowloc][cl] == 'C')
0005a3 940e 08f9 	CALL SUBOPT_0x12
0005a5 91ac      	LD   R26,X
0005a6 34a3      	CPI  R26,LOW(0x43)
0005a7 f411      	BRNE _0x9B
                 ; 0000 0227             stage = STAGE_INIT_MENU;
0005a8 2444      	CLR  R4
0005a9 2455      	CLR  R5
                 ; 0000 0228     }
                 _0x9B:
                 ; 0000 0229 }
                 _0x9A:
                 _0x99:
                 _0x8E:
                 _0x81:
                 _0x7A:
                 _0x77:
                 _0x74:
                 _0x60:
                 _0x58:
0005aa 940e 0b50 	CALL __LOADLOCR6
0005ac 9628      	ADIW R28,8
0005ad 91e9      	LD   R30,Y+
0005ae bfef      	OUT  SREG,R30
0005af 91f9      	LD   R31,Y+
0005b0 91e9      	LD   R30,Y+
0005b1 91b9      	LD   R27,Y+
0005b2 91a9      	LD   R26,Y+
0005b3 9199      	LD   R25,Y+
0005b4 9189      	LD   R24,Y+
0005b5 9179      	LD   R23,Y+
0005b6 9169      	LD   R22,Y+
0005b7 90f9      	LD   R15,Y+
0005b8 9019      	LD   R1,Y+
0005b9 9009      	LD   R0,Y+
0005ba 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x51:
000368           	.BYTE 0x1DF
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 022C {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 022D     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0005bb 940e 0931 	CALL SUBOPT_0x1B
                 ;	cmnd -> Y+0
                 ; 0000 022E     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0005bd 98c0      	CBI  0x18,0
                 ; 0000 022F     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0005be 940e 093a 	CALL SUBOPT_0x1C
                 ; 0000 0230     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0231     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0232     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0233     delay_us(20 * 16);         // wait
                +
0005c0 e880     +LDI R24 , LOW ( 640 )
0005c1 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0005c2 9701     +SBIW R24 , 1
0005c3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 0234     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0005c4 940e 0941 	CALL SUBOPT_0x1D
                 ; 0000 0235     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0236     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0237     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0238 }
0005c6 c0fb      	RJMP _0x20A0004
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 023A {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 023B     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0005c7 940e 0931 	CALL SUBOPT_0x1B
                 ;	data -> Y+0
                 ; 0000 023C     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0005c9 9ac0      	SBI  0x18,0
                 ; 0000 023D     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0005ca 940e 093a 	CALL SUBOPT_0x1C
                 ; 0000 023E     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 023F     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0240     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0241     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0005cc 940e 0941 	CALL SUBOPT_0x1D
                 ; 0000 0242     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0243     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0244     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0245 }
0005ce c0f3      	RJMP _0x20A0004
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 0247 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 0248     LCD_DDR = 0xFF;            // LCD port is output
0005cf efef      	LDI  R30,LOW(255)
0005d0 bbe7      	OUT  0x17,R30
                 ; 0000 0249     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0005d1 98c2      	CBI  0x18,2
                 ; 0000 024A     delay_us(2000 * 16);       // wait for stable power
                +
0005d2 e080     +LDI R24 , LOW ( 64000 )
0005d3 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0005d4 9701     +SBIW R24 , 1
0005d5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 024B     lcdCommand(0x33);          //$33 for 4-bit mode
0005d6 e3a3      	LDI  R26,LOW(51)
0005d7 940e 094f 	CALL SUBOPT_0x1E
                 ; 0000 024C     delay_us(100 * 16);        // wait
                 ; 0000 024D     lcdCommand(0x32);          //$32 for 4-bit mode
0005d9 e3a2      	LDI  R26,LOW(50)
0005da 940e 094f 	CALL SUBOPT_0x1E
                 ; 0000 024E     delay_us(100 * 16);        // wait
                 ; 0000 024F     lcdCommand(0x28);          //$28 for 4-bit mode
0005dc e2a8      	LDI  R26,LOW(40)
0005dd 940e 094f 	CALL SUBOPT_0x1E
                 ; 0000 0250     delay_us(100 * 16);        // wait
                 ; 0000 0251     lcdCommand(0x0c);          // display on, cursor off
0005df 940e 08a8 	CALL SUBOPT_0x5
                 ; 0000 0252     delay_us(100 * 16);        // wait
                 ; 0000 0253     lcdCommand(0x01);          // clear LCD
0005e1 e0a1      	LDI  R26,LOW(1)
0005e2 dfd8      	RCALL _lcdCommand
                 ; 0000 0254     delay_us(2000 * 16);       // wait
                +
0005e3 e080     +LDI R24 , LOW ( 64000 )
0005e4 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0005e5 9701     +SBIW R24 , 1
0005e6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0255     lcdCommand(0x06);          // shift cursor right
0005e7 e0a6      	LDI  R26,LOW(6)
0005e8 940e 094f 	CALL SUBOPT_0x1E
                 ; 0000 0256     delay_us(100 * 16);
                 ; 0000 0257 }
0005ea 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0259 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 025A     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 025B     lcdCommand(firstCharAdr[y - 1] + x - 1);
0005eb 93aa      	ST   -Y,R26
0005ec 9724      	SBIW R28,4
0005ed e8e0      	LDI  R30,LOW(128)
0005ee 83e8      	ST   Y,R30
0005ef ece0      	LDI  R30,LOW(192)
0005f0 83e9      	STD  Y+1,R30
0005f1 e9e4      	LDI  R30,LOW(148)
0005f2 83ea      	STD  Y+2,R30
0005f3 ede4      	LDI  R30,LOW(212)
0005f4 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
0005f5 81ec      	LDD  R30,Y+4
0005f6 e0f0      	LDI  R31,0
0005f7 9731      	SBIW R30,1
0005f8 01de      	MOVW R26,R28
0005f9 0fae      	ADD  R26,R30
0005fa 1fbf      	ADC  R27,R31
0005fb 91ec      	LD   R30,X
0005fc 81ad      	LDD  R26,Y+5
0005fd 0fae      	ADD  R26,R30
0005fe 50a1      	SUBI R26,LOW(1)
0005ff 940e 094f 	CALL SUBOPT_0x1E
                 ; 0000 025C     delay_us(100 * 16);
                 ; 0000 025D }
000601 9626      	ADIW R28,6
000602 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 025F {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0260     unsigned char i = 0;
                 ; 0000 0261     while (str[i] != 0)
000603 93ba      	ST   -Y,R27
000604 93aa      	ST   -Y,R26
000605 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000606 e010      	LDI  R17,0
                 _0x9C:
000607 81a9      	LDD  R26,Y+1
000608 81ba      	LDD  R27,Y+1+1
000609 27ee      	CLR  R30
00060a 0fa1      	ADD  R26,R17
00060b 1fbe      	ADC  R27,R30
00060c 91ec      	LD   R30,X
00060d 30e0      	CPI  R30,0
00060e f049      	BREQ _0x9E
                 ; 0000 0262     {
                 ; 0000 0263         lcdData(str[i]);
00060f 81a9      	LDD  R26,Y+1
000610 81ba      	LDD  R27,Y+1+1
000611 27ee      	CLR  R30
000612 0fa1      	ADD  R26,R17
000613 1fbe      	ADC  R27,R30
000614 91ac      	LD   R26,X
000615 dfb1      	RCALL _lcdData
                 ; 0000 0264         i++;
000616 5f1f      	SUBI R17,-1
                 ; 0000 0265     }
000617 cfef      	RJMP _0x9C
                 _0x9E:
                 ; 0000 0266 }
000618 8118      	LDD  R17,Y+0
000619 c0a1      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 0269 {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 026A     unsigned char temperatureVal = 0;
                 ; 0000 026B     unsigned char temperatureRep[3];
                 ; 0000 026C 
                 ; 0000 026D     ADMUX = 0xE0;
00061a 9723      	SBIW R28,3
00061b 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
00061c e010      	LDI  R17,0
00061d eee0      	LDI  R30,LOW(224)
00061e b9e7      	OUT  0x7,R30
                 ; 0000 026E     ADCSRA = 0x87;
00061f e8e7      	LDI  R30,LOW(135)
000620 b9e6      	OUT  0x6,R30
                 ; 0000 026F 
                 ; 0000 0270     lcdCommand(0x01);
000621 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0271     lcd_gotoxy(1, 1);
                 ; 0000 0272     lcd_print("temperature(C):");
                +
000623 e4a7     +LDI R26 , LOW ( _0x9F + ( 0 ) )
000624 e0b5     +LDI R27 , HIGH ( _0x9F + ( 0 ) )
                 	__POINTW2MN _0x9F,0
000625 dfdd      	RCALL _lcd_print
                 ; 0000 0273 
                 ; 0000 0274     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xA0:
000626 940e 08b0 	CALL SUBOPT_0x6
000628 f4f1      	BRNE _0xA2
                 ; 0000 0275     {
                 ; 0000 0276         ADCSRA |= (1 << ADSC);
000629 9a36      	SBI  0x6,6
                 ; 0000 0277         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xA3:
00062a 9b34      	SBIS 0x6,4
                 ; 0000 0278             ;
00062b cffe      	RJMP _0xA3
                 ; 0000 0279         if (ADCH != temperatureVal)
00062c b1e5      	IN   R30,0x5
00062d 171e      	CP   R17,R30
00062e f099      	BREQ _0xA6
                 ; 0000 027A         {
                 ; 0000 027B             temperatureVal = ADCH;
00062f b115      	IN   R17,5
                 ; 0000 027C             itoa(temperatureVal, temperatureRep);
000630 2fe1      	MOV  R30,R17
000631 e0f0      	LDI  R31,0
000632 93fa      	ST   -Y,R31
000633 93ea      	ST   -Y,R30
000634 01de      	MOVW R26,R28
000635 9613      	ADIW R26,3
000636 940e 0824 	CALL _itoa
                 ; 0000 027D             lcd_gotoxy(17, 1);
000638 e1e1      	LDI  R30,LOW(17)
000639 93ea      	ST   -Y,R30
00063a e0a1      	LDI  R26,LOW(1)
00063b dfaf      	RCALL _lcd_gotoxy
                 ; 0000 027E             lcd_print(temperatureRep);
00063c 01de      	MOVW R26,R28
00063d 9611      	ADIW R26,1
00063e dfc4      	RCALL _lcd_print
                 ; 0000 027F             lcd_print(" ");
                +
00063f e5a7     +LDI R26 , LOW ( _0x9F + ( 16 ) )
000640 e0b5     +LDI R27 , HIGH ( _0x9F + ( 16 ) )
                 	__POINTW2MN _0x9F,16
000641 dfc1      	RCALL _lcd_print
                 ; 0000 0280         }
                 ; 0000 0281         delay_ms(500);
                 _0xA6:
000642 efa4      	LDI  R26,LOW(500)
000643 e0b1      	LDI  R27,HIGH(500)
000644 940e 0976 	CALL _delay_ms
                 ; 0000 0282     }
000646 cfdf      	RJMP _0xA0
                 _0xA2:
                 ; 0000 0283 
                 ; 0000 0284     ADCSRA = 0x0;
000647 e0e0      	LDI  R30,LOW(0)
000648 b9e6      	OUT  0x6,R30
                 ; 0000 0285 }
000649 8118      	LDD  R17,Y+0
00064a 9624      	ADIW R28,4
00064b 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x9F:
000547           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 0288 {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 0289 
                 ; 0000 028A     while (stage == STAGE_INIT_MENU)
                 _0xA7:
00064c 2c04      	MOV  R0,R4
00064d 2805      	OR   R0,R5
00064e f5e1      	BRNE _0xA9
                 ; 0000 028B     {
                 ; 0000 028C         lcdCommand(0x01);
00064f 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 028D         lcd_gotoxy(1, 1);
                 ; 0000 028E         if (page_num == 0)
000651 2077      	TST  R7
000652 f481      	BRNE _0xAA
                 ; 0000 028F         {
                 ; 0000 0290             lcd_print("1: Attendance Initialization");
                +
000653 e5a9     +LDI R26 , LOW ( _0xAB + ( 0 ) )
000654 e0b5     +LDI R27 , HIGH ( _0xAB + ( 0 ) )
                 	__POINTW2MN _0xAB,0
000655 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0291             lcd_gotoxy(1, 2);
                 ; 0000 0292             lcd_print("2: Student Management");
                +
000657 e7a6     +LDI R26 , LOW ( _0xAB + ( 29 ) )
000658 e0b5     +LDI R27 , HIGH ( _0xAB + ( 29 ) )
                 	__POINTW2MN _0xAB,29
000659 dfa9      	RCALL _lcd_print
                 ; 0000 0293             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xAC:
00065a 2077      	TST  R7
00065b f421      	BRNE _0xAF
00065c 2400      	CLR  R0
00065d 1404      	CP   R0,R4
00065e 0405      	CPC  R0,R5
00065f f009      	BREQ _0xB0
                 _0xAF:
000660 c001      	RJMP _0xAE
                 _0xB0:
                 ; 0000 0294                 ;
000661 cff8      	RJMP _0xAC
                 _0xAE:
                 ; 0000 0295         }
                 ; 0000 0296         else if (page_num == 1)
000662 c027      	RJMP _0xB1
                 _0xAA:
000663 e0e1      	LDI  R30,LOW(1)
000664 15e7      	CP   R30,R7
000665 f489      	BRNE _0xB2
                 ; 0000 0297         {
                 ; 0000 0298             lcd_print("3: View Present Students ");
                +
000666 e8ac     +LDI R26 , LOW ( _0xAB + ( 51 ) )
000667 e0b5     +LDI R27 , HIGH ( _0xAB + ( 51 ) )
                 	__POINTW2MN _0xAB,51
000668 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 0299             lcd_gotoxy(1, 2);
                 ; 0000 029A             lcd_print("4: Temperature Monitoring");
                +
00066a eaa6     +LDI R26 , LOW ( _0xAB + ( 77 ) )
00066b e0b5     +LDI R27 , HIGH ( _0xAB + ( 77 ) )
                 	__POINTW2MN _0xAB,77
00066c df96      	RCALL _lcd_print
                 ; 0000 029B             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0xB3:
00066d e0e1      	LDI  R30,LOW(1)
00066e 15e7      	CP   R30,R7
00066f f421      	BRNE _0xB6
000670 2400      	CLR  R0
000671 1404      	CP   R0,R4
000672 0405      	CPC  R0,R5
000673 f009      	BREQ _0xB7
                 _0xB6:
000674 c001      	RJMP _0xB5
                 _0xB7:
                 ; 0000 029C                 ;
000675 cff7      	RJMP _0xB3
                 _0xB5:
                 ; 0000 029D         }
                 ; 0000 029E         else if (page_num == 2)
000676 c013      	RJMP _0xB8
                 _0xB2:
000677 e0e2      	LDI  R30,LOW(2)
000678 15e7      	CP   R30,R7
000679 f481      	BRNE _0xB9
                 ; 0000 029F         {
                 ; 0000 02A0             lcd_print("5: Retrieve Student Data");
                +
00067a eca0     +LDI R26 , LOW ( _0xAB + ( 103 ) )
00067b e0b5     +LDI R27 , HIGH ( _0xAB + ( 103 ) )
                 	__POINTW2MN _0xAB,103
00067c 940e 0894 	CALL SUBOPT_0x2
                 ; 0000 02A1             lcd_gotoxy(1, 2);
                 ; 0000 02A2             lcd_print("6: Traffic Monitoring");
                +
00067e eda9     +LDI R26 , LOW ( _0xAB + ( 128 ) )
00067f e0b5     +LDI R27 , HIGH ( _0xAB + ( 128 ) )
                 	__POINTW2MN _0xAB,128
000680 df82      	RCALL _lcd_print
                 ; 0000 02A3             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0xBA:
000681 e0e2      	LDI  R30,LOW(2)
000682 15e7      	CP   R30,R7
000683 f421      	BRNE _0xBD
000684 2400      	CLR  R0
000685 1404      	CP   R0,R4
000686 0405      	CPC  R0,R5
000687 f009      	BREQ _0xBE
                 _0xBD:
000688 c001      	RJMP _0xBC
                 _0xBE:
                 ; 0000 02A4                 ;
000689 cff7      	RJMP _0xBA
                 _0xBC:
                 ; 0000 02A5         }
                 ; 0000 02A6     }
                 _0xB9:
                 _0xB8:
                 _0xB1:
00068a cfc1      	RJMP _0xA7
                 _0xA9:
                 ; 0000 02A7 }
00068b 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xAB:
000559           	.BYTE 0x96
                 ;
                 ;void clear_eeprom()
                 ; 0000 02AA {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 02AB     unsigned int i;
                 ; 0000 02AC 
                 ; 0000 02AD     for (i = 0; i <= 1023; i++)
00068c 931a      	ST   -Y,R17
00068d 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00068e e000     +LDI R16 , LOW ( 0 )
00068f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC0:
                +
000690 3000     +CPI R16 , LOW ( 1024 )
000691 e0e4     +LDI R30 , HIGH ( 1024 )
000692 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000693 f478      	BRSH _0xC1
                 ; 0000 02AE     {
                 ; 0000 02AF         // Wait for the previous write to complete
                 ; 0000 02B0         while (EECR & (1 << EEWE))
                 _0xC2:
000694 99e1      	SBIC 0x1C,1
                 ; 0000 02B1             ;
000695 cffe      	RJMP _0xC2
                 ; 0000 02B2 
                 ; 0000 02B3         // Set up address registers
                 ; 0000 02B4         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000696 2fe1      	MOV  R30,R17
000697 70f0      	ANDI R31,HIGH(0x0)
000698 70e3      	ANDI R30,LOW(0x3)
000699 bbef      	OUT  0x1F,R30
                 ; 0000 02B5         EEARL = i & 0xFF;        // Low byte (bits 0-7)
00069a 2fe0      	MOV  R30,R16
00069b bbee      	OUT  0x1E,R30
                 ; 0000 02B6 
                 ; 0000 02B7         // Set up data register
                 ; 0000 02B8         EEDR = 0; // Write 0 to EEPROM
00069c e0e0      	LDI  R30,LOW(0)
00069d bbed      	OUT  0x1D,R30
                 ; 0000 02B9 
                 ; 0000 02BA         // Enable write
                 ; 0000 02BB         EECR |= (1 << EEMWE); // Master write enable
00069e 9ae2      	SBI  0x1C,2
                 ; 0000 02BC         EECR |= (1 << EEWE);  // Start EEPROM write
00069f 9ae1      	SBI  0x1C,1
                 ; 0000 02BD     }
                +
0006a0 5f0f     +SUBI R16 , LOW ( - 1 )
0006a1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006a2 cfed      	RJMP _0xC0
                 _0xC1:
                 ; 0000 02BE }
0006a3 9109      	LD   R16,Y+
0006a4 9119      	LD   R17,Y+
0006a5 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 02C1 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 02C2     unsigned char x;
                 ; 0000 02C3     // Wait for the previous write to complete
                 ; 0000 02C4     while (EECR & (1 << EEWE))
0006a6 93ba      	ST   -Y,R27
0006a7 93aa      	ST   -Y,R26
0006a8 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0xC5:
0006a9 99e1      	SBIC 0x1C,1
                 ; 0000 02C5         ;
0006aa cffe      	RJMP _0xC5
                 ; 0000 02C6 
                 ; 0000 02C7     // Set up address registers
                 ; 0000 02C8     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0006ab 940e 0956 	CALL SUBOPT_0x1F
                 ; 0000 02C9     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02CA     EECR |= (1 << EERE);        // Read Enable
0006ad 9ae0      	SBI  0x1C,0
                 ; 0000 02CB     x = EEDR;
0006ae b31d      	IN   R17,29
                 ; 0000 02CC     return x;
0006af 2fe1      	MOV  R30,R17
0006b0 8118      	LDD  R17,Y+0
0006b1 c009      	RJMP _0x20A0005
                 ; 0000 02CD }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 02D0 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 02D1     // Wait for the previous write to complete
                 ; 0000 02D2     while (EECR & (1 << EEWE))
0006b2 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0xC8:
0006b3 99e1      	SBIC 0x1C,1
                 ; 0000 02D3         ;
0006b4 cffe      	RJMP _0xC8
                 ; 0000 02D4 
                 ; 0000 02D5     // Set up address registers
                 ; 0000 02D6     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0006b5 940e 0956 	CALL SUBOPT_0x1F
                 ; 0000 02D7     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02D8 
                 ; 0000 02D9     // Set up data register
                 ; 0000 02DA     EEDR = value; // Write 0 to EEPROM
0006b7 81e8      	LD   R30,Y
0006b8 bbed      	OUT  0x1D,R30
                 ; 0000 02DB 
                 ; 0000 02DC     // Enable write
                 ; 0000 02DD     EECR |= (1 << EEMWE); // Master write enable
0006b9 9ae2      	SBI  0x1C,2
                 ; 0000 02DE     EECR |= (1 << EEWE);  // Start EEPROM write
0006ba 9ae1      	SBI  0x1C,1
                 ; 0000 02DF }
                 _0x20A0005:
0006bb 9623      	ADIW R28,3
0006bc 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 02E2 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 02E3     while (!(UCSRA & (1 << UDRE)))
0006bd 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0xCB:
0006be 9b5d      	SBIS 0xB,5
                 ; 0000 02E4         ;
0006bf cffe      	RJMP _0xCB
                 ; 0000 02E5     UDR = data;
0006c0 81e8      	LD   R30,Y
0006c1 b9ec      	OUT  0xC,R30
                 ; 0000 02E6 }
                 _0x20A0004:
0006c2 9621      	ADIW R28,1
0006c3 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 02E9 {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 02EA     UBRRL = (unsigned char)ubrr;
0006c4 93ba      	ST   -Y,R27
0006c5 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
0006c6 81e8      	LD   R30,Y
0006c7 b9e9      	OUT  0x9,R30
                 ; 0000 02EB     UBRRH = (unsigned char)(ubrr >> 8);
0006c8 81e9      	LDD  R30,Y+1
0006c9 70f0      	ANDI R31,HIGH(0x0)
0006ca bde0      	OUT  0x20,R30
                 ; 0000 02EC     UCSRB = (1 << RXEN) | (1 << TXEN);
0006cb e1e8      	LDI  R30,LOW(24)
0006cc b9ea      	OUT  0xA,R30
                 ; 0000 02ED     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
0006cd e0e6      	LDI  R30,LOW(6)
0006ce bde0      	OUT  0x20,R30
                 ; 0000 02EE }
0006cf 9622      	ADIW R28,2
0006d0 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 02F1 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 02F2     unsigned char st_counts, i, j;
                 ; 0000 02F3     char temp[10];
                 ; 0000 02F4 
                 ; 0000 02F5     st_counts = read_byte_from_eeprom(0x0);
0006d1 972a      	SBIW R28,10
0006d2 940e 0b4b 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
0006d4 940e 08d5 	CALL SUBOPT_0xB
0006d6 2f1e      	MOV  R17,R30
                 ; 0000 02F6 
                 ; 0000 02F7     for (i = 0; i < st_counts; i++)
0006d7 e000      	LDI  R16,LOW(0)
                 _0xCF:
0006d8 1701      	CP   R16,R17
0006d9 f5e0      	BRSH _0xD0
                 ; 0000 02F8     {
                 ; 0000 02F9         memset(temp, 0, 10);
0006da 01fe      	MOVW R30,R28
0006db 9634      	ADIW R30,4
0006dc 93fa      	ST   -Y,R31
0006dd 93ea      	ST   -Y,R30
0006de e0e0      	LDI  R30,LOW(0)
0006df 93ea      	ST   -Y,R30
0006e0 e0aa      	LDI  R26,LOW(10)
0006e1 e0b0      	LDI  R27,0
0006e2 940e 0852 	CALL _memset
                 ; 0000 02FA         for (j = 0; j < 8; j++)
0006e4 e030      	LDI  R19,LOW(0)
                 _0xD2:
0006e5 3038      	CPI  R19,8
0006e6 f4a8      	BRSH _0xD3
                 ; 0000 02FB         {
                 ; 0000 02FC             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0006e7 2fe3      	MOV  R30,R19
0006e8 e0f0      	LDI  R31,0
0006e9 01de      	MOVW R26,R28
0006ea 9614      	ADIW R26,4
0006eb 0fea      	ADD  R30,R26
0006ec 1ffb      	ADC  R31,R27
0006ed 93ff      	PUSH R31
0006ee 93ef      	PUSH R30
0006ef 2fa3      	MOV  R26,R19
0006f0 27bb      	CLR  R27
0006f1 2fe0      	MOV  R30,R16
0006f2 940e 0925 	CALL SUBOPT_0x19
0006f4 0fae      	ADD  R26,R30
0006f5 1fbf      	ADC  R27,R31
0006f6 dfaf      	RCALL _read_byte_from_eeprom
0006f7 91af      	POP  R26
0006f8 91bf      	POP  R27
0006f9 93ec      	ST   X,R30
                 ; 0000 02FD         }
0006fa 5f3f      	SUBI R19,-1
0006fb cfe9      	RJMP _0xD2
                 _0xD3:
                 ; 0000 02FE         temp[j] = '\0';
0006fc 2fe3      	MOV  R30,R19
0006fd e0f0      	LDI  R31,0
0006fe 01de      	MOVW R26,R28
0006ff 9614      	ADIW R26,4
000700 0fae      	ADD  R26,R30
000701 1fbf      	ADC  R27,R31
000702 e0e0      	LDI  R30,LOW(0)
000703 93ec      	ST   X,R30
                 ; 0000 02FF         if (strncmp(temp, buffer , 8) == 0)
000704 01fe      	MOVW R30,R28
000705 9634      	ADIW R30,4
000706 93fa      	ST   -Y,R31
000707 93ea      	ST   -Y,R30
000708 e2e9      	LDI  R30,LOW(_buffer)
000709 e0f6      	LDI  R31,HIGH(_buffer)
00070a 93fa      	ST   -Y,R31
00070b 93ea      	ST   -Y,R30
00070c e0a8      	LDI  R26,LOW(8)
00070d 940e 086e 	CALL _strncmp
00070f 30e0      	CPI  R30,0
000710 f419      	BRNE _0xD4
                 ; 0000 0300             return (i + 1);
000711 2fe0      	MOV  R30,R16
000712 5fef      	SUBI R30,-LOW(1)
000713 c003      	RJMP _0x20A0003
                 ; 0000 0301     }
                 _0xD4:
000714 5f0f      	SUBI R16,-1
000715 cfc2      	RJMP _0xCF
                 _0xD0:
                 ; 0000 0302 
                 ; 0000 0303     return 0;
000716 e0e0      	LDI  R30,LOW(0)
                 _0x20A0003:
000717 940e 0b52 	CALL __LOADLOCR4
000719 962e      	ADIW R28,14
00071a 9508      	RET
                 ; 0000 0304 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 0307 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 0308     unsigned char st_counts, i, j;
                 ; 0000 0309     unsigned char temp;
                 ; 0000 030A 
                 ; 0000 030B     st_counts = read_byte_from_eeprom(0x0);
00071b 93aa      	ST   -Y,R26
00071c 940e 0b4b 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
00071e 940e 08d5 	CALL SUBOPT_0xB
000720 2f1e      	MOV  R17,R30
                 ; 0000 030C 
                 ; 0000 030D     for (i = index; i <= st_counts; i++)
000721 810c      	LDD  R16,Y+4
                 _0xD6:
000722 1710      	CP   R17,R16
000723 f0d8      	BRLO _0xD7
                 ; 0000 030E     {
                 ; 0000 030F         for (j = 0; j < 8; j++)
000724 e030      	LDI  R19,LOW(0)
                 _0xD9:
000725 3038      	CPI  R19,8
000726 f4b0      	BRSH _0xDA
                 ; 0000 0310         {
                 ; 0000 0311             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
000727 2fa3      	MOV  R26,R19
000728 27bb      	CLR  R27
000729 2fe0      	MOV  R30,R16
00072a 940e 0925 	CALL SUBOPT_0x19
00072c 0fae      	ADD  R26,R30
00072d 1fbf      	ADC  R27,R31
00072e df77      	RCALL _read_byte_from_eeprom
00072f 2f2e      	MOV  R18,R30
                 ; 0000 0312             write_byte_to_eeprom(j + ((i) * 8), temp);
000730 2fa3      	MOV  R26,R19
000731 27bb      	CLR  R27
000732 e0e8      	LDI  R30,LOW(8)
000733 9fe0      	MUL  R30,R16
000734 01f0      	MOVW R30,R0
000735 0fea      	ADD  R30,R26
000736 1ffb      	ADC  R31,R27
000737 93fa      	ST   -Y,R31
000738 93ea      	ST   -Y,R30
000739 2fa2      	MOV  R26,R18
00073a df77      	RCALL _write_byte_to_eeprom
                 ; 0000 0313         }
00073b 5f3f      	SUBI R19,-1
00073c cfe8      	RJMP _0xD9
                 _0xDA:
                 ; 0000 0314     }
00073d 5f0f      	SUBI R16,-1
00073e cfe3      	RJMP _0xD6
                 _0xD7:
                 ; 0000 0315     write_byte_to_eeprom(0x0, st_counts - 1);
00073f e0e0      	LDI  R30,LOW(0)
000740 e0f0      	LDI  R31,HIGH(0)
000741 93fa      	ST   -Y,R31
000742 93ea      	ST   -Y,R30
000743 2fa1      	MOV  R26,R17
000744 50a1      	SUBI R26,LOW(1)
000745 df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 0316 }
000746 940e 0b52 	CALL __LOADLOCR4
000748 940c 0860 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 0319 {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 031A     US_DDR |= (1 << US_TRIG_POS); // Trigger pin as output
00074a 9a8d      	SBI  0x11,5
                 ; 0000 031B     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
00074b 988e      	CBI  0x11,6
                 ; 0000 031C }
00074c 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 031F {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 0320     US_PORT |= (1 << US_TRIG_POS); // Set trigger pin high
00074d 9a95      	SBI  0x12,5
                 ; 0000 0321     delay_us(15);                  // Wait for 15 microseconds
                +
00074e e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
00074f 958a     +DEC R24
000750 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 0322     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000751 9895      	CBI  0x12,5
                 ; 0000 0323 }
000752 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0326 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 0327     uint32_t i, result;
                 ; 0000 0328 
                 ; 0000 0329     // Wait for rising edge on Echo pin
                 ; 0000 032A     for (i = 0; i < 600000; i++) {
000753 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
000754 e0e0      	LDI  R30,LOW(0)
                +
000755 83ec     +STD Y + 4 , R30
000756 83ed     +STD Y + 4 + 1 , R30
000757 83ee     +STD Y + 4 + 2 , R30
000758 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0xDC:
000759 940e 095d 	CALL SUBOPT_0x20
00075b f430      	BRSH _0xDD
                 ; 0000 032B         if (!(US_PIN & (1 << US_ECHO_POS)))
00075c 9b86      	SBIS 0x10,6
                 ; 0000 032C             continue;
00075d c001      	RJMP _0xDB
                 ; 0000 032D         else
                 ; 0000 032E             break;
00075e c003      	RJMP _0xDD
                 ; 0000 032F     }
                 _0xDB:
00075f 940e 0969 	CALL SUBOPT_0x21
000761 cff7      	RJMP _0xDC
                 _0xDD:
                 ; 0000 0330 
                 ; 0000 0331     if (i == 600000)
000762 940e 095d 	CALL SUBOPT_0x20
000764 f419      	BRNE _0xE0
                 ; 0000 0332         return US_ERROR; // Timeout error if no rising edge detected
000765 efef      	LDI  R30,LOW(65535)
000766 efff      	LDI  R31,HIGH(65535)
000767 c036      	RJMP _0x20A0002
                 ; 0000 0333 
                 ; 0000 0334     // Start timer with prescaler 8
                 ; 0000 0335     TCCR1A = 0x00;
                 _0xE0:
000768 e0e0      	LDI  R30,LOW(0)
000769 bdef      	OUT  0x2F,R30
                 ; 0000 0336     TCCR1B = (1 << CS11) | (1 << CS10);
00076a e0e3      	LDI  R30,LOW(3)
00076b bdee      	OUT  0x2E,R30
                 ; 0000 0337     TCNT1 = 0x00; // Reset timer
00076c e0e0      	LDI  R30,LOW(0)
00076d e0f0      	LDI  R31,HIGH(0)
00076e bdfd      	OUT  0x2C+1,R31
00076f bdec      	OUT  0x2C,R30
                 ; 0000 0338 
                 ; 0000 0339     // Wait for falling edge on Echo pin
                 ; 0000 033A     for (i = 0; i < 600000; i++) {
                +
000770 83ec     +STD Y + 4 , R30
000771 83ed     +STD Y + 4 + 1 , R30
000772 83ee     +STD Y + 4 + 2 , R30
000773 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0xE2:
000774 940e 095d 	CALL SUBOPT_0x20
000776 f470      	BRSH _0xE3
                 ; 0000 033B         if (!(US_PIN & (1 << US_ECHO_POS)))
000777 9b86      	SBIS 0x10,6
                 ; 0000 033C             break;  // Falling edge detected
000778 c00c      	RJMP _0xE3
                 ; 0000 033D         if (TCNT1 > 60000)
000779 b5ec      	IN   R30,0x2C
00077a b5fd      	IN   R31,0x2C+1
00077b 36e1      	CPI  R30,LOW(0xEA61)
00077c eeaa      	LDI  R26,HIGH(0xEA61)
00077d 07fa      	CPC  R31,R26
00077e f018      	BRLO _0xE5
                 ; 0000 033E             return US_NO_OBSTACLE; // No obstacle in range
00077f efee      	LDI  R30,LOW(65534)
000780 efff      	LDI  R31,HIGH(65534)
000781 c01c      	RJMP _0x20A0002
                 ; 0000 033F     }
                 _0xE5:
000782 940e 0969 	CALL SUBOPT_0x21
000784 cfef      	RJMP _0xE2
                 _0xE3:
                 ; 0000 0340 
                 ; 0000 0341     result = TCNT1; // Capture timer value
000785 b5ec      	IN   R30,0x2C
000786 b5fd      	IN   R31,0x2C+1
000787 2766      	CLR  R22
000788 2777      	CLR  R23
000789 940e 0b44 	CALL __PUTD1S0
                 ; 0000 0342     TCCR1B = 0x00; // Stop timer
00078b e0e0      	LDI  R30,LOW(0)
00078c bdee      	OUT  0x2E,R30
                 ; 0000 0343 
                 ; 0000 0344     if (result > 60000)
00078d 940e 0b3f 	CALL __GETD2S0
                +
00078f 36a1     +CPI R26 , LOW ( 0xEA61 )
000790 eeea     +LDI R30 , HIGH ( 0xEA61 )
000791 07be     +CPC R27 , R30
000792 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000793 078e     +CPC R24 , R30
000794 e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000795 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000796 f018      	BRLO _0xE6
                 ; 0000 0345         return US_NO_OBSTACLE;
000797 efee      	LDI  R30,LOW(65534)
000798 efff      	LDI  R31,HIGH(65534)
000799 c004      	RJMP _0x20A0002
                 ; 0000 0346     else
                 _0xE6:
                 ; 0000 0347         return (result >> 1); // Return the measured pulse width
00079a 940e 0b3a 	CALL __GETD1S0
00079c 940e 0b0f 	CALL __LSRD1
                 ; 0000 0348 }
                 _0x20A0002:
00079e 9628      	ADIW R28,8
00079f 9508      	RET
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 034B {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 034C     char numberString[16];
                 ; 0000 034D     uint16_t pulseWidth;    // Pulse width from echo
                 ; 0000 034E     int distance, previous_distance = -1;
                 ; 0000 034F     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0350 
                 ; 0000 0351     lcdCommand(0x01);
0007a0 9760      	SBIW R28,16
0007a1 940e 0b49 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
0007a3 ef4f     +LDI R20 , LOW ( - 1 )
0007a4 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
0007a5 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 0352     lcd_gotoxy(1, 1);
                 ; 0000 0353     lcd_print("Distance: ");
                +
0007a7 eeaf     +LDI R26 , LOW ( _0xE9 + ( 0 ) )
0007a8 e0b5     +LDI R27 , HIGH ( _0xE9 + ( 0 ) )
                 	__POINTW2MN _0xE9,0
0007a9 de59      	RCALL _lcd_print
                 ; 0000 0354 
                 ; 0000 0355     while(stage == STAGE_TRAFFIC_MONITORING){
                 _0xEA:
0007aa 940e 08ee 	CALL SUBOPT_0x10
0007ac f009      	BREQ PC+2
0007ad c072      	RJMP _0xEC
                 ; 0000 0356         HCSR04Trigger();              // Send trigger pulse
0007ae df9e      	RCALL _HCSR04Trigger
                 ; 0000 0357         pulseWidth = GetPulseWidth();  // Measure echo pulse
0007af dfa3      	RCALL _GetPulseWidth
0007b0 018f      	MOVW R16,R30
                 ; 0000 0358 
                 ; 0000 0359         if (pulseWidth == US_ERROR) {
0007b1 efef      	LDI  R30,LOW(65535)
0007b2 efff      	LDI  R31,HIGH(65535)
0007b3 17e0      	CP   R30,R16
0007b4 07f1      	CPC  R31,R17
0007b5 f429      	BRNE _0xED
                 ; 0000 035A             lcdCommand(0x01);
0007b6 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 035B             lcd_gotoxy(1, 1);
                 ; 0000 035C             lcd_print("Error");        // Display error message
                +
0007b8 efaa     +LDI R26 , LOW ( _0xE9 + ( 11 ) )
0007b9 e0b5     +LDI R27 , HIGH ( _0xE9 + ( 11 ) )
                 	__POINTW2MN _0xE9,11
0007ba c05f      	RJMP _0xF9
                 ; 0000 035D         } else if (pulseWidth == US_NO_OBSTACLE) {
                 _0xED:
0007bb efee      	LDI  R30,LOW(65534)
0007bc efff      	LDI  R31,HIGH(65534)
0007bd 17e0      	CP   R30,R16
0007be 07f1      	CPC  R31,R17
0007bf f429      	BRNE _0xEF
                 ; 0000 035E             lcdCommand(0x01);
0007c0 940e 088c 	CALL SUBOPT_0x1
                 ; 0000 035F             lcd_gotoxy(1, 1);
                 ; 0000 0360             lcd_print("No Obstacle");  // Display no obstacle message
                +
0007c2 e0a0     +LDI R26 , LOW ( _0xE9 + ( 17 ) )
0007c3 e0b6     +LDI R27 , HIGH ( _0xE9 + ( 17 ) )
                 	__POINTW2MN _0xE9,17
0007c4 c055      	RJMP _0xF9
                 ; 0000 0361         } else {
                 _0xEF:
                 ; 0000 0362             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
0007c5 01f8      	MOVW R30,R16
0007c6 2766      	CLR  R22
0007c7 2777      	CLR  R23
0007c8 940e 09e6 	CALL __CDF1
                +
0007ca e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
0007cb e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
0007cc e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
0007cd e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
0007ce 940e 0a69 	CALL __MULF12
0007d0 01df      	MOVW R26,R30
0007d1 01cb      	MOVW R24,R22
                +
0007d2 e0e0     +LDI R30 , LOW ( 0x40000000 )
0007d3 e0f0     +LDI R31 , HIGH ( 0x40000000 )
0007d4 e060     +LDI R22 , BYTE3 ( 0x40000000 )
0007d5 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0007d6 940e 0ab7 	CALL __DIVF21
                +
0007d8 e0a0     +LDI R26 , LOW ( 0x3F000000 )
0007d9 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0007da e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0007db e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0007dc 940e 0a19 	CALL __ADDF12
0007de 940e 09af 	CALL __CFD1
0007e0 019f      	MOVW R18,R30
                 ; 0000 0363 
                 ; 0000 0364             if(distance != previous_distance){
                +
0007e1 1742     +CP R20 , R18
0007e2 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
0007e3 f089      	BREQ _0xF1
                 ; 0000 0365                 previous_distance = distance;
0007e4 01a9      	MOVW R20,R18
                 ; 0000 0366                 // Display distance on LCD
                 ; 0000 0367                 itoa(distance, numberString); // Convert distance to string
0007e5 933a      	ST   -Y,R19
0007e6 932a      	ST   -Y,R18
0007e7 01de      	MOVW R26,R28
0007e8 9618      	ADIW R26,8
0007e9 940e 0824 	CALL _itoa
                 ; 0000 0368                 lcd_gotoxy(11,1);
0007eb e0eb      	LDI  R30,LOW(11)
0007ec 93ea      	ST   -Y,R30
0007ed e0a1      	LDI  R26,LOW(1)
0007ee ddfc      	RCALL _lcd_gotoxy
                 ; 0000 0369                 lcd_print(numberString);
0007ef 01de      	MOVW R26,R28
0007f0 9616      	ADIW R26,6
0007f1 de11      	RCALL _lcd_print
                 ; 0000 036A                 lcd_print(" cm ");
                +
0007f2 e0ac     +LDI R26 , LOW ( _0xE9 + ( 29 ) )
0007f3 e0b6     +LDI R27 , HIGH ( _0xE9 + ( 29 ) )
                 	__POINTW2MN _0xE9,29
0007f4 de0e      	RCALL _lcd_print
                 ; 0000 036B             }
                 ; 0000 036C             // Counting logic based on distance
                 ; 0000 036D             if (distance < 6) {
                 _0xF1:
                +
0007f5 3026     +CPI R18 , LOW ( 6 )
0007f6 e0e0     +LDI R30 , HIGH ( 6 )
0007f7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
0007f8 f40c      	BRGE _0xF2
                 ; 0000 036E                 US_count++;  // Increment count if distance is below threshold
0007f9 9463      	INC  R6
                 ; 0000 036F             }
                 ; 0000 0370 
                 ; 0000 0371 
                 ; 0000 0372             // Update count on LCD only if it changes
                 ; 0000 0373             if (US_count != previous_count) {
                 _0xF2:
0007fa 91e0 0649 	LDS  R30,_previous_count_S0000013000
0007fc 91f0 064a 	LDS  R31,_previous_count_S0000013000+1
0007fe 2da6      	MOV  R26,R6
0007ff e0b0      	LDI  R27,0
000800 17ea      	CP   R30,R26
000801 07fb      	CPC  R31,R27
000802 f0c1      	BREQ _0xF3
                 ; 0000 0374                 previous_count = US_count;
000803 2de6      	MOV  R30,R6
000804 e0f0      	LDI  R31,0
000805 93e0 0649 	STS  _previous_count_S0000013000,R30
000807 93f0 064a 	STS  _previous_count_S0000013000+1,R31
                 ; 0000 0375                 lcd_gotoxy(1, 2); // Move to second line
000809 e0e1      	LDI  R30,LOW(1)
00080a 93ea      	ST   -Y,R30
00080b e0a2      	LDI  R26,LOW(2)
00080c ddde      	RCALL _lcd_gotoxy
                 ; 0000 0376                 itoa(US_count, numberString);
00080d 2de6      	MOV  R30,R6
00080e e0f0      	LDI  R31,0
00080f 93fa      	ST   -Y,R31
000810 93ea      	ST   -Y,R30
000811 01de      	MOVW R26,R28
000812 9618      	ADIW R26,8
000813 940e 0824 	CALL _itoa
                 ; 0000 0377                 lcd_print("Count: ");
                +
000815 e1a1     +LDI R26 , LOW ( _0xE9 + ( 34 ) )
000816 e0b6     +LDI R27 , HIGH ( _0xE9 + ( 34 ) )
                 	__POINTW2MN _0xE9,34
000817 ddeb      	RCALL _lcd_print
                 ; 0000 0378                 lcd_print(numberString);
000818 01de      	MOVW R26,R28
000819 9616      	ADIW R26,6
                 _0xF9:
00081a dde8      	RCALL _lcd_print
                 ; 0000 0379             }
                 ; 0000 037A         }
                 _0xF3:
                 ; 0000 037B         delay_ms(100);
00081b e6a4      	LDI  R26,LOW(100)
00081c e0b0      	LDI  R27,0
00081d 940e 0976 	CALL _delay_ms
                 ; 0000 037C     }
00081f cf8a      	RJMP _0xEA
                 _0xEC:
                 ; 0000 037D }
000820 940e 0b50 	CALL __LOADLOCR6
000822 9666      	ADIW R28,22
000823 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xE9:
0005ef           	.BYTE 0x2A
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000824 93ba      	ST   -Y,R27
000825 93aa      	ST   -Y,R26
000826 91a9          ld   r26,y+
000827 91b9          ld   r27,y+
000828 91e9          ld   r30,y+
000829 91f9          ld   r31,y+
00082a 9630          adiw r30,0
00082b f42a          brpl __itoa0
00082c 95e0          com  r30
00082d 95f0          com  r31
00082e 9631          adiw r30,1
00082f e26d          ldi  r22,'-'
000830 936d          st   x+,r22
                 __itoa0:
000831 94e8          clt
000832 e180          ldi  r24,low(10000)
000833 e297          ldi  r25,high(10000)
000834 d00d          rcall __itoa1
000835 ee88          ldi  r24,low(1000)
000836 e093          ldi  r25,high(1000)
000837 d00a          rcall __itoa1
000838 e684          ldi  r24,100
000839 2799          clr  r25
00083a d007          rcall __itoa1
00083b e08a          ldi  r24,10
00083c d005          rcall __itoa1
00083d 2f6e          mov  r22,r30
00083e d010          rcall __itoa5
00083f 2766          clr  r22
000840 936c          st   x,r22
000841 9508          ret
                 
                 __itoa1:
000842 2766          clr	 r22
                 __itoa2:
000843 17e8          cp   r30,r24
000844 07f9          cpc  r31,r25
000845 f020          brlo __itoa3
000846 9563          inc  r22
000847 1be8          sub  r30,r24
000848 0bf9          sbc  r31,r25
000849 f7c9          brne __itoa2
                 __itoa3:
00084a 2366          tst  r22
00084b f411          brne __itoa4
00084c f016          brts __itoa5
00084d 9508          ret
                 __itoa4:
00084e 9468          set
                 __itoa5:
00084f 5d60          subi r22,-0x30
000850 936d          st   x+,r22
000851 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000852 93ba      	ST   -Y,R27
000853 93aa      	ST   -Y,R26
000854 81b9          ldd  r27,y+1
000855 81a8          ld   r26,y
000856 9610          adiw r26,0
000857 f031          breq memset1
000858 81fc          ldd  r31,y+4
000859 81eb          ldd  r30,y+3
00085a 816a          ldd  r22,y+2
                 memset0:
00085b 9361          st   z+,r22
00085c 9711          sbiw r26,1
00085d f7e9          brne memset0
                 memset1:
00085e 81eb          ldd  r30,y+3
00085f 81fc          ldd  r31,y+4
                 _0x20A0001:
000860 9625      	ADIW R28,5
000861 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000862 93ba      	ST   -Y,R27
000863 93aa      	ST   -Y,R26
000864 91a9          ld   r26,y+
000865 91b9          ld   r27,y+
000866 27ee          clr  r30
000867 27ff          clr  r31
                 strlen0:
000868 916d          ld   r22,x+
000869 2366          tst  r22
00086a f011          breq strlen1
00086b 9631          adiw r30,1
00086c cffb          rjmp strlen0
                 strlen1:
00086d 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
00086e 93aa      	ST   -Y,R26
00086f 2766          clr  r22
000870 2777          clr  r23
000871 9189          ld   r24,y+
000872 91e9          ld   r30,y+
000873 91f9          ld   r31,y+
000874 91a9          ld   r26,y+
000875 91b9          ld   r27,y+
                 strncmp0:
000876 2388          tst  r24
000877 f049          breq strncmp1
000878 958a          dec  r24
000879 916d          ld   r22,x+
00087a 9171          ld   r23,z+
00087b 1767          cp   r22,r23
00087c f421          brne strncmp1
00087d 2366          tst  r22
00087e f7b9          brne strncmp0
                 strncmp3:
00087f 27ee          clr  r30
000880 9508          ret
                 strncmp1:
000881 1b67          sub  r22,r23
000882 f3e1          breq strncmp3
000883 e0e1          ldi  r30,1
000884 f408          brcc strncmp2
000885 50e2          subi r30,2
                 strncmp2:
000886 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000619           	.BYTE 0x10
                 _buffer:
000629           	.BYTE 0x20
                 _previous_count_S0000013000:
000649           	.BYTE 0x2
                 __seed_G100:
00064b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000887 e0e1      	LDI  R30,LOW(1)
000888 e0f0      	LDI  R31,HIGH(1)
000889 15e4      	CP   R30,R4
00088a 05f5      	CPC  R31,R5
00088b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:135 WORDS
                 SUBOPT_0x1:
00088c e0a1      	LDI  R26,LOW(1)
00088d 940e 05bb 	CALL _lcdCommand
00088f e0e1      	LDI  R30,LOW(1)
000890 93ea      	ST   -Y,R30
000891 e0a1      	LDI  R26,LOW(1)
000892 940c 05eb 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:77 WORDS
                 SUBOPT_0x2:
000894 940e 0603 	CALL _lcd_print
000896 e0e1      	LDI  R30,LOW(1)
000897 93ea      	ST   -Y,R30
000898 e0a2      	LDI  R26,LOW(2)
000899 940c 05eb 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00089b e0e2      	LDI  R30,LOW(2)
00089c e0f0      	LDI  R31,HIGH(2)
00089d 15e4      	CP   R30,R4
00089e 05f5      	CPC  R31,R5
00089f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0008a0 e0af      	LDI  R26,LOW(15)
0008a1 940e 05bb 	CALL _lcdCommand
                +
0008a3 e880     +LDI R24 , LOW ( 3200 )
0008a4 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0008a5 9701     +SBIW R24 , 1
0008a6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0008a7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
0008a8 e0ac      	LDI  R26,LOW(12)
0008a9 940e 05bb 	CALL _lcdCommand
                +
0008ab e880     +LDI R24 , LOW ( 3200 )
0008ac e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0008ad 9701     +SBIW R24 , 1
0008ae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0008af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0008b0 e0e3      	LDI  R30,LOW(3)
0008b1 e0f0      	LDI  R31,HIGH(3)
0008b2 15e4      	CP   R30,R4
0008b3 05f5      	CPC  R31,R5
0008b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0008b5 e0e4      	LDI  R30,LOW(4)
0008b6 e0f0      	LDI  R31,HIGH(4)
0008b7 15e4      	CP   R30,R4
0008b8 05f5      	CPC  R31,R5
0008b9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x8:
0008ba e2e9      	LDI  R30,LOW(_buffer)
0008bb e0f6      	LDI  R31,HIGH(_buffer)
0008bc 93fa      	ST   -Y,R31
0008bd 93ea      	ST   -Y,R30
0008be e0e0      	LDI  R30,LOW(0)
0008bf 93ea      	ST   -Y,R30
0008c0 e2a0      	LDI  R26,LOW(32)
0008c1 e0b0      	LDI  R27,0
0008c2 940c 0852 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0008c4 e2a9      	LDI  R26,LOW(_buffer)
0008c5 e0b6      	LDI  R27,HIGH(_buffer)
0008c6 940e 0603 	CALL _lcd_print
0008c8 eea8      	LDI  R26,LOW(1000)
0008c9 e0b3      	LDI  R27,HIGH(1000)
0008ca 940c 0976 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0008cc 01f8      	MOVW R30,R16
0008cd 9631      	ADIW R30,1
0008ce 940e 0b08 	CALL __LSLW3
0008d0 0fe2      	ADD  R30,R18
0008d1 1ff3      	ADC  R31,R19
0008d2 01df      	MOVW R26,R30
0008d3 940c 06a6 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0008d5 e0a0      	LDI  R26,LOW(0)
0008d6 e0b0      	LDI  R27,0
0008d7 940c 06a6 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
0008d9 940e 0603 	CALL _lcd_print
0008db eda0      	LDI  R26,LOW(2000)
0008dc e0b7      	LDI  R27,HIGH(2000)
0008dd 940c 0976 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0008df e0e6      	LDI  R30,LOW(6)
0008e0 e0f0      	LDI  R31,HIGH(6)
0008e1 15e4      	CP   R30,R4
0008e2 05f5      	CPC  R31,R5
0008e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0008e4 e0e7      	LDI  R30,LOW(7)
0008e5 e0f0      	LDI  R31,HIGH(7)
0008e6 15e4      	CP   R30,R4
0008e7 05f5      	CPC  R31,R5
0008e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0008e9 e0e8      	LDI  R30,LOW(8)
0008ea e0f0      	LDI  R31,HIGH(8)
0008eb 15e4      	CP   R30,R4
0008ec 05f5      	CPC  R31,R5
0008ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0008ee e0e9      	LDI  R30,LOW(9)
0008ef e0f0      	LDI  R31,HIGH(9)
0008f0 15e4      	CP   R30,R4
0008f1 05f5      	CPC  R31,R5
0008f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
0008f3 bbe5      	OUT  0x15,R30
0008f4 b3e3      	IN   R30,0x13
0008f5 70ef      	ANDI R30,LOW(0xF)
0008f6 2f1e      	MOV  R17,R30
0008f7 301f      	CPI  R17,15
0008f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:231 WORDS
                 SUBOPT_0x12:
0008f9 2fe0      	MOV  R30,R16
0008fa e1a9      	LDI  R26,LOW(_keypad)
0008fb e0b6      	LDI  R27,HIGH(_keypad)
0008fc e0f0      	LDI  R31,0
0008fd 940e 0b0a 	CALL __LSLW2
0008ff 0fae      	ADD  R26,R30
000900 1fbf      	ADC  R27,R31
000901 27ee      	CLR  R30
000902 0fa3      	ADD  R26,R19
000903 1fbe      	ADC  R27,R30
000904 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x13:
000905 e2a9      	LDI  R26,LOW(_buffer)
000906 e0b6      	LDI  R27,HIGH(_buffer)
000907 940c 0862 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000909 5de7      	SUBI R30,LOW(-_buffer)
00090a 4ff9      	SBCI R31,HIGH(-_buffer)
00090b 010f      	MOVW R0,R30
00090c cfec      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00090d 91ec      	LD   R30,X
00090e 01d0      	MOVW R26,R0
00090f 93ec      	ST   X,R30
000910 cff4      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
                +
000911 5de6     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000912 4ff9     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000913 e0a0      	LDI  R26,LOW(0)
000914 83a0      	STD  Z+0,R26
000915 cfe3      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
000916 2fe5      	MOV  R30,R21
000917 e0f0      	LDI  R31,0
000918 9731      	SBIW R30,1
000919 5de7      	SUBI R30,LOW(-_buffer)
00091a 4ff9      	SBCI R31,HIGH(-_buffer)
00091b e0a0      	LDI  R26,LOW(0)
00091c 83a0      	STD  Z+0,R26
00091d e1a0      	LDI  R26,LOW(16)
00091e 940c 05bb 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000920 940e 0603 	CALL _lcd_print
000922 e1a0      	LDI  R26,LOW(16)
000923 940c 05bb 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000925 e0f0      	LDI  R31,0
000926 9631      	ADIW R30,1
000927 940e 0b08 	CALL __LSLW3
000929 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
00092a 9721      	SBIW R28,1
00092b 940e 06d1 	CALL _search_student_code
00092d 83e8      	ST   Y,R30
00092e 81a8      	LD   R26,Y
00092f 30a1      	CPI  R26,LOW(0x1)
000930 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1B:
000931 93aa      	ST   -Y,R26
000932 b3e8      	IN   R30,0x18
000933 70ef      	ANDI R30,LOW(0xF)
000934 2fae      	MOV  R26,R30
000935 81e8      	LD   R30,Y
000936 7fe0      	ANDI R30,LOW(0xF0)
000937 2bea      	OR   R30,R26
000938 bbe8      	OUT  0x18,R30
000939 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
00093a 98c1      	CBI  0x18,1
00093b 9ac2      	SBI  0x18,2
                +
00093c e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
00093d 958a     +DEC R24
00093e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
00093f 98c2      	CBI  0x18,2
000940 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1D:
000941 b3e8      	IN   R30,0x18
000942 70ef      	ANDI R30,LOW(0xF)
000943 2fae      	MOV  R26,R30
000944 81e8      	LD   R30,Y
000945 95e2      	SWAP R30
000946 7fe0      	ANDI R30,0xF0
000947 2bea      	OR   R30,R26
000948 bbe8      	OUT  0x18,R30
000949 9ac2      	SBI  0x18,2
                +
00094a e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
00094b 958a     +DEC R24
00094c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
00094d 98c2      	CBI  0x18,2
00094e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1E:
00094f 940e 05bb 	CALL _lcdCommand
                +
000951 e880     +LDI R24 , LOW ( 3200 )
000952 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000953 9701     +SBIW R24 , 1
000954 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000956 81ea      	LDD  R30,Y+2
000957 70f0      	ANDI R31,HIGH(0x0)
000958 70e3      	ANDI R30,LOW(0x3)
000959 bbef      	OUT  0x1F,R30
00095a 81e9      	LDD  R30,Y+1
00095b bbee      	OUT  0x1E,R30
00095c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x20:
                +
00095d 81ac     +LDD R26 , Y + 4
00095e 81bd     +LDD R27 , Y + 4 + 1
00095f 818e     +LDD R24 , Y + 4 + 2
000960 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000961 3ca0     +CPI R26 , LOW ( 0x927C0 )
000962 e2e7     +LDI R30 , HIGH ( 0x927C0 )
000963 07be     +CPC R27 , R30
000964 e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000965 078e     +CPC R24 , R30
000966 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000967 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000968 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x21:
                +
000969 81ec     +LDD R30 , Y + 4
00096a 81fd     +LDD R31 , Y + 4 + 1
00096b 816e     +LDD R22 , Y + 4 + 2
00096c 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
00096d 5fef     +SUBI R30 , LOW ( - 1 )
00096e 4fff     +SBCI R31 , HIGH ( - 1 )
00096f 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000970 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000971 83ec     +STD Y + 4 , R30
000972 83fd     +STD Y + 4 + 1 , R31
000973 836e     +STD Y + 4 + 2 , R22
000974 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000975 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000976 9610      	adiw r26,0
000977 f039      	breq __delay_ms1
                 __delay_ms0:
000978 95a8      	wdr
                +
000979 ed80     +LDI R24 , LOW ( 0x7D0 )
00097a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00097b 9701     +SBIW R24 , 1
00097c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00097d 9711      	sbiw r26,1
00097e f7c9      	brne __delay_ms0
                 __delay_ms1:
00097f 9508      	ret
                 
                 __ROUND_REPACK:
000980 2355      	TST  R21
000981 f442      	BRPL __REPACK
000982 3850      	CPI  R21,0x80
000983 f411      	BRNE __ROUND_REPACK0
000984 ffe0      	SBRS R30,0
000985 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000986 9631      	ADIW R30,1
000987 1f69      	ADC  R22,R25
000988 1f79      	ADC  R23,R25
000989 f06b      	BRVS __REPACK1
                 
                 __REPACK:
00098a e850      	LDI  R21,0x80
00098b 2757      	EOR  R21,R23
00098c f411      	BRNE __REPACK0
00098d 935f      	PUSH R21
00098e c0c8      	RJMP __ZERORES
                 __REPACK0:
00098f 3f5f      	CPI  R21,0xFF
000990 f031      	BREQ __REPACK1
000991 0f66      	LSL  R22
000992 0c00      	LSL  R0
000993 9557      	ROR  R21
000994 9567      	ROR  R22
000995 2f75      	MOV  R23,R21
000996 9508      	RET
                 __REPACK1:
000997 935f      	PUSH R21
000998 2000      	TST  R0
000999 f00a      	BRMI __REPACK2
00099a c0c8      	RJMP __MAXRES
                 __REPACK2:
00099b c0c1      	RJMP __MINRES
                 
                 __UNPACK:
00099c e850      	LDI  R21,0x80
00099d 2e19      	MOV  R1,R25
00099e 2215      	AND  R1,R21
00099f 0f88      	LSL  R24
0009a0 1f99      	ROL  R25
0009a1 2795      	EOR  R25,R21
0009a2 0f55      	LSL  R21
0009a3 9587      	ROR  R24
                 
                 __UNPACK1:
0009a4 e850      	LDI  R21,0x80
0009a5 2e07      	MOV  R0,R23
0009a6 2205      	AND  R0,R21
0009a7 0f66      	LSL  R22
0009a8 1f77      	ROL  R23
0009a9 2775      	EOR  R23,R21
0009aa 0f55      	LSL  R21
0009ab 9567      	ROR  R22
0009ac 9508      	RET
                 
                 __CFD1U:
0009ad 9468      	SET
0009ae c001      	RJMP __CFD1U0
                 __CFD1:
0009af 94e8      	CLT
                 __CFD1U0:
0009b0 935f      	PUSH R21
0009b1 dff2      	RCALL __UNPACK1
0009b2 3870      	CPI  R23,0x80
0009b3 f018      	BRLO __CFD10
0009b4 3f7f      	CPI  R23,0xFF
0009b5 f408      	BRCC __CFD10
0009b6 c0a0      	RJMP __ZERORES
                 __CFD10:
0009b7 e156      	LDI  R21,22
0009b8 1b57      	SUB  R21,R23
0009b9 f4aa      	BRPL __CFD11
0009ba 9551      	NEG  R21
0009bb 3058      	CPI  R21,8
0009bc f40e      	BRTC __CFD19
0009bd 3059      	CPI  R21,9
                 __CFD19:
0009be f030      	BRLO __CFD17
0009bf efef      	SER  R30
0009c0 efff      	SER  R31
0009c1 ef6f      	SER  R22
0009c2 e77f      	LDI  R23,0x7F
0009c3 f977      	BLD  R23,7
0009c4 c01a      	RJMP __CFD15
                 __CFD17:
0009c5 2777      	CLR  R23
0009c6 2355      	TST  R21
0009c7 f0b9      	BREQ __CFD15
                 __CFD18:
0009c8 0fee      	LSL  R30
0009c9 1fff      	ROL  R31
0009ca 1f66      	ROL  R22
0009cb 1f77      	ROL  R23
0009cc 955a      	DEC  R21
0009cd f7d1      	BRNE __CFD18
0009ce c010      	RJMP __CFD15
                 __CFD11:
0009cf 2777      	CLR  R23
                 __CFD12:
0009d0 3058      	CPI  R21,8
0009d1 f028      	BRLO __CFD13
0009d2 2fef      	MOV  R30,R31
0009d3 2ff6      	MOV  R31,R22
0009d4 2f67      	MOV  R22,R23
0009d5 5058      	SUBI R21,8
0009d6 cff9      	RJMP __CFD12
                 __CFD13:
0009d7 2355      	TST  R21
0009d8 f031      	BREQ __CFD15
                 __CFD14:
0009d9 9576      	LSR  R23
0009da 9567      	ROR  R22
0009db 95f7      	ROR  R31
0009dc 95e7      	ROR  R30
0009dd 955a      	DEC  R21
0009de f7d1      	BRNE __CFD14
                 __CFD15:
0009df 2000      	TST  R0
0009e0 f40a      	BRPL __CFD16
0009e1 d11e      	RCALL __ANEGD1
                 __CFD16:
0009e2 915f      	POP  R21
0009e3 9508      	RET
                 
                 __CDF1U:
0009e4 9468      	SET
0009e5 c001      	RJMP __CDF1U0
                 __CDF1:
0009e6 94e8      	CLT
                 __CDF1U0:
0009e7 9730      	SBIW R30,0
0009e8 4060      	SBCI R22,0
0009e9 4070      	SBCI R23,0
0009ea f0b1      	BREQ __CDF10
0009eb 2400      	CLR  R0
0009ec f026      	BRTS __CDF11
0009ed 2377      	TST  R23
0009ee f412      	BRPL __CDF11
0009ef 9400      	COM  R0
0009f0 d10f      	RCALL __ANEGD1
                 __CDF11:
0009f1 2e17      	MOV  R1,R23
0009f2 e17e      	LDI  R23,30
0009f3 2011      	TST  R1
                 __CDF12:
0009f4 f032      	BRMI __CDF13
0009f5 957a      	DEC  R23
0009f6 0fee      	LSL  R30
0009f7 1fff      	ROL  R31
0009f8 1f66      	ROL  R22
0009f9 1c11      	ROL  R1
0009fa cff9      	RJMP __CDF12
                 __CDF13:
0009fb 2fef      	MOV  R30,R31
0009fc 2ff6      	MOV  R31,R22
0009fd 2d61      	MOV  R22,R1
0009fe 935f      	PUSH R21
0009ff df8a      	RCALL __REPACK
000a00 915f      	POP  R21
                 __CDF10:
000a01 9508      	RET
                 
                 __SWAPACC:
000a02 934f      	PUSH R20
000a03 01af      	MOVW R20,R30
000a04 01fd      	MOVW R30,R26
000a05 01da      	MOVW R26,R20
000a06 01ab      	MOVW R20,R22
000a07 01bc      	MOVW R22,R24
000a08 01ca      	MOVW R24,R20
000a09 2d40      	MOV  R20,R0
000a0a 2c01      	MOV  R0,R1
000a0b 2e14      	MOV  R1,R20
000a0c 914f      	POP  R20
000a0d 9508      	RET
                 
                 __UADD12:
000a0e 0fea      	ADD  R30,R26
000a0f 1ffb      	ADC  R31,R27
000a10 1f68      	ADC  R22,R24
000a11 9508      	RET
                 
                 __NEGMAN1:
000a12 95e0      	COM  R30
000a13 95f0      	COM  R31
000a14 9560      	COM  R22
000a15 5fef      	SUBI R30,-1
000a16 4fff      	SBCI R31,-1
000a17 4f6f      	SBCI R22,-1
000a18 9508      	RET
                 
                 __ADDF12:
000a19 935f      	PUSH R21
000a1a df81      	RCALL __UNPACK
000a1b 3890      	CPI  R25,0x80
000a1c f139      	BREQ __ADDF129
                 
                 __ADDF120:
000a1d 3870      	CPI  R23,0x80
000a1e f121      	BREQ __ADDF128
                 __ADDF121:
000a1f 2f57      	MOV  R21,R23
000a20 1b59      	SUB  R21,R25
000a21 f12b      	BRVS __ADDF1211
000a22 f412      	BRPL __ADDF122
000a23 dfde      	RCALL __SWAPACC
000a24 cffa      	RJMP __ADDF121
                 __ADDF122:
000a25 3158      	CPI  R21,24
000a26 f018      	BRLO __ADDF123
000a27 27aa      	CLR  R26
000a28 27bb      	CLR  R27
000a29 2788      	CLR  R24
                 __ADDF123:
000a2a 3058      	CPI  R21,8
000a2b f028      	BRLO __ADDF124
000a2c 2fab      	MOV  R26,R27
000a2d 2fb8      	MOV  R27,R24
000a2e 2788      	CLR  R24
000a2f 5058      	SUBI R21,8
000a30 cff9      	RJMP __ADDF123
                 __ADDF124:
000a31 2355      	TST  R21
000a32 f029      	BREQ __ADDF126
                 __ADDF125:
000a33 9586      	LSR  R24
000a34 95b7      	ROR  R27
000a35 95a7      	ROR  R26
000a36 955a      	DEC  R21
000a37 f7d9      	BRNE __ADDF125
                 __ADDF126:
000a38 2d50      	MOV  R21,R0
000a39 2551      	EOR  R21,R1
000a3a f072      	BRMI __ADDF127
000a3b dfd2      	RCALL __UADD12
000a3c f438      	BRCC __ADDF129
000a3d 9567      	ROR  R22
000a3e 95f7      	ROR  R31
000a3f 95e7      	ROR  R30
000a40 9573      	INC  R23
000a41 f413      	BRVC __ADDF129
000a42 c020      	RJMP __MAXRES
                 __ADDF128:
000a43 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000a44 df45      	RCALL __REPACK
000a45 915f      	POP  R21
000a46 9508      	RET
                 __ADDF1211:
000a47 f7d8      	BRCC __ADDF128
000a48 cffb      	RJMP __ADDF129
                 __ADDF127:
000a49 1bea      	SUB  R30,R26
000a4a 0bfb      	SBC  R31,R27
000a4b 0b68      	SBC  R22,R24
000a4c f051      	BREQ __ZERORES
000a4d f410      	BRCC __ADDF1210
000a4e 9400      	COM  R0
000a4f dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000a50 2366      	TST  R22
000a51 f392      	BRMI __ADDF129
000a52 0fee      	LSL  R30
000a53 1fff      	ROL  R31
000a54 1f66      	ROL  R22
000a55 957a      	DEC  R23
000a56 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000a57 27ee      	CLR  R30
000a58 27ff      	CLR  R31
000a59 2766      	CLR  R22
000a5a 2777      	CLR  R23
000a5b 915f      	POP  R21
000a5c 9508      	RET
                 
                 __MINRES:
000a5d efef      	SER  R30
000a5e efff      	SER  R31
000a5f e76f      	LDI  R22,0x7F
000a60 ef7f      	SER  R23
000a61 915f      	POP  R21
000a62 9508      	RET
                 
                 __MAXRES:
000a63 efef      	SER  R30
000a64 efff      	SER  R31
000a65 e76f      	LDI  R22,0x7F
000a66 e77f      	LDI  R23,0x7F
000a67 915f      	POP  R21
000a68 9508      	RET
                 
                 __MULF12:
000a69 935f      	PUSH R21
000a6a df31      	RCALL __UNPACK
000a6b 3870      	CPI  R23,0x80
000a6c f351      	BREQ __ZERORES
000a6d 3890      	CPI  R25,0x80
000a6e f341      	BREQ __ZERORES
000a6f 2401      	EOR  R0,R1
000a70 9408      	SEC
000a71 1f79      	ADC  R23,R25
000a72 f423      	BRVC __MULF124
000a73 f31c      	BRLT __ZERORES
                 __MULF125:
000a74 2000      	TST  R0
000a75 f33a      	BRMI __MINRES
000a76 cfec      	RJMP __MAXRES
                 __MULF124:
000a77 920f      	PUSH R0
000a78 931f      	PUSH R17
000a79 932f      	PUSH R18
000a7a 933f      	PUSH R19
000a7b 934f      	PUSH R20
000a7c 2711      	CLR  R17
000a7d 2722      	CLR  R18
000a7e 2799      	CLR  R25
000a7f 9f68      	MUL  R22,R24
000a80 01a0      	MOVW R20,R0
000a81 9f8f      	MUL  R24,R31
000a82 2d30      	MOV  R19,R0
000a83 0d41      	ADD  R20,R1
000a84 1f59      	ADC  R21,R25
000a85 9f6b      	MUL  R22,R27
000a86 0d30      	ADD  R19,R0
000a87 1d41      	ADC  R20,R1
000a88 1f59      	ADC  R21,R25
000a89 9f8e      	MUL  R24,R30
000a8a d027      	RCALL __MULF126
000a8b 9fbf      	MUL  R27,R31
000a8c d025      	RCALL __MULF126
000a8d 9f6a      	MUL  R22,R26
000a8e d023      	RCALL __MULF126
000a8f 9fbe      	MUL  R27,R30
000a90 d01d      	RCALL __MULF127
000a91 9faf      	MUL  R26,R31
000a92 d01b      	RCALL __MULF127
000a93 9fae      	MUL  R26,R30
000a94 0d11      	ADD  R17,R1
000a95 1f29      	ADC  R18,R25
000a96 1f39      	ADC  R19,R25
000a97 1f49      	ADC  R20,R25
000a98 1f59      	ADC  R21,R25
000a99 2fe3      	MOV  R30,R19
000a9a 2ff4      	MOV  R31,R20
000a9b 2f65      	MOV  R22,R21
000a9c 2f52      	MOV  R21,R18
000a9d 914f      	POP  R20
000a9e 913f      	POP  R19
000a9f 912f      	POP  R18
000aa0 911f      	POP  R17
000aa1 900f      	POP  R0
000aa2 2366      	TST  R22
000aa3 f02a      	BRMI __MULF122
000aa4 0f55      	LSL  R21
000aa5 1fee      	ROL  R30
000aa6 1fff      	ROL  R31
000aa7 1f66      	ROL  R22
000aa8 c002      	RJMP __MULF123
                 __MULF122:
000aa9 9573      	INC  R23
000aaa f24b      	BRVS __MULF125
                 __MULF123:
000aab ded4      	RCALL __ROUND_REPACK
000aac 915f      	POP  R21
000aad 9508      	RET
                 
                 __MULF127:
000aae 0d10      	ADD  R17,R0
000aaf 1d21      	ADC  R18,R1
000ab0 1f39      	ADC  R19,R25
000ab1 c002      	RJMP __MULF128
                 __MULF126:
000ab2 0d20      	ADD  R18,R0
000ab3 1d31      	ADC  R19,R1
                 __MULF128:
000ab4 1f49      	ADC  R20,R25
000ab5 1f59      	ADC  R21,R25
000ab6 9508      	RET
                 
                 __DIVF21:
000ab7 935f      	PUSH R21
000ab8 dee3      	RCALL __UNPACK
000ab9 3870      	CPI  R23,0x80
000aba f421      	BRNE __DIVF210
000abb 2011      	TST  R1
                 __DIVF211:
000abc f40a      	BRPL __DIVF219
000abd cf9f      	RJMP __MINRES
                 __DIVF219:
000abe cfa4      	RJMP __MAXRES
                 __DIVF210:
000abf 3890      	CPI  R25,0x80
000ac0 f409      	BRNE __DIVF218
                 __DIVF217:
000ac1 cf95      	RJMP __ZERORES
                 __DIVF218:
000ac2 2401      	EOR  R0,R1
000ac3 9408      	SEC
000ac4 0b97      	SBC  R25,R23
000ac5 f41b      	BRVC __DIVF216
000ac6 f3d4      	BRLT __DIVF217
000ac7 2000      	TST  R0
000ac8 cff3      	RJMP __DIVF211
                 __DIVF216:
000ac9 2f79      	MOV  R23,R25
000aca 931f      	PUSH R17
000acb 932f      	PUSH R18
000acc 933f      	PUSH R19
000acd 934f      	PUSH R20
000ace 2411      	CLR  R1
000acf 2711      	CLR  R17
000ad0 2722      	CLR  R18
000ad1 2733      	CLR  R19
000ad2 2744      	CLR  R20
000ad3 2755      	CLR  R21
000ad4 e290      	LDI  R25,32
                 __DIVF212:
000ad5 17ae      	CP   R26,R30
000ad6 07bf      	CPC  R27,R31
000ad7 0786      	CPC  R24,R22
000ad8 0741      	CPC  R20,R17
000ad9 f030      	BRLO __DIVF213
000ada 1bae      	SUB  R26,R30
000adb 0bbf      	SBC  R27,R31
000adc 0b86      	SBC  R24,R22
000add 0b41      	SBC  R20,R17
000ade 9408      	SEC
000adf c001      	RJMP __DIVF214
                 __DIVF213:
000ae0 9488      	CLC
                 __DIVF214:
000ae1 1f55      	ROL  R21
000ae2 1f22      	ROL  R18
000ae3 1f33      	ROL  R19
000ae4 1c11      	ROL  R1
000ae5 1faa      	ROL  R26
000ae6 1fbb      	ROL  R27
000ae7 1f88      	ROL  R24
000ae8 1f44      	ROL  R20
000ae9 959a      	DEC  R25
000aea f751      	BRNE __DIVF212
000aeb 01f9      	MOVW R30,R18
000aec 2d61      	MOV  R22,R1
000aed 914f      	POP  R20
000aee 913f      	POP  R19
000aef 912f      	POP  R18
000af0 911f      	POP  R17
000af1 2366      	TST  R22
000af2 f032      	BRMI __DIVF215
000af3 0f55      	LSL  R21
000af4 1fee      	ROL  R30
000af5 1fff      	ROL  R31
000af6 1f66      	ROL  R22
000af7 957a      	DEC  R23
000af8 f243      	BRVS __DIVF217
                 __DIVF215:
000af9 de86      	RCALL __ROUND_REPACK
000afa 915f      	POP  R21
000afb 9508      	RET
                 
                 __ANEGW1:
000afc 95f1      	NEG  R31
000afd 95e1      	NEG  R30
000afe 40f0      	SBCI R31,0
000aff 9508      	RET
                 
                 __ANEGD1:
000b00 95f0      	COM  R31
000b01 9560      	COM  R22
000b02 9570      	COM  R23
000b03 95e1      	NEG  R30
000b04 4fff      	SBCI R31,-1
000b05 4f6f      	SBCI R22,-1
000b06 4f7f      	SBCI R23,-1
000b07 9508      	RET
                 
                 __LSLW3:
000b08 0fee      	LSL  R30
000b09 1fff      	ROL  R31
                 __LSLW2:
000b0a 0fee      	LSL  R30
000b0b 1fff      	ROL  R31
000b0c 0fee      	LSL  R30
000b0d 1fff      	ROL  R31
000b0e 9508      	RET
                 
                 __LSRD1:
000b0f 9576      	LSR  R23
000b10 9567      	ROR  R22
000b11 95f7      	ROR  R31
000b12 95e7      	ROR  R30
000b13 9508      	RET
                 
                 __CWD1:
000b14 2f6f      	MOV  R22,R31
000b15 0f66      	ADD  R22,R22
000b16 0b66      	SBC  R22,R22
000b17 2f76      	MOV  R23,R22
000b18 9508      	RET
                 
                 __DIVW21U:
000b19 2400      	CLR  R0
000b1a 2411      	CLR  R1
000b1b e190      	LDI  R25,16
                 __DIVW21U1:
000b1c 0faa      	LSL  R26
000b1d 1fbb      	ROL  R27
000b1e 1c00      	ROL  R0
000b1f 1c11      	ROL  R1
000b20 1a0e      	SUB  R0,R30
000b21 0a1f      	SBC  R1,R31
000b22 f418      	BRCC __DIVW21U2
000b23 0e0e      	ADD  R0,R30
000b24 1e1f      	ADC  R1,R31
000b25 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000b26 60a1      	SBR  R26,1
                 __DIVW21U3:
000b27 959a      	DEC  R25
000b28 f799      	BRNE __DIVW21U1
000b29 01fd      	MOVW R30,R26
000b2a 01d0      	MOVW R26,R0
000b2b 9508      	RET
                 
                 __MODW21:
000b2c 94e8      	CLT
000b2d ffb7      	SBRS R27,7
000b2e c004      	RJMP __MODW211
000b2f 95a0      	COM  R26
000b30 95b0      	COM  R27
000b31 9611      	ADIW R26,1
000b32 9468      	SET
                 __MODW211:
000b33 fdf7      	SBRC R31,7
000b34 dfc7      	RCALL __ANEGW1
000b35 dfe3      	RCALL __DIVW21U
000b36 01fd      	MOVW R30,R26
000b37 f40e      	BRTC __MODW212
000b38 dfc3      	RCALL __ANEGW1
                 __MODW212:
000b39 9508      	RET
                 
                 __GETD1S0:
000b3a 81e8      	LD   R30,Y
000b3b 81f9      	LDD  R31,Y+1
000b3c 816a      	LDD  R22,Y+2
000b3d 817b      	LDD  R23,Y+3
000b3e 9508      	RET
                 
                 __GETD2S0:
000b3f 81a8      	LD   R26,Y
000b40 81b9      	LDD  R27,Y+1
000b41 818a      	LDD  R24,Y+2
000b42 819b      	LDD  R25,Y+3
000b43 9508      	RET
                 
                 __PUTD1S0:
000b44 83e8      	ST   Y,R30
000b45 83f9      	STD  Y+1,R31
000b46 836a      	STD  Y+2,R22
000b47 837b      	STD  Y+3,R23
000b48 9508      	RET
                 
                 __SAVELOCR6:
000b49 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b4a 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b4b 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b4c 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b4d 931a      	ST   -Y,R17
000b4e 930a      	ST   -Y,R16
000b4f 9508      	RET
                 
                 __LOADLOCR6:
000b50 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b51 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b52 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b53 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b54 8119      	LDD  R17,Y+1
000b55 8108      	LD   R16,Y
000b56 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  51 r1 :  27 r2 :   0 r3 :   0 r4 :  34 r5 :  22 r6 :   4 r7 :  11 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  34 r17:  51 r18:  33 r19:  41 r20:  27 r21:  76 r22:  78 r23:  53 
r24:  61 r25:  48 r26: 260 r27: 121 r28:  31 r29:   1 r30: 424 r31: 175 
x  :  41 y  : 183 z  :  12 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  22 
adiw  :  33 and   :   2 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  40 
brge  :   9 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   2 brmi  :   7 brne  :  82 brpl  :   7 brsh  :  10 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 204 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  59 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  29 cpc   :  43 cpi   :  62 cpse  :   0 dec   :  13 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   4 jmp   :  33 ld    :  68 ldd   :  46 ldi   : 381 
lds   :   2 lpm   :   7 lsl   :  15 lsr   :   3 mov   :  72 movw  :  52 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   0 out   :  37 pop   :  22 push  :  21 rcall :  76 ret   :  68 
reti  :   1 rjmp  : 126 rol   :  30 ror   :  15 sbc   :   9 sbci  :  21 
sbi   :  14 sbic  :   3 sbis  :   4 sbiw  :  31 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  91 std   :  24 sts   :   2 sub   :   7 subi  :  25 swap  :   1 
tst   :  20 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0016ae   4734   1072   5806   32768  17.7%
[.dseg] 0x000060 0x00064f      0   1007   1007    2048  49.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
