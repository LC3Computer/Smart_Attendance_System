
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Mon Dec 30 12:45:23 2024

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 	.DEF _logged_in=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 035b 	JMP  __RESET
000002 940c 052c 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000      	.DB  0x0,0x0
                 
                 _0x3:
000036 3837
000037 4f39
000038 3534
000039 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00003a 3231
00003b 4333
00003c 304c
00003d 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x4:
00003e 0f64      	.DB  0x64,0xF
                 _0x6:
00003f 0260
000040 0264
000041 0268
000042 026c      	.DB  LOW(_0x5),HIGH(_0x5),LOW(_0x5+4),HIGH(_0x5+4),LOW(_0x5+8),HIGH(_0x5+8),LOW(_0x5+12),HIGH(_0x5+12)
000043 0270
000044 0274
000045 0278      	.DB  LOW(_0x5+16),HIGH(_0x5+16),LOW(_0x5+20),HIGH(_0x5+20),LOW(_0x5+24),HIGH(_0x5+24)
                 _0x149:
000046 ffff      	.DB  0xFF,0xFF
                 _0x0:
000047 7553
000048 006e
000049 6f4d
00004a 006e      	.DB  0x53,0x75,0x6E,0x0,0x4D,0x6F,0x6E,0x0
00004b 7554
00004c 0065
00004d 6557
00004e 0064      	.DB  0x54,0x75,0x65,0x0,0x57,0x65,0x64,0x0
00004f 6854
000050 0075
000051 7246
000052 0069      	.DB  0x54,0x68,0x75,0x0,0x46,0x72,0x69,0x0
000053 6153
000054 0074
000055 3a31
000056 5320      	.DB  0x53,0x61,0x74,0x0,0x31,0x3A,0x20,0x53
000057 6275
000058 696d
000059 2074
00005a 7453      	.DB  0x75,0x62,0x6D,0x69,0x74,0x20,0x53,0x74
00005b 6475
00005c 6e65
00005d 2074
00005e 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
00005f 6564
000060 3200
000061 203a
000062 7553      	.DB  0x64,0x65,0x0,0x32,0x3A,0x20,0x53,0x75
000063 6d62
000064 7469
000065 5720
000066 7469      	.DB  0x62,0x6D,0x69,0x74,0x20,0x57,0x69,0x74
000067 2068
000068 6143
000069 6472
00006a 4500      	.DB  0x68,0x20,0x43,0x61,0x72,0x64,0x0,0x45
00006b 746e
00006c 7265
00006d 7920
00006e 756f      	.DB  0x6E,0x74,0x65,0x72,0x20,0x79,0x6F,0x75
00006f 2072
000070 7473
000071 6475
000072 6e65      	.DB  0x72,0x20,0x73,0x74,0x75,0x64,0x65,0x6E
000073 2074
000074 6f63
000075 6564
000076 003a      	.DB  0x74,0x20,0x63,0x6F,0x64,0x65,0x3A,0x0
000077 7242
000078 6e69
000079 2067
00007a 6f79      	.DB  0x42,0x72,0x69,0x6E,0x67,0x20,0x79,0x6F
00007b 7275
00007c 6320
00007d 7261
00007e 2064      	.DB  0x75,0x72,0x20,0x63,0x61,0x72,0x64,0x20
00007f 656e
000080 7261
000081 6420
000082 7665      	.DB  0x6E,0x65,0x61,0x72,0x20,0x64,0x65,0x76
000083 6369
000084 3a65
000085 3400
000086 0030      	.DB  0x69,0x63,0x65,0x3A,0x0,0x34,0x30,0x0
000087 6e49
000088 6176
000089 696c
00008a 2064      	.DB  0x49,0x6E,0x76,0x61,0x6C,0x69,0x64,0x20
00008b 6143
00008c 6472
00008d 4400
00008e 7075      	.DB  0x43,0x61,0x72,0x64,0x0,0x44,0x75,0x70
00008f 696c
000090 6163
000091 6574
000092 5320      	.DB  0x6C,0x69,0x63,0x61,0x74,0x65,0x20,0x53
000093 7574
000094 6564
000095 746e
000096 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
000097 646f
000098 0065
000099 7453
00009a 6475      	.DB  0x6F,0x64,0x65,0x0,0x53,0x74,0x75,0x64
00009b 6e65
00009c 2074
00009d 6461
00009e 6564      	.DB  0x65,0x6E,0x74,0x20,0x61,0x64,0x64,0x65
00009f 2064
0000a0 6977
0000a1 6874
0000a2 4920      	.DB  0x64,0x20,0x77,0x69,0x74,0x68,0x20,0x49
0000a3 3a44
0000a4 4e00
0000a5 6d75
0000a6 6562      	.DB  0x44,0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65
0000a7 2072
0000a8 666f
0000a9 7320
0000aa 7574      	.DB  0x72,0x20,0x6F,0x66,0x20,0x73,0x74,0x75
0000ab 6564
0000ac 746e
0000ad 2073
0000ae 203a      	.DB  0x64,0x65,0x6E,0x74,0x73,0x20,0x3A,0x20
0000af 5000
0000b0 6572
0000b1 7373
0000b2 4320      	.DB  0x0,0x50,0x72,0x65,0x73,0x73,0x20,0x43
0000b3 6e61
0000b4 6563
0000b5 206c
0000b6 6f54      	.DB  0x61,0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F
0000b7 4720
0000b8 206f
0000b9 6142
0000ba 6b63      	.DB  0x20,0x47,0x6F,0x20,0x42,0x61,0x63,0x6B
0000bb 5300
0000bc 6174
0000bd 7472
0000be 5420      	.DB  0x0,0x53,0x74,0x61,0x72,0x74,0x20,0x54
0000bf 6172
0000c0 736e
0000c1 6566
0000c2 7272      	.DB  0x72,0x61,0x6E,0x73,0x66,0x65,0x72,0x72
0000c3 6e69
0000c4 2e67
0000c5 2e2e
0000c6 5500      	.DB  0x69,0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55
0000c7 6173
0000c8 7472
0000c9 5420
0000ca 6172      	.DB  0x73,0x61,0x72,0x74,0x20,0x54,0x72,0x61
0000cb 736e
0000cc 696d
0000cd 2074
0000ce 6946      	.DB  0x6E,0x73,0x6D,0x69,0x74,0x20,0x46,0x69
0000cf 696e
0000d0 6873
0000d1 6465
0000d2 3100      	.DB  0x6E,0x69,0x73,0x68,0x65,0x64,0x0,0x31
0000d3 203a
0000d4 6553
0000d5 7261
0000d6 6863      	.DB  0x3A,0x20,0x53,0x65,0x61,0x72,0x63,0x68
0000d7 5320
0000d8 7574
0000d9 6564
0000da 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000db 3200
0000dc 203a
0000dd 6544
0000de 656c      	.DB  0x0,0x32,0x3A,0x20,0x44,0x65,0x6C,0x65
0000df 6574
0000e0 5320
0000e1 7574
0000e2 6564      	.DB  0x74,0x65,0x20,0x53,0x74,0x75,0x64,0x65
0000e3 746e
0000e4 4500
0000e5 746e
0000e6 7265      	.DB  0x6E,0x74,0x0,0x45,0x6E,0x74,0x65,0x72
0000e7 5320
0000e8 7574
0000e9 6564
0000ea 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000eb 4320
0000ec 646f
0000ed 2065
0000ee 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
0000ef 2072
0000f0 6553
0000f1 7261
0000f2 6863      	.DB  0x72,0x20,0x53,0x65,0x61,0x72,0x63,0x68
0000f3 003a
0000f4 6e45
0000f5 6574
0000f6 2072      	.DB  0x3A,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
0000f7 7453
0000f8 6475
0000f9 6e65
0000fa 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000fb 6f43
0000fc 6564
0000fd 4620
0000fe 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000ff 4420
000100 6c65
000101 7465
000102 3a65      	.DB  0x20,0x44,0x65,0x6C,0x65,0x74,0x65,0x3A
000103 4500
000104 746e
000105 7265
000106 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
000107 6365
000108 6572
000109 2074
00010a 6f43      	.DB  0x65,0x63,0x72,0x65,0x74,0x20,0x43,0x6F
00010b 6564
00010c 2820
00010d 726f
00010e 6320      	.DB  0x64,0x65,0x20,0x28,0x6F,0x72,0x20,0x63
00010f 6e61
000110 6563
000111 296c
000112 3100      	.DB  0x61,0x6E,0x63,0x65,0x6C,0x29,0x0,0x31
000113 3a20
000114 4320
000115 656c
000116 7261      	.DB  0x20,0x3A,0x20,0x43,0x6C,0x65,0x61,0x72
000117 4520
000118 5045
000119 4f52
00011a 004d      	.DB  0x20,0x45,0x45,0x50,0x52,0x4F,0x4D,0x0
00011b 2020
00011c 2020
00011d 7270
00011e 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
00011f 2073
000120 6163
000121 636e
000122 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000123 7420
000124 206f
000125 6162
000126 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
000127 4c00
000128 676f
000129 756f
00012a 2074      	.DB  0x0,0x4C,0x6F,0x67,0x6F,0x75,0x74,0x20
00012b 2e2e
00012c 002e
00012d 6f47
00012e 6e69      	.DB  0x2E,0x2E,0x2E,0x0,0x47,0x6F,0x69,0x6E
00012f 2067
000130 6f54
000131 4120
000132 6d64      	.DB  0x67,0x20,0x54,0x6F,0x20,0x41,0x64,0x6D
000133 6e69
000134 5020
000135 6761
000136 2065      	.DB  0x69,0x6E,0x20,0x50,0x61,0x67,0x65,0x20
000137 6e49
000138 3220
000139 5320
00013a 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
00013b 2500
00013c 3230
00013d 3a78
00013e 3025      	.DB  0x0,0x25,0x30,0x32,0x78,0x3A,0x25,0x30
00013f 7832
000140 253a
000141 3230
000142 2078      	.DB  0x32,0x78,0x3A,0x25,0x30,0x32,0x78,0x20
000143 0020
000144 3032
000145 3025
000146 7832      	.DB  0x20,0x0,0x32,0x30,0x25,0x30,0x32,0x78
000147 252f
000148 3230
000149 2f78
00014a 3025      	.DB  0x2F,0x25,0x30,0x32,0x78,0x2F,0x25,0x30
00014b 7832
00014c 2020
00014d 3325
00014e 0073      	.DB  0x32,0x78,0x20,0x20,0x25,0x33,0x73,0x0
00014f 6e49
000150 6f63
000151 7272
000152 6365      	.DB  0x49,0x6E,0x63,0x6F,0x72,0x72,0x65,0x63
000153 2074
000154 7453
000155 6475
000156 6e65      	.DB  0x74,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000157 2074
000158 6f43
000159 6564
00015a 4620      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x46
00015b 726f
00015c 616d
00015d 0074
00015e 6f59      	.DB  0x6F,0x72,0x6D,0x61,0x74,0x0,0x59,0x6F
00015f 2075
000160 6957
000161 6c6c
000162 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
000163 6361
000164 206b
000165 654d
000166 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
000167 4920
000168 206e
000169 2032
00016a 6553      	.DB  0x20,0x49,0x6E,0x20,0x32,0x20,0x53,0x65
00016b 6f63
00016c 646e
00016d 4400
00016e 7075      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x44,0x75,0x70
00016f 696c
000170 6163
000171 6574
000172 5320      	.DB  0x6C,0x69,0x63,0x61,0x74,0x65,0x20,0x53
000173 7574
000174 6564
000175 746e
000176 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
000177 646f
000178 2065
000179 6e45
00017a 6574      	.DB  0x6F,0x64,0x65,0x20,0x45,0x6E,0x74,0x65
00017b 6572
00017c 0064
00017d 7453
00017e 6475      	.DB  0x72,0x65,0x64,0x0,0x53,0x74,0x75,0x64
00017f 6e65
000180 2074
000181 6f43
000182 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
000183 5320
000184 6375
000185 6563
000186 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
000187 7566
000188 6c6c
000189 2079
00018a 6441      	.DB  0x66,0x75,0x6C,0x6C,0x79,0x20,0x41,0x64
00018b 6564
00018c 0064
00018d 6f59
00018e 2075      	.DB  0x64,0x65,0x64,0x0,0x59,0x6F,0x75,0x20
00018f 754d
000190 7473
000191 4620
000192 7269      	.DB  0x4D,0x75,0x73,0x74,0x20,0x46,0x69,0x72
000193 7473
000194 4c20
000195 676f
000196 6e69      	.DB  0x73,0x74,0x20,0x4C,0x6F,0x67,0x69,0x6E
000197 5900
000198 756f
000199 5720
00019a 6c69      	.DB  0x0,0x59,0x6F,0x75,0x20,0x57,0x69,0x6C
00019b 206c
00019c 6f47
00019d 4120
00019e 6d64      	.DB  0x6C,0x20,0x47,0x6F,0x20,0x41,0x64,0x6D
00019f 6e69
0001a0 5020
0001a1 6761
0001a2 2065      	.DB  0x69,0x6E,0x20,0x50,0x61,0x67,0x65,0x20
0001a3 2032
0001a4 6553
0001a5 0063
0001a6 7453      	.DB  0x32,0x20,0x53,0x65,0x63,0x0,0x53,0x74
0001a7 6475
0001a8 6e65
0001a9 2074
0001aa 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0001ab 6564
0001ac 4620
0001ad 756f
0001ae 646e      	.DB  0x64,0x65,0x20,0x46,0x6F,0x75,0x6E,0x64
0001af 4f00
0001b0 7370
0001b1 2c20
0001b2 5320      	.DB  0x0,0x4F,0x70,0x73,0x20,0x2C,0x20,0x53
0001b3 7574
0001b4 6564
0001b5 746e
0001b6 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0001b7 646f
0001b8 2065
0001b9 6f4e
0001ba 2074      	.DB  0x6F,0x64,0x65,0x20,0x4E,0x6F,0x74,0x20
0001bb 6f46
0001bc 6e75
0001bd 0064
0001be 6157      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x57,0x61
0001bf 7469
0001c0 4620
0001c1 726f
0001c2 4420      	.DB  0x69,0x74,0x20,0x46,0x6F,0x72,0x20,0x44
0001c3 6c65
0001c4 7465
0001c5 2e65
0001c6 2e2e      	.DB  0x65,0x6C,0x65,0x74,0x65,0x2E,0x2E,0x2E
0001c7 5300
0001c8 7574
0001c9 6564
0001ca 746e      	.DB  0x0,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0001cb 4320
0001cc 646f
0001cd 2065
0001ce 6157      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x57,0x61
0001cf 2073
0001d0 6544
0001d1 656c
0001d2 6574      	.DB  0x73,0x20,0x44,0x65,0x6C,0x65,0x74,0x65
0001d3 0064
0001d4 6f4c
0001d5 6967
0001d6 206e      	.DB  0x64,0x0,0x4C,0x6F,0x67,0x69,0x6E,0x20
0001d7 7553
0001d8 6363
0001d9 7365
0001da 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0001db 6c75
0001dc 796c
0001dd 5700
0001de 6961      	.DB  0x75,0x6C,0x6C,0x79,0x0,0x57,0x61,0x69
0001df 2e74
0001e0 2e2e
0001e1 4f00
0001e2 7370      	.DB  0x74,0x2E,0x2E,0x2E,0x0,0x4F,0x70,0x73
0001e3 2c20
0001e4 7320
0001e5 6365
0001e6 6572      	.DB  0x20,0x2C,0x20,0x73,0x65,0x63,0x72,0x65
0001e7 2074
0001e8 7369
0001e9 6920
0001ea 636e      	.DB  0x74,0x20,0x69,0x73,0x20,0x69,0x6E,0x63
0001eb 726f
0001ec 6572
0001ed 7463
0001ee 4300      	.DB  0x6F,0x72,0x72,0x65,0x63,0x74,0x0,0x43
0001ef 656c
0001f0 7261
0001f1 6e69
0001f2 2067      	.DB  0x6C,0x65,0x61,0x72,0x69,0x6E,0x67,0x20
0001f3 4545
0001f4 5250
0001f5 4d4f
0001f6 2e20      	.DB  0x45,0x45,0x50,0x52,0x4F,0x4D,0x20,0x2E
0001f7 2e2e
0001f8 5400
0001f9 6d65
0001fa 6570      	.DB  0x2E,0x2E,0x0,0x54,0x65,0x6D,0x70,0x65
0001fb 6172
0001fc 7574
0001fd 6572
0001fe 4328      	.DB  0x72,0x61,0x74,0x75,0x72,0x65,0x28,0x43
0001ff 3a29
000200 3100
000201 203a
000202 7441      	.DB  0x29,0x3A,0x0,0x31,0x3A,0x20,0x41,0x74
000203 6574
000204 646e
000205 6e61
000206 6563      	.DB  0x74,0x65,0x6E,0x64,0x61,0x6E,0x63,0x65
000207 4920
000208 696e
000209 6974
00020a 6c61      	.DB  0x20,0x49,0x6E,0x69,0x74,0x69,0x61,0x6C
00020b 7a69
00020c 7461
00020d 6f69
00020e 006e      	.DB  0x69,0x7A,0x61,0x74,0x69,0x6F,0x6E,0x0
00020f 3a32
000210 5320
000211 7574
000212 6564      	.DB  0x32,0x3A,0x20,0x53,0x74,0x75,0x64,0x65
000213 746e
000214 4d20
000215 6e61
000216 6761      	.DB  0x6E,0x74,0x20,0x4D,0x61,0x6E,0x61,0x67
000217 6d65
000218 6e65
000219 0074
00021a 3a33      	.DB  0x65,0x6D,0x65,0x6E,0x74,0x0,0x33,0x3A
00021b 5620
00021c 6569
00021d 2077
00021e 7250      	.DB  0x20,0x56,0x69,0x65,0x77,0x20,0x50,0x72
00021f 7365
000220 6e65
000221 2074
000222 7453      	.DB  0x65,0x73,0x65,0x6E,0x74,0x20,0x53,0x74
000223 6475
000224 6e65
000225 7374
000226 0020      	.DB  0x75,0x64,0x65,0x6E,0x74,0x73,0x20,0x0
000227 3a34
000228 5420
000229 6d65
00022a 6570      	.DB  0x34,0x3A,0x20,0x54,0x65,0x6D,0x70,0x65
00022b 6172
00022c 7574
00022d 6572
00022e 4d20      	.DB  0x72,0x61,0x74,0x75,0x72,0x65,0x20,0x4D
00022f 6e6f
000230 7469
000231 726f
000232 6e69      	.DB  0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E
000233 0067
000234 3a35
000235 5220
000236 7465      	.DB  0x67,0x0,0x35,0x3A,0x20,0x52,0x65,0x74
000237 6972
000238 7665
000239 2065
00023a 7453      	.DB  0x72,0x69,0x65,0x76,0x65,0x20,0x53,0x74
00023b 6475
00023c 6e65
00023d 2074
00023e 6144      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x44,0x61
00023f 6174
000240 3600
000241 203a
000242 7254      	.DB  0x74,0x61,0x0,0x36,0x3A,0x20,0x54,0x72
000243 6661
000244 6966
000245 2063
000246 6f4d      	.DB  0x61,0x66,0x66,0x69,0x63,0x20,0x4D,0x6F
000247 696e
000248 6f74
000249 6972
00024a 676e      	.DB  0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E,0x67
00024b 3700
00024c 203a
00024d 6f4c
00024e 6967      	.DB  0x0,0x37,0x3A,0x20,0x4C,0x6F,0x67,0x69
00024f 206e
000250 6957
000251 6874
000252 4120      	.DB  0x6E,0x20,0x57,0x69,0x74,0x68,0x20,0x41
000253 6d64
000254 6e69
000255 3800
000256 203a      	.DB  0x64,0x6D,0x69,0x6E,0x0,0x38,0x3A,0x20
000257 6f4c
000258 6f67
000259 7475
00025a 4400      	.DB  0x4C,0x6F,0x67,0x6F,0x75,0x74,0x0,0x44
00025b 7369
00025c 6174
00025d 636e
00025e 3a65      	.DB  0x69,0x73,0x74,0x61,0x6E,0x63,0x65,0x3A
00025f 0020
000260 7245
000261 6f72
000262 0072      	.DB  0x20,0x0,0x45,0x72,0x72,0x6F,0x72,0x0
000263 6f4e
000264 4f20
000265 7362
000266 6174      	.DB  0x4E,0x6F,0x20,0x4F,0x62,0x73,0x74,0x61
000267 6c63
000268 0065
000269 6320
00026a 206d      	.DB  0x63,0x6C,0x65,0x0,0x20,0x63,0x6D,0x20
00026b 4300
00026c 756f
00026d 746e
00026e 203a      	.DB  0x0,0x43,0x6F,0x75,0x6E,0x74,0x3A,0x20
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1283): warning: .cseg .db misalignment - padding zero byte
00026f 0000      	.DB  0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1285): warning: .cseg .db misalignment - padding zero byte
000270 0001      	.DB  0x1
                 _0x2000000:
000271 4e2d
000272 4e41
000273 4900
000274 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1288): warning: .cseg .db misalignment - padding zero byte
000275 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000276 0006      	.DW  0x06
000277 0004      	.DW  0x04
000278 0066      	.DW  __REG_VARS*2
                 
000279 0010      	.DW  0x10
00027a 07a0      	.DW  _keypad
00027b 006c      	.DW  _0x3*2
                 
00027c 0004      	.DW  0x04
00027d 0260      	.DW  _0x5
00027e 008e      	.DW  _0x0*2
                 
00027f 0004      	.DW  0x04
000280 0264      	.DW  _0x5+4
000281 0092      	.DW  _0x0*2+4
                 
000282 0004      	.DW  0x04
000283 0268      	.DW  _0x5+8
000284 0096      	.DW  _0x0*2+8
                 
000285 0004      	.DW  0x04
000286 026c      	.DW  _0x5+12
000287 009a      	.DW  _0x0*2+12
                 
000288 0004      	.DW  0x04
000289 0270      	.DW  _0x5+16
00028a 009e      	.DW  _0x0*2+16
                 
00028b 0004      	.DW  0x04
00028c 0274      	.DW  _0x5+20
00028d 00a2      	.DW  _0x0*2+20
                 
00028e 0004      	.DW  0x04
00028f 0278      	.DW  _0x5+24
000290 00a6      	.DW  _0x0*2+24
                 
000291 000e      	.DW  0x0E
000292 07d0      	.DW  _days
000293 007e      	.DW  _0x6*2
                 
000294 0017      	.DW  0x17
000295 027c      	.DW  _0xD
000296 00aa      	.DW  _0x0*2+28
                 
000297 0014      	.DW  0x14
000298 0293      	.DW  _0xD+23
000299 00c1      	.DW  _0x0*2+51
                 
00029a 0019      	.DW  0x19
00029b 02a7      	.DW  _0xD+43
00029c 00d5      	.DW  _0x0*2+71
                 
00029d 001d      	.DW  0x1D
00029e 02c0      	.DW  _0xD+68
00029f 00ee      	.DW  _0x0*2+96
                 
0002a0 0003      	.DW  0x03
0002a1 02dd      	.DW  _0xD+97
0002a2 010b      	.DW  _0x0*2+125
                 
0002a3 000d      	.DW  0x0D
0002a4 02e0      	.DW  _0xD+100
0002a5 010e      	.DW  _0x0*2+128
                 
0002a6 0017      	.DW  0x17
0002a7 02ed      	.DW  _0xD+113
0002a8 011b      	.DW  _0x0*2+141
                 
0002a9 0017      	.DW  0x17
0002aa 0304      	.DW  _0xD+136
0002ab 0132      	.DW  _0x0*2+164
                 
0002ac 0016      	.DW  0x16
0002ad 031b      	.DW  _0xD+159
0002ae 0149      	.DW  _0x0*2+187
                 
0002af 0018      	.DW  0x18
0002b0 0331      	.DW  _0xD+181
0002b1 015f      	.DW  _0x0*2+209
                 
0002b2 0016      	.DW  0x16
0002b3 0349      	.DW  _0xD+205
0002b4 0177      	.DW  _0x0*2+233
                 
0002b5 0018      	.DW  0x18
0002b6 035f      	.DW  _0xD+227
0002b7 018d      	.DW  _0x0*2+255
                 
0002b8 0012      	.DW  0x12
0002b9 0377      	.DW  _0xD+251
0002ba 01a5      	.DW  _0x0*2+279
                 
0002bb 0012      	.DW  0x12
0002bc 0389      	.DW  _0xD+269
0002bd 01b7      	.DW  _0x0*2+297
                 
0002be 001f      	.DW  0x1F
0002bf 039b      	.DW  _0xD+287
0002c0 01c9      	.DW  _0x0*2+315
                 
0002c1 001f      	.DW  0x1F
0002c2 03ba      	.DW  _0xD+318
0002c3 01e8      	.DW  _0x0*2+346
                 
0002c4 001e      	.DW  0x1E
0002c5 03d9      	.DW  _0xD+349
0002c6 0207      	.DW  _0x0*2+377
                 
0002c7 0011      	.DW  0x11
0002c8 03f7      	.DW  _0xD+379
0002c9 0225      	.DW  _0x0*2+407
                 
0002ca 0019      	.DW  0x19
0002cb 0408      	.DW  _0xD+396
0002cc 0236      	.DW  _0x0*2+424
                 
0002cd 000b      	.DW  0x0B
0002ce 0421      	.DW  _0x78
0002cf 024f      	.DW  _0x0*2+449
                 
0002d0 001d      	.DW  0x1D
0002d1 042c      	.DW  _0x78+11
0002d2 025a      	.DW  _0x0*2+460
                 
0002d3 0002      	.DW  0x02
0002d4 0449      	.DW  _0x78+40
0002d5 015d      	.DW  _0x0*2+207
                 
0002d6 0003      	.DW  0x03
0002d7 044b      	.DW  _0x78+42
0002d8 010b      	.DW  _0x0*2+125
                 
0002d9 001e      	.DW  0x1E
0002da 044e      	.DW  _0x78+45
0002db 029e      	.DW  _0x0*2+528
                 
0002dc 001f      	.DW  0x1F
0002dd 046c      	.DW  _0x78+75
0002de 02bc      	.DW  _0x0*2+558
                 
0002df 001f      	.DW  0x1F
0002e0 048b      	.DW  _0x78+106
0002e1 02db      	.DW  _0x0*2+589
                 
0002e2 001f      	.DW  0x1F
0002e3 04aa      	.DW  _0x78+137
0002e4 02bc      	.DW  _0x0*2+558
                 
0002e5 0020      	.DW  0x20
0002e6 04c9      	.DW  _0x78+168
0002e7 02fa      	.DW  _0x0*2+620
                 
0002e8 001f      	.DW  0x1F
0002e9 04e9      	.DW  _0x78+200
0002ea 02bc      	.DW  _0x0*2+558
                 
0002eb 0015      	.DW  0x15
0002ec 0508      	.DW  _0x78+231
0002ed 031a      	.DW  _0x0*2+652
                 
0002ee 001d      	.DW  0x1D
0002ef 051d      	.DW  _0x78+252
0002f0 032f      	.DW  _0x0*2+673
                 
0002f1 0002      	.DW  0x02
0002f2 053a      	.DW  _0x78+281
0002f3 015d      	.DW  _0x0*2+207
                 
0002f4 0013      	.DW  0x13
0002f5 053c      	.DW  _0x78+283
0002f6 034c      	.DW  _0x0*2+702
                 
0002f7 001f      	.DW  0x1F
0002f8 054f      	.DW  _0x78+302
0002f9 02bc      	.DW  _0x0*2+558
                 
0002fa 001d      	.DW  0x1D
0002fb 056e      	.DW  _0x78+333
0002fc 035f      	.DW  _0x0*2+721
                 
0002fd 001f      	.DW  0x1F
0002fe 058b      	.DW  _0x78+362
0002ff 02bc      	.DW  _0x0*2+558
                 
000300 0002      	.DW  0x02
000301 05aa      	.DW  _0x78+393
000302 015d      	.DW  _0x0*2+207
                 
000303 0013      	.DW  0x13
000304 05ac      	.DW  _0x78+395
000305 034c      	.DW  _0x0*2+702
                 
000306 0013      	.DW  0x13
000307 05bf      	.DW  _0x78+414
000308 037c      	.DW  _0x0*2+750
                 
000309 0019      	.DW  0x19
00030a 05d2      	.DW  _0x78+433
00030b 038f      	.DW  _0x0*2+769
                 
00030c 001f      	.DW  0x1F
00030d 05eb      	.DW  _0x78+458
00030e 02bc      	.DW  _0x0*2+558
                 
00030f 001d      	.DW  0x1D
000310 060a      	.DW  _0x78+489
000311 035f      	.DW  _0x0*2+721
                 
000312 001f      	.DW  0x1F
000313 0627      	.DW  _0x78+518
000314 02bc      	.DW  _0x0*2+558
                 
000315 0002      	.DW  0x02
000316 0646      	.DW  _0x78+549
000317 015d      	.DW  _0x0*2+207
                 
000318 0013      	.DW  0x13
000319 0648      	.DW  _0x78+551
00031a 03a8      	.DW  _0x0*2+794
                 
00031b 0008      	.DW  0x08
00031c 065b      	.DW  _0x78+570
00031d 03bb      	.DW  _0x0*2+813
                 
00031e 001a      	.DW  0x1A
00031f 0663      	.DW  _0x78+578
000320 03c3      	.DW  _0x0*2+821
                 
000321 001f      	.DW  0x1F
000322 067d      	.DW  _0x78+604
000323 02bc      	.DW  _0x0*2+558
                 
000324 0014      	.DW  0x14
000325 069c      	.DW  _0x78+635
000326 03dd      	.DW  _0x0*2+847
                 
000327 0010      	.DW  0x10
000328 06b0      	.DW  _0xF4
000329 03f1      	.DW  _0x0*2+867
                 
00032a 0002      	.DW  0x02
00032b 06c0      	.DW  _0xF4+16
00032c 015d      	.DW  _0x0*2+207
                 
00032d 001d      	.DW  0x1D
00032e 06c2      	.DW  _0x100
00032f 0401      	.DW  _0x0*2+883
                 
000330 0016      	.DW  0x16
000331 06df      	.DW  _0x100+29
000332 041e      	.DW  _0x0*2+912
                 
000333 001a      	.DW  0x1A
000334 06f5      	.DW  _0x100+51
000335 0434      	.DW  _0x0*2+934
                 
000336 001a      	.DW  0x1A
000337 070f      	.DW  _0x100+77
000338 044e      	.DW  _0x0*2+960
                 
000339 0019      	.DW  0x19
00033a 0729      	.DW  _0x100+103
00033b 0468      	.DW  _0x0*2+986
                 
00033c 0016      	.DW  0x16
00033d 0742      	.DW  _0x100+128
00033e 0481      	.DW  _0x0*2+1011
                 
00033f 0014      	.DW  0x14
000340 0758      	.DW  _0x100+150
000341 0497      	.DW  _0x0*2+1033
                 
000342 000a      	.DW  0x0A
000343 076c      	.DW  _0x100+170
000344 04ab      	.DW  _0x0*2+1053
                 
000345 0002      	.DW  0x02
000346 07f2      	.DW  _previous_count_S0000014000
000347 008c      	.DW  _0x149*2
                 
000348 000b      	.DW  0x0B
000349 0776      	.DW  _0x14A
00034a 04b5      	.DW  _0x0*2+1063
                 
00034b 0006      	.DW  0x06
00034c 0781      	.DW  _0x14A+11
00034d 04c0      	.DW  _0x0*2+1074
                 
00034e 000c      	.DW  0x0C
00034f 0787      	.DW  _0x14A+17
000350 04c6      	.DW  _0x0*2+1080
                 
000351 0005      	.DW  0x05
000352 0793      	.DW  _0x14A+29
000353 04d2      	.DW  _0x0*2+1092
                 
000354 0008      	.DW  0x08
000355 0798      	.DW  _0x14A+34
000356 04d7      	.DW  _0x0*2+1097
                 
000357 0001      	.DW  0x01
000358 07f4      	.DW  __seed_G100
000359 04e0      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
00035a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00035b 94f8      	CLI
00035c 27ee      	CLR  R30
00035d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00035e e0f1      	LDI  R31,1
00035f bffb      	OUT  GICR,R31
000360 bfeb      	OUT  GICR,R30
000361 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000362 e08d      	LDI  R24,(14-2)+1
000363 e0a2      	LDI  R26,2
000364 27bb      	CLR  R27
                 __CLEAR_REG:
000365 93ed      	ST   X+,R30
000366 958a      	DEC  R24
000367 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000368 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000369 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00036a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00036b 93ed      	ST   X+,R30
00036c 9701      	SBIW R24,1
00036d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00036e eeec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00036f e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000370 9185      	LPM  R24,Z+
000371 9195      	LPM  R25,Z+
000372 9700      	SBIW R24,0
000373 f061      	BREQ __GLOBAL_INI_END
000374 91a5      	LPM  R26,Z+
000375 91b5      	LPM  R27,Z+
000376 9005      	LPM  R0,Z+
000377 9015      	LPM  R1,Z+
000378 01bf      	MOVW R22,R30
000379 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00037a 9005      	LPM  R0,Z+
00037b 920d      	ST   X+,R0
00037c 9701      	SBIW R24,1
00037d f7e1      	BRNE __GLOBAL_INI_LOOP
00037e 01fb      	MOVW R30,R22
00037f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000380 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000381 bfed      	OUT  SPL,R30
000382 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000383 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000384 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000385 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000386 940c 0388 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;
                 ;#define LCD_PRT PORTA // LCD DATA PORT
                 ;#define LCD_DDR DDRA  // LCD DATA DDR
                 ;#define LCD_PIN PINA  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTB // keyboard PORT
                 ;#define KEY_DDR DDRB  // keyboard DDR
                 ;#define KEY_PIN PINB  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 4
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;void I2C_init();
                 ;void I2C_start();
                 ;void I2C_write(unsigned char data);
                 ;unsigned char I2C_read(unsigned char ackVal);
                 ;void I2C_stop();
                 ;void rtc_init();
                 ;void rtc_getTime(unsigned char*, unsigned char*, unsigned char*);
                 ;void rtc_getDate(unsigned char*, unsigned char*, unsigned char*, unsigned char*);
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 0;
                 ;char* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
                 _0x5:
000260           	.BYTE 0x1C
                 ;char time[20];
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 006F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0070     int i, j;
                 ; 0000 0071     unsigned char st_counts;
                 ; 0000 0072     unsigned char data;
                 ; 0000 0073 
                 ; 0000 0074     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
000388 efe0      	LDI  R30,LOW(240)
000389 bbe7      	OUT  0x17,R30
                 ; 0000 0075     KEY_PRT = 0xFF;
00038a efef      	LDI  R30,LOW(255)
00038b bbe8      	OUT  0x18,R30
                 ; 0000 0076     KEY_PRT &= 0x0F;                  // ground all rows at once
00038c b3e8      	IN   R30,0x18
00038d 70ef      	ANDI R30,LOW(0xF)
00038e bbe8      	OUT  0x18,R30
                 ; 0000 0077     MCUCR = 0x02;                     // make INT0 falling edge triggered
00038f e0e2      	LDI  R30,LOW(2)
000390 bfe5      	OUT  0x35,R30
                 ; 0000 0078     GICR = (1 << INT0);               // enable external interrupt 0
000391 e4e0      	LDI  R30,LOW(64)
000392 bfeb      	OUT  0x3B,R30
                 ; 0000 0079     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
000393 9a8f      	SBI  0x11,7
                 ; 0000 007A     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
000394 9897      	CBI  0x12,7
                 ; 0000 007B     USART_init(0x33);
000395 e3a3      	LDI  R26,LOW(51)
000396 e0b0      	LDI  R27,0
000397 940e 09ec 	CALL _USART_init
                 ; 0000 007C     HCSR04Init(); // Initialize ultrasonic sensor
000399 940e 0a6e 	CALL _HCSR04Init
                 ; 0000 007D     lcd_init();
00039b d53f      	RCALL _lcd_init
                 ; 0000 007E     rtc_init();
00039c 940e 0b93 	CALL _rtc_init
                 ; 0000 007F 
                 ; 0000 0080 #asm("sei")           // enable interrupts
00039e 9478      	sei
                 ; 0000 0081     lcdCommand(0x01); // clear LCD
00039f e0a1      	LDI  R26,LOW(1)
0003a0 d526      	RCALL _lcdCommand
                 ; 0000 0082     while (1)
                 _0x7:
                 ; 0000 0083     {
                 ; 0000 0084         if (stage == STAGE_INIT_MENU)
0003a1 2c04      	MOV  R0,R4
0003a2 2805      	OR   R0,R5
0003a3 f419      	BRNE _0xA
                 ; 0000 0085         {
                 ; 0000 0086             show_menu();
0003a4 940e 0957 	CALL _show_menu
                 ; 0000 0087         }
                 ; 0000 0088         else if (stage == STAGE_ATTENDENC_MENU)
0003a6 c183      	RJMP _0xB
                 _0xA:
0003a7 940e 0ddb 	CALL SUBOPT_0x0
0003a9 f469      	BRNE _0xC
                 ; 0000 0089         {
                 ; 0000 008A             lcdCommand(0x01);
0003aa 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 008B             lcd_gotoxy(1, 1);
                 ; 0000 008C             lcd_print("1: Submit Student Code");
                +
0003ac e7ac     +LDI R26 , LOW ( _0xD + ( 0 ) )
0003ad e0b2     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
0003ae 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 008D             lcd_gotoxy(1, 2);
                 ; 0000 008E             lcd_print("2: Submit With Card");
                +
0003b0 e9a3     +LDI R26 , LOW ( _0xD + ( 23 ) )
0003b1 e0b2     +LDI R27 , HIGH ( _0xD + ( 23 ) )
                 	__POINTW2MN _0xD,23
0003b2 d55c      	RCALL _lcd_print
                 ; 0000 008F             while (stage == STAGE_ATTENDENC_MENU)
                 _0xE:
0003b3 940e 0ddb 	CALL SUBOPT_0x0
0003b5 f3e9      	BREQ _0xE
                 ; 0000 0090                 ;
                 ; 0000 0091         }
                 ; 0000 0092         else if (stage == STAGE_SUBMIT_CODE)
0003b6 c173      	RJMP _0x11
                 _0xC:
0003b7 940e 0def 	CALL SUBOPT_0x3
0003b9 f461      	BRNE _0x12
                 ; 0000 0093         {
                 ; 0000 0094             lcdCommand(0x01);
0003ba 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0095             lcd_gotoxy(1, 1);
                 ; 0000 0096             lcd_print("Enter your student code:");
                +
0003bc eaa7     +LDI R26 , LOW ( _0xD + ( 43 ) )
0003bd e0b2     +LDI R27 , HIGH ( _0xD + ( 43 ) )
                 	__POINTW2MN _0xD,43
0003be 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0097             lcd_gotoxy(1, 2);
                 ; 0000 0098             lcdCommand(0x0f);   // display on, cursor blinking
0003c0 940e 0df4 	CALL SUBOPT_0x4
                 ; 0000 0099             delay_us(100 * 16); // wait
                 ; 0000 009A             while (stage == STAGE_SUBMIT_CODE)
                 _0x13:
0003c2 940e 0def 	CALL SUBOPT_0x3
0003c4 f3e9      	BREQ _0x13
                 ; 0000 009B                 ;
                 ; 0000 009C             lcdCommand(0x0c);   // display on, cursor off
0003c5 c161      	RJMP _0x164
                 ; 0000 009D             delay_us(100 * 16); // wait
                 ; 0000 009E         }
                 ; 0000 009F         else if(stage == STAGE_SUBMIT_WITH_CARD)
                 _0x12:
0003c6 940e 0dfc 	CALL SUBOPT_0x5
0003c8 f009      	BREQ PC+2
0003c9 c072      	RJMP _0x17
                 ; 0000 00A0         {
                 ; 0000 00A1             memset(buffer,0,32);
0003ca 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 00A2             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x18:
0003cc 940e 0dfc 	CALL SUBOPT_0x5
0003ce f009      	BREQ PC+2
0003cf c06b      	RJMP _0x1A
                 ; 0000 00A3             {
                 ; 0000 00A4                 lcdCommand(0x01);
0003d0 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00A5                 lcd_gotoxy(1, 1);
                 ; 0000 00A6                 lcd_print("Bring your card near device:");
                +
0003d2 eca0     +LDI R26 , LOW ( _0xD + ( 68 ) )
0003d3 e0b2     +LDI R27 , HIGH ( _0xD + ( 68 ) )
                 	__POINTW2MN _0xD,68
0003d4 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 00A7                 lcd_gotoxy(1, 2);
                 ; 0000 00A8                 delay_us(100 * 16); // wait
0003d6 940e 0e0b 	CALL SUBOPT_0x7
                 ; 0000 00A9                 while((data = USART_Receive()) != '\r'){
                 _0x1B:
0003d8 940e 09e3 	CALL _USART_Receive
0003da 2f4e      	MOV  R20,R30
0003db 30ed      	CPI  R30,LOW(0xD)
0003dc f049      	BREQ _0x1D
                 ; 0000 00AA                     if(stage != STAGE_SUBMIT_WITH_CARD)
0003dd 940e 0dfc 	CALL SUBOPT_0x5
0003df f431      	BRNE _0x1D
                 ; 0000 00AB                         break;
                 ; 0000 00AC                     buffer[strlen(buffer)] = data;
0003e0 940e 0e10 	CALL SUBOPT_0x8
0003e2 55e0      	SUBI R30,LOW(-_buffer)
0003e3 4ff8      	SBCI R31,HIGH(-_buffer)
0003e4 8340      	ST   Z,R20
                 ; 0000 00AD                 }
0003e5 cff2      	RJMP _0x1B
                 _0x1D:
                 ; 0000 00AE                 if(stage != STAGE_SUBMIT_WITH_CARD){
0003e6 940e 0dfc 	CALL SUBOPT_0x5
0003e8 f019      	BREQ _0x1F
                 ; 0000 00AF                     memset(buffer,0,32);
0003e9 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 00B0                     break;
0003eb c04f      	RJMP _0x1A
                 ; 0000 00B1                 }
                 ; 0000 00B2                 if (strncmp(buffer, "40", 2) != 0 ||
                 _0x1F:
                 ; 0000 00B3                         strlen(buffer) != 8)
0003ec 940e 0e14 	CALL SUBOPT_0x9
                +
0003ee eded     +LDI R30 , LOW ( _0xD + ( 97 ) )
0003ef e0f2     +LDI R31 , HIGH ( _0xD + ( 97 ) )
                 	__POINTW1MN _0xD,97
0003f0 940e 0e19 	CALL SUBOPT_0xA
0003f2 f431      	BRNE _0x21
0003f3 940e 0e10 	CALL SUBOPT_0x8
0003f5 30e8      	CPI  R30,LOW(0x8)
0003f6 e0a0      	LDI  R26,HIGH(0x8)
0003f7 07fa      	CPC  R31,R26
0003f8 f049      	BREQ _0x20
                 _0x21:
                 ; 0000 00B4                 {
                 ; 0000 00B5                     lcdCommand(0x01);
0003f9 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00B6                     lcd_gotoxy(1, 1);
                 ; 0000 00B7                     lcd_print("Invalid Card");
                +
0003fb eea0     +LDI R26 , LOW ( _0xD + ( 100 ) )
0003fc e0b2     +LDI R27 , HIGH ( _0xD + ( 100 ) )
                 	__POINTW2MN _0xD,100
0003fd d511      	RCALL _lcd_print
                 ; 0000 00B8                     BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0003fe 9a97      	SBI  0x12,7
                 ; 0000 00B9                     delay_ms(2000);
0003ff 940e 0e20 	CALL SUBOPT_0xB
                 ; 0000 00BA                     BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00BB                 }
                 ; 0000 00BC                 else{
000401 c036      	RJMP _0x23
                 _0x20:
                 ; 0000 00BD                     if (search_student_code() > 0){
000402 940e 09f9 	CALL _search_student_code
000404 30e1      	CPI  R30,LOW(0x1)
000405 f040      	BRLO _0x24
                 ; 0000 00BE                         BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000406 9a97      	SBI  0x12,7
                 ; 0000 00BF                         lcdCommand(0x01);
000407 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00C0                         lcd_gotoxy(1, 1);
                 ; 0000 00C1                         lcd_print("Duplicate Student Code");
                +
000409 eead     +LDI R26 , LOW ( _0xD + ( 113 ) )
00040a e0b2     +LDI R27 , HIGH ( _0xD + ( 113 ) )
                 	__POINTW2MN _0xD,113
00040b 940e 0e26 	CALL SUBOPT_0xC
                 ; 0000 00C2                         delay_ms(2000);
                 ; 0000 00C3                         BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00C4                     }
                 ; 0000 00C5                     else{
00040d c02a      	RJMP _0x25
                 _0x24:
                 ; 0000 00C6                         // save the buffer to EEPROM
                 ; 0000 00C7                         st_counts = read_byte_from_eeprom(0x0);
00040e 940e 0e29 	CALL SUBOPT_0xD
                 ; 0000 00C8                         for (i = 0; i < 8; i++)
                +
000410 e000     +LDI R16 , LOW ( 0 )
000411 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x27:
                +
000412 3008     +CPI R16 , LOW ( 8 )
000413 e0e0     +LDI R30 , HIGH ( 8 )
000414 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000415 f48c      	BRGE _0x28
                 ; 0000 00C9                         {
                 ; 0000 00CA                             write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000416 2fe5      	MOV  R30,R21
000417 940e 0e2f 	CALL SUBOPT_0xE
000419 0fe0      	ADD  R30,R16
00041a 1ff1      	ADC  R31,R17
00041b 93fa      	ST   -Y,R31
00041c 93ea      	ST   -Y,R30
00041d eba0      	LDI  R26,LOW(_buffer)
00041e e0b7      	LDI  R27,HIGH(_buffer)
00041f 0fa0      	ADD  R26,R16
000420 1fb1      	ADC  R27,R17
000421 91ac      	LD   R26,X
000422 940e 09d2 	CALL _write_byte_to_eeprom
                 ; 0000 00CB                         }
                +
000424 5f0f     +SUBI R16 , LOW ( - 1 )
000425 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000426 cfeb      	RJMP _0x27
                 _0x28:
                 ; 0000 00CC                         write_byte_to_eeprom(0x0, st_counts + 1);
000427 940e 0e34 	CALL SUBOPT_0xF
000429 2fa5      	MOV  R26,R21
00042a 5faf      	SUBI R26,-LOW(1)
00042b d5a6      	RCALL _write_byte_to_eeprom
                 ; 0000 00CD                         lcdCommand(0x01);
00042c 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00CE                         lcd_gotoxy(1, 1);
                 ; 0000 00CF                         lcd_print("Student added with ID:");
                +
00042e e0a4     +LDI R26 , LOW ( _0xD + ( 136 ) )
00042f e0b3     +LDI R27 , HIGH ( _0xD + ( 136 ) )
                 	__POINTW2MN _0xD,136
000430 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 00D0                         lcd_gotoxy(1, 2);
                 ; 0000 00D1                         lcd_print(buffer);
000432 940e 0e39 	CALL SUBOPT_0x10
                 ; 0000 00D2                         delay_ms(3000); // wait
000434 eba8      	LDI  R26,LOW(3000)
000435 e0bb      	LDI  R27,HIGH(3000)
000436 940e 0f48 	CALL _delay_ms
                 ; 0000 00D3                     }
                 _0x25:
                 ; 0000 00D4                 }
                 _0x23:
                 ; 0000 00D5                 memset(buffer,0,32);
000438 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 00D6             }
00043a cf91      	RJMP _0x18
                 _0x1A:
                 ; 0000 00D7         }
                 ; 0000 00D8         else if (stage == STAGE_TEMPERATURE_MONITORING)
00043b c0ee      	RJMP _0x29
                 _0x17:
00043c 940e 0e3d 	CALL SUBOPT_0x11
00043e f411      	BRNE _0x2A
                 ; 0000 00D9         {
                 ; 0000 00DA             show_temperature();
00043f d4e6      	RCALL _show_temperature
                 ; 0000 00DB         }
                 ; 0000 00DC         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000440 c0e9      	RJMP _0x2B
                 _0x2A:
000441 940e 0e42 	CALL SUBOPT_0x12
000443 f009      	BREQ PC+2
000444 c04b      	RJMP _0x2C
                 ; 0000 00DD         {
                 ; 0000 00DE             lcdCommand(0x01);
000445 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00DF             lcd_gotoxy(1, 1);
                 ; 0000 00E0             lcd_print("Number of students : ");
                +
000447 e1ab     +LDI R26 , LOW ( _0xD + ( 159 ) )
000448 e0b3     +LDI R27 , HIGH ( _0xD + ( 159 ) )
                 	__POINTW2MN _0xD,159
000449 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 00E1             lcd_gotoxy(1, 2);
                 ; 0000 00E2             st_counts = read_byte_from_eeprom(0x0);
00044b 940e 0e29 	CALL SUBOPT_0xD
                 ; 0000 00E3             memset(buffer, 0, 32);
00044d 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 00E4             itoa(st_counts, buffer);
00044f 2fe5      	MOV  R30,R21
000450 e0f0      	LDI  R31,0
000451 93fa      	ST   -Y,R31
000452 93ea      	ST   -Y,R30
000453 eba0      	LDI  R26,LOW(_buffer)
000454 e0b7      	LDI  R27,HIGH(_buffer)
000455 940e 0bc3 	CALL _itoa
                 ; 0000 00E5             lcd_print(buffer);
000457 940e 0e39 	CALL SUBOPT_0x10
                 ; 0000 00E6             delay_ms(1000);
000459 940e 0e47 	CALL SUBOPT_0x13
                 ; 0000 00E7 
                 ; 0000 00E8             for (i = 0; i < st_counts; i++)
                +
00045b e000     +LDI R16 , LOW ( 0 )
00045c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2E:
00045d 2fe5      	MOV  R30,R21
00045e 01d8      	MOVW R26,R16
00045f e0f0      	LDI  R31,0
000460 17ae      	CP   R26,R30
000461 07bf      	CPC  R27,R31
000462 f524      	BRGE _0x2F
                 ; 0000 00E9             {
                 ; 0000 00EA                 memset(buffer, 0, 32);
000463 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 00EB                 for (j = 0; j < 8; j++)
                +
000465 e020     +LDI R18 , LOW ( 0 )
000466 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x31:
                +
000467 3028     +CPI R18 , LOW ( 8 )
000468 e0e0     +LDI R30 , HIGH ( 8 )
000469 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00046a f46c      	BRGE _0x32
                 ; 0000 00EC                 {
                 ; 0000 00ED                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
00046b 01f9      	MOVW R30,R18
00046c 55e0      	SUBI R30,LOW(-_buffer)
00046d 4ff8      	SBCI R31,HIGH(-_buffer)
00046e 93ff      	PUSH R31
00046f 93ef      	PUSH R30
000470 940e 0e4b 	CALL SUBOPT_0x14
000472 91af      	POP  R26
000473 91bf      	POP  R27
000474 93ec      	ST   X,R30
                 ; 0000 00EE                 }
                +
000475 5f2f     +SUBI R18 , LOW ( - 1 )
000476 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000477 cfef      	RJMP _0x31
                 _0x32:
                 ; 0000 00EF                 buffer[j] = '\0';
000478 eba0      	LDI  R26,LOW(_buffer)
000479 e0b7      	LDI  R27,HIGH(_buffer)
00047a 0fa2      	ADD  R26,R18
00047b 1fb3      	ADC  R27,R19
00047c e0e0      	LDI  R30,LOW(0)
00047d 93ec      	ST   X,R30
                 ; 0000 00F0                 lcdCommand(0x01);
00047e 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00F1                 lcd_gotoxy(1, 1);
                 ; 0000 00F2                 lcd_print(buffer);
000480 940e 0e39 	CALL SUBOPT_0x10
                 ; 0000 00F3                 delay_ms(1000);
000482 940e 0e47 	CALL SUBOPT_0x13
                 ; 0000 00F4             }
                +
000484 5f0f     +SUBI R16 , LOW ( - 1 )
000485 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000486 cfd6      	RJMP _0x2E
                 _0x2F:
                 ; 0000 00F5 
                 ; 0000 00F6             lcdCommand(0x01);
000487 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00F7             lcd_gotoxy(1, 1);
                 ; 0000 00F8             lcd_print("Press Cancel To Go Back");
                +
000489 e3a1     +LDI R26 , LOW ( _0xD + ( 181 ) )
00048a e0b3     +LDI R27 , HIGH ( _0xD + ( 181 ) )
                 	__POINTW2MN _0xD,181
00048b d483      	RCALL _lcd_print
                 ; 0000 00F9             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x33:
00048c 940e 0e42 	CALL SUBOPT_0x12
00048e f3e9      	BREQ _0x33
                 ; 0000 00FA                 ;
                 ; 0000 00FB         }
                 ; 0000 00FC         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
00048f c09a      	RJMP _0x36
                 _0x2C:
000490 e0e6      	LDI  R30,LOW(6)
000491 e0f0      	LDI  R31,HIGH(6)
000492 15e4      	CP   R30,R4
000493 05f5      	CPC  R31,R5
000494 f5b9      	BRNE _0x37
                 ; 0000 00FD         {
                 ; 0000 00FE             lcdCommand(0x01);
000495 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 00FF             lcd_gotoxy(1, 1);
                 ; 0000 0100             lcd_print("Start Transferring...");
                +
000497 e4a9     +LDI R26 , LOW ( _0xD + ( 205 ) )
000498 e0b3     +LDI R27 , HIGH ( _0xD + ( 205 ) )
                 	__POINTW2MN _0xD,205
000499 d475      	RCALL _lcd_print
                 ; 0000 0101             st_counts = read_byte_from_eeprom(0x0);
00049a 940e 0e29 	CALL SUBOPT_0xD
                 ; 0000 0102             for (i = 0; i < st_counts; i++)
                +
00049c e000     +LDI R16 , LOW ( 0 )
00049d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x39:
00049e 2fe5      	MOV  R30,R21
00049f 01d8      	MOVW R26,R16
0004a0 e0f0      	LDI  R31,0
0004a1 17ae      	CP   R26,R30
0004a2 07bf      	CPC  R27,R31
0004a3 f494      	BRGE _0x3A
                 ; 0000 0103             {
                 ; 0000 0104                 for (j = 0; j < 8; j++)
                +
0004a4 e020     +LDI R18 , LOW ( 0 )
0004a5 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3C:
                +
0004a6 3028     +CPI R18 , LOW ( 8 )
0004a7 e0e0     +LDI R30 , HIGH ( 8 )
0004a8 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0004a9 f43c      	BRGE _0x3D
                 ; 0000 0105                 {
                 ; 0000 0106                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
0004aa 940e 0e4b 	CALL SUBOPT_0x14
0004ac 2fae      	MOV  R26,R30
0004ad d52f      	RCALL _USART_Transmit
                 ; 0000 0107                 }
                +
0004ae 5f2f     +SUBI R18 , LOW ( - 1 )
0004af 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004b0 cff5      	RJMP _0x3C
                 _0x3D:
                 ; 0000 0108 
                 ; 0000 0109                 USART_Transmit('\r');
0004b1 940e 0e54 	CALL SUBOPT_0x15
                 ; 0000 010A                 USART_Transmit('\r');
                 ; 0000 010B 
                 ; 0000 010C                 delay_ms(500);
                 ; 0000 010D             }
                +
0004b3 5f0f     +SUBI R16 , LOW ( - 1 )
0004b4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004b5 cfe8      	RJMP _0x39
                 _0x3A:
                 ; 0000 010E             for (j = 0; j < 8; j++)
                +
0004b6 e020     +LDI R18 , LOW ( 0 )
0004b7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3F:
                +
0004b8 3028     +CPI R18 , LOW ( 8 )
0004b9 e0e0     +LDI R30 , HIGH ( 8 )
0004ba 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0004bb f42c      	BRGE _0x40
                 ; 0000 010F             {
                 ; 0000 0110                 USART_Transmit('=');
0004bc e3ad      	LDI  R26,LOW(61)
0004bd d51f      	RCALL _USART_Transmit
                 ; 0000 0111             }
                +
0004be 5f2f     +SUBI R18 , LOW ( - 1 )
0004bf 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004c0 cff7      	RJMP _0x3F
                 _0x40:
                 ; 0000 0112 
                 ; 0000 0113             USART_Transmit('\r');
0004c1 940e 0e54 	CALL SUBOPT_0x15
                 ; 0000 0114             USART_Transmit('\r');
                 ; 0000 0115             delay_ms(500);
                 ; 0000 0116 
                 ; 0000 0117             lcdCommand(0x01);
0004c3 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0118             lcd_gotoxy(1, 1);
                 ; 0000 0119             lcd_print("Usart Transmit Finished");
                +
0004c5 e5af     +LDI R26 , LOW ( _0xD + ( 227 ) )
0004c6 e0b3     +LDI R27 , HIGH ( _0xD + ( 227 ) )
                 	__POINTW2MN _0xD,227
0004c7 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 011A             delay_ms(2000);
                 ; 0000 011B             stage = STAGE_INIT_MENU;
0004c9 2444      	CLR  R4
0004ca 2455      	CLR  R5
                 ; 0000 011C         }
                 ; 0000 011D         else if (stage == STAGE_STUDENT_MANAGMENT)
0004cb c05e      	RJMP _0x41
                 _0x37:
0004cc 940e 0e64 	CALL SUBOPT_0x17
0004ce f469      	BRNE _0x42
                 ; 0000 011E         {
                 ; 0000 011F             lcdCommand(0x01);
0004cf 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0120             lcd_gotoxy(1, 1);
                 ; 0000 0121             lcd_print("1: Search Student");
                +
0004d1 e7a7     +LDI R26 , LOW ( _0xD + ( 251 ) )
0004d2 e0b3     +LDI R27 , HIGH ( _0xD + ( 251 ) )
                 	__POINTW2MN _0xD,251
0004d3 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0122             lcd_gotoxy(1, 2);
                 ; 0000 0123             lcd_print("2: Delete Student");
                +
0004d5 e8a9     +LDI R26 , LOW ( _0xD + ( 269 ) )
0004d6 e0b3     +LDI R27 , HIGH ( _0xD + ( 269 ) )
                 	__POINTW2MN _0xD,269
0004d7 d437      	RCALL _lcd_print
                 ; 0000 0124             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x43:
0004d8 940e 0e64 	CALL SUBOPT_0x17
0004da f3e9      	BREQ _0x43
                 ; 0000 0125                 ;
                 ; 0000 0126         }
                 ; 0000 0127         else if (stage == STAGE_SEARCH_STUDENT)
0004db c04e      	RJMP _0x46
                 _0x42:
0004dc 940e 0e69 	CALL SUBOPT_0x18
0004de f461      	BRNE _0x47
                 ; 0000 0128         {
                 ; 0000 0129             lcdCommand(0x01);
0004df 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 012A             lcd_gotoxy(1, 1);
                 ; 0000 012B             lcd_print("Enter Student Code For Search:");
                +
0004e1 e9ab     +LDI R26 , LOW ( _0xD + ( 287 ) )
0004e2 e0b3     +LDI R27 , HIGH ( _0xD + ( 287 ) )
                 	__POINTW2MN _0xD,287
0004e3 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 012C             lcd_gotoxy(1, 2);
                 ; 0000 012D             lcdCommand(0x0f);   // display on, cursor blinking
0004e5 940e 0df4 	CALL SUBOPT_0x4
                 ; 0000 012E             delay_us(100 * 16); // wait
                 ; 0000 012F             while (stage == STAGE_SEARCH_STUDENT)
                 _0x48:
0004e7 940e 0e69 	CALL SUBOPT_0x18
0004e9 f3e9      	BREQ _0x48
                 ; 0000 0130                 ;
                 ; 0000 0131             lcdCommand(0x0c);   // display on, cursor off
0004ea c03c      	RJMP _0x164
                 ; 0000 0132             delay_us(100 * 16); // wait
                 ; 0000 0133         }
                 ; 0000 0134         else if (stage == STAGE_DELETE_STUDENT)
                 _0x47:
0004eb 940e 0e6e 	CALL SUBOPT_0x19
0004ed f461      	BRNE _0x4C
                 ; 0000 0135         {
                 ; 0000 0136             lcdCommand(0x01);
0004ee 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0137             lcd_gotoxy(1, 1);
                 ; 0000 0138             lcd_print("Enter Student Code For Delete:");
                +
0004f0 ebaa     +LDI R26 , LOW ( _0xD + ( 318 ) )
0004f1 e0b3     +LDI R27 , HIGH ( _0xD + ( 318 ) )
                 	__POINTW2MN _0xD,318
0004f2 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0139             lcd_gotoxy(1, 2);
                 ; 0000 013A             lcdCommand(0x0f);   // display on, cursor blinking
0004f4 940e 0df4 	CALL SUBOPT_0x4
                 ; 0000 013B             delay_us(100 * 16); // wait
                 ; 0000 013C             while (stage == STAGE_DELETE_STUDENT)
                 _0x4D:
0004f6 940e 0e6e 	CALL SUBOPT_0x19
0004f8 f3e9      	BREQ _0x4D
                 ; 0000 013D                 ;
                 ; 0000 013E             lcdCommand(0x0c); // display on, cursor off
0004f9 c02d      	RJMP _0x164
                 ; 0000 013F             delay_us(100 * 16);
                 ; 0000 0140         }
                 ; 0000 0141         else if (stage == STAGE_TRAFFIC_MONITORING)
                 _0x4C:
0004fa 940e 0e73 	CALL SUBOPT_0x1A
0004fc f429      	BRNE _0x51
                 ; 0000 0142         {
                 ; 0000 0143             startSonar();
0004fd 940e 0ac3 	CALL _startSonar
                 ; 0000 0144             stage = STAGE_INIT_MENU;
0004ff 2444      	CLR  R4
000500 2455      	CLR  R5
                 ; 0000 0145         }
                 ; 0000 0146         else if (stage == STAGE_LOGIN_WITH_ADMIN)
000501 c028      	RJMP _0x52
                 _0x51:
000502 940e 0e78 	CALL SUBOPT_0x1B
000504 f529      	BRNE _0x53
                 ; 0000 0147         {
                 ; 0000 0148             lcdCommand(0x01);
000505 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0149             lcd_gotoxy(1, 1);
                 ; 0000 014A             lcd_print("Enter Secret Code (or cancel)");
                +
000507 eda9     +LDI R26 , LOW ( _0xD + ( 349 ) )
000508 e0b3     +LDI R27 , HIGH ( _0xD + ( 349 ) )
                 	__POINTW2MN _0xD,349
000509 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 014B             lcd_gotoxy(1, 2);
                 ; 0000 014C             lcdCommand(0x0f);   // display on, cursor blinking
00050b 940e 0df4 	CALL SUBOPT_0x4
                 ; 0000 014D             delay_us(100 * 16); // wait
                 ; 0000 014E             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x54:
00050d 940e 0e78 	CALL SUBOPT_0x1B
00050f f411      	BRNE _0x57
000510 2099      	TST  R9
000511 f009      	BREQ _0x58
                 _0x57:
000512 c001      	RJMP _0x56
                 _0x58:
                 ; 0000 014F                 ;
000513 cff9      	RJMP _0x54
                 _0x56:
                 ; 0000 0150             if (logged_in == 1)
000514 e0e1      	LDI  R30,LOW(1)
000515 15e9      	CP   R30,R9
000516 f481      	BRNE _0x59
                 ; 0000 0151             {
                 ; 0000 0152                 lcdCommand(0x0c); // display on, cursor off
000517 e0ac      	LDI  R26,LOW(12)
000518 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 0153                 delay_us(100 * 16);
                 ; 0000 0154                 lcdCommand(0x01);
00051a 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0155                 lcd_gotoxy(1, 1);
                 ; 0000 0156                 lcd_print("1 : Clear EEPROM");
                +
00051c efa7     +LDI R26 , LOW ( _0xD + ( 379 ) )
00051d e0b3     +LDI R27 , HIGH ( _0xD + ( 379 ) )
                 	__POINTW2MN _0xD,379
00051e 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0157                 lcd_gotoxy(1, 2);
                 ; 0000 0158                 lcd_print("    press cancel to back");
                +
000520 e0a8     +LDI R26 , LOW ( _0xD + ( 396 ) )
000521 e0b4     +LDI R27 , HIGH ( _0xD + ( 396 ) )
                 	__POINTW2MN _0xD,396
000522 d3ec      	RCALL _lcd_print
                 ; 0000 0159                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x5A:
000523 940e 0e78 	CALL SUBOPT_0x1B
000525 f3e9      	BREQ _0x5A
                 ; 0000 015A                     ;
                 ; 0000 015B             }
                 ; 0000 015C             else
000526 c003      	RJMP _0x5D
                 _0x59:
                 ; 0000 015D             {
                 ; 0000 015E                 lcdCommand(0x0c); // display on, cursor off
                 _0x164:
000527 e0ac      	LDI  R26,LOW(12)
000528 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 015F                 delay_us(100 * 16);
                 ; 0000 0160             }
                 _0x5D:
                 ; 0000 0161         }
                 ; 0000 0162     }
                 _0x53:
                 _0x52:
                 _0x46:
                 _0x41:
                 _0x36:
                 _0x2B:
                 _0x29:
                 _0x11:
                 _0xB:
00052a ce76      	RJMP _0x7
                 ; 0000 0163 }
                 _0x5E:
00052b cfff      	RJMP _0x5E
                 ; .FEND
                 
                 	.DSEG
                 _0xD:
00027c           	.BYTE 0x1A5
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 0167 {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
00052c 920a      	ST   -Y,R0
00052d 921a      	ST   -Y,R1
00052e 92fa      	ST   -Y,R15
00052f 936a      	ST   -Y,R22
000530 937a      	ST   -Y,R23
000531 938a      	ST   -Y,R24
000532 939a      	ST   -Y,R25
000533 93aa      	ST   -Y,R26
000534 93ba      	ST   -Y,R27
000535 93ea      	ST   -Y,R30
000536 93fa      	ST   -Y,R31
000537 b7ef      	IN   R30,SREG
000538 93ea      	ST   -Y,R30
                 ; 0000 0168     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 0169     unsigned char second, minute, hour;
                 ; 0000 016A     unsigned char day, date, month, year;
                 ; 0000 016B     int i;
                 ; 0000 016C 
                 ; 0000 016D     // detect the key
                 ; 0000 016E     while (1)
000539 9728      	SBIW R28,8
00053a 940e 1115 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	second -> R20
                 ;	minute -> Y+13
                 ;	hour -> Y+12
                 ;	day -> Y+11
                 ;	date -> Y+10
                 ;	month -> Y+9
                 ;	year -> Y+8
                 ;	i -> Y+6
                 ; 0000 016F     {
                 ; 0000 0170         KEY_PRT = 0xEF;            // ground row 0
00053c eeef      	LDI  R30,LOW(239)
00053d 940e 0e80 	CALL SUBOPT_0x1D
                 ; 0000 0171         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0172         if (colloc != 0x0F)        // column detected
00053f f011      	BREQ _0x62
                 ; 0000 0173         {
                 ; 0000 0174             rowloc = 0; // save row location
000540 e000      	LDI  R16,LOW(0)
                 ; 0000 0175             break;      // exit while loop
000541 c012      	RJMP _0x61
                 ; 0000 0176         }
                 ; 0000 0177         KEY_PRT = 0xDF;            // ground row 1
                 _0x62:
000542 edef      	LDI  R30,LOW(223)
000543 940e 0e80 	CALL SUBOPT_0x1D
                 ; 0000 0178         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0179         if (colloc != 0x0F)        // column detected
000545 f011      	BREQ _0x63
                 ; 0000 017A         {
                 ; 0000 017B             rowloc = 1; // save row location
000546 e001      	LDI  R16,LOW(1)
                 ; 0000 017C             break;      // exit while loop
000547 c00c      	RJMP _0x61
                 ; 0000 017D         }
                 ; 0000 017E         KEY_PRT = 0xBF;            // ground row 2
                 _0x63:
000548 ebef      	LDI  R30,LOW(191)
000549 940e 0e80 	CALL SUBOPT_0x1D
                 ; 0000 017F         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0180         if (colloc != 0x0F)        // column detected
00054b f011      	BREQ _0x64
                 ; 0000 0181         {
                 ; 0000 0182             rowloc = 2; // save row location
00054c e002      	LDI  R16,LOW(2)
                 ; 0000 0183             break;      // exit while loop
00054d c006      	RJMP _0x61
                 ; 0000 0184         }
                 ; 0000 0185         KEY_PRT = 0x7F;            // ground row 3
                 _0x64:
00054e e7ef      	LDI  R30,LOW(127)
00054f bbe8      	OUT  0x18,R30
                 ; 0000 0186         colloc = (KEY_PIN & 0x0F); // read the columns
000550 b3e6      	IN   R30,0x16
000551 70ef      	ANDI R30,LOW(0xF)
000552 2f1e      	MOV  R17,R30
                 ; 0000 0187         rowloc = 3;                // save row location
000553 e003      	LDI  R16,LOW(3)
                 ; 0000 0188         break;                     // exit while loop
                 ; 0000 0189     }
                 _0x61:
                 ; 0000 018A     // check column and send result to Port D
                 ; 0000 018B     if (colloc == 0x0E)
000554 301e      	CPI  R17,14
000555 f411      	BRNE _0x65
                 ; 0000 018C         cl = 0;
000556 e030      	LDI  R19,LOW(0)
                 ; 0000 018D     else if (colloc == 0x0D)
000557 c009      	RJMP _0x66
                 _0x65:
000558 301d      	CPI  R17,13
000559 f411      	BRNE _0x67
                 ; 0000 018E         cl = 1;
00055a e031      	LDI  R19,LOW(1)
                 ; 0000 018F     else if (colloc == 0x0B)
00055b c005      	RJMP _0x68
                 _0x67:
00055c 301b      	CPI  R17,11
00055d f411      	BRNE _0x69
                 ; 0000 0190         cl = 2;
00055e e032      	LDI  R19,LOW(2)
                 ; 0000 0191     else
00055f c001      	RJMP _0x6A
                 _0x69:
                 ; 0000 0192         cl = 3;
000560 e033      	LDI  R19,LOW(3)
                 ; 0000 0193 
                 ; 0000 0194     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x6A:
                 _0x68:
                 _0x66:
000561 b3e8      	IN   R30,0x18
000562 70ef      	ANDI R30,LOW(0xF)
000563 bbe8      	OUT  0x18,R30
                 ; 0000 0195 
                 ; 0000 0196     // inside menu level 1
                 ; 0000 0197     if (stage == STAGE_INIT_MENU)
000564 2c04      	MOV  R0,R4
000565 2805      	OR   R0,R5
000566 f009      	BREQ PC+2
000567 c0df      	RJMP _0x6B
                 ; 0000 0198     {
                 ; 0000 0199         switch (keypad[rowloc][cl] - '0')
000568 940e 0e86 	CALL SUBOPT_0x1E
00056a 91ec      	LD   R30,X
00056b e0f0      	LDI  R31,0
00056c 97f0      	SBIW R30,48
                 ; 0000 019A         {
                 ; 0000 019B         case OPTION_ATTENDENCE:
00056d 30e1      	CPI  R30,LOW(0x1)
00056e e0a0      	LDI  R26,HIGH(0x1)
00056f 07fa      	CPC  R31,R26
000570 f421      	BRNE _0x6F
                 ; 0000 019C             stage = STAGE_ATTENDENC_MENU;
000571 e0e1      	LDI  R30,LOW(1)
000572 e0f0      	LDI  R31,HIGH(1)
000573 012f      	MOVW R4,R30
                 ; 0000 019D             break;
000574 c047      	RJMP _0x6E
                 ; 0000 019E         case OPTION_TEMPERATURE_MONITORING:
                 _0x6F:
000575 30e4      	CPI  R30,LOW(0x4)
000576 e0a0      	LDI  R26,HIGH(0x4)
000577 07fa      	CPC  R31,R26
000578 f421      	BRNE _0x70
                 ; 0000 019F             stage = STAGE_TEMPERATURE_MONITORING;
000579 e0e4      	LDI  R30,LOW(4)
00057a e0f0      	LDI  R31,HIGH(4)
00057b 012f      	MOVW R4,R30
                 ; 0000 01A0             break;
00057c c03f      	RJMP _0x6E
                 ; 0000 01A1         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x70:
00057d 30e3      	CPI  R30,LOW(0x3)
00057e e0a0      	LDI  R26,HIGH(0x3)
00057f 07fa      	CPC  R31,R26
000580 f421      	BRNE _0x71
                 ; 0000 01A2             stage = STAGE_VIEW_PRESENT_STUDENTS;
000581 e0e5      	LDI  R30,LOW(5)
000582 e0f0      	LDI  R31,HIGH(5)
000583 012f      	MOVW R4,R30
                 ; 0000 01A3             break;
000584 c037      	RJMP _0x6E
                 ; 0000 01A4         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x71:
000585 30e5      	CPI  R30,LOW(0x5)
000586 e0a0      	LDI  R26,HIGH(0x5)
000587 07fa      	CPC  R31,R26
000588 f421      	BRNE _0x72
                 ; 0000 01A5             stage = STAGE_RETRIEVE_STUDENT_DATA;
000589 e0e6      	LDI  R30,LOW(6)
00058a e0f0      	LDI  R31,HIGH(6)
00058b 012f      	MOVW R4,R30
                 ; 0000 01A6             break;
00058c c02f      	RJMP _0x6E
                 ; 0000 01A7         case OPTION_STUDENT_MANAGEMENT:
                 _0x72:
00058d 30e2      	CPI  R30,LOW(0x2)
00058e e0a0      	LDI  R26,HIGH(0x2)
00058f 07fa      	CPC  R31,R26
000590 f421      	BRNE _0x73
                 ; 0000 01A8             stage = STAGE_STUDENT_MANAGMENT;
000591 e0e7      	LDI  R30,LOW(7)
000592 e0f0      	LDI  R31,HIGH(7)
000593 012f      	MOVW R4,R30
                 ; 0000 01A9             break;
000594 c027      	RJMP _0x6E
                 ; 0000 01AA         case OPTION_TRAFFIC_MONITORING:
                 _0x73:
000595 30e6      	CPI  R30,LOW(0x6)
000596 e0a0      	LDI  R26,HIGH(0x6)
000597 07fa      	CPC  R31,R26
000598 f421      	BRNE _0x74
                 ; 0000 01AB             stage = STAGE_TRAFFIC_MONITORING;
000599 e0ea      	LDI  R30,LOW(10)
00059a e0f0      	LDI  R31,HIGH(10)
00059b 012f      	MOVW R4,R30
                 ; 0000 01AC             break;
00059c c01f      	RJMP _0x6E
                 ; 0000 01AD         case OPTION_LOGIN_WITH_ADMIN:
                 _0x74:
00059d 30e7      	CPI  R30,LOW(0x7)
00059e e0a0      	LDI  R26,HIGH(0x7)
00059f 07fa      	CPC  R31,R26
0005a0 f421      	BRNE _0x75
                 ; 0000 01AE             stage = STAGE_LOGIN_WITH_ADMIN;
0005a1 e0eb      	LDI  R30,LOW(11)
0005a2 e0f0      	LDI  R31,HIGH(11)
0005a3 012f      	MOVW R4,R30
                 ; 0000 01AF             break;
0005a4 c017      	RJMP _0x6E
                 ; 0000 01B0         case OPTION_LOGOUT:
                 _0x75:
0005a5 30e8      	CPI  R30,LOW(0x8)
0005a6 e0a0      	LDI  R26,HIGH(0x8)
0005a7 07fa      	CPC  R31,R26
0005a8 f499      	BRNE _0x79
                 ; 0000 01B1 #asm("cli") // disable interrupts
0005a9 94f8      	cli
                 ; 0000 01B2             if (logged_in == 1)
0005aa e0e1      	LDI  R30,LOW(1)
0005ab 15e9      	CP   R30,R9
0005ac f479      	BRNE _0x77
                 ; 0000 01B3             {
                 ; 0000 01B4                 lcdCommand(0x1);
0005ad 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 01B5                 lcd_gotoxy(1, 1);
                 ; 0000 01B6                 lcd_print("Logout ...");
                +
0005af e2a1     +LDI R26 , LOW ( _0x78 + ( 0 ) )
0005b0 e0b4     +LDI R27 , HIGH ( _0x78 + ( 0 ) )
                 	__POINTW2MN _0x78,0
0005b1 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 01B7                 lcd_gotoxy(1, 2);
                 ; 0000 01B8                 lcd_print("Going To Admin Page In 2 Sec");
                +
0005b3 e2ac     +LDI R26 , LOW ( _0x78 + ( 11 ) )
0005b4 e0b4     +LDI R27 , HIGH ( _0x78 + ( 11 ) )
                 	__POINTW2MN _0x78,11
0005b5 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 01B9                 delay_ms(2000);
                 ; 0000 01BA                 logged_in = 0;
0005b7 2499      	CLR  R9
                 ; 0000 01BB #asm("sei")
0005b8 9478      	sei
                 ; 0000 01BC                 stage = STAGE_LOGIN_WITH_ADMIN;
0005b9 e0eb      	LDI  R30,LOW(11)
0005ba e0f0      	LDI  R31,HIGH(11)
0005bb 012f      	MOVW R4,R30
                 ; 0000 01BD             }
                 ; 0000 01BE             break;
                 _0x77:
                 ; 0000 01BF         default:
                 _0x79:
                 ; 0000 01C0             break;
                 ; 0000 01C1         }
                 _0x6E:
                 ; 0000 01C2 
                 ; 0000 01C3         if (keypad[rowloc][cl] == 'L')
0005bc 940e 0e86 	CALL SUBOPT_0x1E
0005be 91ac      	LD   R26,X
0005bf 34ac      	CPI  R26,LOW(0x4C)
0005c0 f451      	BRNE _0x7A
                 ; 0000 01C4         {
                 ; 0000 01C5             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0005c1 e0e0      	LDI  R30,LOW(0)
0005c2 15e7      	CP   R30,R7
0005c3 f420      	BRSH _0x7B
0005c4 2de7      	MOV  R30,R7
0005c5 e0f0      	LDI  R31,0
0005c6 9731      	SBIW R30,1
0005c7 c001      	RJMP _0x7C
                 _0x7B:
0005c8 e0e3      	LDI  R30,LOW(3)
                 _0x7C:
0005c9 2e7e      	MOV  R7,R30
                 ; 0000 01C6         }
                 ; 0000 01C7         else if (keypad[rowloc][cl] == 'R')
0005ca c07b      	RJMP _0x7E
                 _0x7A:
0005cb 940e 0e86 	CALL SUBOPT_0x1E
0005cd 91ac      	LD   R26,X
0005ce 35a2      	CPI  R26,LOW(0x52)
0005cf f449      	BRNE _0x7F
                 ; 0000 01C8         {
                 ; 0000 01C9             page_num = (page_num + 1) % MENU_PAGE_COUNT;
0005d0 2de7      	MOV  R30,R7
0005d1 e0f0      	LDI  R31,0
0005d2 9631      	ADIW R30,1
0005d3 e0a3      	LDI  R26,LOW(3)
0005d4 e0b0      	LDI  R27,HIGH(3)
0005d5 940e 10ef 	CALL __MANDW12
0005d7 2e7e      	MOV  R7,R30
                 ; 0000 01CA         }
                 ; 0000 01CB         else if(keypad[rowloc][cl] == 'O')
0005d8 c06d      	RJMP _0x80
                 _0x7F:
0005d9 940e 0e86 	CALL SUBOPT_0x1E
0005db 91ac      	LD   R26,X
0005dc 34af      	CPI  R26,LOW(0x4F)
0005dd f009      	BREQ PC+2
0005de c067      	RJMP _0x81
                 ; 0000 01CC         {
                 ; 0000 01CD             while(1){
                 _0x82:
                 ; 0000 01CE                 lcdCommand(0x1);
0005df e0a1      	LDI  R26,LOW(1)
0005e0 d2e6      	RCALL _lcdCommand
                 ; 0000 01CF                 rtc_getTime(&hour, &minute, &second);
0005e1 01fe      	MOVW R30,R28
0005e2 963c      	ADIW R30,12
0005e3 93fa      	ST   -Y,R31
0005e4 93ea      	ST   -Y,R30
0005e5 01fe      	MOVW R30,R28
0005e6 963f      	ADIW R30,15
0005e7 93fa      	ST   -Y,R31
0005e8 93ea      	ST   -Y,R30
0005e9 b7ad      	IN   R26,SPL
0005ea b7be      	IN   R27,SPH
0005eb 934f      	PUSH R20
0005ec d5af      	RCALL _rtc_getTime
0005ed 914f      	POP  R20
                 ; 0000 01D0                 sprintf(time, "%02x:%02x:%02x  ", hour, minute, second);
0005ee edee      	LDI  R30,LOW(_time)
0005ef e0f7      	LDI  R31,HIGH(_time)
0005f0 93fa      	ST   -Y,R31
0005f1 93ea      	ST   -Y,R30
                +
0005f2 e7e7     +LDI R30 , LOW ( 2 * _0x0 + ( 489 ) )
0005f3 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 489 ) )
                 	__POINTW1FN _0x0,489
0005f4 93fa      	ST   -Y,R31
0005f5 93ea      	ST   -Y,R30
0005f6 89e8      	LDD  R30,Y+16
0005f7 940e 0e92 	CALL SUBOPT_0x1F
0005f9 89ed      	LDD  R30,Y+21
0005fa 940e 0e92 	CALL SUBOPT_0x1F
0005fc 2fe4      	MOV  R30,R20
0005fd 940e 0e92 	CALL SUBOPT_0x1F
0005ff e08c      	LDI  R24,12
000600 940e 0da7 	CALL _sprintf
000602 9660      	ADIW R28,16
                 ; 0000 01D1                 lcd_gotoxy(1,1);
000603 e0e1      	LDI  R30,LOW(1)
000604 940e 0e98 	CALL SUBOPT_0x20
                 ; 0000 01D2                 lcd_print(time);
000606 edae      	LDI  R26,LOW(_time)
000607 e0b7      	LDI  R27,HIGH(_time)
000608 d306      	RCALL _lcd_print
                 ; 0000 01D3                 rtc_getDate(&year, &month, &date, &day);
000609 01fe      	MOVW R30,R28
00060a 9638      	ADIW R30,8
00060b 93fa      	ST   -Y,R31
00060c 93ea      	ST   -Y,R30
00060d 01fe      	MOVW R30,R28
00060e 963b      	ADIW R30,11
00060f 93fa      	ST   -Y,R31
000610 93ea      	ST   -Y,R30
000611 01fe      	MOVW R30,R28
000612 963e      	ADIW R30,14
000613 93fa      	ST   -Y,R31
000614 93ea      	ST   -Y,R30
000615 01de      	MOVW R26,R28
000616 9651      	ADIW R26,17
000617 d595      	RCALL _rtc_getDate
                 ; 0000 01D4                 sprintf(time, "20%02x/%02x/%02x  %3s", year, month, date, days[day - 1]);
000618 edee      	LDI  R30,LOW(_time)
000619 e0f7      	LDI  R31,HIGH(_time)
00061a 93fa      	ST   -Y,R31
00061b 93ea      	ST   -Y,R30
                +
00061c e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 506 ) )
00061d e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 506 ) )
                 	__POINTW1FN _0x0,506
00061e 93fa      	ST   -Y,R31
00061f 93ea      	ST   -Y,R30
000620 85ec      	LDD  R30,Y+12
000621 940e 0e92 	CALL SUBOPT_0x1F
000623 89e9      	LDD  R30,Y+17
000624 940e 0e92 	CALL SUBOPT_0x1F
000626 89ee      	LDD  R30,Y+22
000627 940e 0e92 	CALL SUBOPT_0x1F
000629 8deb      	LDD  R30,Y+27
00062a e0f0      	LDI  R31,0
00062b 9731      	SBIW R30,1
00062c eda0      	LDI  R26,LOW(_days)
00062d e0b7      	LDI  R27,HIGH(_days)
00062e 0fee      	LSL  R30
00062f 1fff      	ROL  R31
000630 0fae      	ADD  R26,R30
000631 1fbf      	ADC  R27,R31
000632 940e 10f9 	CALL __GETW1P
000634 2766      	CLR  R22
000635 2777      	CLR  R23
000636 940e 1110 	CALL __PUTPARD1
000638 e180      	LDI  R24,16
000639 940e 0da7 	CALL _sprintf
00063b 9664      	ADIW R28,20
                 ; 0000 01D5                 lcd_gotoxy(1,2);
00063c e0e1      	LDI  R30,LOW(1)
00063d 93ea      	ST   -Y,R30
00063e e0a2      	LDI  R26,LOW(2)
00063f d2b8      	RCALL _lcd_gotoxy
                 ; 0000 01D6                 lcd_print(time);
000640 edae      	LDI  R26,LOW(_time)
000641 e0b7      	LDI  R27,HIGH(_time)
000642 d2cc      	RCALL _lcd_print
                 ; 0000 01D7                 delay_ms(1000);
000643 940e 0e47 	CALL SUBOPT_0x13
                 ; 0000 01D8             }
000645 cf99      	RJMP _0x82
                 ; 0000 01D9 
                 ; 0000 01DA         }
                 ; 0000 01DB     }
                 _0x81:
                 _0x80:
                 _0x7E:
                 ; 0000 01DC     else if (stage == STAGE_ATTENDENC_MENU)
000646 c26f      	RJMP _0x85
                 _0x6B:
000647 940e 0ddb 	CALL SUBOPT_0x0
000649 f4f9      	BRNE _0x86
                 ; 0000 01DD     {
                 ; 0000 01DE         switch (keypad[rowloc][cl])
00064a 940e 0e86 	CALL SUBOPT_0x1E
00064c 91ec      	LD   R30,X
00064d e0f0      	LDI  R31,0
                 ; 0000 01DF         {
                 ; 0000 01E0         case 'C':
00064e 34e3      	CPI  R30,LOW(0x43)
00064f e0a0      	LDI  R26,HIGH(0x43)
000650 07fa      	CPC  R31,R26
000651 f419      	BRNE _0x8A
                 ; 0000 01E1             stage = STAGE_INIT_MENU;
000652 2444      	CLR  R4
000653 2455      	CLR  R5
                 ; 0000 01E2             break;
000654 c013      	RJMP _0x89
                 ; 0000 01E3         case '1':
                 _0x8A:
000655 33e1      	CPI  R30,LOW(0x31)
000656 e0a0      	LDI  R26,HIGH(0x31)
000657 07fa      	CPC  R31,R26
000658 f431      	BRNE _0x8B
                 ; 0000 01E4             memset(buffer, 0, 32);
000659 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 01E5             stage = STAGE_SUBMIT_CODE;
00065b e0e2      	LDI  R30,LOW(2)
00065c e0f0      	LDI  R31,HIGH(2)
00065d 012f      	MOVW R4,R30
                 ; 0000 01E6             break;
00065e c009      	RJMP _0x89
                 ; 0000 01E7         case '2':
                 _0x8B:
00065f 33e2      	CPI  R30,LOW(0x32)
000660 e0a0      	LDI  R26,HIGH(0x32)
000661 07fa      	CPC  R31,R26
000662 f429      	BRNE _0x8D
                 ; 0000 01E8             memset(buffer, 0, 32);
000663 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 01E9             stage = STAGE_SUBMIT_WITH_CARD;
000665 e0e3      	LDI  R30,LOW(3)
000666 e0f0      	LDI  R31,HIGH(3)
000667 012f      	MOVW R4,R30
                 ; 0000 01EA             break;
                 ; 0000 01EB         default:
                 _0x8D:
                 ; 0000 01EC             break;
                 ; 0000 01ED         }
                 _0x89:
                 ; 0000 01EE     }
                 ; 0000 01EF     else if (stage == STAGE_SUBMIT_CODE)
000668 c24d      	RJMP _0x8E
                 _0x86:
000669 940e 0def 	CALL SUBOPT_0x3
00066b f009      	BREQ PC+2
00066c c09a      	RJMP _0x8F
                 ; 0000 01F0     {
                 ; 0000 01F1 
                 ; 0000 01F2         if (keypad[rowloc][cl] == 'C')
00066d 940e 0e86 	CALL SUBOPT_0x1E
00066f 91ac      	LD   R26,X
000670 34a3      	CPI  R26,LOW(0x43)
000671 f429      	BRNE _0x90
                 ; 0000 01F3         {
                 ; 0000 01F4             memset(buffer, 0, 32);
000672 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 01F5             stage = STAGE_ATTENDENC_MENU;
000674 e0e1      	LDI  R30,LOW(1)
000675 e0f0      	LDI  R31,HIGH(1)
000676 012f      	MOVW R4,R30
                 ; 0000 01F6         }
                 ; 0000 01F7         if ((keypad[rowloc][cl] - '0') < 10)
                 _0x90:
000677 940e 0e86 	CALL SUBOPT_0x1E
000679 91ec      	LD   R30,X
00067a e0f0      	LDI  R31,0
00067b 97fa      	SBIW R30,58
00067c f47c      	BRGE _0x91
                 ; 0000 01F8         {
                 ; 0000 01F9             if (strlen(buffer) <= 30)
00067d 940e 0e10 	CALL SUBOPT_0x8
00067f 977f      	SBIW R30,31
000680 f450      	BRSH _0x92
                 ; 0000 01FA             {
                 ; 0000 01FB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000681 940e 0e10 	CALL SUBOPT_0x8
000683 940e 0e9c 	CALL SUBOPT_0x21
000685 940e 0ea0 	CALL SUBOPT_0x22
                 ; 0000 01FC                 buffer[strlen(buffer) + 1] = '\0';
000687 940e 0ea4 	CALL SUBOPT_0x23
                 ; 0000 01FD                 lcdData(keypad[rowloc][cl]);
000689 91ac      	LD   R26,X
00068a d248      	RCALL _lcdData
                 ; 0000 01FE             }
                 ; 0000 01FF         }
                 _0x92:
                 ; 0000 0200         else if (keypad[rowloc][cl] == 'D')
00068b c07a      	RJMP _0x93
                 _0x91:
00068c 940e 0e86 	CALL SUBOPT_0x1E
00068e 91ac      	LD   R26,X
00068f 34a4      	CPI  R26,LOW(0x44)
000690 f461      	BRNE _0x94
                 ; 0000 0201         {
                 ; 0000 0202             buffer_len = strlen(buffer);
000691 940e 0e10 	CALL SUBOPT_0x8
000693 2f5e      	MOV  R21,R30
                 ; 0000 0203             if (buffer_len > 0)
000694 3051      	CPI  R21,1
000695 f030      	BRLO _0x95
                 ; 0000 0204             {
                 ; 0000 0205                 buffer[buffer_len - 1] = '\0';
000696 940e 0ea9 	CALL SUBOPT_0x24
                 ; 0000 0206                 lcdCommand(0x10);
                 ; 0000 0207                 lcd_print(" ");
                +
000698 e4a9     +LDI R26 , LOW ( _0x78 + ( 40 ) )
000699 e0b4     +LDI R27 , HIGH ( _0x78 + ( 40 ) )
                 	__POINTW2MN _0x78,40
00069a 940e 0eb3 	CALL SUBOPT_0x25
                 ; 0000 0208                 lcdCommand(0x10);
                 ; 0000 0209             }
                 ; 0000 020A         }
                 _0x95:
                 ; 0000 020B         else if (keypad[rowloc][cl] == 'E')
00069c c069      	RJMP _0x96
                 _0x94:
00069d 940e 0e86 	CALL SUBOPT_0x1E
00069f 91ac      	LD   R26,X
0006a0 34a5      	CPI  R26,LOW(0x45)
0006a1 f009      	BREQ PC+2
0006a2 c05b      	RJMP _0x97
                 ; 0000 020C         {
                 ; 0000 020D 
                 ; 0000 020E #asm("cli")
0006a3 94f8      	cli
                 ; 0000 020F 
                 ; 0000 0210             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0211                 strlen(buffer) != 8)
0006a4 940e 0e14 	CALL SUBOPT_0x9
                +
0006a6 e4eb     +LDI R30 , LOW ( _0x78 + ( 42 ) )
0006a7 e0f4     +LDI R31 , HIGH ( _0x78 + ( 42 ) )
                 	__POINTW1MN _0x78,42
0006a8 940e 0e19 	CALL SUBOPT_0xA
0006aa f431      	BRNE _0x99
0006ab 940e 0e10 	CALL SUBOPT_0x8
0006ad 30e8      	CPI  R30,LOW(0x8)
0006ae e0a0      	LDI  R26,HIGH(0x8)
0006af 07fa      	CPC  R31,R26
0006b0 f061      	BREQ _0x98
                 _0x99:
                 ; 0000 0212             {
                 ; 0000 0213 
                 ; 0000 0214                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0006b1 9a97      	SBI  0x12,7
                 ; 0000 0215                 lcdCommand(0x01);
0006b2 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0216                 lcd_gotoxy(1, 1);
                 ; 0000 0217                 lcd_print("Incorrect Student Code Format");
                +
0006b4 e4ae     +LDI R26 , LOW ( _0x78 + ( 45 ) )
0006b5 e0b4     +LDI R27 , HIGH ( _0x78 + ( 45 ) )
                 	__POINTW2MN _0x78,45
0006b6 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0218                 lcd_gotoxy(1, 2);
                 ; 0000 0219                 lcd_print("You Will Back Menu In 2 Second");
                +
0006b8 e6ac     +LDI R26 , LOW ( _0x78 + ( 75 ) )
0006b9 e0b4     +LDI R27 , HIGH ( _0x78 + ( 75 ) )
                 	__POINTW2MN _0x78,75
0006ba 940e 0e26 	CALL SUBOPT_0xC
                 ; 0000 021A                 delay_ms(2000);
                 ; 0000 021B                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 021C             }
                 ; 0000 021D             else if (search_student_code() > 0)
0006bc c03d      	RJMP _0x9B
                 _0x98:
0006bd d33b      	RCALL _search_student_code
0006be 30e1      	CPI  R30,LOW(0x1)
0006bf f060      	BRLO _0x9C
                 ; 0000 021E             {
                 ; 0000 021F                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0006c0 9a97      	SBI  0x12,7
                 ; 0000 0220                 lcdCommand(0x01);
0006c1 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0221                 lcd_gotoxy(1, 1);
                 ; 0000 0222                 lcd_print("Duplicate Student Code Entered");
                +
0006c3 e8ab     +LDI R26 , LOW ( _0x78 + ( 106 ) )
0006c4 e0b4     +LDI R27 , HIGH ( _0x78 + ( 106 ) )
                 	__POINTW2MN _0x78,106
0006c5 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0223                 lcd_gotoxy(1, 2);
                 ; 0000 0224                 lcd_print("You Will Back Menu In 2 Second");
                +
0006c7 eaaa     +LDI R26 , LOW ( _0x78 + ( 137 ) )
0006c8 e0b4     +LDI R27 , HIGH ( _0x78 + ( 137 ) )
                 	__POINTW2MN _0x78,137
0006c9 940e 0e26 	CALL SUBOPT_0xC
                 ; 0000 0225                 delay_ms(2000);
                 ; 0000 0226                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0227             }
                 ; 0000 0228             else
0006cb c02e      	RJMP _0x9D
                 _0x9C:
                 ; 0000 0229             {
                 ; 0000 022A                 // save the buffer to EEPROM
                 ; 0000 022B                 st_counts = read_byte_from_eeprom(0x0);
0006cc 940e 0eb8 	CALL SUBOPT_0x26
0006ce 2f2e      	MOV  R18,R30
                 ; 0000 022C                 for (i = 0; i < 8; i++)
0006cf e0e0      	LDI  R30,LOW(0)
0006d0 83ee      	STD  Y+6,R30
0006d1 83ef      	STD  Y+6+1,R30
                 _0x9F:
0006d2 81ae      	LDD  R26,Y+6
0006d3 81bf      	LDD  R27,Y+6+1
0006d4 9718      	SBIW R26,8
0006d5 f4ac      	BRGE _0xA0
                 ; 0000 022D                 {
                 ; 0000 022E                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
0006d6 2fe2      	MOV  R30,R18
0006d7 940e 0e2f 	CALL SUBOPT_0xE
0006d9 81ae      	LDD  R26,Y+6
0006da 81bf      	LDD  R27,Y+6+1
0006db 0fea      	ADD  R30,R26
0006dc 1ffb      	ADC  R31,R27
0006dd 93fa      	ST   -Y,R31
0006de 93ea      	ST   -Y,R30
0006df 85e8      	LDD  R30,Y+8
0006e0 85f9      	LDD  R31,Y+8+1
0006e1 55e0      	SUBI R30,LOW(-_buffer)
0006e2 4ff8      	SBCI R31,HIGH(-_buffer)
0006e3 81a0      	LD   R26,Z
0006e4 d2ed      	RCALL _write_byte_to_eeprom
                 ; 0000 022F                 }
0006e5 81ee      	LDD  R30,Y+6
0006e6 81ff      	LDD  R31,Y+6+1
0006e7 9631      	ADIW R30,1
0006e8 83ee      	STD  Y+6,R30
0006e9 83ff      	STD  Y+6+1,R31
0006ea cfe7      	RJMP _0x9F
                 _0xA0:
                 ; 0000 0230                 write_byte_to_eeprom(0x0, st_counts + 1);
0006eb 940e 0e34 	CALL SUBOPT_0xF
0006ed 2fa2      	MOV  R26,R18
0006ee 5faf      	SUBI R26,-LOW(1)
0006ef d2e2      	RCALL _write_byte_to_eeprom
                 ; 0000 0231 
                 ; 0000 0232                 lcdCommand(0x01);
0006f0 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0233                 lcd_gotoxy(1, 1);
                 ; 0000 0234                 lcd_print("Student Code Successfully Added");
                +
0006f2 eca9     +LDI R26 , LOW ( _0x78 + ( 168 ) )
0006f3 e0b4     +LDI R27 , HIGH ( _0x78 + ( 168 ) )
                 	__POINTW2MN _0x78,168
0006f4 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0235                 lcd_gotoxy(1, 2);
                 ; 0000 0236                 lcd_print("You Will Back Menu In 2 Second");
                +
0006f6 eea9     +LDI R26 , LOW ( _0x78 + ( 200 ) )
0006f7 e0b4     +LDI R27 , HIGH ( _0x78 + ( 200 ) )
                 	__POINTW2MN _0x78,200
0006f8 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 0237                 delay_ms(2000);
                 ; 0000 0238             }
                 _0x9D:
                 _0x9B:
                 ; 0000 0239             memset(buffer, 0, 32);
0006fa 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 023A #asm("sei")
0006fc 9478      	sei
                 ; 0000 023B             stage = STAGE_ATTENDENC_MENU;
0006fd c005      	RJMP _0x165
                 ; 0000 023C         }
                 ; 0000 023D         else if (keypad[rowloc][cl] == 'C')
                 _0x97:
0006fe 940e 0e86 	CALL SUBOPT_0x1E
000700 91ac      	LD   R26,X
000701 34a3      	CPI  R26,LOW(0x43)
000702 f419      	BRNE _0xA2
                 ; 0000 023E             stage = STAGE_ATTENDENC_MENU;
                 _0x165:
000703 e0e1      	LDI  R30,LOW(1)
000704 e0f0      	LDI  R31,HIGH(1)
000705 012f      	MOVW R4,R30
                 ; 0000 023F     }
                 _0xA2:
                 _0x96:
                 _0x93:
                 ; 0000 0240     else if (stage == STAGE_SUBMIT_WITH_CARD)
000706 c1af      	RJMP _0xA3
                 _0x8F:
000707 940e 0dfc 	CALL SUBOPT_0x5
000709 f459      	BRNE _0xA4
                 ; 0000 0241     {
                 ; 0000 0242         if (keypad[rowloc][cl] == 'C')
00070a 940e 0e86 	CALL SUBOPT_0x1E
00070c 91ac      	LD   R26,X
00070d 34a3      	CPI  R26,LOW(0x43)
00070e f429      	BRNE _0xA5
                 ; 0000 0243         {
                 ; 0000 0244             memset(buffer, 0, 32);
00070f 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 0245             stage = STAGE_ATTENDENC_MENU;
000711 e0e1      	LDI  R30,LOW(1)
000712 e0f0      	LDI  R31,HIGH(1)
000713 012f      	MOVW R4,R30
                 ; 0000 0246         }
                 ; 0000 0247     }
                 _0xA5:
                 ; 0000 0248     else if (stage == STAGE_TEMPERATURE_MONITORING)
000714 c1a1      	RJMP _0xA6
                 _0xA4:
000715 940e 0e3d 	CALL SUBOPT_0x11
000717 f441      	BRNE _0xA7
                 ; 0000 0249     {
                 ; 0000 024A 
                 ; 0000 024B         if (keypad[rowloc][cl] == 'C')
000718 940e 0e86 	CALL SUBOPT_0x1E
00071a 91ac      	LD   R26,X
00071b 34a3      	CPI  R26,LOW(0x43)
00071c f411      	BRNE _0xA8
                 ; 0000 024C             stage = STAGE_INIT_MENU;
00071d 2444      	CLR  R4
00071e 2455      	CLR  R5
                 ; 0000 024D     }
                 _0xA8:
                 ; 0000 024E     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00071f c196      	RJMP _0xA9
                 _0xA7:
000720 940e 0e42 	CALL SUBOPT_0x12
000722 f441      	BRNE _0xAA
                 ; 0000 024F     {
                 ; 0000 0250         if (keypad[rowloc][cl] == 'C')
000723 940e 0e86 	CALL SUBOPT_0x1E
000725 91ac      	LD   R26,X
000726 34a3      	CPI  R26,LOW(0x43)
000727 f411      	BRNE _0xAB
                 ; 0000 0251             stage = STAGE_INIT_MENU;
000728 2444      	CLR  R4
000729 2455      	CLR  R5
                 ; 0000 0252     }
                 _0xAB:
                 ; 0000 0253     else if (stage == STAGE_STUDENT_MANAGMENT)
00072a c18b      	RJMP _0xAC
                 _0xAA:
00072b 940e 0e64 	CALL SUBOPT_0x17
00072d f591      	BRNE _0xAD
                 ; 0000 0254     {
                 ; 0000 0255         if (keypad[rowloc][cl] == 'C')
00072e 940e 0e86 	CALL SUBOPT_0x1E
000730 91ac      	LD   R26,X
000731 34a3      	CPI  R26,LOW(0x43)
000732 f419      	BRNE _0xAE
                 ; 0000 0256             stage = STAGE_INIT_MENU;
000733 2444      	CLR  R4
000734 2455      	CLR  R5
                 ; 0000 0257         else if (keypad[rowloc][cl] == '1')
000735 c029      	RJMP _0xAF
                 _0xAE:
000736 940e 0e86 	CALL SUBOPT_0x1E
000738 91ac      	LD   R26,X
000739 33a1      	CPI  R26,LOW(0x31)
00073a f419      	BRNE _0xB0
                 ; 0000 0258             stage = STAGE_SEARCH_STUDENT;
00073b e0e8      	LDI  R30,LOW(8)
00073c e0f0      	LDI  R31,HIGH(8)
00073d c020      	RJMP _0x166
                 ; 0000 0259         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xB0:
00073e 940e 0e86 	CALL SUBOPT_0x1E
000740 91ac      	LD   R26,X
000741 33a2      	CPI  R26,LOW(0x32)
000742 f419      	BRNE _0xB3
000743 e0e1      	LDI  R30,LOW(1)
000744 15e9      	CP   R30,R9
000745 f009      	BREQ _0xB4
                 _0xB3:
000746 c003      	RJMP _0xB2
                 _0xB4:
                 ; 0000 025A             stage = STAGE_DELETE_STUDENT;
000747 e0e9      	LDI  R30,LOW(9)
000748 e0f0      	LDI  R31,HIGH(9)
000749 c014      	RJMP _0x166
                 ; 0000 025B         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xB2:
00074a 940e 0e86 	CALL SUBOPT_0x1E
00074c 91ac      	LD   R26,X
00074d 33a2      	CPI  R26,LOW(0x32)
00074e f411      	BRNE _0xB7
00074f 2099      	TST  R9
000750 f009      	BREQ _0xB8
                 _0xB7:
000751 c00d      	RJMP _0xB6
                 _0xB8:
                 ; 0000 025C         {
                 ; 0000 025D             lcdCommand(0x01);
000752 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 025E             lcd_gotoxy(1, 1);
                 ; 0000 025F             lcd_print("You Must First Login");
                +
000754 e0a8     +LDI R26 , LOW ( _0x78 + ( 231 ) )
000755 e0b5     +LDI R27 , HIGH ( _0x78 + ( 231 ) )
                 	__POINTW2MN _0x78,231
000756 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0260             lcd_gotoxy(1, 2);
                 ; 0000 0261             lcd_print("You Will Go Admin Page 2 Sec");
                +
000758 e1ad     +LDI R26 , LOW ( _0x78 + ( 252 ) )
000759 e0b5     +LDI R27 , HIGH ( _0x78 + ( 252 ) )
                 	__POINTW2MN _0x78,252
00075a 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 0262             delay_ms(2000);
                 ; 0000 0263             stage = STAGE_LOGIN_WITH_ADMIN;
00075c e0eb      	LDI  R30,LOW(11)
00075d e0f0      	LDI  R31,HIGH(11)
                 _0x166:
00075e 012f      	MOVW R4,R30
                 ; 0000 0264         }
                 ; 0000 0265     }
                 _0xB6:
                 _0xAF:
                 ; 0000 0266     else if (stage == STAGE_SEARCH_STUDENT)
00075f c156      	RJMP _0xB9
                 _0xAD:
000760 940e 0e69 	CALL SUBOPT_0x18
000762 f009      	BREQ PC+2
000763 c05c      	RJMP _0xBA
                 ; 0000 0267     {
                 ; 0000 0268         if (keypad[rowloc][cl] == 'C')
000764 940e 0e86 	CALL SUBOPT_0x1E
000766 91ac      	LD   R26,X
000767 34a3      	CPI  R26,LOW(0x43)
000768 f419      	BRNE _0xBB
                 ; 0000 0269         {
                 ; 0000 026A             memset(buffer, 0, 32);
000769 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 026B             stage = STAGE_STUDENT_MANAGMENT;
00076b c050      	RJMP _0x167
                 ; 0000 026C         }
                 ; 0000 026D         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xBB:
00076c 940e 0e86 	CALL SUBOPT_0x1E
00076e 91ec      	LD   R30,X
00076f e0f0      	LDI  R31,0
000770 97fa      	SBIW R30,58
000771 f47c      	BRGE _0xBD
                 ; 0000 026E         {
                 ; 0000 026F             if (strlen(buffer) <= 30)
000772 940e 0e10 	CALL SUBOPT_0x8
000774 977f      	SBIW R30,31
000775 f450      	BRSH _0xBE
                 ; 0000 0270             {
                 ; 0000 0271                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000776 940e 0e10 	CALL SUBOPT_0x8
000778 940e 0e9c 	CALL SUBOPT_0x21
00077a 940e 0ea0 	CALL SUBOPT_0x22
                 ; 0000 0272                 buffer[strlen(buffer) + 1] = '\0';
00077c 940e 0ea4 	CALL SUBOPT_0x23
                 ; 0000 0273                 lcdData(keypad[rowloc][cl]);
00077e 91ac      	LD   R26,X
00077f d153      	RCALL _lcdData
                 ; 0000 0274             }
                 ; 0000 0275         }
                 _0xBE:
                 ; 0000 0276         else if (keypad[rowloc][cl] == 'D')
000780 c03e      	RJMP _0xBF
                 _0xBD:
000781 940e 0e86 	CALL SUBOPT_0x1E
000783 91ac      	LD   R26,X
000784 34a4      	CPI  R26,LOW(0x44)
000785 f461      	BRNE _0xC0
                 ; 0000 0277         {
                 ; 0000 0278             buffer_len = strlen(buffer);
000786 940e 0e10 	CALL SUBOPT_0x8
000788 2f5e      	MOV  R21,R30
                 ; 0000 0279             if (buffer_len > 0)
000789 3051      	CPI  R21,1
00078a f030      	BRLO _0xC1
                 ; 0000 027A             {
                 ; 0000 027B                 buffer[buffer_len - 1] = '\0';
00078b 940e 0ea9 	CALL SUBOPT_0x24
                 ; 0000 027C                 lcdCommand(0x10);
                 ; 0000 027D                 lcd_print(" ");
                +
00078d e3aa     +LDI R26 , LOW ( _0x78 + ( 281 ) )
00078e e0b5     +LDI R27 , HIGH ( _0x78 + ( 281 ) )
                 	__POINTW2MN _0x78,281
00078f 940e 0eb3 	CALL SUBOPT_0x25
                 ; 0000 027E                 lcdCommand(0x10);
                 ; 0000 027F             }
                 ; 0000 0280         }
                 _0xC1:
                 ; 0000 0281         else if (keypad[rowloc][cl] == 'E')
000791 c02d      	RJMP _0xC2
                 _0xC0:
000792 940e 0e86 	CALL SUBOPT_0x1E
000794 91ac      	LD   R26,X
000795 34a5      	CPI  R26,LOW(0x45)
000796 f501      	BRNE _0xC3
                 ; 0000 0282         {
                 ; 0000 0283             // search from eeprom data
                 ; 0000 0284             unsigned char result = search_student_code();
                 ; 0000 0285 
                 ; 0000 0286             if (result > 0)
000797 940e 0ebc 	CALL SUBOPT_0x27
                 ;	minute -> Y+14
                 ;	hour -> Y+13
                 ;	day -> Y+12
                 ;	date -> Y+11
                 ;	month -> Y+10
                 ;	year -> Y+9
                 ;	i -> Y+7
                 ;	result -> Y+0
000799 f048      	BRLO _0xC4
                 ; 0000 0287             {
                 ; 0000 0288                 lcdCommand(0x01);
00079a 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0289                 lcd_gotoxy(1, 1);
                 ; 0000 028A                 lcd_print("Student Code Found");
                +
00079c e3ac     +LDI R26 , LOW ( _0x78 + ( 283 ) )
00079d e0b5     +LDI R27 , HIGH ( _0x78 + ( 283 ) )
                 	__POINTW2MN _0x78,283
00079e 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 028B                 lcd_gotoxy(1, 2);
                 ; 0000 028C                 lcd_print("You Will Back Menu In 2 Second");
                +
0007a0 e4af     +LDI R26 , LOW ( _0x78 + ( 302 ) )
0007a1 e0b5     +LDI R27 , HIGH ( _0x78 + ( 302 ) )
                 	__POINTW2MN _0x78,302
0007a2 c008      	RJMP _0x168
                 ; 0000 028D                 delay_ms(2000);
                 ; 0000 028E             }
                 ; 0000 028F             else
                 _0xC4:
                 ; 0000 0290             {
                 ; 0000 0291                 lcdCommand(0x01);
0007a3 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0292                 lcd_gotoxy(1, 1);
                 ; 0000 0293                 lcd_print("Ops , Student Code Not Found");
                +
0007a5 e6ae     +LDI R26 , LOW ( _0x78 + ( 333 ) )
0007a6 e0b5     +LDI R27 , HIGH ( _0x78 + ( 333 ) )
                 	__POINTW2MN _0x78,333
0007a7 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0294                 lcd_gotoxy(1, 2);
                 ; 0000 0295                 lcd_print("You Will Back Menu In 2 Second");
                +
0007a9 e8ab     +LDI R26 , LOW ( _0x78 + ( 362 ) )
0007aa e0b5     +LDI R27 , HIGH ( _0x78 + ( 362 ) )
                 	__POINTW2MN _0x78,362
                 _0x168:
0007ab d163      	RCALL _lcd_print
                 ; 0000 0296                 delay_ms(2000);
0007ac eda0      	LDI  R26,LOW(2000)
0007ad e0b7      	LDI  R27,HIGH(2000)
0007ae 940e 0f48 	CALL _delay_ms
                 ; 0000 0297             }
                 ; 0000 0298             memset(buffer, 0, 32);
0007b0 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 0299             stage = STAGE_STUDENT_MANAGMENT;
0007b2 e0e7      	LDI  R30,LOW(7)
0007b3 e0f0      	LDI  R31,HIGH(7)
0007b4 012f      	MOVW R4,R30
                 ; 0000 029A         }
0007b5 9621      	ADIW R28,1
                 ; 0000 029B         else if (keypad[rowloc][cl] == 'C')
0007b6 c008      	RJMP _0xC6
                 _0xC3:
0007b7 940e 0e86 	CALL SUBOPT_0x1E
0007b9 91ac      	LD   R26,X
0007ba 34a3      	CPI  R26,LOW(0x43)
0007bb f419      	BRNE _0xC7
                 ; 0000 029C             stage = STAGE_STUDENT_MANAGMENT;
                 _0x167:
0007bc e0e7      	LDI  R30,LOW(7)
0007bd e0f0      	LDI  R31,HIGH(7)
0007be 012f      	MOVW R4,R30
                 ; 0000 029D     }
                 _0xC7:
                 _0xC6:
                 _0xC2:
                 _0xBF:
                 ; 0000 029E     else if (stage == STAGE_DELETE_STUDENT)
0007bf c0f6      	RJMP _0xC8
                 _0xBA:
0007c0 940e 0e6e 	CALL SUBOPT_0x19
0007c2 f009      	BREQ PC+2
0007c3 c061      	RJMP _0xC9
                 ; 0000 029F     {
                 ; 0000 02A0         if (keypad[rowloc][cl] == 'C')
0007c4 940e 0e86 	CALL SUBOPT_0x1E
0007c6 91ac      	LD   R26,X
0007c7 34a3      	CPI  R26,LOW(0x43)
0007c8 f431      	BRNE _0xCA
                 ; 0000 02A1         {
                 ; 0000 02A2             memset(buffer, 0, 32);
0007c9 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 02A3             stage = STAGE_STUDENT_MANAGMENT;
0007cb e0e7      	LDI  R30,LOW(7)
0007cc e0f0      	LDI  R31,HIGH(7)
0007cd 012f      	MOVW R4,R30
                 ; 0000 02A4         }
                 ; 0000 02A5         else if ((keypad[rowloc][cl] - '0') < 10)
0007ce c055      	RJMP _0xCB
                 _0xCA:
0007cf 940e 0e86 	CALL SUBOPT_0x1E
0007d1 91ec      	LD   R30,X
0007d2 e0f0      	LDI  R31,0
0007d3 97fa      	SBIW R30,58
0007d4 f47c      	BRGE _0xCC
                 ; 0000 02A6         {
                 ; 0000 02A7             if (strlen(buffer) <= 30)
0007d5 940e 0e10 	CALL SUBOPT_0x8
0007d7 977f      	SBIW R30,31
0007d8 f450      	BRSH _0xCD
                 ; 0000 02A8             {
                 ; 0000 02A9                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0007d9 940e 0e10 	CALL SUBOPT_0x8
0007db 940e 0e9c 	CALL SUBOPT_0x21
0007dd 940e 0ea0 	CALL SUBOPT_0x22
                 ; 0000 02AA                 buffer[strlen(buffer) + 1] = '\0';
0007df 940e 0ea4 	CALL SUBOPT_0x23
                 ; 0000 02AB                 lcdData(keypad[rowloc][cl]);
0007e1 91ac      	LD   R26,X
0007e2 d0f0      	RCALL _lcdData
                 ; 0000 02AC             }
                 ; 0000 02AD         }
                 _0xCD:
                 ; 0000 02AE         else if (keypad[rowloc][cl] == 'D')
0007e3 c040      	RJMP _0xCE
                 _0xCC:
0007e4 940e 0e86 	CALL SUBOPT_0x1E
0007e6 91ac      	LD   R26,X
0007e7 34a4      	CPI  R26,LOW(0x44)
0007e8 f461      	BRNE _0xCF
                 ; 0000 02AF         {
                 ; 0000 02B0             buffer_len = strlen(buffer);
0007e9 940e 0e10 	CALL SUBOPT_0x8
0007eb 2f5e      	MOV  R21,R30
                 ; 0000 02B1             if (buffer_len > 0)
0007ec 3051      	CPI  R21,1
0007ed f030      	BRLO _0xD0
                 ; 0000 02B2             {
                 ; 0000 02B3                 buffer[buffer_len - 1] = '\0';
0007ee 940e 0ea9 	CALL SUBOPT_0x24
                 ; 0000 02B4                 lcdCommand(0x10);
                 ; 0000 02B5                 lcd_print(" ");
                +
0007f0 eaaa     +LDI R26 , LOW ( _0x78 + ( 393 ) )
0007f1 e0b5     +LDI R27 , HIGH ( _0x78 + ( 393 ) )
                 	__POINTW2MN _0x78,393
0007f2 940e 0eb3 	CALL SUBOPT_0x25
                 ; 0000 02B6                 lcdCommand(0x10);
                 ; 0000 02B7             }
                 ; 0000 02B8         }
                 _0xD0:
                 ; 0000 02B9         else if (keypad[rowloc][cl] == 'E')
0007f4 c02f      	RJMP _0xD1
                 _0xCF:
0007f5 940e 0e86 	CALL SUBOPT_0x1E
0007f7 91ac      	LD   R26,X
0007f8 34a5      	CPI  R26,LOW(0x45)
0007f9 f551      	BRNE _0xD2
                 ; 0000 02BA         {
                 ; 0000 02BB             // search from eeprom data
                 ; 0000 02BC             unsigned char result = search_student_code();
                 ; 0000 02BD 
                 ; 0000 02BE             if (result > 0)
0007fa 940e 0ebc 	CALL SUBOPT_0x27
                 ;	minute -> Y+14
                 ;	hour -> Y+13
                 ;	day -> Y+12
                 ;	date -> Y+11
                 ;	month -> Y+10
                 ;	year -> Y+9
                 ;	i -> Y+7
                 ;	result -> Y+0
0007fc f0a0      	BRLO _0xD3
                 ; 0000 02BF             {
                 ; 0000 02C0                 lcdCommand(0x01);
0007fd 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 02C1                 lcd_gotoxy(1, 1);
                 ; 0000 02C2                 lcd_print("Student Code Found");
                +
0007ff eaac     +LDI R26 , LOW ( _0x78 + ( 395 ) )
000800 e0b5     +LDI R27 , HIGH ( _0x78 + ( 395 ) )
                 	__POINTW2MN _0x78,395
000801 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 02C3                 lcd_gotoxy(1, 2);
                 ; 0000 02C4                 lcd_print("Wait For Delete...");
                +
000803 ebaf     +LDI R26 , LOW ( _0x78 + ( 414 ) )
000804 e0b5     +LDI R27 , HIGH ( _0x78 + ( 414 ) )
                 	__POINTW2MN _0x78,414
000805 d109      	RCALL _lcd_print
                 ; 0000 02C5                 delete_student_code(result);
000806 81a8      	LD   R26,Y
000807 d239      	RCALL _delete_student_code
                 ; 0000 02C6                 lcdCommand(0x01);
000808 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 02C7                 lcd_gotoxy(1, 1);
                 ; 0000 02C8                 lcd_print("Student Code Was Deleted");
                +
00080a eda2     +LDI R26 , LOW ( _0x78 + ( 433 ) )
00080b e0b5     +LDI R27 , HIGH ( _0x78 + ( 433 ) )
                 	__POINTW2MN _0x78,433
00080c 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 02C9                 lcd_gotoxy(1, 2);
                 ; 0000 02CA                 lcd_print("You Will Back Menu In 2 Second");
                +
00080e eeab     +LDI R26 , LOW ( _0x78 + ( 458 ) )
00080f e0b5     +LDI R27 , HIGH ( _0x78 + ( 458 ) )
                 	__POINTW2MN _0x78,458
000810 c008      	RJMP _0x169
                 ; 0000 02CB                 delay_ms(2000);
                 ; 0000 02CC             }
                 ; 0000 02CD             else
                 _0xD3:
                 ; 0000 02CE             {
                 ; 0000 02CF                 lcdCommand(0x01);
000811 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 02D0                 lcd_gotoxy(1, 1);
                 ; 0000 02D1                 lcd_print("Ops , Student Code Not Found");
                +
000813 e0aa     +LDI R26 , LOW ( _0x78 + ( 489 ) )
000814 e0b6     +LDI R27 , HIGH ( _0x78 + ( 489 ) )
                 	__POINTW2MN _0x78,489
000815 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 02D2                 lcd_gotoxy(1, 2);
                 ; 0000 02D3                 lcd_print("You Will Back Menu In 2 Second");
                +
000817 e2a7     +LDI R26 , LOW ( _0x78 + ( 518 ) )
000818 e0b6     +LDI R27 , HIGH ( _0x78 + ( 518 ) )
                 	__POINTW2MN _0x78,518
                 _0x169:
000819 d0f5      	RCALL _lcd_print
                 ; 0000 02D4                 delay_ms(2000);
00081a eda0      	LDI  R26,LOW(2000)
00081b e0b7      	LDI  R27,HIGH(2000)
00081c 940e 0f48 	CALL _delay_ms
                 ; 0000 02D5             }
                 ; 0000 02D6             memset(buffer, 0, 32);
00081e 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 02D7             stage = STAGE_STUDENT_MANAGMENT;
000820 e0e7      	LDI  R30,LOW(7)
000821 e0f0      	LDI  R31,HIGH(7)
000822 012f      	MOVW R4,R30
                 ; 0000 02D8         }
000823 9621      	ADIW R28,1
                 ; 0000 02D9     }
                 _0xD2:
                 _0xD1:
                 _0xCE:
                 _0xCB:
                 ; 0000 02DA     else if (stage == STAGE_TRAFFIC_MONITORING)
000824 c091      	RJMP _0xD5
                 _0xC9:
000825 940e 0e73 	CALL SUBOPT_0x1A
000827 f441      	BRNE _0xD6
                 ; 0000 02DB     {
                 ; 0000 02DC         if (keypad[rowloc][cl] == 'C')
000828 940e 0e86 	CALL SUBOPT_0x1E
00082a 91ac      	LD   R26,X
00082b 34a3      	CPI  R26,LOW(0x43)
00082c f411      	BRNE _0xD7
                 ; 0000 02DD             stage = STAGE_INIT_MENU;
00082d 2444      	CLR  R4
00082e 2455      	CLR  R5
                 ; 0000 02DE     }
                 _0xD7:
                 ; 0000 02DF     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
00082f c086      	RJMP _0xD8
                 _0xD6:
000830 940e 0e78 	CALL SUBOPT_0x1B
000832 f419      	BRNE _0xDA
000833 e0e1      	LDI  R30,LOW(1)
000834 15e9      	CP   R30,R9
000835 f409      	BRNE _0xDB
                 _0xDA:
000836 c05e      	RJMP _0xD9
                 _0xDB:
                 ; 0000 02E0     {
                 ; 0000 02E1         if (keypad[rowloc][cl] == 'C')
000837 940e 0e86 	CALL SUBOPT_0x1E
000839 91ac      	LD   R26,X
00083a 34a3      	CPI  R26,LOW(0x43)
00083b f429      	BRNE _0xDC
                 ; 0000 02E2         {
                 ; 0000 02E3             memset(buffer, 0, 32);
00083c 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 02E4             stage = STAGE_INIT_MENU;
00083e 2444      	CLR  R4
00083f 2455      	CLR  R5
                 ; 0000 02E5         }
                 ; 0000 02E6 
                 ; 0000 02E7         else if ((keypad[rowloc][cl] - '0') < 10)
000840 c053      	RJMP _0xDD
                 _0xDC:
000841 940e 0e86 	CALL SUBOPT_0x1E
000843 91ec      	LD   R30,X
000844 e0f0      	LDI  R31,0
000845 97fa      	SBIW R30,58
000846 f47c      	BRGE _0xDE
                 ; 0000 02E8         {
                 ; 0000 02E9             if (strlen(buffer) <= 30)
000847 940e 0e10 	CALL SUBOPT_0x8
000849 977f      	SBIW R30,31
00084a f450      	BRSH _0xDF
                 ; 0000 02EA             {
                 ; 0000 02EB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00084b 940e 0e10 	CALL SUBOPT_0x8
00084d 940e 0e9c 	CALL SUBOPT_0x21
00084f 940e 0ea0 	CALL SUBOPT_0x22
                 ; 0000 02EC                 buffer[strlen(buffer) + 1] = '\0';
000851 940e 0ea4 	CALL SUBOPT_0x23
                 ; 0000 02ED                 lcdData(keypad[rowloc][cl]);
000853 91ac      	LD   R26,X
000854 d07e      	RCALL _lcdData
                 ; 0000 02EE             }
                 ; 0000 02EF         }
                 _0xDF:
                 ; 0000 02F0         else if (keypad[rowloc][cl] == 'D')
000855 c03e      	RJMP _0xE0
                 _0xDE:
000856 940e 0e86 	CALL SUBOPT_0x1E
000858 91ac      	LD   R26,X
000859 34a4      	CPI  R26,LOW(0x44)
00085a f461      	BRNE _0xE1
                 ; 0000 02F1         {
                 ; 0000 02F2             buffer_len = strlen(buffer);
00085b 940e 0e10 	CALL SUBOPT_0x8
00085d 2f5e      	MOV  R21,R30
                 ; 0000 02F3             if (buffer_len > 0)
00085e 3051      	CPI  R21,1
00085f f030      	BRLO _0xE2
                 ; 0000 02F4             {
                 ; 0000 02F5                 buffer[buffer_len - 1] = '\0';
000860 940e 0ea9 	CALL SUBOPT_0x24
                 ; 0000 02F6                 lcdCommand(0x10);
                 ; 0000 02F7                 lcd_print(" ");
                +
000862 e4a6     +LDI R26 , LOW ( _0x78 + ( 549 ) )
000863 e0b6     +LDI R27 , HIGH ( _0x78 + ( 549 ) )
                 	__POINTW2MN _0x78,549
000864 940e 0eb3 	CALL SUBOPT_0x25
                 ; 0000 02F8                 lcdCommand(0x10);
                 ; 0000 02F9             }
                 ; 0000 02FA         }
                 _0xE2:
                 ; 0000 02FB         else if (keypad[rowloc][cl] == 'E')
000866 c02d      	RJMP _0xE3
                 _0xE1:
000867 940e 0e86 	CALL SUBOPT_0x1E
000869 91ac      	LD   R26,X
00086a 34a5      	CPI  R26,LOW(0x45)
00086b f541      	BRNE _0xE4
                 ; 0000 02FC         {
                 ; 0000 02FD             // search from eeprom data
                 ; 0000 02FE             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 02FF 
                 ; 0000 0300             if (input_hash == secret)
00086c 9722      	SBIW R28,2
                 ;	minute -> Y+15
                 ;	hour -> Y+14
                 ;	day -> Y+13
                 ;	date -> Y+12
                 ;	month -> Y+11
                 ;	year -> Y+10
                 ;	i -> Y+8
                 ;	input_hash -> Y+0
00086d eba0      	LDI  R26,LOW(_buffer)
00086e e0b7      	LDI  R27,HIGH(_buffer)
00086f d2d6      	RCALL _simple_hash
000870 83e8      	ST   Y,R30
000871 83f9      	STD  Y+1,R31
000872 81a8      	LD   R26,Y
000873 81b9      	LDD  R27,Y+1
000874 36a4      	CPI  R26,LOW(0xF64)
000875 e0ef      	LDI  R30,HIGH(0xF64)
000876 07be      	CPC  R27,R30
000877 f469      	BRNE _0xE5
                 ; 0000 0301             {
                 ; 0000 0302                 lcdCommand(0x01);
000878 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0303                 lcd_gotoxy(1, 1);
                 ; 0000 0304                 lcd_print("Login Successfully");
                +
00087a e4a8     +LDI R26 , LOW ( _0x78 + ( 551 ) )
00087b e0b6     +LDI R27 , HIGH ( _0x78 + ( 551 ) )
                 	__POINTW2MN _0x78,551
00087c 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0305                 lcd_gotoxy(1, 2);
                 ; 0000 0306                 lcd_print("Wait...");
                +
00087e e5ab     +LDI R26 , LOW ( _0x78 + ( 570 ) )
00087f e0b6     +LDI R27 , HIGH ( _0x78 + ( 570 ) )
                 	__POINTW2MN _0x78,570
000880 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 0307                 delay_ms(2000);
                 ; 0000 0308                 logged_in = 1;
000882 e0e1      	LDI  R30,LOW(1)
000883 2e9e      	MOV  R9,R30
                 ; 0000 0309             }
                 ; 0000 030A             else
000884 c00a      	RJMP _0xE6
                 _0xE5:
                 ; 0000 030B             {
                 ; 0000 030C                 lcdCommand(0x01);
000885 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 030D                 lcd_gotoxy(1, 1);
                 ; 0000 030E                 lcd_print("Ops , secret is incorrect");
                +
000887 e6a3     +LDI R26 , LOW ( _0x78 + ( 578 ) )
000888 e0b6     +LDI R27 , HIGH ( _0x78 + ( 578 ) )
                 	__POINTW2MN _0x78,578
000889 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 030F                 lcd_gotoxy(1, 2);
                 ; 0000 0310                 lcd_print("You Will Back Menu In 2 Second");
                +
00088b e7ad     +LDI R26 , LOW ( _0x78 + ( 604 ) )
00088c e0b6     +LDI R27 , HIGH ( _0x78 + ( 604 ) )
                 	__POINTW2MN _0x78,604
00088d 940e 0e5e 	CALL SUBOPT_0x16
                 ; 0000 0311                 delay_ms(2000);
                 ; 0000 0312             }
                 _0xE6:
                 ; 0000 0313             memset(buffer, 0, 32);
00088f 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 0314             stage = STAGE_INIT_MENU;
000891 2444      	CLR  R4
000892 2455      	CLR  R5
                 ; 0000 0315         }
000893 9622      	ADIW R28,2
                 ; 0000 0316     }
                 _0xE4:
                 _0xE3:
                 _0xE0:
                 _0xDD:
                 ; 0000 0317     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
000894 c021      	RJMP _0xE7
                 _0xD9:
000895 940e 0e78 	CALL SUBOPT_0x1B
000897 f411      	BRNE _0xE9
000898 2099      	TST  R9
000899 f409      	BRNE _0xEA
                 _0xE9:
00089a c01b      	RJMP _0xE8
                 _0xEA:
                 ; 0000 0318     {
                 ; 0000 0319         switch (keypad[rowloc][cl])
00089b 940e 0e86 	CALL SUBOPT_0x1E
00089d 91ec      	LD   R30,X
00089e e0f0      	LDI  R31,0
                 ; 0000 031A         {
                 ; 0000 031B         case 'C':
00089f 34e3      	CPI  R30,LOW(0x43)
0008a0 e0a0      	LDI  R26,HIGH(0x43)
0008a1 07fa      	CPC  R31,R26
0008a2 f419      	BRNE _0xEE
                 ; 0000 031C             stage = STAGE_INIT_MENU;
0008a3 2444      	CLR  R4
0008a4 2455      	CLR  R5
                 ; 0000 031D             break;
0008a5 c00c      	RJMP _0xED
                 ; 0000 031E         case '1':
                 _0xEE:
0008a6 33e1      	CPI  R30,LOW(0x31)
0008a7 e0a0      	LDI  R26,HIGH(0x31)
0008a8 07fa      	CPC  R31,R26
0008a9 f441      	BRNE _0xF0
                 ; 0000 031F #asm("cli") // disable interrupts
0008aa 94f8      	cli
                 ; 0000 0320             lcdCommand(0x1);
0008ab 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0321             lcd_gotoxy(1, 1);
                 ; 0000 0322             lcd_print("Clearing EEPROM ...");
                +
0008ad e9ac     +LDI R26 , LOW ( _0x78 + ( 635 ) )
0008ae e0b6     +LDI R27 , HIGH ( _0x78 + ( 635 ) )
                 	__POINTW2MN _0x78,635
0008af d05f      	RCALL _lcd_print
                 ; 0000 0323             clear_eeprom();
0008b0 d0fb      	RCALL _clear_eeprom
                 ; 0000 0324 #asm("sei") // enable interrupts
0008b1 9478      	sei
                 ; 0000 0325             break;
                 ; 0000 0326         default:
                 _0xF0:
                 ; 0000 0327             break;
                 ; 0000 0328         }
                 _0xED:
                 ; 0000 0329         memset(buffer, 0, 32);
0008b2 940e 0e01 	CALL SUBOPT_0x6
                 ; 0000 032A         stage = STAGE_INIT_MENU;
0008b4 2444      	CLR  R4
0008b5 2455      	CLR  R5
                 ; 0000 032B     }
                 ; 0000 032C }
                 _0xE8:
                 _0xE7:
                 _0xD8:
                 _0xD5:
                 _0xC8:
                 _0xB9:
                 _0xAC:
                 _0xA9:
                 _0xA6:
                 _0xA3:
                 _0x8E:
                 _0x85:
0008b6 940e 111c 	CALL __LOADLOCR6
0008b8 962e      	ADIW R28,14
0008b9 91e9      	LD   R30,Y+
0008ba bfef      	OUT  SREG,R30
0008bb 91f9      	LD   R31,Y+
0008bc 91e9      	LD   R30,Y+
0008bd 91b9      	LD   R27,Y+
0008be 91a9      	LD   R26,Y+
0008bf 9199      	LD   R25,Y+
0008c0 9189      	LD   R24,Y+
0008c1 9179      	LD   R23,Y+
0008c2 9169      	LD   R22,Y+
0008c3 90f9      	LD   R15,Y+
0008c4 9019      	LD   R1,Y+
0008c5 9009      	LD   R0,Y+
0008c6 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x78:
000421           	.BYTE 0x28F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 032F {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 0330     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0008c7 940e 0ec3 	CALL SUBOPT_0x28
                 ;	cmnd -> Y+0
                 ; 0000 0331     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0008c9 98d8      	CBI  0x1B,0
                 ; 0000 0332     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0008ca 940e 0ecc 	CALL SUBOPT_0x29
                 ; 0000 0333     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0334     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0335     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0336     delay_us(20 * 16);         // wait
                +
0008cc e880     +LDI R24 , LOW ( 640 )
0008cd e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0008ce 9701     +SBIW R24 , 1
0008cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 0337     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0008d0 940e 0ed3 	CALL SUBOPT_0x2A
                 ; 0000 0338     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0339     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 033A     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 033B }
0008d2 c2b8      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 033D {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 033E     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0008d3 940e 0ec3 	CALL SUBOPT_0x28
                 ;	data -> Y+0
                 ; 0000 033F     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0008d5 9ad8      	SBI  0x1B,0
                 ; 0000 0340     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0008d6 940e 0ecc 	CALL SUBOPT_0x29
                 ; 0000 0341     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0342     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0343     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0344     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0008d8 940e 0ed3 	CALL SUBOPT_0x2A
                 ; 0000 0345     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0346     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0347     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0348 }
0008da c2b0      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 034A {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 034B     LCD_DDR = 0xFF;            // LCD port is output
0008db efef      	LDI  R30,LOW(255)
0008dc bbea      	OUT  0x1A,R30
                 ; 0000 034C     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0008dd 98da      	CBI  0x1B,2
                 ; 0000 034D     delay_us(2000 * 16);       // wait for stable power
                +
0008de e080     +LDI R24 , LOW ( 64000 )
0008df ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0008e0 9701     +SBIW R24 , 1
0008e1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 034E     lcdCommand(0x33);          //$33 for 4-bit mode
0008e2 e3a3      	LDI  R26,LOW(51)
0008e3 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 034F     delay_us(100 * 16);        // wait
                 ; 0000 0350     lcdCommand(0x32);          //$32 for 4-bit mode
0008e5 e3a2      	LDI  R26,LOW(50)
0008e6 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 0351     delay_us(100 * 16);        // wait
                 ; 0000 0352     lcdCommand(0x28);          //$28 for 4-bit mode
0008e8 e2a8      	LDI  R26,LOW(40)
0008e9 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 0353     delay_us(100 * 16);        // wait
                 ; 0000 0354     lcdCommand(0x0c);          // display on, cursor off
0008eb e0ac      	LDI  R26,LOW(12)
0008ec 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 0355     delay_us(100 * 16);        // wait
                 ; 0000 0356     lcdCommand(0x01);          // clear LCD
0008ee e0a1      	LDI  R26,LOW(1)
0008ef dfd7      	RCALL _lcdCommand
                 ; 0000 0357     delay_us(2000 * 16);       // wait
                +
0008f0 e080     +LDI R24 , LOW ( 64000 )
0008f1 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0008f2 9701     +SBIW R24 , 1
0008f3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0358     lcdCommand(0x06);          // shift cursor right
0008f4 e0a6      	LDI  R26,LOW(6)
0008f5 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 0359     delay_us(100 * 16);
                 ; 0000 035A }
0008f7 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 035C {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 035D     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 035E     lcdCommand(firstCharAdr[y - 1] + x - 1);
0008f8 93aa      	ST   -Y,R26
0008f9 9724      	SBIW R28,4
0008fa e8e0      	LDI  R30,LOW(128)
0008fb 83e8      	ST   Y,R30
0008fc ece0      	LDI  R30,LOW(192)
0008fd 83e9      	STD  Y+1,R30
0008fe e9e4      	LDI  R30,LOW(148)
0008ff 83ea      	STD  Y+2,R30
000900 ede4      	LDI  R30,LOW(212)
000901 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000902 81ec      	LDD  R30,Y+4
000903 e0f0      	LDI  R31,0
000904 9731      	SBIW R30,1
000905 01de      	MOVW R26,R28
000906 0fae      	ADD  R26,R30
000907 1fbf      	ADC  R27,R31
000908 91ec      	LD   R30,X
000909 81ad      	LDD  R26,Y+5
00090a 0fae      	ADD  R26,R30
00090b 50a1      	SUBI R26,LOW(1)
00090c 940e 0e7d 	CALL SUBOPT_0x1C
                 ; 0000 035F     delay_us(100 * 16);
                 ; 0000 0360 }
00090e c29c      	RJMP _0x20C0004
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0362 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0363     unsigned char i = 0;
                 ; 0000 0364     while (str[i] != 0)
00090f 93ba      	ST   -Y,R27
000910 93aa      	ST   -Y,R26
000911 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000912 e010      	LDI  R17,0
                 _0xF1:
000913 81a9      	LDD  R26,Y+1
000914 81ba      	LDD  R27,Y+1+1
000915 27ee      	CLR  R30
000916 0fa1      	ADD  R26,R17
000917 1fbe      	ADC  R27,R30
000918 91ec      	LD   R30,X
000919 30e0      	CPI  R30,0
00091a f049      	BREQ _0xF3
                 ; 0000 0365     {
                 ; 0000 0366         lcdData(str[i]);
00091b 81a9      	LDD  R26,Y+1
00091c 81ba      	LDD  R27,Y+1+1
00091d 27ee      	CLR  R30
00091e 0fa1      	ADD  R26,R17
00091f 1fbe      	ADC  R27,R30
000920 91ac      	LD   R26,X
000921 dfb1      	RCALL _lcdData
                 ; 0000 0367         i++;
000922 5f1f      	SUBI R17,-1
                 ; 0000 0368     }
000923 cfef      	RJMP _0xF1
                 _0xF3:
                 ; 0000 0369 }
000924 8118      	LDD  R17,Y+0
000925 c0b5      	RJMP _0x20C0008
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 036C {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 036D     unsigned char temperatureVal = 0;
                 ; 0000 036E     unsigned char temperatureRep[3];
                 ; 0000 036F 
                 ; 0000 0370     DDRA &= ~(1 << 3);
000926 9723      	SBIW R28,3
000927 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000928 e010      	LDI  R17,0
000929 98d3      	CBI  0x1A,3
                 ; 0000 0371     ADMUX = 0xE3;
00092a eee3      	LDI  R30,LOW(227)
00092b b9e7      	OUT  0x7,R30
                 ; 0000 0372     ADCSRA = 0x87;
00092c e8e7      	LDI  R30,LOW(135)
00092d b9e6      	OUT  0x6,R30
                 ; 0000 0373 
                 ; 0000 0374     lcdCommand(0x01);
00092e 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0375     lcd_gotoxy(1, 1);
                 ; 0000 0376     lcd_print("Temperature(C):");
                +
000930 eba0     +LDI R26 , LOW ( _0xF4 + ( 0 ) )
000931 e0b6     +LDI R27 , HIGH ( _0xF4 + ( 0 ) )
                 	__POINTW2MN _0xF4,0
000932 dfdc      	RCALL _lcd_print
                 ; 0000 0377 
                 ; 0000 0378     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xF5:
000933 940e 0e3d 	CALL SUBOPT_0x11
000935 f4e9      	BRNE _0xF7
                 ; 0000 0379     {
                 ; 0000 037A         ADCSRA |= (1 << ADSC);
000936 9a36      	SBI  0x6,6
                 ; 0000 037B         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xF8:
000937 9b34      	SBIS 0x6,4
                 ; 0000 037C             ;
000938 cffe      	RJMP _0xF8
                 ; 0000 037D         if (ADCH != temperatureVal)
000939 b1e5      	IN   R30,0x5
00093a 171e      	CP   R17,R30
00093b f091      	BREQ _0xFB
                 ; 0000 037E         {
                 ; 0000 037F             temperatureVal = ADCH;
00093c b115      	IN   R17,5
                 ; 0000 0380             itoa(temperatureVal, temperatureRep);
00093d 2fe1      	MOV  R30,R17
00093e e0f0      	LDI  R31,0
00093f 93fa      	ST   -Y,R31
000940 93ea      	ST   -Y,R30
000941 01de      	MOVW R26,R28
000942 9613      	ADIW R26,3
000943 940e 0bc3 	CALL _itoa
                 ; 0000 0381             lcd_gotoxy(17, 1);
000945 e1e1      	LDI  R30,LOW(17)
000946 940e 0e98 	CALL SUBOPT_0x20
                 ; 0000 0382             lcd_print(temperatureRep);
000948 01de      	MOVW R26,R28
000949 9611      	ADIW R26,1
00094a dfc4      	RCALL _lcd_print
                 ; 0000 0383             lcd_print(" ");
                +
00094b eca0     +LDI R26 , LOW ( _0xF4 + ( 16 ) )
00094c e0b6     +LDI R27 , HIGH ( _0xF4 + ( 16 ) )
                 	__POINTW2MN _0xF4,16
00094d dfc1      	RCALL _lcd_print
                 ; 0000 0384         }
                 ; 0000 0385         delay_ms(500);
                 _0xFB:
00094e efa4      	LDI  R26,LOW(500)
00094f e0b1      	LDI  R27,HIGH(500)
000950 940e 0f48 	CALL _delay_ms
                 ; 0000 0386     }
000952 cfe0      	RJMP _0xF5
                 _0xF7:
                 ; 0000 0387 
                 ; 0000 0388     ADCSRA = 0x0;
000953 e0e0      	LDI  R30,LOW(0)
000954 b9e6      	OUT  0x6,R30
                 ; 0000 0389 }
000955 8118      	LDD  R17,Y+0
000956 c210      	RJMP _0x20C0006
                 ; .FEND
                 
                 	.DSEG
                 _0xF4:
0006b0           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 038C {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 038D 
                 ; 0000 038E     while (stage == STAGE_INIT_MENU)
                 _0xFC:
000957 2c04      	MOV  R0,R4
000958 2805      	OR   R0,R5
000959 f009      	BREQ PC+2
00095a c050      	RJMP _0xFE
                 ; 0000 038F     {
                 ; 0000 0390         lcdCommand(0x01);
00095b 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0391         lcd_gotoxy(1, 1);
                 ; 0000 0392         if (page_num == 0)
00095d 2077      	TST  R7
00095e f481      	BRNE _0xFF
                 ; 0000 0393         {
                 ; 0000 0394             lcd_print("1: Attendance Initialization");
                +
00095f eca2     +LDI R26 , LOW ( _0x100 + ( 0 ) )
000960 e0b6     +LDI R27 , HIGH ( _0x100 + ( 0 ) )
                 	__POINTW2MN _0x100,0
000961 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 0395             lcd_gotoxy(1, 2);
                 ; 0000 0396             lcd_print("2: Student Management");
                +
000963 edaf     +LDI R26 , LOW ( _0x100 + ( 29 ) )
000964 e0b6     +LDI R27 , HIGH ( _0x100 + ( 29 ) )
                 	__POINTW2MN _0x100,29
000965 dfa9      	RCALL _lcd_print
                 ; 0000 0397             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0x101:
000966 2077      	TST  R7
000967 f421      	BRNE _0x104
000968 2400      	CLR  R0
000969 1404      	CP   R0,R4
00096a 0405      	CPC  R0,R5
00096b f009      	BREQ _0x105
                 _0x104:
00096c c001      	RJMP _0x103
                 _0x105:
                 ; 0000 0398                 ;
00096d cff8      	RJMP _0x101
                 _0x103:
                 ; 0000 0399         }
                 ; 0000 039A         else if (page_num == 1)
00096e c03b      	RJMP _0x106
                 _0xFF:
00096f e0e1      	LDI  R30,LOW(1)
000970 15e7      	CP   R30,R7
000971 f489      	BRNE _0x107
                 ; 0000 039B         {
                 ; 0000 039C             lcd_print("3: View Present Students ");
                +
000972 efa5     +LDI R26 , LOW ( _0x100 + ( 51 ) )
000973 e0b6     +LDI R27 , HIGH ( _0x100 + ( 51 ) )
                 	__POINTW2MN _0x100,51
000974 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 039D             lcd_gotoxy(1, 2);
                 ; 0000 039E             lcd_print("4: Temperature Monitoring");
                +
000976 e0af     +LDI R26 , LOW ( _0x100 + ( 77 ) )
000977 e0b7     +LDI R27 , HIGH ( _0x100 + ( 77 ) )
                 	__POINTW2MN _0x100,77
000978 df96      	RCALL _lcd_print
                 ; 0000 039F             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0x108:
000979 e0e1      	LDI  R30,LOW(1)
00097a 15e7      	CP   R30,R7
00097b f421      	BRNE _0x10B
00097c 2400      	CLR  R0
00097d 1404      	CP   R0,R4
00097e 0405      	CPC  R0,R5
00097f f009      	BREQ _0x10C
                 _0x10B:
000980 c001      	RJMP _0x10A
                 _0x10C:
                 ; 0000 03A0                 ;
000981 cff7      	RJMP _0x108
                 _0x10A:
                 ; 0000 03A1         }
                 ; 0000 03A2         else if (page_num == 2)
000982 c027      	RJMP _0x10D
                 _0x107:
000983 e0e2      	LDI  R30,LOW(2)
000984 15e7      	CP   R30,R7
000985 f489      	BRNE _0x10E
                 ; 0000 03A3         {
                 ; 0000 03A4             lcd_print("5: Retrieve Student Data");
                +
000986 e2a9     +LDI R26 , LOW ( _0x100 + ( 103 ) )
000987 e0b7     +LDI R27 , HIGH ( _0x100 + ( 103 ) )
                 	__POINTW2MN _0x100,103
000988 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 03A5             lcd_gotoxy(1, 2);
                 ; 0000 03A6             lcd_print("6: Traffic Monitoring");
                +
00098a e4a2     +LDI R26 , LOW ( _0x100 + ( 128 ) )
00098b e0b7     +LDI R27 , HIGH ( _0x100 + ( 128 ) )
                 	__POINTW2MN _0x100,128
00098c df82      	RCALL _lcd_print
                 ; 0000 03A7             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x10F:
00098d e0e2      	LDI  R30,LOW(2)
00098e 15e7      	CP   R30,R7
00098f f421      	BRNE _0x112
000990 2400      	CLR  R0
000991 1404      	CP   R0,R4
000992 0405      	CPC  R0,R5
000993 f009      	BREQ _0x113
                 _0x112:
000994 c001      	RJMP _0x111
                 _0x113:
                 ; 0000 03A8                 ;
000995 cff7      	RJMP _0x10F
                 _0x111:
                 ; 0000 03A9         }
                 ; 0000 03AA         else if (page_num == 3)
000996 c013      	RJMP _0x114
                 _0x10E:
000997 e0e3      	LDI  R30,LOW(3)
000998 15e7      	CP   R30,R7
000999 f481      	BRNE _0x115
                 ; 0000 03AB         {
                 ; 0000 03AC             lcd_print("7: Login With Admin");
                +
00099a e5a8     +LDI R26 , LOW ( _0x100 + ( 150 ) )
00099b e0b7     +LDI R27 , HIGH ( _0x100 + ( 150 ) )
                 	__POINTW2MN _0x100,150
00099c 940e 0de8 	CALL SUBOPT_0x2
                 ; 0000 03AD             lcd_gotoxy(1, 2);
                 ; 0000 03AE             lcd_print("8: Logout");
                +
00099e e6ac     +LDI R26 , LOW ( _0x100 + ( 170 ) )
00099f e0b7     +LDI R27 , HIGH ( _0x100 + ( 170 ) )
                 	__POINTW2MN _0x100,170
0009a0 df6e      	RCALL _lcd_print
                 ; 0000 03AF             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x116:
0009a1 e0e3      	LDI  R30,LOW(3)
0009a2 15e7      	CP   R30,R7
0009a3 f421      	BRNE _0x119
0009a4 2400      	CLR  R0
0009a5 1404      	CP   R0,R4
0009a6 0405      	CPC  R0,R5
0009a7 f009      	BREQ _0x11A
                 _0x119:
0009a8 c001      	RJMP _0x118
                 _0x11A:
                 ; 0000 03B0                 ;
0009a9 cff7      	RJMP _0x116
                 _0x118:
                 ; 0000 03B1         }
                 ; 0000 03B2     }
                 _0x115:
                 _0x114:
                 _0x10D:
                 _0x106:
0009aa cfac      	RJMP _0xFC
                 _0xFE:
                 ; 0000 03B3 }
0009ab 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x100:
0006c2           	.BYTE 0xB4
                 ;
                 ;void clear_eeprom()
                 ; 0000 03B6 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 03B7     unsigned int i;
                 ; 0000 03B8 
                 ; 0000 03B9     for (i = 0; i <= 1023; i++)
0009ac 931a      	ST   -Y,R17
0009ad 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0009ae e000     +LDI R16 , LOW ( 0 )
0009af e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x11C:
                +
0009b0 3000     +CPI R16 , LOW ( 1024 )
0009b1 e0e4     +LDI R30 , HIGH ( 1024 )
0009b2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
0009b3 f478      	BRSH _0x11D
                 ; 0000 03BA     {
                 ; 0000 03BB         // Wait for the previous write to complete
                 ; 0000 03BC         while (EECR & (1 << EEWE))
                 _0x11E:
0009b4 99e1      	SBIC 0x1C,1
                 ; 0000 03BD             ;
0009b5 cffe      	RJMP _0x11E
                 ; 0000 03BE 
                 ; 0000 03BF         // Set up address registers
                 ; 0000 03C0         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
0009b6 2fe1      	MOV  R30,R17
0009b7 70f0      	ANDI R31,HIGH(0x0)
0009b8 70e3      	ANDI R30,LOW(0x3)
0009b9 bbef      	OUT  0x1F,R30
                 ; 0000 03C1         EEARL = i & 0xFF;        // Low byte (bits 0-7)
0009ba 2fe0      	MOV  R30,R16
0009bb bbee      	OUT  0x1E,R30
                 ; 0000 03C2 
                 ; 0000 03C3         // Set up data register
                 ; 0000 03C4         EEDR = 0; // Write 0 to EEPROM
0009bc e0e0      	LDI  R30,LOW(0)
0009bd bbed      	OUT  0x1D,R30
                 ; 0000 03C5 
                 ; 0000 03C6         // Enable write
                 ; 0000 03C7         EECR |= (1 << EEMWE); // Master write enable
0009be 9ae2      	SBI  0x1C,2
                 ; 0000 03C8         EECR |= (1 << EEWE);  // Start EEPROM write
0009bf 9ae1      	SBI  0x1C,1
                 ; 0000 03C9     }
                +
0009c0 5f0f     +SUBI R16 , LOW ( - 1 )
0009c1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0009c2 cfed      	RJMP _0x11C
                 _0x11D:
                 ; 0000 03CA }
0009c3 9109      	LD   R16,Y+
0009c4 9119      	LD   R17,Y+
0009c5 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 03CD {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 03CE     unsigned char x;
                 ; 0000 03CF     // Wait for the previous write to complete
                 ; 0000 03D0     while (EECR & (1 << EEWE))
0009c6 93ba      	ST   -Y,R27
0009c7 93aa      	ST   -Y,R26
0009c8 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x121:
0009c9 99e1      	SBIC 0x1C,1
                 ; 0000 03D1         ;
0009ca cffe      	RJMP _0x121
                 ; 0000 03D2 
                 ; 0000 03D3     // Set up address registers
                 ; 0000 03D4     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0009cb 940e 0ee1 	CALL SUBOPT_0x2B
                 ; 0000 03D5     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 03D6     EECR |= (1 << EERE);        // Read Enable
0009cd 9ae0      	SBI  0x1C,0
                 ; 0000 03D7     x = EEDR;
0009ce b31d      	IN   R17,29
                 ; 0000 03D8     return x;
0009cf 2fe1      	MOV  R30,R17
0009d0 8118      	LDD  R17,Y+0
0009d1 c009      	RJMP _0x20C0008
                 ; 0000 03D9 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 03DC {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 03DD     // Wait for the previous write to complete
                 ; 0000 03DE     while (EECR & (1 << EEWE))
0009d2 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x124:
0009d3 99e1      	SBIC 0x1C,1
                 ; 0000 03DF         ;
0009d4 cffe      	RJMP _0x124
                 ; 0000 03E0 
                 ; 0000 03E1     // Set up address registers
                 ; 0000 03E2     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0009d5 940e 0ee1 	CALL SUBOPT_0x2B
                 ; 0000 03E3     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 03E4 
                 ; 0000 03E5     // Set up data register
                 ; 0000 03E6     EEDR = value; // Write 0 to EEPROM
0009d7 81e8      	LD   R30,Y
0009d8 bbed      	OUT  0x1D,R30
                 ; 0000 03E7 
                 ; 0000 03E8     // Enable write
                 ; 0000 03E9     EECR |= (1 << EEMWE); // Master write enable
0009d9 9ae2      	SBI  0x1C,2
                 ; 0000 03EA     EECR |= (1 << EEWE);  // Start EEPROM write
0009da 9ae1      	SBI  0x1C,1
                 ; 0000 03EB }
                 _0x20C0008:
0009db 9623      	ADIW R28,3
0009dc 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 03EE {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 03EF     while (!(UCSRA & (1 << UDRE)))
0009dd 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x127:
0009de 9b5d      	SBIS 0xB,5
                 ; 0000 03F0         ;
0009df cffe      	RJMP _0x127
                 ; 0000 03F1     UDR = data;
0009e0 81e8      	LD   R30,Y
0009e1 b9ec      	OUT  0xC,R30
                 ; 0000 03F2 }
0009e2 c1a8      	RJMP _0x20C0005
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 03F5 {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 03F6     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x12A:
0009e3 995f      	SBIC 0xB,7
0009e4 c003      	RJMP _0x12D
0009e5 940e 0dfc 	CALL SUBOPT_0x5
0009e7 f009      	BREQ _0x12E
                 _0x12D:
0009e8 c001      	RJMP _0x12C
                 _0x12E:
0009e9 cff9      	RJMP _0x12A
                 _0x12C:
                 ; 0000 03F7     return UDR;
0009ea b1ec      	IN   R30,0xC
0009eb 9508      	RET
                 ; 0000 03F8 }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 03FB {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 03FC     UBRRL = (unsigned char)ubrr;
0009ec 93ba      	ST   -Y,R27
0009ed 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
0009ee 81e8      	LD   R30,Y
0009ef b9e9      	OUT  0x9,R30
                 ; 0000 03FD     UBRRH = (unsigned char)(ubrr >> 8);
0009f0 81e9      	LDD  R30,Y+1
0009f1 70f0      	ANDI R31,HIGH(0x0)
0009f2 bde0      	OUT  0x20,R30
                 ; 0000 03FE     UCSRB = (1 << RXEN) | (1 << TXEN);
0009f3 e1e8      	LDI  R30,LOW(24)
0009f4 b9ea      	OUT  0xA,R30
                 ; 0000 03FF     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
0009f5 e0e6      	LDI  R30,LOW(6)
0009f6 bde0      	OUT  0x20,R30
                 ; 0000 0400 }
0009f7 9622      	ADIW R28,2
0009f8 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 0403 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 0404     unsigned char st_counts, i, j;
                 ; 0000 0405     char temp[10];
                 ; 0000 0406 
                 ; 0000 0407     st_counts = read_byte_from_eeprom(0x0);
0009f9 972a      	SBIW R28,10
0009fa 940e 1117 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
0009fc 940e 0eb8 	CALL SUBOPT_0x26
0009fe 2f1e      	MOV  R17,R30
                 ; 0000 0408 
                 ; 0000 0409     for (i = 0; i < st_counts; i++)
0009ff e000      	LDI  R16,LOW(0)
                 _0x130:
000a00 1701      	CP   R16,R17
000a01 f5d0      	BRSH _0x131
                 ; 0000 040A     {
                 ; 0000 040B         memset(temp, 0, 10);
000a02 01fe      	MOVW R30,R28
000a03 9634      	ADIW R30,4
000a04 93fa      	ST   -Y,R31
000a05 93ea      	ST   -Y,R30
000a06 e0e0      	LDI  R30,LOW(0)
000a07 93ea      	ST   -Y,R30
000a08 e0aa      	LDI  R26,LOW(10)
000a09 e0b0      	LDI  R27,0
000a0a 940e 0bf1 	CALL _memset
                 ; 0000 040C         for (j = 0; j < 8; j++)
000a0c e030      	LDI  R19,LOW(0)
                 _0x133:
000a0d 3038      	CPI  R19,8
000a0e f4a8      	BRSH _0x134
                 ; 0000 040D         {
                 ; 0000 040E             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000a0f 2fe3      	MOV  R30,R19
000a10 e0f0      	LDI  R31,0
000a11 01de      	MOVW R26,R28
000a12 9614      	ADIW R26,4
000a13 0fea      	ADD  R30,R26
000a14 1ffb      	ADC  R31,R27
000a15 93ff      	PUSH R31
000a16 93ef      	PUSH R30
000a17 2fa3      	MOV  R26,R19
000a18 27bb      	CLR  R27
000a19 2fe0      	MOV  R30,R16
000a1a 940e 0e2f 	CALL SUBOPT_0xE
000a1c 0fae      	ADD  R26,R30
000a1d 1fbf      	ADC  R27,R31
000a1e dfa7      	RCALL _read_byte_from_eeprom
000a1f 91af      	POP  R26
000a20 91bf      	POP  R27
000a21 93ec      	ST   X,R30
                 ; 0000 040F         }
000a22 5f3f      	SUBI R19,-1
000a23 cfe9      	RJMP _0x133
                 _0x134:
                 ; 0000 0410         temp[j] = '\0';
000a24 2fe3      	MOV  R30,R19
000a25 e0f0      	LDI  R31,0
000a26 01de      	MOVW R26,R28
000a27 9614      	ADIW R26,4
000a28 0fae      	ADD  R26,R30
000a29 1fbf      	ADC  R27,R31
000a2a e0e0      	LDI  R30,LOW(0)
000a2b 93ec      	ST   X,R30
                 ; 0000 0411         if (strncmp(temp, buffer, 8) == 0)
000a2c 01fe      	MOVW R30,R28
000a2d 9634      	ADIW R30,4
000a2e 93fa      	ST   -Y,R31
000a2f 93ea      	ST   -Y,R30
000a30 940e 0e14 	CALL SUBOPT_0x9
000a32 e0a8      	LDI  R26,LOW(8)
000a33 940e 0c1a 	CALL _strncmp
000a35 30e0      	CPI  R30,0
000a36 f419      	BRNE _0x135
                 ; 0000 0412             return (i + 1);
000a37 2fe0      	MOV  R30,R16
000a38 5fef      	SUBI R30,-LOW(1)
000a39 c003      	RJMP _0x20C0007
                 ; 0000 0413     }
                 _0x135:
000a3a 5f0f      	SUBI R16,-1
000a3b cfc4      	RJMP _0x130
                 _0x131:
                 ; 0000 0414 
                 ; 0000 0415     return 0;
000a3c e0e0      	LDI  R30,LOW(0)
                 _0x20C0007:
000a3d 940e 111e 	CALL __LOADLOCR4
000a3f 962e      	ADIW R28,14
000a40 9508      	RET
                 ; 0000 0416 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 0419 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 041A     unsigned char st_counts, i, j;
                 ; 0000 041B     unsigned char temp;
                 ; 0000 041C 
                 ; 0000 041D     st_counts = read_byte_from_eeprom(0x0);
000a41 93aa      	ST   -Y,R26
000a42 940e 1117 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000a44 940e 0eb8 	CALL SUBOPT_0x26
000a46 2f1e      	MOV  R17,R30
                 ; 0000 041E 
                 ; 0000 041F     for (i = index; i <= st_counts; i++)
000a47 810c      	LDD  R16,Y+4
                 _0x137:
000a48 1710      	CP   R17,R16
000a49 f0d8      	BRLO _0x138
                 ; 0000 0420     {
                 ; 0000 0421         for (j = 0; j < 8; j++)
000a4a e030      	LDI  R19,LOW(0)
                 _0x13A:
000a4b 3038      	CPI  R19,8
000a4c f4b0      	BRSH _0x13B
                 ; 0000 0422         {
                 ; 0000 0423             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
000a4d 2fa3      	MOV  R26,R19
000a4e 27bb      	CLR  R27
000a4f 2fe0      	MOV  R30,R16
000a50 940e 0e2f 	CALL SUBOPT_0xE
000a52 0fae      	ADD  R26,R30
000a53 1fbf      	ADC  R27,R31
000a54 df71      	RCALL _read_byte_from_eeprom
000a55 2f2e      	MOV  R18,R30
                 ; 0000 0424             write_byte_to_eeprom(j + ((i) * 8), temp);
000a56 2fa3      	MOV  R26,R19
000a57 27bb      	CLR  R27
000a58 e0e8      	LDI  R30,LOW(8)
000a59 9fe0      	MUL  R30,R16
000a5a 01f0      	MOVW R30,R0
000a5b 0fea      	ADD  R30,R26
000a5c 1ffb      	ADC  R31,R27
000a5d 93fa      	ST   -Y,R31
000a5e 93ea      	ST   -Y,R30
000a5f 2fa2      	MOV  R26,R18
000a60 df71      	RCALL _write_byte_to_eeprom
                 ; 0000 0425         }
000a61 5f3f      	SUBI R19,-1
000a62 cfe8      	RJMP _0x13A
                 _0x13B:
                 ; 0000 0426     }
000a63 5f0f      	SUBI R16,-1
000a64 cfe3      	RJMP _0x137
                 _0x138:
                 ; 0000 0427     write_byte_to_eeprom(0x0, st_counts - 1);
000a65 940e 0e34 	CALL SUBOPT_0xF
000a67 2fa1      	MOV  R26,R17
000a68 50a1      	SUBI R26,LOW(1)
000a69 df68      	RCALL _write_byte_to_eeprom
                 ; 0000 0428 }
000a6a 940e 111e 	CALL __LOADLOCR4
000a6c 940c 0c71 	JMP  _0x20C0002
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 042B {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 042C     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000a6e 9a8d      	SBI  0x11,5
                 ; 0000 042D     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000a6f 988e      	CBI  0x11,6
                 ; 0000 042E }
000a70 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 0431 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 0432     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000a71 9a95      	SBI  0x12,5
                 ; 0000 0433     delay_us(15);                   // Wait for 15 microseconds
                +
000a72 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
000a73 958a     +DEC R24
000a74 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 0434     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000a75 9895      	CBI  0x12,5
                 ; 0000 0435 }
000a76 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0438 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 0439     uint32_t i, result;
                 ; 0000 043A 
                 ; 0000 043B     // Wait for rising edge on Echo pin
                 ; 0000 043C     for (i = 0; i < 600000; i++)
000a77 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
000a78 e0e0      	LDI  R30,LOW(0)
                +
000a79 83ec     +STD Y + 4 , R30
000a7a 83ed     +STD Y + 4 + 1 , R30
000a7b 83ee     +STD Y + 4 + 2 , R30
000a7c 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x13D:
000a7d 940e 0ee8 	CALL SUBOPT_0x2C
000a7f f430      	BRSH _0x13E
                 ; 0000 043D     {
                 ; 0000 043E         if (!(US_PIN & (1 << US_ECHO_POS)))
000a80 9b86      	SBIS 0x10,6
                 ; 0000 043F             continue;
000a81 c001      	RJMP _0x13C
                 ; 0000 0440         else
                 ; 0000 0441             break;
000a82 c003      	RJMP _0x13E
                 ; 0000 0442     }
                 _0x13C:
000a83 940e 0ef4 	CALL SUBOPT_0x2D
000a85 cff7      	RJMP _0x13D
                 _0x13E:
                 ; 0000 0443 
                 ; 0000 0444     if (i == 600000)
000a86 940e 0ee8 	CALL SUBOPT_0x2C
000a88 f419      	BRNE _0x141
                 ; 0000 0445         return US_ERROR; // Timeout error if no rising edge detected
000a89 efef      	LDI  R30,LOW(65535)
000a8a efff      	LDI  R31,HIGH(65535)
000a8b c135      	RJMP _0x20C0003
                 ; 0000 0446 
                 ; 0000 0447     // Start timer with prescaler 8
                 ; 0000 0448     TCCR1A = 0x00;
                 _0x141:
000a8c e0e0      	LDI  R30,LOW(0)
000a8d bdef      	OUT  0x2F,R30
                 ; 0000 0449     TCCR1B = (1 << CS11) | (1 << CS10);
000a8e e0e3      	LDI  R30,LOW(3)
000a8f bdee      	OUT  0x2E,R30
                 ; 0000 044A     TCNT1 = 0x00; // Reset timer
000a90 e0e0      	LDI  R30,LOW(0)
000a91 e0f0      	LDI  R31,HIGH(0)
000a92 bdfd      	OUT  0x2C+1,R31
000a93 bdec      	OUT  0x2C,R30
                 ; 0000 044B 
                 ; 0000 044C     // Wait for falling edge on Echo pin
                 ; 0000 044D     for (i = 0; i < 600000; i++)
                +
000a94 83ec     +STD Y + 4 , R30
000a95 83ed     +STD Y + 4 + 1 , R30
000a96 83ee     +STD Y + 4 + 2 , R30
000a97 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x143:
000a98 940e 0ee8 	CALL SUBOPT_0x2C
000a9a f470      	BRSH _0x144
                 ; 0000 044E     {
                 ; 0000 044F         if (!(US_PIN & (1 << US_ECHO_POS)))
000a9b 9b86      	SBIS 0x10,6
                 ; 0000 0450             break; // Falling edge detected
000a9c c00c      	RJMP _0x144
                 ; 0000 0451         if (TCNT1 > 60000)
000a9d b5ec      	IN   R30,0x2C
000a9e b5fd      	IN   R31,0x2C+1
000a9f 36e1      	CPI  R30,LOW(0xEA61)
000aa0 eeaa      	LDI  R26,HIGH(0xEA61)
000aa1 07fa      	CPC  R31,R26
000aa2 f018      	BRLO _0x146
                 ; 0000 0452             return US_NO_OBSTACLE; // No obstacle in range
000aa3 efee      	LDI  R30,LOW(65534)
000aa4 efff      	LDI  R31,HIGH(65534)
000aa5 c11b      	RJMP _0x20C0003
                 ; 0000 0453     }
                 _0x146:
000aa6 940e 0ef4 	CALL SUBOPT_0x2D
000aa8 cfef      	RJMP _0x143
                 _0x144:
                 ; 0000 0454 
                 ; 0000 0455     result = TCNT1; // Capture timer value
000aa9 b5ec      	IN   R30,0x2C
000aaa b5fd      	IN   R31,0x2C+1
000aab 2766      	CLR  R22
000aac 2777      	CLR  R23
000aad 940e 110b 	CALL __PUTD1S0
                 ; 0000 0456     TCCR1B = 0x00;  // Stop timer
000aaf e0e0      	LDI  R30,LOW(0)
000ab0 bdee      	OUT  0x2E,R30
                 ; 0000 0457 
                 ; 0000 0458     if (result > 60000)
000ab1 940e 1106 	CALL __GETD2S0
                +
000ab3 36a1     +CPI R26 , LOW ( 0xEA61 )
000ab4 eeea     +LDI R30 , HIGH ( 0xEA61 )
000ab5 07be     +CPC R27 , R30
000ab6 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000ab7 078e     +CPC R24 , R30
000ab8 e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000ab9 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000aba f018      	BRLO _0x147
                 ; 0000 0459         return US_NO_OBSTACLE;
000abb efee      	LDI  R30,LOW(65534)
000abc efff      	LDI  R31,HIGH(65534)
000abd c103      	RJMP _0x20C0003
                 ; 0000 045A     else
                 _0x147:
                 ; 0000 045B         return (result >> 1); // Return the measured pulse width
000abe 940e 1101 	CALL __GETD1S0
000ac0 940e 10e5 	CALL __LSRD1
000ac2 c0fe      	RJMP _0x20C0003
                 ; 0000 045C }
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 045F {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 0460     char numberString[16];
                 ; 0000 0461     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 0462     int distance, previous_distance = -1;
                 ; 0000 0463     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0464 
                 ; 0000 0465     lcdCommand(0x01);
000ac3 9760      	SBIW R28,16
000ac4 940e 1115 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
000ac6 ef4f     +LDI R20 , LOW ( - 1 )
000ac7 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000ac8 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0466     lcd_gotoxy(1, 1);
                 ; 0000 0467     lcd_print("Distance: ");
                +
000aca e7a6     +LDI R26 , LOW ( _0x14A + ( 0 ) )
000acb e0b7     +LDI R27 , HIGH ( _0x14A + ( 0 ) )
                 	__POINTW2MN _0x14A,0
000acc de42      	RCALL _lcd_print
                 ; 0000 0468 
                 ; 0000 0469     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x14B:
000acd 940e 0e73 	CALL SUBOPT_0x1A
000acf f009      	BREQ PC+2
000ad0 c071      	RJMP _0x14D
                 ; 0000 046A     {
                 ; 0000 046B         HCSR04Trigger();              // Send trigger pulse
000ad1 df9f      	RCALL _HCSR04Trigger
                 ; 0000 046C         pulseWidth = GetPulseWidth(); // Measure echo pulse
000ad2 dfa4      	RCALL _GetPulseWidth
000ad3 018f      	MOVW R16,R30
                 ; 0000 046D 
                 ; 0000 046E         if (pulseWidth == US_ERROR)
000ad4 efef      	LDI  R30,LOW(65535)
000ad5 efff      	LDI  R31,HIGH(65535)
000ad6 17e0      	CP   R30,R16
000ad7 07f1      	CPC  R31,R17
000ad8 f429      	BRNE _0x14E
                 ; 0000 046F         {
                 ; 0000 0470             lcdCommand(0x01);
000ad9 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0471             lcd_gotoxy(1, 1);
                 ; 0000 0472             lcd_print("Error"); // Display error message
                +
000adb e8a1     +LDI R26 , LOW ( _0x14A + ( 11 ) )
000adc e0b7     +LDI R27 , HIGH ( _0x14A + ( 11 ) )
                 	__POINTW2MN _0x14A,11
000add c05e      	RJMP _0x16A
                 ; 0000 0473         }
                 ; 0000 0474         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x14E:
000ade efee      	LDI  R30,LOW(65534)
000adf efff      	LDI  R31,HIGH(65534)
000ae0 17e0      	CP   R30,R16
000ae1 07f1      	CPC  R31,R17
000ae2 f429      	BRNE _0x150
                 ; 0000 0475         {
                 ; 0000 0476             lcdCommand(0x01);
000ae3 940e 0de0 	CALL SUBOPT_0x1
                 ; 0000 0477             lcd_gotoxy(1, 1);
                 ; 0000 0478             lcd_print("No Obstacle"); // Display no obstacle message
                +
000ae5 e8a7     +LDI R26 , LOW ( _0x14A + ( 17 ) )
000ae6 e0b7     +LDI R27 , HIGH ( _0x14A + ( 17 ) )
                 	__POINTW2MN _0x14A,17
000ae7 c054      	RJMP _0x16A
                 ; 0000 0479         }
                 ; 0000 047A         else
                 _0x150:
                 ; 0000 047B         {
                 ; 0000 047C             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
000ae8 01f8      	MOVW R30,R16
000ae9 2766      	CLR  R22
000aea 2777      	CLR  R23
000aeb 940e 0fb8 	CALL __CDF1
                +
000aed e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000aee e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000aef e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000af0 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000af1 940e 103b 	CALL __MULF12
000af3 01df      	MOVW R26,R30
000af4 01cb      	MOVW R24,R22
                +
000af5 e0e0     +LDI R30 , LOW ( 0x40000000 )
000af6 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000af7 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000af8 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000af9 940e 1089 	CALL __DIVF21
                +
000afb e0a0     +LDI R26 , LOW ( 0x3F000000 )
000afc e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000afd e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000afe e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000aff 940e 0feb 	CALL __ADDF12
000b01 940e 0f81 	CALL __CFD1
000b03 019f      	MOVW R18,R30
                 ; 0000 047D 
                 ; 0000 047E             if (distance != previous_distance)
                +
000b04 1742     +CP R20 , R18
000b05 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000b06 f081      	BREQ _0x152
                 ; 0000 047F             {
                 ; 0000 0480                 previous_distance = distance;
000b07 01a9      	MOVW R20,R18
                 ; 0000 0481                 // Display distance on LCD
                 ; 0000 0482                 itoa(distance, numberString); // Convert distance to string
000b08 933a      	ST   -Y,R19
000b09 932a      	ST   -Y,R18
000b0a 01de      	MOVW R26,R28
000b0b 9618      	ADIW R26,8
000b0c 940e 0bc3 	CALL _itoa
                 ; 0000 0483                 lcd_gotoxy(11, 1);
000b0e e0eb      	LDI  R30,LOW(11)
000b0f 940e 0e98 	CALL SUBOPT_0x20
                 ; 0000 0484                 lcd_print(numberString);
000b11 01de      	MOVW R26,R28
000b12 9616      	ADIW R26,6
000b13 ddfb      	RCALL _lcd_print
                 ; 0000 0485                 lcd_print(" cm ");
                +
000b14 e9a3     +LDI R26 , LOW ( _0x14A + ( 29 ) )
000b15 e0b7     +LDI R27 , HIGH ( _0x14A + ( 29 ) )
                 	__POINTW2MN _0x14A,29
000b16 ddf8      	RCALL _lcd_print
                 ; 0000 0486             }
                 ; 0000 0487             // Counting logic based on distance
                 ; 0000 0488             if (distance < 6)
                 _0x152:
                +
000b17 3026     +CPI R18 , LOW ( 6 )
000b18 e0e0     +LDI R30 , HIGH ( 6 )
000b19 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000b1a f40c      	BRGE _0x153
                 ; 0000 0489             {
                 ; 0000 048A                 US_count++; // Increment count if distance is below threshold
000b1b 9463      	INC  R6
                 ; 0000 048B             }
                 ; 0000 048C 
                 ; 0000 048D             // Update count on LCD only if it changes
                 ; 0000 048E             if (US_count != previous_count)
                 _0x153:
000b1c 91e0 07f2 	LDS  R30,_previous_count_S0000014000
000b1e 91f0 07f3 	LDS  R31,_previous_count_S0000014000+1
000b20 2da6      	MOV  R26,R6
000b21 e0b0      	LDI  R27,0
000b22 17ea      	CP   R30,R26
000b23 07fb      	CPC  R31,R27
000b24 f0c1      	BREQ _0x154
                 ; 0000 048F             {
                 ; 0000 0490                 previous_count = US_count;
000b25 2de6      	MOV  R30,R6
000b26 e0f0      	LDI  R31,0
000b27 93e0 07f2 	STS  _previous_count_S0000014000,R30
000b29 93f0 07f3 	STS  _previous_count_S0000014000+1,R31
                 ; 0000 0491                 lcd_gotoxy(1, 2); // Move to second line
000b2b e0e1      	LDI  R30,LOW(1)
000b2c 93ea      	ST   -Y,R30
000b2d e0a2      	LDI  R26,LOW(2)
000b2e ddc9      	RCALL _lcd_gotoxy
                 ; 0000 0492                 itoa(US_count, numberString);
000b2f 2de6      	MOV  R30,R6
000b30 e0f0      	LDI  R31,0
000b31 93fa      	ST   -Y,R31
000b32 93ea      	ST   -Y,R30
000b33 01de      	MOVW R26,R28
000b34 9618      	ADIW R26,8
000b35 940e 0bc3 	CALL _itoa
                 ; 0000 0493                 lcd_print("Count: ");
                +
000b37 e9a8     +LDI R26 , LOW ( _0x14A + ( 34 ) )
000b38 e0b7     +LDI R27 , HIGH ( _0x14A + ( 34 ) )
                 	__POINTW2MN _0x14A,34
000b39 ddd5      	RCALL _lcd_print
                 ; 0000 0494                 lcd_print(numberString);
000b3a 01de      	MOVW R26,R28
000b3b 9616      	ADIW R26,6
                 _0x16A:
000b3c ddd2      	RCALL _lcd_print
                 ; 0000 0495             }
                 ; 0000 0496         }
                 _0x154:
                 ; 0000 0497         delay_ms(100);
000b3d e6a4      	LDI  R26,LOW(100)
000b3e e0b0      	LDI  R27,0
000b3f 940e 0f48 	CALL _delay_ms
                 ; 0000 0498     }
000b41 cf8b      	RJMP _0x14B
                 _0x14D:
                 ; 0000 0499 }
000b42 940e 111c 	CALL __LOADLOCR6
000b44 9666      	ADIW R28,22
000b45 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x14A:
000776           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 049C {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 049D     unsigned int hash = 0;
                 ; 0000 049E     while (*str)
000b46 93ba      	ST   -Y,R27
000b47 93aa      	ST   -Y,R26
000b48 931a      	ST   -Y,R17
000b49 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000b4a e000     +LDI R16 , LOW ( 0 )
000b4b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x155:
000b4c 81aa      	LDD  R26,Y+2
000b4d 81bb      	LDD  R27,Y+2+1
000b4e 91ec      	LD   R30,X
000b4f 30e0      	CPI  R30,0
000b50 f099      	BREQ _0x157
                 ; 0000 049F     {
                 ; 0000 04A0         hash = (hash * 31) + *str; // A basic hash formula
                +
000b51 e1af     +LDI R26 , 31
000b52 9fa0     +MUL R26 , R16
000b53 01f0     +MOVW R30 , R0
000b54 9fa1     +MUL R26 , R17
000b55 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000b56 010f      	MOVW R0,R30
000b57 81aa      	LDD  R26,Y+2
000b58 81bb      	LDD  R27,Y+2+1
000b59 91ec      	LD   R30,X
000b5a e0f0      	LDI  R31,0
000b5b 0de0      	ADD  R30,R0
000b5c 1df1      	ADC  R31,R1
000b5d 018f      	MOVW R16,R30
                 ; 0000 04A1         str++;
000b5e 81ea      	LDD  R30,Y+2
000b5f 81fb      	LDD  R31,Y+2+1
000b60 9631      	ADIW R30,1
000b61 83ea      	STD  Y+2,R30
000b62 83fb      	STD  Y+2+1,R31
                 ; 0000 04A2     }
000b63 cfe8      	RJMP _0x155
                 _0x157:
                 ; 0000 04A3     return hash;
000b64 01f8      	MOVW R30,R16
000b65 8119      	LDD  R17,Y+1
000b66 8108      	LDD  R16,Y+0
                 _0x20C0006:
000b67 9624      	ADIW R28,4
000b68 9508      	RET
                 ; 0000 04A4 }
                 ; .FEND
                 ;
                 ;void I2C_init()
                 ; 0000 04A7 {
                 _I2C_init:
                 ; .FSTART _I2C_init
                 ; 0000 04A8     TWSR = 0x00;
000b69 e0e0      	LDI  R30,LOW(0)
000b6a b9e1      	OUT  0x1,R30
                 ; 0000 04A9     TWBR = 0x47;
000b6b e4e7      	LDI  R30,LOW(71)
000b6c b9e0      	OUT  0x0,R30
                 ; 0000 04AA     TWCR = 0x04;
000b6d e0e4      	LDI  R30,LOW(4)
000b6e bfe6      	OUT  0x36,R30
                 ; 0000 04AB }
000b6f 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_start()
                 ; 0000 04AE {
                 _I2C_start:
                 ; .FSTART _I2C_start
                 ; 0000 04AF     TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
000b70 eae4      	LDI  R30,LOW(164)
000b71 bfe6      	OUT  0x36,R30
                 ; 0000 04B0     while(!(TWCR & (1 << TWINT)));
                 _0x158:
000b72 b7e6      	IN   R30,0x36
000b73 78e0      	ANDI R30,LOW(0x80)
000b74 f3e9      	BREQ _0x158
                 ; 0000 04B1 }
000b75 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_write(unsigned char data)
                 ; 0000 04B4 {
                 _I2C_write:
                 ; .FSTART _I2C_write
                 ; 0000 04B5     TWDR = data;
000b76 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000b77 81e8      	LD   R30,Y
000b78 b9e3      	OUT  0x3,R30
                 ; 0000 04B6     TWCR = (1 << TWINT) | (1 << TWEN);
000b79 e8e4      	LDI  R30,LOW(132)
000b7a bfe6      	OUT  0x36,R30
                 ; 0000 04B7     while(!(TWCR & (1 << TWINT)));
                 _0x15B:
000b7b b7e6      	IN   R30,0x36
000b7c 78e0      	ANDI R30,LOW(0x80)
000b7d f3e9      	BREQ _0x15B
                 ; 0000 04B8 }
000b7e c00c      	RJMP _0x20C0005
                 ; .FEND
                 ;
                 ;unsigned char I2C_read(unsigned char ackVal)
                 ; 0000 04BB {
                 _I2C_read:
                 ; .FSTART _I2C_read
                 ; 0000 04BC     TWCR = (1 << TWINT) | (1 << TWEN) | (ackVal << TWEA);
000b7f 93aa      	ST   -Y,R26
                 ;	ackVal -> Y+0
000b80 81e8      	LD   R30,Y
000b81 95e2      	SWAP R30
000b82 7fe0      	ANDI R30,0xF0
000b83 0fee      	LSL  R30
000b84 0fee      	LSL  R30
000b85 68e4      	ORI  R30,LOW(0x84)
000b86 bfe6      	OUT  0x36,R30
                 ; 0000 04BD     while(!(TWCR & (1 << TWINT)));
                 _0x15E:
000b87 b7e6      	IN   R30,0x36
000b88 78e0      	ANDI R30,LOW(0x80)
000b89 f3e9      	BREQ _0x15E
                 ; 0000 04BE     return TWDR;
000b8a b1e3      	IN   R30,0x3
                 _0x20C0005:
000b8b 9621      	ADIW R28,1
000b8c 9508      	RET
                 ; 0000 04BF }
                 ; .FEND
                 ;
                 ;void I2C_stop()
                 ; 0000 04C2 {
                 _I2C_stop:
                 ; .FSTART _I2C_stop
                 ; 0000 04C3     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
000b8d e9e4      	LDI  R30,LOW(148)
000b8e bfe6      	OUT  0x36,R30
                 ; 0000 04C4     while(TWCR & (1 << TWSTO));
                 _0x161:
000b8f b7e6      	IN   R30,0x36
000b90 fde4      	SBRC R30,4
000b91 cffd      	RJMP _0x161
                 ; 0000 04C5 }
000b92 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_init()
                 ; 0000 04C8 {
                 _rtc_init:
                 ; .FSTART _rtc_init
                 ; 0000 04C9     I2C_init();
000b93 dfd5      	RCALL _I2C_init
                 ; 0000 04CA     I2C_start();
000b94 940e 0f01 	CALL SUBOPT_0x2E
                 ; 0000 04CB     I2C_write(0xD0);
                 ; 0000 04CC     I2C_write(0x07);
000b96 e0a7      	LDI  R26,LOW(7)
000b97 dfde      	RCALL _I2C_write
                 ; 0000 04CD     I2C_write(0x00);
000b98 e0a0      	LDI  R26,LOW(0)
000b99 940e 0f06 	CALL SUBOPT_0x2F
                 ; 0000 04CE     I2C_stop();
                 ; 0000 04CF }
000b9b 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getTime(unsigned char* hour, unsigned char* minute, unsigned char* second)
                 ; 0000 04D2 {
                 _rtc_getTime:
                 ; .FSTART _rtc_getTime
                 ; 0000 04D3     I2C_start();
000b9c 93ba      	ST   -Y,R27
000b9d 93aa      	ST   -Y,R26
                 ;	*hour -> Y+4
                 ;	*minute -> Y+2
                 ;	*second -> Y+0
000b9e 940e 0f01 	CALL SUBOPT_0x2E
                 ; 0000 04D4     I2C_write(0xD0);
                 ; 0000 04D5     I2C_write(0x00);
000ba0 e0a0      	LDI  R26,LOW(0)
000ba1 940e 0f06 	CALL SUBOPT_0x2F
                 ; 0000 04D6     I2C_stop();
                 ; 0000 04D7 
                 ; 0000 04D8     I2C_start();
000ba3 940e 0f0a 	CALL SUBOPT_0x30
                 ; 0000 04D9     I2C_write(0xD1);
                 ; 0000 04DA     *second = I2C_read(1);
                 ; 0000 04DB     *minute = I2C_read(1);
                 ; 0000 04DC     *hour = I2C_read(0);
000ba5 e0a0      	LDI  R26,LOW(0)
000ba6 dfd8      	RCALL _I2C_read
000ba7 81ac      	LDD  R26,Y+4
000ba8 81bd      	LDD  R27,Y+4+1
000ba9 93ec      	ST   X,R30
                 ; 0000 04DD     I2C_stop();
000baa dfe2      	RCALL _I2C_stop
                 ; 0000 04DE }
                 _0x20C0004:
000bab 9626      	ADIW R28,6
000bac 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getDate(unsigned char* year, unsigned char* month, unsigned char* date, unsigned char* day)
                 ; 0000 04E1 {
                 _rtc_getDate:
                 ; .FSTART _rtc_getDate
                 ; 0000 04E2     I2C_start();
000bad 93ba      	ST   -Y,R27
000bae 93aa      	ST   -Y,R26
                 ;	*year -> Y+6
                 ;	*month -> Y+4
                 ;	*date -> Y+2
                 ;	*day -> Y+0
000baf 940e 0f01 	CALL SUBOPT_0x2E
                 ; 0000 04E3     I2C_write(0xD0);
                 ; 0000 04E4     I2C_write(0x03);
000bb1 e0a3      	LDI  R26,LOW(3)
000bb2 940e 0f06 	CALL SUBOPT_0x2F
                 ; 0000 04E5     I2C_stop();
                 ; 0000 04E6 
                 ; 0000 04E7     I2C_start();
000bb4 940e 0f0a 	CALL SUBOPT_0x30
                 ; 0000 04E8     I2C_write(0xD1);
                 ; 0000 04E9     *day = I2C_read(1);
                 ; 0000 04EA     *date = I2C_read(1);
                 ; 0000 04EB     *month = I2C_read(1);
000bb6 e0a1      	LDI  R26,LOW(1)
000bb7 dfc7      	RCALL _I2C_read
000bb8 81ac      	LDD  R26,Y+4
000bb9 81bd      	LDD  R27,Y+4+1
000bba 93ec      	ST   X,R30
                 ; 0000 04EC     *year = I2C_read(0);
000bbb e0a0      	LDI  R26,LOW(0)
000bbc dfc2      	RCALL _I2C_read
000bbd 81ae      	LDD  R26,Y+6
000bbe 81bf      	LDD  R27,Y+6+1
000bbf 93ec      	ST   X,R30
                 ; 0000 04ED     I2C_stop();
000bc0 dfcc      	RCALL _I2C_stop
                 ; 0000 04EE }
                 _0x20C0003:
000bc1 9628      	ADIW R28,8
000bc2 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000bc3 93ba      	ST   -Y,R27
000bc4 93aa      	ST   -Y,R26
000bc5 91a9          ld   r26,y+
000bc6 91b9          ld   r27,y+
000bc7 91e9          ld   r30,y+
000bc8 91f9          ld   r31,y+
000bc9 9630          adiw r30,0
000bca f42a          brpl __itoa0
000bcb 95e0          com  r30
000bcc 95f0          com  r31
000bcd 9631          adiw r30,1
000bce e26d          ldi  r22,'-'
000bcf 936d          st   x+,r22
                 __itoa0:
000bd0 94e8          clt
000bd1 e180          ldi  r24,low(10000)
000bd2 e297          ldi  r25,high(10000)
000bd3 d00d          rcall __itoa1
000bd4 ee88          ldi  r24,low(1000)
000bd5 e093          ldi  r25,high(1000)
000bd6 d00a          rcall __itoa1
000bd7 e684          ldi  r24,100
000bd8 2799          clr  r25
000bd9 d007          rcall __itoa1
000bda e08a          ldi  r24,10
000bdb d005          rcall __itoa1
000bdc 2f6e          mov  r22,r30
000bdd d010          rcall __itoa5
000bde 2766          clr  r22
000bdf 936c          st   x,r22
000be0 9508          ret
                 
                 __itoa1:
000be1 2766          clr	 r22
                 __itoa2:
000be2 17e8          cp   r30,r24
000be3 07f9          cpc  r31,r25
000be4 f020          brlo __itoa3
000be5 9563          inc  r22
000be6 1be8          sub  r30,r24
000be7 0bf9          sbc  r31,r25
000be8 f7c9          brne __itoa2
                 __itoa3:
000be9 2366          tst  r22
000bea f411          brne __itoa4
000beb f016          brts __itoa5
000bec 9508          ret
                 __itoa4:
000bed 9468          set
                 __itoa5:
000bee 5d60          subi r22,-0x30
000bef 936d          st   x+,r22
000bf0 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000bf1 93ba      	ST   -Y,R27
000bf2 93aa      	ST   -Y,R26
000bf3 81b9          ldd  r27,y+1
000bf4 81a8          ld   r26,y
000bf5 9610          adiw r26,0
000bf6 f031          breq memset1
000bf7 81fc          ldd  r31,y+4
000bf8 81eb          ldd  r30,y+3
000bf9 816a          ldd  r22,y+2
                 memset0:
000bfa 9361          st   z+,r22
000bfb 9711          sbiw r26,1
000bfc f7e9          brne memset0
                 memset1:
000bfd 81eb          ldd  r30,y+3
000bfe 81fc          ldd  r31,y+4
000bff 940c 0c71 	JMP  _0x20C0002
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000c01 93ba      	ST   -Y,R27
000c02 93aa      	ST   -Y,R26
000c03 91a9          ld   r26,y+
000c04 91b9          ld   r27,y+
000c05 27ee          clr  r30
000c06 27ff          clr  r31
                 strlen0:
000c07 916d          ld   r22,x+
000c08 2366          tst  r22
000c09 f011          breq strlen1
000c0a 9631          adiw r30,1
000c0b cffb          rjmp strlen0
                 strlen1:
000c0c 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000c0d 93ba      	ST   -Y,R27
000c0e 93aa      	ST   -Y,R26
000c0f 27aa          clr  r26
000c10 27bb          clr  r27
000c11 91e9          ld   r30,y+
000c12 91f9          ld   r31,y+
                 strlenf0:
000c13 9005      	lpm  r0,z+
000c14 2000          tst  r0
000c15 f011          breq strlenf1
000c16 9611          adiw r26,1
000c17 cffb          rjmp strlenf0
                 strlenf1:
000c18 01fd          movw r30,r26
000c19 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000c1a 93aa      	ST   -Y,R26
000c1b 2766          clr  r22
000c1c 2777          clr  r23
000c1d 9189          ld   r24,y+
000c1e 91e9          ld   r30,y+
000c1f 91f9          ld   r31,y+
000c20 91a9          ld   r26,y+
000c21 91b9          ld   r27,y+
                 strncmp0:
000c22 2388          tst  r24
000c23 f049          breq strncmp1
000c24 958a          dec  r24
000c25 916d          ld   r22,x+
000c26 9171          ld   r23,z+
000c27 1767          cp   r22,r23
000c28 f421          brne strncmp1
000c29 2366          tst  r22
000c2a f7b9          brne strncmp0
                 strncmp3:
000c2b 27ee          clr  r30
000c2c 9508          ret
                 strncmp1:
000c2d 1b67          sub  r22,r23
000c2e f3e1          breq strncmp3
000c2f e0e1          ldi  r30,1
000c30 f408          brcc strncmp2
000c31 50e2          subi r30,2
                 strncmp2:
000c32 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000c33 93ba      	ST   -Y,R27
000c34 93aa      	ST   -Y,R26
000c35 931a      	ST   -Y,R17
000c36 930a      	ST   -Y,R16
000c37 81aa      	LDD  R26,Y+2
000c38 81bb      	LDD  R27,Y+2+1
000c39 9612      	ADIW R26,2
000c3a 940e 10f9 	CALL __GETW1P
000c3c 9730      	SBIW R30,0
000c3d f159      	BREQ _0x2060010
000c3e 81aa      	LDD  R26,Y+2
000c3f 81bb      	LDD  R27,Y+2+1
000c40 9614      	ADIW R26,4
000c41 940e 10f9 	CALL __GETW1P
000c43 018f      	MOVW R16,R30
000c44 9730      	SBIW R30,0
000c45 f061      	BREQ _0x2060012
                +
000c46 3002     +CPI R16 , LOW ( 2 )
000c47 e0e0     +LDI R30 , HIGH ( 2 )
000c48 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000c49 f098      	BRLO _0x2060013
000c4a 01f8      	MOVW R30,R16
000c4b 9731      	SBIW R30,1
000c4c 018f      	MOVW R16,R30
                +
000c4d 81aa     +LDD R26 , Y + 2
000c4e 81bb     +LDD R27 , Y + 2 + 1
000c4f 9614     +ADIW R26 , 4
000c50 93ed     +ST X + , R30
000c51 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000c52 81aa      	LDD  R26,Y+2
000c53 81bb      	LDD  R27,Y+2+1
000c54 9612      	ADIW R26,2
000c55 91ed      	LD   R30,X+
000c56 91fd      	LD   R31,X+
000c57 9631      	ADIW R30,1
000c58 93fe      	ST   -X,R31
000c59 93ee      	ST   -X,R30
000c5a 9731      	SBIW R30,1
000c5b 81ac      	LDD  R26,Y+4
000c5c 83a0      	STD  Z+0,R26
                 _0x2060013:
000c5d 81aa      	LDD  R26,Y+2
000c5e 81bb      	LDD  R27,Y+2+1
000c5f 940e 10f9 	CALL __GETW1P
000c61 23ff      	TST  R31
000c62 f02a      	BRMI _0x2060014
000c63 91ed      	LD   R30,X+
000c64 91fd      	LD   R31,X+
000c65 9631      	ADIW R30,1
000c66 93fe      	ST   -X,R31
000c67 93ee      	ST   -X,R30
                 _0x2060014:
000c68 c006      	RJMP _0x2060015
                 _0x2060010:
000c69 81aa      	LDD  R26,Y+2
000c6a 81bb      	LDD  R27,Y+2+1
000c6b efef      	LDI  R30,LOW(65535)
000c6c efff      	LDI  R31,HIGH(65535)
000c6d 93ed      	ST   X+,R30
000c6e 93fc      	ST   X,R31
                 _0x2060015:
000c6f 8119      	LDD  R17,Y+1
000c70 8108      	LDD  R16,Y+0
                 _0x20C0002:
000c71 9625      	ADIW R28,5
000c72 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000c73 93ba      	ST   -Y,R27
000c74 93aa      	ST   -Y,R26
000c75 9726      	SBIW R28,6
000c76 940e 1115 	CALL __SAVELOCR6
000c78 e010      	LDI  R17,0
000c79 85ac      	LDD  R26,Y+12
000c7a 85bd      	LDD  R27,Y+12+1
000c7b e0e0      	LDI  R30,LOW(0)
000c7c e0f0      	LDI  R31,HIGH(0)
000c7d 93ed      	ST   X+,R30
000c7e 93fc      	ST   X,R31
                 _0x2060016:
000c7f 89ea      	LDD  R30,Y+18
000c80 89fb      	LDD  R31,Y+18+1
000c81 9631      	ADIW R30,1
000c82 8bea      	STD  Y+18,R30
000c83 8bfb      	STD  Y+18+1,R31
000c84 9731      	SBIW R30,1
000c85 91e4      	LPM  R30,Z
000c86 2f2e      	MOV  R18,R30
000c87 30e0      	CPI  R30,0
000c88 f409      	BRNE PC+2
000c89 c115      	RJMP _0x2060018
000c8a 2fe1      	MOV  R30,R17
000c8b 30e0      	CPI  R30,0
000c8c f439      	BRNE _0x206001C
000c8d 3225      	CPI  R18,37
000c8e f411      	BRNE _0x206001D
000c8f e011      	LDI  R17,LOW(1)
000c90 c002      	RJMP _0x206001E
                 _0x206001D:
000c91 940e 0f1c 	CALL SUBOPT_0x31
                 _0x206001E:
000c93 c10a      	RJMP _0x206001B
                 _0x206001C:
000c94 30e1      	CPI  R30,LOW(0x1)
000c95 f4a9      	BRNE _0x206001F
000c96 3225      	CPI  R18,37
000c97 f419      	BRNE _0x2060020
000c98 940e 0f1c 	CALL SUBOPT_0x31
000c9a c102      	RJMP _0x20600CC
                 _0x2060020:
000c9b e012      	LDI  R17,LOW(2)
000c9c e040      	LDI  R20,LOW(0)
000c9d e000      	LDI  R16,LOW(0)
000c9e 322d      	CPI  R18,45
000c9f f411      	BRNE _0x2060021
000ca0 e001      	LDI  R16,LOW(1)
000ca1 c0fc      	RJMP _0x206001B
                 _0x2060021:
000ca2 322b      	CPI  R18,43
000ca3 f411      	BRNE _0x2060022
000ca4 e24b      	LDI  R20,LOW(43)
000ca5 c0f8      	RJMP _0x206001B
                 _0x2060022:
000ca6 3220      	CPI  R18,32
000ca7 f411      	BRNE _0x2060023
000ca8 e240      	LDI  R20,LOW(32)
000ca9 c0f4      	RJMP _0x206001B
                 _0x2060023:
000caa c002      	RJMP _0x2060024
                 _0x206001F:
000cab 30e2      	CPI  R30,LOW(0x2)
000cac f439      	BRNE _0x2060025
                 _0x2060024:
000cad e050      	LDI  R21,LOW(0)
000cae e013      	LDI  R17,LOW(3)
000caf 3320      	CPI  R18,48
000cb0 f411      	BRNE _0x2060026
000cb1 6800      	ORI  R16,LOW(128)
000cb2 c0eb      	RJMP _0x206001B
                 _0x2060026:
000cb3 c003      	RJMP _0x2060027
                 _0x2060025:
000cb4 30e3      	CPI  R30,LOW(0x3)
000cb5 f009      	BREQ PC+2
000cb6 c0e7      	RJMP _0x206001B
                 _0x2060027:
000cb7 3320      	CPI  R18,48
000cb8 f010      	BRLO _0x206002A
000cb9 332a      	CPI  R18,58
000cba f008      	BRLO _0x206002B
                 _0x206002A:
000cbb c007      	RJMP _0x2060029
                 _0x206002B:
000cbc e0aa      	LDI  R26,LOW(10)
000cbd 9f5a      	MUL  R21,R26
000cbe 2d50      	MOV  R21,R0
000cbf 2fe2      	MOV  R30,R18
000cc0 53e0      	SUBI R30,LOW(48)
000cc1 0f5e      	ADD  R21,R30
000cc2 c0db      	RJMP _0x206001B
                 _0x2060029:
000cc3 2fe2      	MOV  R30,R18
000cc4 36e3      	CPI  R30,LOW(0x63)
000cc5 f449      	BRNE _0x206002F
000cc6 940e 0f23 	CALL SUBOPT_0x32
000cc8 89e8      	LDD  R30,Y+16
000cc9 89f9      	LDD  R31,Y+16+1
000cca 81a4      	LDD  R26,Z+4
000ccb 93aa      	ST   -Y,R26
000ccc 940e 0f29 	CALL SUBOPT_0x33
000cce c0ce      	RJMP _0x2060030
                 _0x206002F:
000ccf 37e3      	CPI  R30,LOW(0x73)
000cd0 f441      	BRNE _0x2060032
000cd1 940e 0f23 	CALL SUBOPT_0x32
000cd3 940e 0f2f 	CALL SUBOPT_0x34
000cd5 940e 0c01 	CALL _strlen
000cd7 2f1e      	MOV  R17,R30
000cd8 c00a      	RJMP _0x2060033
                 _0x2060032:
000cd9 37e0      	CPI  R30,LOW(0x70)
000cda f461      	BRNE _0x2060035
000cdb 940e 0f23 	CALL SUBOPT_0x32
000cdd 940e 0f2f 	CALL SUBOPT_0x34
000cdf 940e 0c0d 	CALL _strlenf
000ce1 2f1e      	MOV  R17,R30
000ce2 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000ce3 6002      	ORI  R16,LOW(2)
000ce4 770f      	ANDI R16,LOW(127)
000ce5 e030      	LDI  R19,LOW(0)
000ce6 c034      	RJMP _0x2060036
                 _0x2060035:
000ce7 36e4      	CPI  R30,LOW(0x64)
000ce8 f011      	BREQ _0x2060039
000ce9 36e9      	CPI  R30,LOW(0x69)
000cea f411      	BRNE _0x206003A
                 _0x2060039:
000ceb 6004      	ORI  R16,LOW(4)
000cec c002      	RJMP _0x206003B
                 _0x206003A:
000ced 37e5      	CPI  R30,LOW(0x75)
000cee f431      	BRNE _0x206003C
                 _0x206003B:
000cef e5e4      	LDI  R30,LOW(_tbl10_G103*2)
000cf0 e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
000cf1 83ee      	STD  Y+6,R30
000cf2 83ff      	STD  Y+6+1,R31
000cf3 e015      	LDI  R17,LOW(5)
000cf4 c00c      	RJMP _0x206003D
                 _0x206003C:
000cf5 35e8      	CPI  R30,LOW(0x58)
000cf6 f411      	BRNE _0x206003F
000cf7 6008      	ORI  R16,LOW(8)
000cf8 c003      	RJMP _0x2060040
                 _0x206003F:
000cf9 37e8      	CPI  R30,LOW(0x78)
000cfa f009      	BREQ PC+2
000cfb c0a1      	RJMP _0x2060071
                 _0x2060040:
000cfc e5ee      	LDI  R30,LOW(_tbl16_G103*2)
000cfd e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
000cfe 83ee      	STD  Y+6,R30
000cff 83ff      	STD  Y+6+1,R31
000d00 e014      	LDI  R17,LOW(4)
                 _0x206003D:
000d01 ff02      	SBRS R16,2
000d02 c014      	RJMP _0x2060042
000d03 940e 0f23 	CALL SUBOPT_0x32
000d05 940e 0f39 	CALL SUBOPT_0x35
000d07 85ab      	LDD  R26,Y+11
000d08 23aa      	TST  R26
000d09 f43a      	BRPL _0x2060043
000d0a 85ea      	LDD  R30,Y+10
000d0b 85fb      	LDD  R31,Y+10+1
000d0c 940e 10d2 	CALL __ANEGW1
000d0e 87ea      	STD  Y+10,R30
000d0f 87fb      	STD  Y+10+1,R31
000d10 e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000d11 3040      	CPI  R20,0
000d12 f011      	BREQ _0x2060044
000d13 5f1f      	SUBI R17,-LOW(1)
000d14 c001      	RJMP _0x2060045
                 _0x2060044:
000d15 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000d16 c004      	RJMP _0x2060046
                 _0x2060042:
000d17 940e 0f23 	CALL SUBOPT_0x32
000d19 940e 0f39 	CALL SUBOPT_0x35
                 _0x2060046:
                 _0x2060036:
000d1b fd00      	SBRC R16,0
000d1c c011      	RJMP _0x2060047
                 _0x2060048:
000d1d 1715      	CP   R17,R21
000d1e f478      	BRSH _0x206004A
000d1f ff07      	SBRS R16,7
000d20 c008      	RJMP _0x206004B
000d21 ff02      	SBRS R16,2
000d22 c004      	RJMP _0x206004C
000d23 7f0b      	ANDI R16,LOW(251)
000d24 2f24      	MOV  R18,R20
000d25 5011      	SUBI R17,LOW(1)
000d26 c001      	RJMP _0x206004D
                 _0x206004C:
000d27 e320      	LDI  R18,LOW(48)
                 _0x206004D:
000d28 c001      	RJMP _0x206004E
                 _0x206004B:
000d29 e220      	LDI  R18,LOW(32)
                 _0x206004E:
000d2a 940e 0f1c 	CALL SUBOPT_0x31
000d2c 5051      	SUBI R21,LOW(1)
000d2d cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000d2e 2f31      	MOV  R19,R17
000d2f ff01      	SBRS R16,1
000d30 c017      	RJMP _0x206004F
                 _0x2060050:
000d31 3030      	CPI  R19,0
000d32 f0a1      	BREQ _0x2060052
000d33 ff03      	SBRS R16,3
000d34 c006      	RJMP _0x2060053
000d35 81ee      	LDD  R30,Y+6
000d36 81ff      	LDD  R31,Y+6+1
000d37 9125      	LPM  R18,Z+
000d38 83ee      	STD  Y+6,R30
000d39 83ff      	STD  Y+6+1,R31
000d3a c005      	RJMP _0x2060054
                 _0x2060053:
000d3b 81ae      	LDD  R26,Y+6
000d3c 81bf      	LDD  R27,Y+6+1
000d3d 912d      	LD   R18,X+
000d3e 83ae      	STD  Y+6,R26
000d3f 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000d40 940e 0f1c 	CALL SUBOPT_0x31
000d42 3050      	CPI  R21,0
000d43 f009      	BREQ _0x2060055
000d44 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000d45 5031      	SUBI R19,LOW(1)
000d46 cfea      	RJMP _0x2060050
                 _0x2060052:
000d47 c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000d48 e320      	LDI  R18,LOW(48)
000d49 81ee      	LDD  R30,Y+6
000d4a 81ff      	LDD  R31,Y+6+1
000d4b 940e 10fd 	CALL __GETW1PF
000d4d 87e8      	STD  Y+8,R30
000d4e 87f9      	STD  Y+8+1,R31
000d4f 81ee      	LDD  R30,Y+6
000d50 81ff      	LDD  R31,Y+6+1
000d51 9632      	ADIW R30,2
000d52 83ee      	STD  Y+6,R30
000d53 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000d54 85e8      	LDD  R30,Y+8
000d55 85f9      	LDD  R31,Y+8+1
000d56 85aa      	LDD  R26,Y+10
000d57 85bb      	LDD  R27,Y+10+1
000d58 17ae      	CP   R26,R30
000d59 07bf      	CPC  R27,R31
000d5a f050      	BRLO _0x206005C
000d5b 5f2f      	SUBI R18,-LOW(1)
000d5c 85a8      	LDD  R26,Y+8
000d5d 85b9      	LDD  R27,Y+8+1
000d5e 85ea      	LDD  R30,Y+10
000d5f 85fb      	LDD  R31,Y+10+1
000d60 1bea      	SUB  R30,R26
000d61 0bfb      	SBC  R31,R27
000d62 87ea      	STD  Y+10,R30
000d63 87fb      	STD  Y+10+1,R31
000d64 cfef      	RJMP _0x206005A
                 _0x206005C:
000d65 332a      	CPI  R18,58
000d66 f028      	BRLO _0x206005D
000d67 ff03      	SBRS R16,3
000d68 c002      	RJMP _0x206005E
000d69 5f29      	SUBI R18,-LOW(7)
000d6a c001      	RJMP _0x206005F
                 _0x206005E:
000d6b 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000d6c fd04      	SBRC R16,4
000d6d c01a      	RJMP _0x2060061
000d6e 3321      	CPI  R18,49
000d6f f420      	BRSH _0x2060063
000d70 85a8      	LDD  R26,Y+8
000d71 85b9      	LDD  R27,Y+8+1
000d72 9711      	SBIW R26,1
000d73 f409      	BRNE _0x2060062
                 _0x2060063:
000d74 c009      	RJMP _0x20600CD
                 _0x2060062:
000d75 1753      	CP   R21,R19
000d76 f010      	BRLO _0x2060067
000d77 ff00      	SBRS R16,0
000d78 c001      	RJMP _0x2060068
                 _0x2060067:
000d79 c013      	RJMP _0x2060066
                 _0x2060068:
000d7a e220      	LDI  R18,LOW(32)
000d7b ff07      	SBRS R16,7
000d7c c00b      	RJMP _0x2060069
000d7d e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000d7e 6100      	ORI  R16,LOW(16)
000d7f ff02      	SBRS R16,2
000d80 c007      	RJMP _0x206006A
000d81 7f0b      	ANDI R16,LOW(251)
000d82 934a      	ST   -Y,R20
000d83 940e 0f29 	CALL SUBOPT_0x33
000d85 3050      	CPI  R21,0
000d86 f009      	BREQ _0x206006B
000d87 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000d88 940e 0f1c 	CALL SUBOPT_0x31
000d8a 3050      	CPI  R21,0
000d8b f009      	BREQ _0x206006C
000d8c 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000d8d 5031      	SUBI R19,LOW(1)
000d8e 85a8      	LDD  R26,Y+8
000d8f 85b9      	LDD  R27,Y+8+1
000d90 9712      	SBIW R26,2
000d91 f008      	BRLO _0x2060059
000d92 cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000d93 ff00      	SBRS R16,0
000d94 c008      	RJMP _0x206006D
                 _0x206006E:
000d95 3050      	CPI  R21,0
000d96 f031      	BREQ _0x2060070
000d97 5051      	SUBI R21,LOW(1)
000d98 e2e0      	LDI  R30,LOW(32)
000d99 93ea      	ST   -Y,R30
000d9a 940e 0f29 	CALL SUBOPT_0x33
000d9c cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
000d9d e010      	LDI  R17,LOW(0)
                 _0x206001B:
000d9e cee0      	RJMP _0x2060016
                 _0x2060018:
000d9f 85ac      	LDD  R26,Y+12
000da0 85bd      	LDD  R27,Y+12+1
000da1 940e 10f9 	CALL __GETW1P
000da3 940e 111c 	CALL __LOADLOCR6
000da5 9664      	ADIW R28,20
000da6 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000da7 92ff      	PUSH R15
000da8 2ef8      	MOV  R15,R24
000da9 9726      	SBIW R28,6
000daa 940e 1117 	CALL __SAVELOCR4
000dac 940e 0f41 	CALL SUBOPT_0x36
000dae 9730      	SBIW R30,0
000daf f419      	BRNE _0x2060072
000db0 efef      	LDI  R30,LOW(65535)
000db1 efff      	LDI  R31,HIGH(65535)
000db2 c023      	RJMP _0x20C0001
                 _0x2060072:
000db3 01de      	MOVW R26,R28
000db4 9616      	ADIW R26,6
000db5 940e 10ce 	CALL __ADDW2R15
000db7 018d      	MOVW R16,R26
000db8 940e 0f41 	CALL SUBOPT_0x36
000dba 83ee      	STD  Y+6,R30
000dbb 83ff      	STD  Y+6+1,R31
000dbc e0e0      	LDI  R30,LOW(0)
000dbd 87e8      	STD  Y+8,R30
000dbe 87e9      	STD  Y+8+1,R30
000dbf 01de      	MOVW R26,R28
000dc0 961a      	ADIW R26,10
000dc1 940e 10ce 	CALL __ADDW2R15
000dc3 940e 10f9 	CALL __GETW1P
000dc5 93fa      	ST   -Y,R31
000dc6 93ea      	ST   -Y,R30
000dc7 931a      	ST   -Y,R17
000dc8 930a      	ST   -Y,R16
000dc9 e3e3      	LDI  R30,LOW(_put_buff_G103)
000dca e0fc      	LDI  R31,HIGH(_put_buff_G103)
000dcb 93fa      	ST   -Y,R31
000dcc 93ea      	ST   -Y,R30
000dcd 01de      	MOVW R26,R28
000dce 961a      	ADIW R26,10
000dcf dea3      	RCALL __print_G103
000dd0 019f      	MOVW R18,R30
000dd1 81ae      	LDD  R26,Y+6
000dd2 81bf      	LDD  R27,Y+6+1
000dd3 e0e0      	LDI  R30,LOW(0)
000dd4 93ec      	ST   X,R30
000dd5 01f9      	MOVW R30,R18
                 _0x20C0001:
000dd6 940e 111e 	CALL __LOADLOCR4
000dd8 962a      	ADIW R28,10
000dd9 90ff      	POP  R15
000dda 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
0007a0           	.BYTE 0x10
                 _buffer:
0007b0           	.BYTE 0x20
                 _days:
0007d0           	.BYTE 0xE
                 _time:
0007de           	.BYTE 0x14
                 _previous_count_S0000014000:
0007f2           	.BYTE 0x2
                 __seed_G100:
0007f4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000ddb e0e1      	LDI  R30,LOW(1)
000ddc e0f0      	LDI  R31,HIGH(1)
000ddd 15e4      	CP   R30,R4
000dde 05f5      	CPC  R31,R5
000ddf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 34 TIMES, CODE SIZE REDUCTION:195 WORDS
                 SUBOPT_0x1:
000de0 e0a1      	LDI  R26,LOW(1)
000de1 940e 08c7 	CALL _lcdCommand
000de3 e0e1      	LDI  R30,LOW(1)
000de4 93ea      	ST   -Y,R30
000de5 e0a1      	LDI  R26,LOW(1)
000de6 940c 08f8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x2:
000de8 940e 090f 	CALL _lcd_print
000dea e0e1      	LDI  R30,LOW(1)
000deb 93ea      	ST   -Y,R30
000dec e0a2      	LDI  R26,LOW(2)
000ded 940c 08f8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000def e0e2      	LDI  R30,LOW(2)
000df0 e0f0      	LDI  R31,HIGH(2)
000df1 15e4      	CP   R30,R4
000df2 05f5      	CPC  R31,R5
000df3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
000df4 e0af      	LDI  R26,LOW(15)
000df5 940e 08c7 	CALL _lcdCommand
                +
000df7 e880     +LDI R24 , LOW ( 3200 )
000df8 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000df9 9701     +SBIW R24 , 1
000dfa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000dfb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000dfc e0e3      	LDI  R30,LOW(3)
000dfd e0f0      	LDI  R31,HIGH(3)
000dfe 15e4      	CP   R30,R4
000dff 05f5      	CPC  R31,R5
000e00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:125 WORDS
                 SUBOPT_0x6:
000e01 ebe0      	LDI  R30,LOW(_buffer)
000e02 e0f7      	LDI  R31,HIGH(_buffer)
000e03 93fa      	ST   -Y,R31
000e04 93ea      	ST   -Y,R30
000e05 e0e0      	LDI  R30,LOW(0)
000e06 93ea      	ST   -Y,R30
000e07 e2a0      	LDI  R26,LOW(32)
000e08 e0b0      	LDI  R27,0
000e09 940c 0bf1 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
                +
000e0b e880     +LDI R24 , LOW ( 3200 )
000e0c e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000e0d 9701     +SBIW R24 , 1
000e0e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000e0f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x8:
000e10 eba0      	LDI  R26,LOW(_buffer)
000e11 e0b7      	LDI  R27,HIGH(_buffer)
000e12 940c 0c01 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000e14 ebe0      	LDI  R30,LOW(_buffer)
000e15 e0f7      	LDI  R31,HIGH(_buffer)
000e16 93fa      	ST   -Y,R31
000e17 93ea      	ST   -Y,R30
000e18 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000e19 93fa      	ST   -Y,R31
000e1a 93ea      	ST   -Y,R30
000e1b e0a2      	LDI  R26,LOW(2)
000e1c 940e 0c1a 	CALL _strncmp
000e1e 30e0      	CPI  R30,0
000e1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
000e20 eda0      	LDI  R26,LOW(2000)
000e21 e0b7      	LDI  R27,HIGH(2000)
000e22 940e 0f48 	CALL _delay_ms
000e24 9897      	CBI  0x12,7
000e25 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000e26 940e 090f 	CALL _lcd_print
000e28 cff7      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000e29 e0a0      	LDI  R26,LOW(0)
000e2a e0b0      	LDI  R27,0
000e2b 940e 09c6 	CALL _read_byte_from_eeprom
000e2d 2f5e      	MOV  R21,R30
000e2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xE:
000e2f e0f0      	LDI  R31,0
000e30 9631      	ADIW R30,1
000e31 940e 10de 	CALL __LSLW3
000e33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000e34 e0e0      	LDI  R30,LOW(0)
000e35 e0f0      	LDI  R31,HIGH(0)
000e36 93fa      	ST   -Y,R31
000e37 93ea      	ST   -Y,R30
000e38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000e39 eba0      	LDI  R26,LOW(_buffer)
000e3a e0b7      	LDI  R27,HIGH(_buffer)
000e3b 940c 090f 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000e3d e0e4      	LDI  R30,LOW(4)
000e3e e0f0      	LDI  R31,HIGH(4)
000e3f 15e4      	CP   R30,R4
000e40 05f5      	CPC  R31,R5
000e41 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
000e42 e0e5      	LDI  R30,LOW(5)
000e43 e0f0      	LDI  R31,HIGH(5)
000e44 15e4      	CP   R30,R4
000e45 05f5      	CPC  R31,R5
000e46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
000e47 eea8      	LDI  R26,LOW(1000)
000e48 e0b3      	LDI  R27,HIGH(1000)
000e49 940c 0f48 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
000e4b 01f8      	MOVW R30,R16
000e4c 9631      	ADIW R30,1
000e4d 940e 10de 	CALL __LSLW3
000e4f 0fe2      	ADD  R30,R18
000e50 1ff3      	ADC  R31,R19
000e51 01df      	MOVW R26,R30
000e52 940c 09c6 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
000e54 e0ad      	LDI  R26,LOW(13)
000e55 940e 09dd 	CALL _USART_Transmit
000e57 e0ad      	LDI  R26,LOW(13)
000e58 940e 09dd 	CALL _USART_Transmit
000e5a efa4      	LDI  R26,LOW(500)
000e5b e0b1      	LDI  R27,HIGH(500)
000e5c 940c 0f48 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x16:
000e5e 940e 090f 	CALL _lcd_print
000e60 eda0      	LDI  R26,LOW(2000)
000e61 e0b7      	LDI  R27,HIGH(2000)
000e62 940c 0f48 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
000e64 e0e7      	LDI  R30,LOW(7)
000e65 e0f0      	LDI  R31,HIGH(7)
000e66 15e4      	CP   R30,R4
000e67 05f5      	CPC  R31,R5
000e68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000e69 e0e8      	LDI  R30,LOW(8)
000e6a e0f0      	LDI  R31,HIGH(8)
000e6b 15e4      	CP   R30,R4
000e6c 05f5      	CPC  R31,R5
000e6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000e6e e0e9      	LDI  R30,LOW(9)
000e6f e0f0      	LDI  R31,HIGH(9)
000e70 15e4      	CP   R30,R4
000e71 05f5      	CPC  R31,R5
000e72 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000e73 e0ea      	LDI  R30,LOW(10)
000e74 e0f0      	LDI  R31,HIGH(10)
000e75 15e4      	CP   R30,R4
000e76 05f5      	CPC  R31,R5
000e77 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
000e78 e0eb      	LDI  R30,LOW(11)
000e79 e0f0      	LDI  R31,HIGH(11)
000e7a 15e4      	CP   R30,R4
000e7b 05f5      	CPC  R31,R5
000e7c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1C:
000e7d 940e 08c7 	CALL _lcdCommand
000e7f cf8b      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
000e80 bbe8      	OUT  0x18,R30
000e81 b3e6      	IN   R30,0x16
000e82 70ef      	ANDI R30,LOW(0xF)
000e83 2f1e      	MOV  R17,R30
000e84 301f      	CPI  R17,15
000e85 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 40 TIMES, CODE SIZE REDUCTION:348 WORDS
                 SUBOPT_0x1E:
000e86 2fe0      	MOV  R30,R16
000e87 eaa0      	LDI  R26,LOW(_keypad)
000e88 e0b7      	LDI  R27,HIGH(_keypad)
000e89 e0f0      	LDI  R31,0
000e8a 940e 10e0 	CALL __LSLW2
000e8c 0fae      	ADD  R26,R30
000e8d 1fbf      	ADC  R27,R31
000e8e 27ee      	CLR  R30
000e8f 0fa3      	ADD  R26,R19
000e90 1fbe      	ADC  R27,R30
000e91 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1F:
000e92 27ff      	CLR  R31
000e93 2766      	CLR  R22
000e94 2777      	CLR  R23
000e95 940e 1110 	CALL __PUTPARD1
000e97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000e98 93ea      	ST   -Y,R30
000e99 e0a1      	LDI  R26,LOW(1)
000e9a 940c 08f8 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x21:
000e9c 55e0      	SUBI R30,LOW(-_buffer)
000e9d 4ff8      	SBCI R31,HIGH(-_buffer)
000e9e 010f      	MOVW R0,R30
000e9f cfe6      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x22:
000ea0 91ec      	LD   R30,X
000ea1 01d0      	MOVW R26,R0
000ea2 93ec      	ST   X,R30
000ea3 cf6c      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x23:
                +
000ea4 54ef     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000ea5 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000ea6 e0a0      	LDI  R26,LOW(0)
000ea7 83a0      	STD  Z+0,R26
000ea8 cfdd      	RJMP SUBOPT_0x1E
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x24:
000ea9 2fe5      	MOV  R30,R21
000eaa e0f0      	LDI  R31,0
000eab 9731      	SBIW R30,1
000eac 55e0      	SUBI R30,LOW(-_buffer)
000ead 4ff8      	SBCI R31,HIGH(-_buffer)
000eae e0a0      	LDI  R26,LOW(0)
000eaf 83a0      	STD  Z+0,R26
000eb0 e1a0      	LDI  R26,LOW(16)
000eb1 940c 08c7 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x25:
000eb3 940e 090f 	CALL _lcd_print
000eb5 e1a0      	LDI  R26,LOW(16)
000eb6 940c 08c7 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000eb8 e0a0      	LDI  R26,LOW(0)
000eb9 e0b0      	LDI  R27,0
000eba 940c 09c6 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x27:
000ebc 9721      	SBIW R28,1
000ebd 940e 09f9 	CALL _search_student_code
000ebf 83e8      	ST   Y,R30
000ec0 81a8      	LD   R26,Y
000ec1 30a1      	CPI  R26,LOW(0x1)
000ec2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x28:
000ec3 93aa      	ST   -Y,R26
000ec4 b3eb      	IN   R30,0x1B
000ec5 70ef      	ANDI R30,LOW(0xF)
000ec6 2fae      	MOV  R26,R30
000ec7 81e8      	LD   R30,Y
000ec8 7fe0      	ANDI R30,LOW(0xF0)
000ec9 2bea      	OR   R30,R26
000eca bbeb      	OUT  0x1B,R30
000ecb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x29:
000ecc 98d9      	CBI  0x1B,1
000ecd 9ada      	SBI  0x1B,2
                +
000ece e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000ecf 958a     +DEC R24
000ed0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000ed1 98da      	CBI  0x1B,2
000ed2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x2A:
000ed3 b3eb      	IN   R30,0x1B
000ed4 70ef      	ANDI R30,LOW(0xF)
000ed5 2fae      	MOV  R26,R30
000ed6 81e8      	LD   R30,Y
000ed7 95e2      	SWAP R30
000ed8 7fe0      	ANDI R30,0xF0
000ed9 2bea      	OR   R30,R26
000eda bbeb      	OUT  0x1B,R30
000edb 9ada      	SBI  0x1B,2
                +
000edc e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000edd 958a     +DEC R24
000ede f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000edf 98da      	CBI  0x1B,2
000ee0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
000ee1 81ea      	LDD  R30,Y+2
000ee2 70f0      	ANDI R31,HIGH(0x0)
000ee3 70e3      	ANDI R30,LOW(0x3)
000ee4 bbef      	OUT  0x1F,R30
000ee5 81e9      	LDD  R30,Y+1
000ee6 bbee      	OUT  0x1E,R30
000ee7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2C:
                +
000ee8 81ac     +LDD R26 , Y + 4
000ee9 81bd     +LDD R27 , Y + 4 + 1
000eea 818e     +LDD R24 , Y + 4 + 2
000eeb 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000eec 3ca0     +CPI R26 , LOW ( 0x927C0 )
000eed e2e7     +LDI R30 , HIGH ( 0x927C0 )
000eee 07be     +CPC R27 , R30
000eef e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000ef0 078e     +CPC R24 , R30
000ef1 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000ef2 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000ef3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2D:
                +
000ef4 81ec     +LDD R30 , Y + 4
000ef5 81fd     +LDD R31 , Y + 4 + 1
000ef6 816e     +LDD R22 , Y + 4 + 2
000ef7 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000ef8 5fef     +SUBI R30 , LOW ( - 1 )
000ef9 4fff     +SBCI R31 , HIGH ( - 1 )
000efa 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000efb 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000efc 83ec     +STD Y + 4 , R30
000efd 83fd     +STD Y + 4 + 1 , R31
000efe 836e     +STD Y + 4 + 2 , R22
000eff 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000f00 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
000f01 940e 0b70 	CALL _I2C_start
000f03 eda0      	LDI  R26,LOW(208)
000f04 940c 0b76 	JMP  _I2C_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
000f06 940e 0b76 	CALL _I2C_write
000f08 940c 0b8d 	JMP  _I2C_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x30:
000f0a 940e 0b70 	CALL _I2C_start
000f0c eda1      	LDI  R26,LOW(209)
000f0d 940e 0b76 	CALL _I2C_write
000f0f e0a1      	LDI  R26,LOW(1)
000f10 940e 0b7f 	CALL _I2C_read
000f12 81a8      	LD   R26,Y
000f13 81b9      	LDD  R27,Y+1
000f14 93ec      	ST   X,R30
000f15 e0a1      	LDI  R26,LOW(1)
000f16 940e 0b7f 	CALL _I2C_read
000f18 81aa      	LDD  R26,Y+2
000f19 81bb      	LDD  R27,Y+2+1
000f1a 93ec      	ST   X,R30
000f1b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x31:
000f1c 932a      	ST   -Y,R18
000f1d 85ad      	LDD  R26,Y+13
000f1e 85be      	LDD  R27,Y+13+1
000f1f 85ef      	LDD  R30,Y+15
000f20 89f8      	LDD  R31,Y+15+1
000f21 9509      	ICALL
000f22 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x32:
000f23 89e8      	LDD  R30,Y+16
000f24 89f9      	LDD  R31,Y+16+1
000f25 9734      	SBIW R30,4
000f26 8be8      	STD  Y+16,R30
000f27 8bf9      	STD  Y+16+1,R31
000f28 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
000f29 85ad      	LDD  R26,Y+13
000f2a 85be      	LDD  R27,Y+13+1
000f2b 85ef      	LDD  R30,Y+15
000f2c 89f8      	LDD  R31,Y+15+1
000f2d 9509      	ICALL
000f2e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x34:
000f2f 89a8      	LDD  R26,Y+16
000f30 89b9      	LDD  R27,Y+16+1
000f31 9614      	ADIW R26,4
000f32 940e 10f9 	CALL __GETW1P
000f34 83ee      	STD  Y+6,R30
000f35 83ff      	STD  Y+6+1,R31
000f36 81ae      	LDD  R26,Y+6
000f37 81bf      	LDD  R27,Y+6+1
000f38 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x35:
000f39 89a8      	LDD  R26,Y+16
000f3a 89b9      	LDD  R27,Y+16+1
000f3b 9614      	ADIW R26,4
000f3c 940e 10f9 	CALL __GETW1P
000f3e 87ea      	STD  Y+10,R30
000f3f 87fb      	STD  Y+10+1,R31
000f40 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
000f41 01de      	MOVW R26,R28
000f42 961c      	ADIW R26,12
000f43 940e 10ce 	CALL __ADDW2R15
000f45 940e 10f9 	CALL __GETW1P
000f47 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000f48 9610      	adiw r26,0
000f49 f039      	breq __delay_ms1
                 __delay_ms0:
000f4a 95a8      	wdr
                +
000f4b ed80     +LDI R24 , LOW ( 0x7D0 )
000f4c e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000f4d 9701     +SBIW R24 , 1
000f4e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000f4f 9711      	sbiw r26,1
000f50 f7c9      	brne __delay_ms0
                 __delay_ms1:
000f51 9508      	ret
                 
                 __ROUND_REPACK:
000f52 2355      	TST  R21
000f53 f442      	BRPL __REPACK
000f54 3850      	CPI  R21,0x80
000f55 f411      	BRNE __ROUND_REPACK0
000f56 ffe0      	SBRS R30,0
000f57 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000f58 9631      	ADIW R30,1
000f59 1f69      	ADC  R22,R25
000f5a 1f79      	ADC  R23,R25
000f5b f06b      	BRVS __REPACK1
                 
                 __REPACK:
000f5c e850      	LDI  R21,0x80
000f5d 2757      	EOR  R21,R23
000f5e f411      	BRNE __REPACK0
000f5f 935f      	PUSH R21
000f60 c0c8      	RJMP __ZERORES
                 __REPACK0:
000f61 3f5f      	CPI  R21,0xFF
000f62 f031      	BREQ __REPACK1
000f63 0f66      	LSL  R22
000f64 0c00      	LSL  R0
000f65 9557      	ROR  R21
000f66 9567      	ROR  R22
000f67 2f75      	MOV  R23,R21
000f68 9508      	RET
                 __REPACK1:
000f69 935f      	PUSH R21
000f6a 2000      	TST  R0
000f6b f00a      	BRMI __REPACK2
000f6c c0c8      	RJMP __MAXRES
                 __REPACK2:
000f6d c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000f6e e850      	LDI  R21,0x80
000f6f 2e19      	MOV  R1,R25
000f70 2215      	AND  R1,R21
000f71 0f88      	LSL  R24
000f72 1f99      	ROL  R25
000f73 2795      	EOR  R25,R21
000f74 0f55      	LSL  R21
000f75 9587      	ROR  R24
                 
                 __UNPACK1:
000f76 e850      	LDI  R21,0x80
000f77 2e07      	MOV  R0,R23
000f78 2205      	AND  R0,R21
000f79 0f66      	LSL  R22
000f7a 1f77      	ROL  R23
000f7b 2775      	EOR  R23,R21
000f7c 0f55      	LSL  R21
000f7d 9567      	ROR  R22
000f7e 9508      	RET
                 
                 __CFD1U:
000f7f 9468      	SET
000f80 c001      	RJMP __CFD1U0
                 __CFD1:
000f81 94e8      	CLT
                 __CFD1U0:
000f82 935f      	PUSH R21
000f83 dff2      	RCALL __UNPACK1
000f84 3870      	CPI  R23,0x80
000f85 f018      	BRLO __CFD10
000f86 3f7f      	CPI  R23,0xFF
000f87 f408      	BRCC __CFD10
000f88 c0a0      	RJMP __ZERORES
                 __CFD10:
000f89 e156      	LDI  R21,22
000f8a 1b57      	SUB  R21,R23
000f8b f4aa      	BRPL __CFD11
000f8c 9551      	NEG  R21
000f8d 3058      	CPI  R21,8
000f8e f40e      	BRTC __CFD19
000f8f 3059      	CPI  R21,9
                 __CFD19:
000f90 f030      	BRLO __CFD17
000f91 efef      	SER  R30
000f92 efff      	SER  R31
000f93 ef6f      	SER  R22
000f94 e77f      	LDI  R23,0x7F
000f95 f977      	BLD  R23,7
000f96 c01a      	RJMP __CFD15
                 __CFD17:
000f97 2777      	CLR  R23
000f98 2355      	TST  R21
000f99 f0b9      	BREQ __CFD15
                 __CFD18:
000f9a 0fee      	LSL  R30
000f9b 1fff      	ROL  R31
000f9c 1f66      	ROL  R22
000f9d 1f77      	ROL  R23
000f9e 955a      	DEC  R21
000f9f f7d1      	BRNE __CFD18
000fa0 c010      	RJMP __CFD15
                 __CFD11:
000fa1 2777      	CLR  R23
                 __CFD12:
000fa2 3058      	CPI  R21,8
000fa3 f028      	BRLO __CFD13
000fa4 2fef      	MOV  R30,R31
000fa5 2ff6      	MOV  R31,R22
000fa6 2f67      	MOV  R22,R23
000fa7 5058      	SUBI R21,8
000fa8 cff9      	RJMP __CFD12
                 __CFD13:
000fa9 2355      	TST  R21
000faa f031      	BREQ __CFD15
                 __CFD14:
000fab 9576      	LSR  R23
000fac 9567      	ROR  R22
000fad 95f7      	ROR  R31
000fae 95e7      	ROR  R30
000faf 955a      	DEC  R21
000fb0 f7d1      	BRNE __CFD14
                 __CFD15:
000fb1 2000      	TST  R0
000fb2 f40a      	BRPL __CFD16
000fb3 d122      	RCALL __ANEGD1
                 __CFD16:
000fb4 915f      	POP  R21
000fb5 9508      	RET
                 
                 __CDF1U:
000fb6 9468      	SET
000fb7 c001      	RJMP __CDF1U0
                 __CDF1:
000fb8 94e8      	CLT
                 __CDF1U0:
000fb9 9730      	SBIW R30,0
000fba 4060      	SBCI R22,0
000fbb 4070      	SBCI R23,0
000fbc f0b1      	BREQ __CDF10
000fbd 2400      	CLR  R0
000fbe f026      	BRTS __CDF11
000fbf 2377      	TST  R23
000fc0 f412      	BRPL __CDF11
000fc1 9400      	COM  R0
000fc2 d113      	RCALL __ANEGD1
                 __CDF11:
000fc3 2e17      	MOV  R1,R23
000fc4 e17e      	LDI  R23,30
000fc5 2011      	TST  R1
                 __CDF12:
000fc6 f032      	BRMI __CDF13
000fc7 957a      	DEC  R23
000fc8 0fee      	LSL  R30
000fc9 1fff      	ROL  R31
000fca 1f66      	ROL  R22
000fcb 1c11      	ROL  R1
000fcc cff9      	RJMP __CDF12
                 __CDF13:
000fcd 2fef      	MOV  R30,R31
000fce 2ff6      	MOV  R31,R22
000fcf 2d61      	MOV  R22,R1
000fd0 935f      	PUSH R21
000fd1 df8a      	RCALL __REPACK
000fd2 915f      	POP  R21
                 __CDF10:
000fd3 9508      	RET
                 
                 __SWAPACC:
000fd4 934f      	PUSH R20
000fd5 01af      	MOVW R20,R30
000fd6 01fd      	MOVW R30,R26
000fd7 01da      	MOVW R26,R20
000fd8 01ab      	MOVW R20,R22
000fd9 01bc      	MOVW R22,R24
000fda 01ca      	MOVW R24,R20
000fdb 2d40      	MOV  R20,R0
000fdc 2c01      	MOV  R0,R1
000fdd 2e14      	MOV  R1,R20
000fde 914f      	POP  R20
000fdf 9508      	RET
                 
                 __UADD12:
000fe0 0fea      	ADD  R30,R26
000fe1 1ffb      	ADC  R31,R27
000fe2 1f68      	ADC  R22,R24
000fe3 9508      	RET
                 
                 __NEGMAN1:
000fe4 95e0      	COM  R30
000fe5 95f0      	COM  R31
000fe6 9560      	COM  R22
000fe7 5fef      	SUBI R30,-1
000fe8 4fff      	SBCI R31,-1
000fe9 4f6f      	SBCI R22,-1
000fea 9508      	RET
                 
                 __ADDF12:
000feb 935f      	PUSH R21
000fec df81      	RCALL __UNPACK
000fed 3890      	CPI  R25,0x80
000fee f139      	BREQ __ADDF129
                 
                 __ADDF120:
000fef 3870      	CPI  R23,0x80
000ff0 f121      	BREQ __ADDF128
                 __ADDF121:
000ff1 2f57      	MOV  R21,R23
000ff2 1b59      	SUB  R21,R25
000ff3 f12b      	BRVS __ADDF1211
000ff4 f412      	BRPL __ADDF122
000ff5 dfde      	RCALL __SWAPACC
000ff6 cffa      	RJMP __ADDF121
                 __ADDF122:
000ff7 3158      	CPI  R21,24
000ff8 f018      	BRLO __ADDF123
000ff9 27aa      	CLR  R26
000ffa 27bb      	CLR  R27
000ffb 2788      	CLR  R24
                 __ADDF123:
000ffc 3058      	CPI  R21,8
000ffd f028      	BRLO __ADDF124
000ffe 2fab      	MOV  R26,R27
000fff 2fb8      	MOV  R27,R24
001000 2788      	CLR  R24
001001 5058      	SUBI R21,8
001002 cff9      	RJMP __ADDF123
                 __ADDF124:
001003 2355      	TST  R21
001004 f029      	BREQ __ADDF126
                 __ADDF125:
001005 9586      	LSR  R24
001006 95b7      	ROR  R27
001007 95a7      	ROR  R26
001008 955a      	DEC  R21
001009 f7d9      	BRNE __ADDF125
                 __ADDF126:
00100a 2d50      	MOV  R21,R0
00100b 2551      	EOR  R21,R1
00100c f072      	BRMI __ADDF127
00100d dfd2      	RCALL __UADD12
00100e f438      	BRCC __ADDF129
00100f 9567      	ROR  R22
001010 95f7      	ROR  R31
001011 95e7      	ROR  R30
001012 9573      	INC  R23
001013 f413      	BRVC __ADDF129
001014 c020      	RJMP __MAXRES
                 __ADDF128:
001015 dfbe      	RCALL __SWAPACC
                 __ADDF129:
001016 df45      	RCALL __REPACK
001017 915f      	POP  R21
001018 9508      	RET
                 __ADDF1211:
001019 f7d8      	BRCC __ADDF128
00101a cffb      	RJMP __ADDF129
                 __ADDF127:
00101b 1bea      	SUB  R30,R26
00101c 0bfb      	SBC  R31,R27
00101d 0b68      	SBC  R22,R24
00101e f051      	BREQ __ZERORES
00101f f410      	BRCC __ADDF1210
001020 9400      	COM  R0
001021 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
001022 2366      	TST  R22
001023 f392      	BRMI __ADDF129
001024 0fee      	LSL  R30
001025 1fff      	ROL  R31
001026 1f66      	ROL  R22
001027 957a      	DEC  R23
001028 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001029 27ee      	CLR  R30
00102a 27ff      	CLR  R31
00102b 2766      	CLR  R22
00102c 2777      	CLR  R23
00102d 915f      	POP  R21
00102e 9508      	RET
                 
                 __MINRES:
00102f efef      	SER  R30
001030 efff      	SER  R31
001031 e76f      	LDI  R22,0x7F
001032 ef7f      	SER  R23
001033 915f      	POP  R21
001034 9508      	RET
                 
                 __MAXRES:
001035 efef      	SER  R30
001036 efff      	SER  R31
001037 e76f      	LDI  R22,0x7F
001038 e77f      	LDI  R23,0x7F
001039 915f      	POP  R21
00103a 9508      	RET
                 
                 __MULF12:
00103b 935f      	PUSH R21
00103c df31      	RCALL __UNPACK
00103d 3870      	CPI  R23,0x80
00103e f351      	BREQ __ZERORES
00103f 3890      	CPI  R25,0x80
001040 f341      	BREQ __ZERORES
001041 2401      	EOR  R0,R1
001042 9408      	SEC
001043 1f79      	ADC  R23,R25
001044 f423      	BRVC __MULF124
001045 f31c      	BRLT __ZERORES
                 __MULF125:
001046 2000      	TST  R0
001047 f33a      	BRMI __MINRES
001048 cfec      	RJMP __MAXRES
                 __MULF124:
001049 920f      	PUSH R0
00104a 931f      	PUSH R17
00104b 932f      	PUSH R18
00104c 933f      	PUSH R19
00104d 934f      	PUSH R20
00104e 2711      	CLR  R17
00104f 2722      	CLR  R18
001050 2799      	CLR  R25
001051 9f68      	MUL  R22,R24
001052 01a0      	MOVW R20,R0
001053 9f8f      	MUL  R24,R31
001054 2d30      	MOV  R19,R0
001055 0d41      	ADD  R20,R1
001056 1f59      	ADC  R21,R25
001057 9f6b      	MUL  R22,R27
001058 0d30      	ADD  R19,R0
001059 1d41      	ADC  R20,R1
00105a 1f59      	ADC  R21,R25
00105b 9f8e      	MUL  R24,R30
00105c d027      	RCALL __MULF126
00105d 9fbf      	MUL  R27,R31
00105e d025      	RCALL __MULF126
00105f 9f6a      	MUL  R22,R26
001060 d023      	RCALL __MULF126
001061 9fbe      	MUL  R27,R30
001062 d01d      	RCALL __MULF127
001063 9faf      	MUL  R26,R31
001064 d01b      	RCALL __MULF127
001065 9fae      	MUL  R26,R30
001066 0d11      	ADD  R17,R1
001067 1f29      	ADC  R18,R25
001068 1f39      	ADC  R19,R25
001069 1f49      	ADC  R20,R25
00106a 1f59      	ADC  R21,R25
00106b 2fe3      	MOV  R30,R19
00106c 2ff4      	MOV  R31,R20
00106d 2f65      	MOV  R22,R21
00106e 2f52      	MOV  R21,R18
00106f 914f      	POP  R20
001070 913f      	POP  R19
001071 912f      	POP  R18
001072 911f      	POP  R17
001073 900f      	POP  R0
001074 2366      	TST  R22
001075 f02a      	BRMI __MULF122
001076 0f55      	LSL  R21
001077 1fee      	ROL  R30
001078 1fff      	ROL  R31
001079 1f66      	ROL  R22
00107a c002      	RJMP __MULF123
                 __MULF122:
00107b 9573      	INC  R23
00107c f24b      	BRVS __MULF125
                 __MULF123:
00107d ded4      	RCALL __ROUND_REPACK
00107e 915f      	POP  R21
00107f 9508      	RET
                 
                 __MULF127:
001080 0d10      	ADD  R17,R0
001081 1d21      	ADC  R18,R1
001082 1f39      	ADC  R19,R25
001083 c002      	RJMP __MULF128
                 __MULF126:
001084 0d20      	ADD  R18,R0
001085 1d31      	ADC  R19,R1
                 __MULF128:
001086 1f49      	ADC  R20,R25
001087 1f59      	ADC  R21,R25
001088 9508      	RET
                 
                 __DIVF21:
001089 935f      	PUSH R21
00108a dee3      	RCALL __UNPACK
00108b 3870      	CPI  R23,0x80
00108c f421      	BRNE __DIVF210
00108d 2011      	TST  R1
                 __DIVF211:
00108e f40a      	BRPL __DIVF219
00108f cf9f      	RJMP __MINRES
                 __DIVF219:
001090 cfa4      	RJMP __MAXRES
                 __DIVF210:
001091 3890      	CPI  R25,0x80
001092 f409      	BRNE __DIVF218
                 __DIVF217:
001093 cf95      	RJMP __ZERORES
                 __DIVF218:
001094 2401      	EOR  R0,R1
001095 9408      	SEC
001096 0b97      	SBC  R25,R23
001097 f41b      	BRVC __DIVF216
001098 f3d4      	BRLT __DIVF217
001099 2000      	TST  R0
00109a cff3      	RJMP __DIVF211
                 __DIVF216:
00109b 2f79      	MOV  R23,R25
00109c 931f      	PUSH R17
00109d 932f      	PUSH R18
00109e 933f      	PUSH R19
00109f 934f      	PUSH R20
0010a0 2411      	CLR  R1
0010a1 2711      	CLR  R17
0010a2 2722      	CLR  R18
0010a3 2733      	CLR  R19
0010a4 2744      	CLR  R20
0010a5 2755      	CLR  R21
0010a6 e290      	LDI  R25,32
                 __DIVF212:
0010a7 17ae      	CP   R26,R30
0010a8 07bf      	CPC  R27,R31
0010a9 0786      	CPC  R24,R22
0010aa 0741      	CPC  R20,R17
0010ab f030      	BRLO __DIVF213
0010ac 1bae      	SUB  R26,R30
0010ad 0bbf      	SBC  R27,R31
0010ae 0b86      	SBC  R24,R22
0010af 0b41      	SBC  R20,R17
0010b0 9408      	SEC
0010b1 c001      	RJMP __DIVF214
                 __DIVF213:
0010b2 9488      	CLC
                 __DIVF214:
0010b3 1f55      	ROL  R21
0010b4 1f22      	ROL  R18
0010b5 1f33      	ROL  R19
0010b6 1c11      	ROL  R1
0010b7 1faa      	ROL  R26
0010b8 1fbb      	ROL  R27
0010b9 1f88      	ROL  R24
0010ba 1f44      	ROL  R20
0010bb 959a      	DEC  R25
0010bc f751      	BRNE __DIVF212
0010bd 01f9      	MOVW R30,R18
0010be 2d61      	MOV  R22,R1
0010bf 914f      	POP  R20
0010c0 913f      	POP  R19
0010c1 912f      	POP  R18
0010c2 911f      	POP  R17
0010c3 2366      	TST  R22
0010c4 f032      	BRMI __DIVF215
0010c5 0f55      	LSL  R21
0010c6 1fee      	ROL  R30
0010c7 1fff      	ROL  R31
0010c8 1f66      	ROL  R22
0010c9 957a      	DEC  R23
0010ca f243      	BRVS __DIVF217
                 __DIVF215:
0010cb de86      	RCALL __ROUND_REPACK
0010cc 915f      	POP  R21
0010cd 9508      	RET
                 
                 __ADDW2R15:
0010ce 2400      	CLR  R0
0010cf 0daf      	ADD  R26,R15
0010d0 1db0      	ADC  R27,R0
0010d1 9508      	RET
                 
                 __ANEGW1:
0010d2 95f1      	NEG  R31
0010d3 95e1      	NEG  R30
0010d4 40f0      	SBCI R31,0
0010d5 9508      	RET
                 
                 __ANEGD1:
0010d6 95f0      	COM  R31
0010d7 9560      	COM  R22
0010d8 9570      	COM  R23
0010d9 95e1      	NEG  R30
0010da 4fff      	SBCI R31,-1
0010db 4f6f      	SBCI R22,-1
0010dc 4f7f      	SBCI R23,-1
0010dd 9508      	RET
                 
                 __LSLW3:
0010de 0fee      	LSL  R30
0010df 1fff      	ROL  R31
                 __LSLW2:
0010e0 0fee      	LSL  R30
0010e1 1fff      	ROL  R31
0010e2 0fee      	LSL  R30
0010e3 1fff      	ROL  R31
0010e4 9508      	RET
                 
                 __LSRD1:
0010e5 9576      	LSR  R23
0010e6 9567      	ROR  R22
0010e7 95f7      	ROR  R31
0010e8 95e7      	ROR  R30
0010e9 9508      	RET
                 
                 __CWD1:
0010ea 2f6f      	MOV  R22,R31
0010eb 0f66      	ADD  R22,R22
0010ec 0b66      	SBC  R22,R22
0010ed 2f76      	MOV  R23,R22
0010ee 9508      	RET
                 
                 __MANDW12:
0010ef 94e8      	CLT
0010f0 fff7      	SBRS R31,7
0010f1 c002      	RJMP __MANDW121
0010f2 dfdf      	RCALL __ANEGW1
0010f3 9468      	SET
                 __MANDW121:
0010f4 23ea      	AND  R30,R26
0010f5 23fb      	AND  R31,R27
0010f6 f40e      	BRTC __MANDW122
0010f7 dfda      	RCALL __ANEGW1
                 __MANDW122:
0010f8 9508      	RET
                 
                 __GETW1P:
0010f9 91ed      	LD   R30,X+
0010fa 91fc      	LD   R31,X
0010fb 9711      	SBIW R26,1
0010fc 9508      	RET
                 
                 __GETW1PF:
0010fd 9005      	LPM  R0,Z+
0010fe 91f4      	LPM  R31,Z
0010ff 2de0      	MOV  R30,R0
001100 9508      	RET
                 
                 __GETD1S0:
001101 81e8      	LD   R30,Y
001102 81f9      	LDD  R31,Y+1
001103 816a      	LDD  R22,Y+2
001104 817b      	LDD  R23,Y+3
001105 9508      	RET
                 
                 __GETD2S0:
001106 81a8      	LD   R26,Y
001107 81b9      	LDD  R27,Y+1
001108 818a      	LDD  R24,Y+2
001109 819b      	LDD  R25,Y+3
00110a 9508      	RET
                 
                 __PUTD1S0:
00110b 83e8      	ST   Y,R30
00110c 83f9      	STD  Y+1,R31
00110d 836a      	STD  Y+2,R22
00110e 837b      	STD  Y+3,R23
00110f 9508      	RET
                 
                 __PUTPARD1:
001110 937a      	ST   -Y,R23
001111 936a      	ST   -Y,R22
001112 93fa      	ST   -Y,R31
001113 93ea      	ST   -Y,R30
001114 9508      	RET
                 
                 __SAVELOCR6:
001115 935a      	ST   -Y,R21
                 __SAVELOCR5:
001116 934a      	ST   -Y,R20
                 __SAVELOCR4:
001117 933a      	ST   -Y,R19
                 __SAVELOCR3:
001118 932a      	ST   -Y,R18
                 __SAVELOCR2:
001119 931a      	ST   -Y,R17
00111a 930a      	ST   -Y,R16
00111b 9508      	RET
                 
                 __LOADLOCR6:
00111c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00111d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00111e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00111f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001120 8119      	LDD  R17,Y+1
001121 8108      	LD   R16,Y
001122 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  60 r1 :  24 r2 :   0 r3 :   0 r4 :  47 r5 :  29 r6 :   4 r7 :  13 
r8 :   0 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  77 r17:  78 r18:  63 r19:  50 r20:  39 r21:  94 r22:  81 r23:  56 
r24:  62 r25:  45 r26: 403 r27: 187 r28:  49 r29:   1 r30: 644 r31: 259 
x  :  79 y  : 357 z  :  20 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  35 add   :  28 
adiw  :  59 and   :   4 andi  :  21 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  69 
brge  :  12 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   2 brmi  :   8 brne  : 123 brpl  :   8 brsh  :  13 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 367 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  75 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  41 cpc   :  56 cpi   : 113 cpse  :   0 dec   :  12 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  22 inc   :   4 jmp   :  39 ld    :  96 ldd   : 135 ldi   : 540 
lds   :   2 lpm   :  14 lsl   :  17 lsr   :   3 mov   :  88 movw  :  75 
mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   7 out   :  45 pop   :  24 push  :  23 rcall :  87 ret   :  93 
reti  :   1 rjmp  : 226 rol   :  28 ror   :  15 sbc   :   9 sbci  :  24 
sbi   :  16 sbic  :   4 sbis  :   4 sbiw  :  46 sbr   :   0 sbrc  :   3 
sbrs  :  12 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 157 std   :  56 sts   :   2 sub   :   7 subi  :  42 swap  :   2 
tst   :  26 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x002246   7140   1634   8774   32768  26.8%
[.dseg] 0x000060 0x0007f8      0   1432   1432    2048  69.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
