
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Fri Jan 03 20:12:17 2025

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 450 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x01C2
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R5
                 	.DEF _page_num=R4
                 	.DEF _US_count=R7
                 	.DEF _logged_in=R6
                 	.DEF _submitTime=R9
                 	.DEF _timerCount=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03bb 	JMP  __RESET
000002 940c 06f8 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 06e6 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0001      	.DB  0x0,0x0,0x1,0x0
000035 0500      	.DB  0x0,0x5
                 
                 _0x3:
000036 3837
000037 4f39
000038 3534
000039 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00003a 3231
00003b 4333
00003c 304c
00003d 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x5:
00003e 0222
00003f 0226
000040 022a
000041 022e      	.DB  LOW(_0x4),HIGH(_0x4),LOW(_0x4+4),HIGH(_0x4+4),LOW(_0x4+8),HIGH(_0x4+8),LOW(_0x4+12),HIGH(_0x4+12)
000042 0232
000043 0236
000044 023a      	.DB  LOW(_0x4+16),HIGH(_0x4+16),LOW(_0x4+20),HIGH(_0x4+20),LOW(_0x4+24),HIGH(_0x4+24)
                 _0x6:
000045 0000
000046 0000
000047 0000
000048 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000049 0000
00004a 0000
00004b 0000
00004c 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00004d 0000
00004e 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x19D:
00004f ffff      	.DB  0xFF,0xFF
                 _0x0:
000050 7553
000051 006e
000052 6f4d
000053 006e      	.DB  0x53,0x75,0x6E,0x0,0x4D,0x6F,0x6E,0x0
000054 7554
000055 0065
000056 6557
000057 0064      	.DB  0x54,0x75,0x65,0x0,0x57,0x65,0x64,0x0
000058 6854
000059 0075
00005a 7246
00005b 0069      	.DB  0x54,0x68,0x75,0x0,0x46,0x72,0x69,0x0
00005c 6153
00005d 0074
00005e 3a31
00005f 5320      	.DB  0x53,0x61,0x74,0x0,0x31,0x3A,0x20,0x53
000060 6275
000061 696d
000062 2074
000063 7453      	.DB  0x75,0x62,0x6D,0x69,0x74,0x20,0x53,0x74
000064 6475
000065 6e65
000066 2074
000067 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
000068 6564
000069 3200
00006a 203a
00006b 7553      	.DB  0x64,0x65,0x0,0x32,0x3A,0x20,0x53,0x75
00006c 6d62
00006d 7469
00006e 5720
00006f 7469      	.DB  0x62,0x6D,0x69,0x74,0x20,0x57,0x69,0x74
000070 2068
000071 6143
000072 6472
000073 5400      	.DB  0x68,0x20,0x43,0x61,0x72,0x64,0x0,0x54
000074 6d69
000075 2065
000076 6f66
000077 2072      	.DB  0x69,0x6D,0x65,0x20,0x66,0x6F,0x72,0x20
000078 7573
000079 6d62
00007a 7469
00007b 6920      	.DB  0x73,0x75,0x62,0x6D,0x69,0x74,0x20,0x69
00007c 2073
00007d 6966
00007e 696e
00007f 6873      	.DB  0x73,0x20,0x66,0x69,0x6E,0x69,0x73,0x68
000080 6465
000081 4500
000082 746e
000083 7265      	.DB  0x65,0x64,0x0,0x45,0x6E,0x74,0x65,0x72
000084 7920
000085 756f
000086 2072
000087 7473      	.DB  0x20,0x79,0x6F,0x75,0x72,0x20,0x73,0x74
000088 6475
000089 6e65
00008a 2074
00008b 6f63      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x63,0x6F
00008c 6564
00008d 003a
00008e 7242
00008f 6e69      	.DB  0x64,0x65,0x3A,0x0,0x42,0x72,0x69,0x6E
000090 2067
000091 6f79
000092 7275
000093 6320      	.DB  0x67,0x20,0x79,0x6F,0x75,0x72,0x20,0x63
000094 7261
000095 2064
000096 656e
000097 7261      	.DB  0x61,0x72,0x64,0x20,0x6E,0x65,0x61,0x72
000098 6420
000099 7665
00009a 6369
00009b 3a65      	.DB  0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x3A
00009c 3400
00009d 0030
00009e 6e49
00009f 6176      	.DB  0x0,0x34,0x30,0x0,0x49,0x6E,0x76,0x61
0000a0 696c
0000a1 2064
0000a2 6143
0000a3 6472      	.DB  0x6C,0x69,0x64,0x20,0x43,0x61,0x72,0x64
0000a4 4400
0000a5 7075
0000a6 696c
0000a7 6163      	.DB  0x0,0x44,0x75,0x70,0x6C,0x69,0x63,0x61
0000a8 6574
0000a9 5320
0000aa 7574
0000ab 6564      	.DB  0x74,0x65,0x20,0x53,0x74,0x75,0x64,0x65
0000ac 746e
0000ad 4320
0000ae 646f
0000af 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
0000b0 3025
0000b1 7832
0000b2 3025
0000b3 7832      	.DB  0x25,0x30,0x32,0x78,0x25,0x30,0x32,0x78
0000b4 5300
0000b5 7574
0000b6 6564
0000b7 746e      	.DB  0x0,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000b8 6120
0000b9 6464
0000ba 6465
0000bb 7720      	.DB  0x20,0x61,0x64,0x64,0x65,0x64,0x20,0x77
0000bc 7469
0000bd 2068
0000be 4449
0000bf 003a      	.DB  0x69,0x74,0x68,0x20,0x49,0x44,0x3A,0x0
0000c0 754e
0000c1 626d
0000c2 7265
0000c3 6f20      	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x6F
0000c4 2066
0000c5 7473
0000c6 6475
0000c7 6e65      	.DB  0x66,0x20,0x73,0x74,0x75,0x64,0x65,0x6E
0000c8 7374
0000c9 3a20
0000ca 0020
0000cb 7325      	.DB  0x74,0x73,0x20,0x3A,0x20,0x0,0x25,0x73
0000cc 2f00
0000cd 5000
0000ce 6572
0000cf 7373      	.DB  0x0,0x2F,0x0,0x50,0x72,0x65,0x73,0x73
0000d0 4320
0000d1 6e61
0000d2 6563
0000d3 206c      	.DB  0x20,0x43,0x61,0x6E,0x63,0x65,0x6C,0x20
0000d4 6f54
0000d5 4720
0000d6 206f
0000d7 6142      	.DB  0x54,0x6F,0x20,0x47,0x6F,0x20,0x42,0x61
0000d8 6b63
0000d9 5300
0000da 6174
0000db 7472      	.DB  0x63,0x6B,0x0,0x53,0x74,0x61,0x72,0x74
0000dc 5420
0000dd 6172
0000de 736e
0000df 6566      	.DB  0x20,0x54,0x72,0x61,0x6E,0x73,0x66,0x65
0000e0 7272
0000e1 6e69
0000e2 2e67
0000e3 2e2e      	.DB  0x72,0x72,0x69,0x6E,0x67,0x2E,0x2E,0x2E
0000e4 5500
0000e5 6173
0000e6 7472
0000e7 5420      	.DB  0x0,0x55,0x73,0x61,0x72,0x74,0x20,0x54
0000e8 6172
0000e9 736e
0000ea 696d
0000eb 2074      	.DB  0x72,0x61,0x6E,0x73,0x6D,0x69,0x74,0x20
0000ec 6946
0000ed 696e
0000ee 6873
0000ef 6465      	.DB  0x46,0x69,0x6E,0x69,0x73,0x68,0x65,0x64
0000f0 3100
0000f1 203a
0000f2 6553
0000f3 7261      	.DB  0x0,0x31,0x3A,0x20,0x53,0x65,0x61,0x72
0000f4 6863
0000f5 5320
0000f6 7574
0000f7 6564      	.DB  0x63,0x68,0x20,0x53,0x74,0x75,0x64,0x65
0000f8 746e
0000f9 3200
0000fa 203a
0000fb 6544      	.DB  0x6E,0x74,0x0,0x32,0x3A,0x20,0x44,0x65
0000fc 656c
0000fd 6574
0000fe 5320
0000ff 7574      	.DB  0x6C,0x65,0x74,0x65,0x20,0x53,0x74,0x75
000100 6564
000101 746e
000102 4500
000103 746e      	.DB  0x64,0x65,0x6E,0x74,0x0,0x45,0x6E,0x74
000104 7265
000105 5320
000106 7574
000107 6564      	.DB  0x65,0x72,0x20,0x53,0x74,0x75,0x64,0x65
000108 746e
000109 4320
00010a 646f
00010b 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
00010c 6f46
00010d 2072
00010e 6553
00010f 7261      	.DB  0x46,0x6F,0x72,0x20,0x53,0x65,0x61,0x72
000110 6863
000111 003a
000112 6e45
000113 6574      	.DB  0x63,0x68,0x3A,0x0,0x45,0x6E,0x74,0x65
000114 2072
000115 7453
000116 6475
000117 6e65      	.DB  0x72,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000118 2074
000119 6f43
00011a 6564
00011b 4620      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x46
00011c 726f
00011d 4420
00011e 6c65
00011f 7465      	.DB  0x6F,0x72,0x20,0x44,0x65,0x6C,0x65,0x74
000120 3a65
000121 4500
000122 746e
000123 7265      	.DB  0x65,0x3A,0x0,0x45,0x6E,0x74,0x65,0x72
000124 5320
000125 6365
000126 6572
000127 2074      	.DB  0x20,0x53,0x65,0x63,0x72,0x65,0x74,0x20
000128 6f43
000129 6564
00012a 2820
00012b 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x28,0x6F,0x72
00012c 6320
00012d 6e61
00012e 6563
00012f 296c      	.DB  0x20,0x63,0x61,0x6E,0x63,0x65,0x6C,0x29
000130 3100
000131 3a20
000132 4320
000133 656c      	.DB  0x0,0x31,0x20,0x3A,0x20,0x43,0x6C,0x65
000134 7261
000135 4520
000136 5045
000137 4f52      	.DB  0x61,0x72,0x20,0x45,0x45,0x50,0x52,0x4F
000138 004d
000139 2020
00013a 2020
00013b 7270      	.DB  0x4D,0x0,0x20,0x20,0x20,0x20,0x70,0x72
00013c 7365
00013d 2073
00013e 6163
00013f 636e      	.DB  0x65,0x73,0x73,0x20,0x63,0x61,0x6E,0x63
000140 6c65
000141 7420
000142 206f
000143 6162      	.DB  0x65,0x6C,0x20,0x74,0x6F,0x20,0x62,0x61
000144 6b63
000145 5300
000146 7465
000147 5420      	.DB  0x63,0x6B,0x0,0x53,0x65,0x74,0x20,0x54
000148 6d69
000149 7265
00014a 6d28
00014b 6e69      	.DB  0x69,0x6D,0x65,0x72,0x28,0x6D,0x69,0x6E
00014c 7475
00014d 7365
00014e 3a29
00014f 0020      	.DB  0x75,0x74,0x65,0x73,0x29,0x3A,0x20,0x0
000150 3025
000151 7832
000152 253a
000153 3230      	.DB  0x25,0x30,0x32,0x78,0x3A,0x25,0x30,0x32
000154 3a78
000155 3025
000156 7832
000157 2020      	.DB  0x78,0x3A,0x25,0x30,0x32,0x78,0x20,0x20
000158 3200
000159 2530
00015a 3230
00015b 2f78      	.DB  0x0,0x32,0x30,0x25,0x30,0x32,0x78,0x2F
00015c 3025
00015d 7832
00015e 252f
00015f 3230      	.DB  0x25,0x30,0x32,0x78,0x2F,0x25,0x30,0x32
000160 2078
000161 2520
000162 7333
000163 4c00      	.DB  0x78,0x20,0x20,0x25,0x33,0x73,0x0,0x4C
000164 676f
000165 756f
000166 2074
000167 2e2e      	.DB  0x6F,0x67,0x6F,0x75,0x74,0x20,0x2E,0x2E
000168 002e
000169 6f47
00016a 6e69
00016b 2067      	.DB  0x2E,0x0,0x47,0x6F,0x69,0x6E,0x67,0x20
00016c 6f54
00016d 4120
00016e 6d64
00016f 6e69      	.DB  0x54,0x6F,0x20,0x41,0x64,0x6D,0x69,0x6E
000170 5020
000171 6761
000172 2065
000173 6e49      	.DB  0x20,0x50,0x61,0x67,0x65,0x20,0x49,0x6E
000174 3220
000175 5320
000176 6365
000177 4900      	.DB  0x20,0x32,0x20,0x53,0x65,0x63,0x0,0x49
000178 636e
000179 726f
00017a 6572
00017b 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
00017c 5320
00017d 7574
00017e 6564
00017f 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000180 4320
000181 646f
000182 2065
000183 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
000184 6d72
000185 7461
000186 5900
000187 756f      	.DB  0x72,0x6D,0x61,0x74,0x0,0x59,0x6F,0x75
000188 5720
000189 6c69
00018a 206c
00018b 6142      	.DB  0x20,0x57,0x69,0x6C,0x6C,0x20,0x42,0x61
00018c 6b63
00018d 4d20
00018e 6e65
00018f 2075      	.DB  0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20
000190 6e49
000191 3220
000192 5320
000193 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
000194 6e6f
000195 0064
000196 7544
000197 6c70      	.DB  0x6F,0x6E,0x64,0x0,0x44,0x75,0x70,0x6C
000198 6369
000199 7461
00019a 2065
00019b 7453      	.DB  0x69,0x63,0x61,0x74,0x65,0x20,0x53,0x74
00019c 6475
00019d 6e65
00019e 2074
00019f 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0001a0 6564
0001a1 4520
0001a2 746e
0001a3 7265      	.DB  0x64,0x65,0x20,0x45,0x6E,0x74,0x65,0x72
0001a4 6465
0001a5 5300
0001a6 7574
0001a7 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
0001a8 746e
0001a9 4320
0001aa 646f
0001ab 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
0001ac 7553
0001ad 6363
0001ae 7365
0001af 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0001b0 6c75
0001b1 796c
0001b2 4120
0001b3 6464      	.DB  0x75,0x6C,0x6C,0x79,0x20,0x41,0x64,0x64
0001b4 6465
0001b5 5900
0001b6 756f
0001b7 4d20      	.DB  0x65,0x64,0x0,0x59,0x6F,0x75,0x20,0x4D
0001b8 7375
0001b9 2074
0001ba 6946
0001bb 7372      	.DB  0x75,0x73,0x74,0x20,0x46,0x69,0x72,0x73
0001bc 2074
0001bd 6f4c
0001be 6967
0001bf 006e      	.DB  0x74,0x20,0x4C,0x6F,0x67,0x69,0x6E,0x0
0001c0 6f59
0001c1 2075
0001c2 6957
0001c3 6c6c      	.DB  0x59,0x6F,0x75,0x20,0x57,0x69,0x6C,0x6C
0001c4 4720
0001c5 206f
0001c6 6441
0001c7 696d      	.DB  0x20,0x47,0x6F,0x20,0x41,0x64,0x6D,0x69
0001c8 206e
0001c9 6150
0001ca 6567
0001cb 3220      	.DB  0x6E,0x20,0x50,0x61,0x67,0x65,0x20,0x32
0001cc 5320
0001cd 6365
0001ce 5300
0001cf 7574      	.DB  0x20,0x53,0x65,0x63,0x0,0x53,0x74,0x75
0001d0 6564
0001d1 746e
0001d2 4320
0001d3 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
0001d4 2065
0001d5 6f46
0001d6 6e75
0001d7 0064      	.DB  0x65,0x20,0x46,0x6F,0x75,0x6E,0x64,0x0
0001d8 704f
0001d9 2073
0001da 202c
0001db 7453      	.DB  0x4F,0x70,0x73,0x20,0x2C,0x20,0x53,0x74
0001dc 6475
0001dd 6e65
0001de 2074
0001df 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0001e0 6564
0001e1 4e20
0001e2 746f
0001e3 4620      	.DB  0x64,0x65,0x20,0x4E,0x6F,0x74,0x20,0x46
0001e4 756f
0001e5 646e
0001e6 5700
0001e7 6961      	.DB  0x6F,0x75,0x6E,0x64,0x0,0x57,0x61,0x69
0001e8 2074
0001e9 6f46
0001ea 2072
0001eb 6544      	.DB  0x74,0x20,0x46,0x6F,0x72,0x20,0x44,0x65
0001ec 656c
0001ed 6574
0001ee 2e2e
0001ef 002e      	.DB  0x6C,0x65,0x74,0x65,0x2E,0x2E,0x2E,0x0
0001f0 7453
0001f1 6475
0001f2 6e65
0001f3 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0001f4 6f43
0001f5 6564
0001f6 5720
0001f7 7361      	.DB  0x43,0x6F,0x64,0x65,0x20,0x57,0x61,0x73
0001f8 4420
0001f9 6c65
0001fa 7465
0001fb 6465      	.DB  0x20,0x44,0x65,0x6C,0x65,0x74,0x65,0x64
0001fc 5400
0001fd 6d69
0001fe 7265
0001ff 7320      	.DB  0x0,0x54,0x69,0x6D,0x65,0x72,0x20,0x73
000200 6174
000201 7472
000202 6465
000203 4c00      	.DB  0x74,0x61,0x72,0x74,0x65,0x64,0x0,0x4C
000204 676f
000205 6e69
000206 5320
000207 6375      	.DB  0x6F,0x67,0x69,0x6E,0x20,0x53,0x75,0x63
000208 6563
000209 7373
00020a 7566
00020b 6c6c      	.DB  0x63,0x65,0x73,0x73,0x66,0x75,0x6C,0x6C
00020c 0079
00020d 6157
00020e 7469
00020f 2e2e      	.DB  0x79,0x0,0x57,0x61,0x69,0x74,0x2E,0x2E
000210 002e
000211 704f
000212 2073
000213 202c      	.DB  0x2E,0x0,0x4F,0x70,0x73,0x20,0x2C,0x20
000214 6573
000215 7263
000216 7465
000217 6920      	.DB  0x73,0x65,0x63,0x72,0x65,0x74,0x20,0x69
000218 2073
000219 6e69
00021a 6f63
00021b 7272      	.DB  0x73,0x20,0x69,0x6E,0x63,0x6F,0x72,0x72
00021c 6365
00021d 0074
00021e 6c43
00021f 6165      	.DB  0x65,0x63,0x74,0x0,0x43,0x6C,0x65,0x61
000220 6972
000221 676e
000222 4520
000223 5045      	.DB  0x72,0x69,0x6E,0x67,0x20,0x45,0x45,0x50
000224 4f52
000225 204d
000226 2e2e
000227 002e      	.DB  0x52,0x4F,0x4D,0x20,0x2E,0x2E,0x2E,0x0
000228 6554
000229 706d
00022a 7265
00022b 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
00022c 7275
00022d 2865
00022e 2943
00022f 003a      	.DB  0x75,0x72,0x65,0x28,0x43,0x29,0x3A,0x0
000230 3a31
000231 4120
000232 7474
000233 6e65      	.DB  0x31,0x3A,0x20,0x41,0x74,0x74,0x65,0x6E
000234 6164
000235 636e
000236 2065
000237 6e49      	.DB  0x64,0x61,0x6E,0x63,0x65,0x20,0x49,0x6E
000238 7469
000239 6169
00023a 696c
00023b 617a      	.DB  0x69,0x74,0x69,0x61,0x6C,0x69,0x7A,0x61
00023c 6974
00023d 6e6f
00023e 3200
00023f 203a      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x32,0x3A,0x20
000240 7453
000241 6475
000242 6e65
000243 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
000244 614d
000245 616e
000246 6567
000247 656d      	.DB  0x4D,0x61,0x6E,0x61,0x67,0x65,0x6D,0x65
000248 746e
000249 3300
00024a 203a
00024b 6956      	.DB  0x6E,0x74,0x0,0x33,0x3A,0x20,0x56,0x69
00024c 7765
00024d 5020
00024e 6572
00024f 6573      	.DB  0x65,0x77,0x20,0x50,0x72,0x65,0x73,0x65
000250 746e
000251 5320
000252 7574
000253 6564      	.DB  0x6E,0x74,0x20,0x53,0x74,0x75,0x64,0x65
000254 746e
000255 2073
000256 3400
000257 203a      	.DB  0x6E,0x74,0x73,0x20,0x0,0x34,0x3A,0x20
000258 6554
000259 706d
00025a 7265
00025b 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
00025c 7275
00025d 2065
00025e 6f4d
00025f 696e      	.DB  0x75,0x72,0x65,0x20,0x4D,0x6F,0x6E,0x69
000260 6f74
000261 6972
000262 676e
000263 3500      	.DB  0x74,0x6F,0x72,0x69,0x6E,0x67,0x0,0x35
000264 203a
000265 6552
000266 7274
000267 6569      	.DB  0x3A,0x20,0x52,0x65,0x74,0x72,0x69,0x65
000268 6576
000269 5320
00026a 7574
00026b 6564      	.DB  0x76,0x65,0x20,0x53,0x74,0x75,0x64,0x65
00026c 746e
00026d 4420
00026e 7461
00026f 0061      	.DB  0x6E,0x74,0x20,0x44,0x61,0x74,0x61,0x0
000270 3a36
000271 5420
000272 6172
000273 6666      	.DB  0x36,0x3A,0x20,0x54,0x72,0x61,0x66,0x66
000274 6369
000275 4d20
000276 6e6f
000277 7469      	.DB  0x69,0x63,0x20,0x4D,0x6F,0x6E,0x69,0x74
000278 726f
000279 6e69
00027a 0067
00027b 3a37      	.DB  0x6F,0x72,0x69,0x6E,0x67,0x0,0x37,0x3A
00027c 4c20
00027d 676f
00027e 6e69
00027f 5720      	.DB  0x20,0x4C,0x6F,0x67,0x69,0x6E,0x20,0x57
000280 7469
000281 2068
000282 6441
000283 696d      	.DB  0x69,0x74,0x68,0x20,0x41,0x64,0x6D,0x69
000284 006e
000285 3a38
000286 4c20
000287 676f      	.DB  0x6E,0x0,0x38,0x3A,0x20,0x4C,0x6F,0x67
000288 756f
000289 0074
00028a 3a39
00028b 5320      	.DB  0x6F,0x75,0x74,0x0,0x39,0x3A,0x20,0x53
00028c 7465
00028d 5420
00028e 6d69
00028f 7265      	.DB  0x65,0x74,0x20,0x54,0x69,0x6D,0x65,0x72
000290 4400
000291 7369
000292 6174
000293 636e      	.DB  0x0,0x44,0x69,0x73,0x74,0x61,0x6E,0x63
000294 3a65
000295 0020
000296 7245
000297 6f72      	.DB  0x65,0x3A,0x20,0x0,0x45,0x72,0x72,0x6F
000298 0072
000299 6f4e
00029a 4f20
00029b 7362      	.DB  0x72,0x0,0x4E,0x6F,0x20,0x4F,0x62,0x73
00029c 6174
00029d 6c63
00029e 0065
00029f 6320      	.DB  0x74,0x61,0x63,0x6C,0x65,0x0,0x20,0x63
0002a0 206d
0002a1 4300
0002a2 756f
0002a3 746e      	.DB  0x6D,0x20,0x0,0x43,0x6F,0x75,0x6E,0x74
0002a4 203a
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1297): warning: .cseg .db misalignment - padding zero byte
0002a5 0000      	.DB  0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1299): warning: .cseg .db misalignment - padding zero byte
0002a6 0001      	.DB  0x1
                 _0x2000000:
0002a7 4e2d
0002a8 4e41
0002a9 4900
0002aa 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1302): warning: .cseg .db misalignment - padding zero byte
0002ab 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0002ac 0006      	.DW  0x06
0002ad 0004      	.DW  0x04
0002ae 0066      	.DW  __REG_VARS*2
                 
0002af 0010      	.DW  0x10
0002b0 07de      	.DW  _keypad
0002b1 006c      	.DW  _0x3*2
                 
0002b2 0004      	.DW  0x04
0002b3 0222      	.DW  _0x4
0002b4 00a0      	.DW  _0x0*2
                 
0002b5 0004      	.DW  0x04
0002b6 0226      	.DW  _0x4+4
0002b7 00a4      	.DW  _0x0*2+4
                 
0002b8 0004      	.DW  0x04
0002b9 022a      	.DW  _0x4+8
0002ba 00a8      	.DW  _0x0*2+8
                 
0002bb 0004      	.DW  0x04
0002bc 022e      	.DW  _0x4+12
0002bd 00ac      	.DW  _0x0*2+12
                 
0002be 0004      	.DW  0x04
0002bf 0232      	.DW  _0x4+16
0002c0 00b0      	.DW  _0x0*2+16
                 
0002c1 0004      	.DW  0x04
0002c2 0236      	.DW  _0x4+20
0002c3 00b4      	.DW  _0x0*2+20
                 
0002c4 0004      	.DW  0x04
0002c5 023a      	.DW  _0x4+24
0002c6 00b8      	.DW  _0x0*2+24
                 
0002c7 000e      	.DW  0x0E
0002c8 080e      	.DW  _days
0002c9 007c      	.DW  _0x5*2
                 
0002ca 0017      	.DW  0x17
0002cb 023e      	.DW  _0xD
0002cc 00bc      	.DW  _0x0*2+28
                 
0002cd 0014      	.DW  0x14
0002ce 0255      	.DW  _0xD+23
0002cf 00d3      	.DW  _0x0*2+51
                 
0002d0 001c      	.DW  0x1C
0002d1 0269      	.DW  _0xD+43
0002d2 00e7      	.DW  _0x0*2+71
                 
0002d3 0019      	.DW  0x19
0002d4 0285      	.DW  _0xD+71
0002d5 0103      	.DW  _0x0*2+99
                 
0002d6 001c      	.DW  0x1C
0002d7 029e      	.DW  _0xD+96
0002d8 00e7      	.DW  _0x0*2+71
                 
0002d9 001d      	.DW  0x1D
0002da 02ba      	.DW  _0xD+124
0002db 011c      	.DW  _0x0*2+124
                 
0002dc 0003      	.DW  0x03
0002dd 02d7      	.DW  _0xD+153
0002de 0139      	.DW  _0x0*2+153
                 
0002df 000d      	.DW  0x0D
0002e0 02da      	.DW  _0xD+156
0002e1 013c      	.DW  _0x0*2+156
                 
0002e2 0017      	.DW  0x17
0002e3 02e7      	.DW  _0xD+169
0002e4 0149      	.DW  _0x0*2+169
                 
0002e5 0017      	.DW  0x17
0002e6 02fe      	.DW  _0xD+192
0002e7 0169      	.DW  _0x0*2+201
                 
0002e8 0016      	.DW  0x16
0002e9 0315      	.DW  _0xD+215
0002ea 0180      	.DW  _0x0*2+224
                 
0002eb 0002      	.DW  0x02
0002ec 032b      	.DW  _0xD+237
0002ed 011a      	.DW  _0x0*2+122
                 
0002ee 0002      	.DW  0x02
0002ef 032d      	.DW  _0xD+239
0002f0 0194      	.DW  _0x0*2+244
                 
0002f1 0002      	.DW  0x02
0002f2 032f      	.DW  _0xD+241
0002f3 0199      	.DW  _0x0*2+249
                 
0002f4 0018      	.DW  0x18
0002f5 0331      	.DW  _0xD+243
0002f6 019b      	.DW  _0x0*2+251
                 
0002f7 0016      	.DW  0x16
0002f8 0349      	.DW  _0xD+267
0002f9 01b3      	.DW  _0x0*2+275
                 
0002fa 0018      	.DW  0x18
0002fb 035f      	.DW  _0xD+289
0002fc 01c9      	.DW  _0x0*2+297
                 
0002fd 0012      	.DW  0x12
0002fe 0377      	.DW  _0xD+313
0002ff 01e1      	.DW  _0x0*2+321
                 
000300 0012      	.DW  0x12
000301 0389      	.DW  _0xD+331
000302 01f3      	.DW  _0x0*2+339
                 
000303 001f      	.DW  0x1F
000304 039b      	.DW  _0xD+349
000305 0205      	.DW  _0x0*2+357
                 
000306 001f      	.DW  0x1F
000307 03ba      	.DW  _0xD+380
000308 0224      	.DW  _0x0*2+388
                 
000309 001e      	.DW  0x1E
00030a 03d9      	.DW  _0xD+411
00030b 0243      	.DW  _0x0*2+419
                 
00030c 0011      	.DW  0x11
00030d 03f7      	.DW  _0xD+441
00030e 0261      	.DW  _0x0*2+449
                 
00030f 0019      	.DW  0x19
000310 0408      	.DW  _0xD+458
000311 0272      	.DW  _0x0*2+466
                 
000312 0015      	.DW  0x15
000313 0421      	.DW  _0xD+483
000314 028b      	.DW  _0x0*2+491
                 
000315 000b      	.DW  0x0B
000316 0436      	.DW  _0x9D
000317 02c7      	.DW  _0x0*2+551
                 
000318 001d      	.DW  0x1D
000319 0441      	.DW  _0x9D+11
00031a 02d2      	.DW  _0x0*2+562
                 
00031b 0002      	.DW  0x02
00031c 045e      	.DW  _0x9D+40
00031d 0194      	.DW  _0x0*2+244
                 
00031e 0002      	.DW  0x02
00031f 0460      	.DW  _0x9D+42
000320 0194      	.DW  _0x0*2+244
                 
000321 0003      	.DW  0x03
000322 0462      	.DW  _0x9D+44
000323 0139      	.DW  _0x0*2+153
                 
000324 001e      	.DW  0x1E
000325 0465      	.DW  _0x9D+47
000326 02ef      	.DW  _0x0*2+591
                 
000327 001f      	.DW  0x1F
000328 0483      	.DW  _0x9D+77
000329 030d      	.DW  _0x0*2+621
                 
00032a 001f      	.DW  0x1F
00032b 04a2      	.DW  _0x9D+108
00032c 032c      	.DW  _0x0*2+652
                 
00032d 001f      	.DW  0x1F
00032e 04c1      	.DW  _0x9D+139
00032f 030d      	.DW  _0x0*2+621
                 
000330 0020      	.DW  0x20
000331 04e0      	.DW  _0x9D+170
000332 034b      	.DW  _0x0*2+683
                 
000333 001f      	.DW  0x1F
000334 0500      	.DW  _0x9D+202
000335 030d      	.DW  _0x0*2+621
                 
000336 0015      	.DW  0x15
000337 051f      	.DW  _0x9D+233
000338 036b      	.DW  _0x0*2+715
                 
000339 001d      	.DW  0x1D
00033a 0534      	.DW  _0x9D+254
00033b 0380      	.DW  _0x0*2+736
                 
00033c 0002      	.DW  0x02
00033d 0551      	.DW  _0x9D+283
00033e 0194      	.DW  _0x0*2+244
                 
00033f 0002      	.DW  0x02
000340 0553      	.DW  _0x9D+285
000341 0194      	.DW  _0x0*2+244
                 
000342 0013      	.DW  0x13
000343 0555      	.DW  _0x9D+287
000344 039d      	.DW  _0x0*2+765
                 
000345 001f      	.DW  0x1F
000346 0568      	.DW  _0x9D+306
000347 030d      	.DW  _0x0*2+621
                 
000348 001d      	.DW  0x1D
000349 0587      	.DW  _0x9D+337
00034a 03b0      	.DW  _0x0*2+784
                 
00034b 001f      	.DW  0x1F
00034c 05a4      	.DW  _0x9D+366
00034d 030d      	.DW  _0x0*2+621
                 
00034e 0002      	.DW  0x02
00034f 05c3      	.DW  _0x9D+397
000350 0194      	.DW  _0x0*2+244
                 
000351 0002      	.DW  0x02
000352 05c5      	.DW  _0x9D+399
000353 0194      	.DW  _0x0*2+244
                 
000354 0013      	.DW  0x13
000355 05c7      	.DW  _0x9D+401
000356 039d      	.DW  _0x0*2+765
                 
000357 0013      	.DW  0x13
000358 05da      	.DW  _0x9D+420
000359 03cd      	.DW  _0x0*2+813
                 
00035a 0019      	.DW  0x19
00035b 05ed      	.DW  _0x9D+439
00035c 03e0      	.DW  _0x0*2+832
                 
00035d 001f      	.DW  0x1F
00035e 0606      	.DW  _0x9D+464
00035f 030d      	.DW  _0x0*2+621
                 
000360 001d      	.DW  0x1D
000361 0625      	.DW  _0x9D+495
000362 03b0      	.DW  _0x0*2+784
                 
000363 001f      	.DW  0x1F
000364 0642      	.DW  _0x9D+524
000365 030d      	.DW  _0x0*2+621
                 
000366 0003      	.DW  0x03
000367 0661      	.DW  _0x9D+555
000368 02ae      	.DW  _0x0*2+526
                 
000369 0003      	.DW  0x03
00036a 0664      	.DW  _0x9D+558
00036b 02ae      	.DW  _0x0*2+526
                 
00036c 000e      	.DW  0x0E
00036d 0667      	.DW  _0x9D+561
00036e 03f9      	.DW  _0x0*2+857
                 
00036f 0002      	.DW  0x02
000370 0675      	.DW  _0x9D+575
000371 0194      	.DW  _0x0*2+244
                 
000372 0002      	.DW  0x02
000373 0677      	.DW  _0x9D+577
000374 0194      	.DW  _0x0*2+244
                 
000375 0013      	.DW  0x13
000376 0679      	.DW  _0x9D+579
000377 0407      	.DW  _0x0*2+871
                 
000378 0008      	.DW  0x08
000379 068c      	.DW  _0x9D+598
00037a 041a      	.DW  _0x0*2+890
                 
00037b 001a      	.DW  0x1A
00037c 0694      	.DW  _0x9D+606
00037d 0422      	.DW  _0x0*2+898
                 
00037e 001f      	.DW  0x1F
00037f 06ae      	.DW  _0x9D+632
000380 030d      	.DW  _0x0*2+621
                 
000381 0014      	.DW  0x14
000382 06cd      	.DW  _0x9D+663
000383 043c      	.DW  _0x0*2+924
                 
000384 0010      	.DW  0x10
000385 06e1      	.DW  _0x13E
000386 0450      	.DW  _0x0*2+944
                 
000387 0002      	.DW  0x02
000388 06f1      	.DW  _0x13E+16
000389 0194      	.DW  _0x0*2+244
                 
00038a 001d      	.DW  0x1D
00038b 06f3      	.DW  _0x14A
00038c 0460      	.DW  _0x0*2+960
                 
00038d 0016      	.DW  0x16
00038e 0710      	.DW  _0x14A+29
00038f 047d      	.DW  _0x0*2+989
                 
000390 001a      	.DW  0x1A
000391 0726      	.DW  _0x14A+51
000392 0493      	.DW  _0x0*2+1011
                 
000393 001a      	.DW  0x1A
000394 0740      	.DW  _0x14A+77
000395 04ad      	.DW  _0x0*2+1037
                 
000396 0019      	.DW  0x19
000397 075a      	.DW  _0x14A+103
000398 04c7      	.DW  _0x0*2+1063
                 
000399 0016      	.DW  0x16
00039a 0773      	.DW  _0x14A+128
00039b 04e0      	.DW  _0x0*2+1088
                 
00039c 0014      	.DW  0x14
00039d 0789      	.DW  _0x14A+150
00039e 04f6      	.DW  _0x0*2+1110
                 
00039f 000a      	.DW  0x0A
0003a0 079d      	.DW  _0x14A+170
0003a1 050a      	.DW  _0x0*2+1130
                 
0003a2 000d      	.DW  0x0D
0003a3 07a7      	.DW  _0x14A+180
0003a4 0514      	.DW  _0x0*2+1140
                 
0003a5 0002      	.DW  0x02
0003a6 0830      	.DW  _previous_count_S0000015000
0003a7 009e      	.DW  _0x19D*2
                 
0003a8 000b      	.DW  0x0B
0003a9 07b4      	.DW  _0x19E
0003aa 0521      	.DW  _0x0*2+1153
                 
0003ab 0006      	.DW  0x06
0003ac 07bf      	.DW  _0x19E+11
0003ad 052c      	.DW  _0x0*2+1164
                 
0003ae 000c      	.DW  0x0C
0003af 07c5      	.DW  _0x19E+17
0003b0 0532      	.DW  _0x0*2+1170
                 
0003b1 0005      	.DW  0x05
0003b2 07d1      	.DW  _0x19E+29
0003b3 053e      	.DW  _0x0*2+1182
                 
0003b4 0008      	.DW  0x08
0003b5 07d6      	.DW  _0x19E+34
0003b6 0543      	.DW  _0x0*2+1187
                 
0003b7 0001      	.DW  0x01
0003b8 0832      	.DW  __seed_G100
0003b9 054c      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0003ba 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0003bb 94f8      	CLI
0003bc 27ee      	CLR  R30
0003bd bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0003be e0f1      	LDI  R31,1
0003bf bffb      	OUT  GICR,R31
0003c0 bfeb      	OUT  GICR,R30
0003c1 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0003c2 e08d      	LDI  R24,(14-2)+1
0003c3 e0a2      	LDI  R26,2
0003c4 27bb      	CLR  R27
                 __CLEAR_REG:
0003c5 93ed      	ST   X+,R30
0003c6 958a      	DEC  R24
0003c7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0003c8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0003c9 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0003ca e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0003cb 93ed      	ST   X+,R30
0003cc 9701      	SBIW R24,1
0003cd f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0003ce e5e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0003cf e0f5      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0003d0 9185      	LPM  R24,Z+
0003d1 9195      	LPM  R25,Z+
0003d2 9700      	SBIW R24,0
0003d3 f061      	BREQ __GLOBAL_INI_END
0003d4 91a5      	LPM  R26,Z+
0003d5 91b5      	LPM  R27,Z+
0003d6 9005      	LPM  R0,Z+
0003d7 9015      	LPM  R1,Z+
0003d8 01bf      	MOVW R22,R30
0003d9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0003da 9005      	LPM  R0,Z+
0003db 920d      	ST   X+,R0
0003dc 9701      	SBIW R24,1
0003dd f7e1      	BRNE __GLOBAL_INI_LOOP
0003de 01fb      	MOVW R30,R22
0003df cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0003e0 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0003e1 bfed      	OUT  SPL,R30
0003e2 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0003e3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0003e4 e2c2      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0003e5 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0003e6 940c 03e8 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x222
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;
                 ;#define LCD_PRT PORTA // LCD DATA PORT
                 ;#define LCD_DDR DDRA  // LCD DATA DDR
                 ;#define LCD_PIN PINA  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTB // keyboard PORT
                 ;#define KEY_DDR DDRB  // keyboard DDR
                 ;#define KEY_PIN PINB  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 5
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;void I2C_init();
                 ;void I2C_start();
                 ;void I2C_write(unsigned char data);
                 ;unsigned char I2C_read(unsigned char ackVal);
                 ;void I2C_stop();
                 ;void rtc_init();
                 ;void rtc_getTime(unsigned char*, unsigned char*, unsigned char*);
                 ;void rtc_getDate(unsigned char*, unsigned char*, unsigned char*, unsigned char*);
                 ;void Timer2_Init();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {{'7', '8', '9', 'O'},
                 ;                              {'4', '5', '6', 'D'},
                 ;                              {'1', '2', '3', 'C'},
                 ;                              {'L', '0', 'R', 'E'}};
                 
                 	.DSEG
                 ;
                 ;unsigned char stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 1;
                 ;char* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
                 _0x4:
000222           	.BYTE 0x1C
                 ;char time[20] = "";
                 ;unsigned char submitTime = 5;
                 ;unsigned char timerCount = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;    STAGE_SHOW_CLOCK,
                 ;    STAGE_SET_TIMER,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;    OPTION_SET_TIMER = 9,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0076     int i, j;
                 ; 0000 0077     unsigned char st_counts;
                 ; 0000 0078     unsigned char data;
                 ; 0000 0079     unsigned char second, minute, hour;
                 ; 0000 007A     unsigned char day, date, month, year;
                 ; 0000 007B     char Date[20] = "";
                 ; 0000 007C 
                 ; 0000 007D     KEY_DDR = 0xF0;
0003e8 976b      	SBIW R28,27
0003e9 e184      	LDI  R24,20
0003ea e0a0      	LDI  R26,LOW(0)
0003eb e0b0      	LDI  R27,HIGH(0)
0003ec e8ea      	LDI  R30,LOW(_0x6*2)
0003ed e0f0      	LDI  R31,HIGH(_0x6*2)
0003ee 940e 1476 	CALL __INITLOCB
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
                 ;	second -> Y+26
                 ;	minute -> Y+25
                 ;	hour -> Y+24
                 ;	day -> Y+23
                 ;	date -> Y+22
                 ;	month -> Y+21
                 ;	year -> Y+20
                 ;	Date -> Y+0
0003f0 efe0      	LDI  R30,LOW(240)
0003f1 bbe7      	OUT  0x17,R30
                 ; 0000 007E     KEY_PRT = 0xFF;
0003f2 efef      	LDI  R30,LOW(255)
0003f3 bbe8      	OUT  0x18,R30
                 ; 0000 007F     KEY_PRT &= 0x0F;                  // ground all rows at once
0003f4 b3e8      	IN   R30,0x18
0003f5 70ef      	ANDI R30,LOW(0xF)
0003f6 bbe8      	OUT  0x18,R30
                 ; 0000 0080     MCUCR = 0x02;                     // make INT0 falling edge triggered
0003f7 e0e2      	LDI  R30,LOW(2)
0003f8 bfe5      	OUT  0x35,R30
                 ; 0000 0081     GICR = (1 << INT0);               // enable external interrupt 0
0003f9 e4e0      	LDI  R30,LOW(64)
0003fa bfeb      	OUT  0x3B,R30
                 ; 0000 0082     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
0003fb 9a8f      	SBI  0x11,7
                 ; 0000 0083     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
0003fc 9897      	CBI  0x12,7
                 ; 0000 0084     USART_init(0x33);
0003fd e3a3      	LDI  R26,LOW(51)
0003fe e0b0      	LDI  R27,0
0003ff 940e 0c30 	CALL _USART_init
                 ; 0000 0085     HCSR04Init(); // Initialize ultrasonic sensor
000401 940e 0cb7 	CALL _HCSR04Init
                 ; 0000 0086     lcd_init();
000403 940e 0b1b 	CALL _lcd_init
                 ; 0000 0087     rtc_init();
000405 940e 0ddb 	CALL _rtc_init
                 ; 0000 0088 
                 ; 0000 0089 #asm("sei")           // enable interrupts
000407 9478      	sei
                 ; 0000 008A     lcdCommand(0x01); // clear LCD
000408 e0a1      	LDI  R26,LOW(1)
000409 940e 0b07 	CALL _lcdCommand
                 ; 0000 008B     while (1)
                 _0x7:
                 ; 0000 008C     {
                 ; 0000 008D         if (stage == STAGE_INIT_MENU)
00040b 2055      	TST  R5
00040c f419      	BRNE _0xA
                 ; 0000 008E         {
                 ; 0000 008F             show_menu();
00040d 940e 0b96 	CALL _show_menu
                 ; 0000 0090         }
                 ; 0000 0091         else if (stage == STAGE_ATTENDENC_MENU)
00040f c2d4      	RJMP _0xB
                 _0xA:
000410 e0e1      	LDI  R30,LOW(1)
000411 15e5      	CP   R30,R5
000412 f471      	BRNE _0xC
                 ; 0000 0092         {
                 ; 0000 0093             lcdCommand(0x01);
000413 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0094             lcd_gotoxy(1, 1);
                 ; 0000 0095             lcd_print("1: Submit Student Code");
                +
000415 e3ae     +LDI R26 , LOW ( _0xD + ( 0 ) )
000416 e0b2     +LDI R27 , HIGH ( _0xD + ( 0 ) )
                 	__POINTW2MN _0xD,0
000417 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0096             lcd_gotoxy(1, 2);
                 ; 0000 0097             lcd_print("2: Submit With Card");
                +
000419 e5a5     +LDI R26 , LOW ( _0xD + ( 23 ) )
00041a e0b2     +LDI R27 , HIGH ( _0xD + ( 23 ) )
                 	__POINTW2MN _0xD,23
00041b 940e 0b4e 	CALL _lcd_print
                 ; 0000 0098             while (stage == STAGE_ATTENDENC_MENU)
                 _0xE:
00041d e0e1      	LDI  R30,LOW(1)
00041e 15e5      	CP   R30,R5
00041f f3e9      	BREQ _0xE
                 ; 0000 0099                 ;
                 ; 0000 009A         }
                 ; 0000 009B         else if (stage == STAGE_SUBMIT_CODE)
000420 c2c3      	RJMP _0x11
                 _0xC:
000421 e0e2      	LDI  R30,LOW(2)
000422 15e5      	CP   R30,R5
000423 f4b1      	BRNE _0x12
                 ; 0000 009C         {
                 ; 0000 009D             if(submitTime == 0)
000424 2099      	TST  R9
000425 f431      	BRNE _0x13
                 ; 0000 009E             {
                 ; 0000 009F                 lcdCommand(0x01);
000426 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00A0                 lcd_gotoxy(1, 1);
                 ; 0000 00A1                 lcd_print("Time for submit is finished");
                +
000428 e6a9     +LDI R26 , LOW ( _0xD + ( 43 ) )
000429 e0b2     +LDI R27 , HIGH ( _0xD + ( 43 ) )
                 	__POINTW2MN _0xD,43
00042a 940e 1072 	CALL SUBOPT_0x2
                 ; 0000 00A2                 delay_ms(2000);
                 ; 0000 00A3                 stage = STAGE_INIT_MENU;
                 ; 0000 00A4             }
                 ; 0000 00A5             lcdCommand(0x01);
                 _0x13:
00042c 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00A6             lcd_gotoxy(1, 1);
                 ; 0000 00A7             lcd_print("Enter your student code:");
                +
00042e e8a5     +LDI R26 , LOW ( _0xD + ( 71 ) )
00042f e0b2     +LDI R27 , HIGH ( _0xD + ( 71 ) )
                 	__POINTW2MN _0xD,71
000430 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 00A8             lcd_gotoxy(1, 2);
                 ; 0000 00A9             lcdCommand(0x0f);   // display on, cursor blinking
000432 940e 107a 	CALL SUBOPT_0x3
                 ; 0000 00AA             delay_us(100 * 16); // wait
                 ; 0000 00AB             while (stage == STAGE_SUBMIT_CODE)
                 _0x14:
000434 e0e2      	LDI  R30,LOW(2)
000435 15e5      	CP   R30,R5
000436 f3e9      	BREQ _0x14
                 ; 0000 00AC                 ;
                 ; 0000 00AD             lcdCommand(0x0c);   // display on, cursor off
000437 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 00AE             delay_us(100 * 16); // wait
                 ; 0000 00AF         }
                 ; 0000 00B0         else if(stage == STAGE_SUBMIT_WITH_CARD)
000439 c2aa      	RJMP _0x17
                 _0x12:
00043a e0e3      	LDI  R30,LOW(3)
00043b 15e5      	CP   R30,R5
00043c f009      	BREQ PC+2
00043d c0b4      	RJMP _0x18
                 ; 0000 00B1         {
                 ; 0000 00B2             memset(buffer,0,32);
00043e 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 00B3             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x19:
000440 e0e3      	LDI  R30,LOW(3)
000441 15e5      	CP   R30,R5
000442 f009      	BREQ PC+2
000443 c0ad      	RJMP _0x1B
                 ; 0000 00B4             {
                 ; 0000 00B5                 if(submitTime == 0)
000444 2099      	TST  R9
000445 f439      	BRNE _0x1C
                 ; 0000 00B6                 {
                 ; 0000 00B7                     lcdCommand(0x01);
000446 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00B8                     lcd_gotoxy(1, 1);
                 ; 0000 00B9                     lcd_print("Time for submit is finished");
                +
000448 e9ae     +LDI R26 , LOW ( _0xD + ( 96 ) )
000449 e0b2     +LDI R27 , HIGH ( _0xD + ( 96 ) )
                 	__POINTW2MN _0xD,96
00044a 940e 1072 	CALL SUBOPT_0x2
                 ; 0000 00BA                     delay_ms(2000);
                 ; 0000 00BB                     stage = STAGE_INIT_MENU;
                 ; 0000 00BC                     break;
00044c c0a4      	RJMP _0x1B
                 ; 0000 00BD                 }
                 ; 0000 00BE                 lcdCommand(0x01);
                 _0x1C:
00044d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00BF                 lcd_gotoxy(1, 1);
                 ; 0000 00C0                 lcd_print("Bring your card near device:");
                +
00044f ebaa     +LDI R26 , LOW ( _0xD + ( 124 ) )
000450 e0b2     +LDI R27 , HIGH ( _0xD + ( 124 ) )
                 	__POINTW2MN _0xD,124
000451 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 00C1                 lcd_gotoxy(1, 2);
                 ; 0000 00C2                 delay_us(100 * 16); // wait
000453 940e 1094 	CALL SUBOPT_0x6
                 ; 0000 00C3                 while((data = USART_Receive()) != '\r'){
                 _0x1D:
000455 940e 0c27 	CALL _USART_Receive
000457 2f4e      	MOV  R20,R30
000458 30ed      	CPI  R30,LOW(0xD)
000459 f049      	BREQ _0x1F
                 ; 0000 00C4                     if(stage != STAGE_SUBMIT_WITH_CARD)
00045a e0e3      	LDI  R30,LOW(3)
00045b 15e5      	CP   R30,R5
00045c f431      	BRNE _0x1F
                 ; 0000 00C5                         break;
                 ; 0000 00C6                     buffer[strlen(buffer)] = data;
00045d 940e 1099 	CALL SUBOPT_0x7
00045f 51e2      	SUBI R30,LOW(-_buffer)
000460 4ff8      	SBCI R31,HIGH(-_buffer)
000461 8340      	ST   Z,R20
                 ; 0000 00C7                 }
000462 cff2      	RJMP _0x1D
                 _0x1F:
                 ; 0000 00C8                 if(stage != STAGE_SUBMIT_WITH_CARD){
000463 e0e3      	LDI  R30,LOW(3)
000464 15e5      	CP   R30,R5
000465 f019      	BREQ _0x21
                 ; 0000 00C9                     memset(buffer,0,32);
000466 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 00CA                     break;
000468 c088      	RJMP _0x1B
                 ; 0000 00CB                 }
                 ; 0000 00CC                 if (strncmp(buffer, "40", 2) != 0 ||
                 _0x21:
                 ; 0000 00CD                         strlen(buffer) != 8)
000469 940e 109d 	CALL SUBOPT_0x8
                +
00046b ede7     +LDI R30 , LOW ( _0xD + ( 153 ) )
00046c e0f2     +LDI R31 , HIGH ( _0xD + ( 153 ) )
                 	__POINTW1MN _0xD,153
00046d 940e 10a2 	CALL SUBOPT_0x9
00046f f431      	BRNE _0x23
000470 940e 1099 	CALL SUBOPT_0x7
000472 30e8      	CPI  R30,LOW(0x8)
000473 e0a0      	LDI  R26,HIGH(0x8)
000474 07fa      	CPC  R31,R26
000475 f051      	BREQ _0x22
                 _0x23:
                 ; 0000 00CE                 {
                 ; 0000 00CF                     lcdCommand(0x01);
000476 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00D0                     lcd_gotoxy(1, 1);
                 ; 0000 00D1                     lcd_print("Invalid Card");
                +
000478 edaa     +LDI R26 , LOW ( _0xD + ( 156 ) )
000479 e0b2     +LDI R27 , HIGH ( _0xD + ( 156 ) )
                 	__POINTW2MN _0xD,156
00047a 940e 0b4e 	CALL _lcd_print
                 ; 0000 00D2                     BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00047c 9a97      	SBI  0x12,7
                 ; 0000 00D3                     delay_ms(2000);
00047d 940e 10a9 	CALL SUBOPT_0xA
                 ; 0000 00D4                     BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00D5                 }
                 ; 0000 00D6                 else{
00047f c06e      	RJMP _0x25
                 _0x22:
                 ; 0000 00D7                     if (search_student_code() > 0){
000480 940e 0c3d 	CALL _search_student_code
000482 30e1      	CPI  R30,LOW(0x1)
000483 f040      	BRLO _0x26
                 ; 0000 00D8                         BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000484 9a97      	SBI  0x12,7
                 ; 0000 00D9                         lcdCommand(0x01);
000485 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00DA                         lcd_gotoxy(1, 1);
                 ; 0000 00DB                         lcd_print("Duplicate Student Code");
                +
000487 eea7     +LDI R26 , LOW ( _0xD + ( 169 ) )
000488 e0b2     +LDI R27 , HIGH ( _0xD + ( 169 ) )
                 	__POINTW2MN _0xD,169
000489 940e 10af 	CALL SUBOPT_0xB
                 ; 0000 00DC                         delay_ms(2000);
                 ; 0000 00DD                         BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00DE                     }
                 ; 0000 00DF                     else{
00048b c062      	RJMP _0x27
                 _0x26:
                 ; 0000 00E0                         // save the buffer to EEPROM
                 ; 0000 00E1                         st_counts = read_byte_from_eeprom(0x0);
00048c 940e 10b2 	CALL SUBOPT_0xC
                 ; 0000 00E2                         for (i = 0; i < 8; i++)
                +
00048e e000     +LDI R16 , LOW ( 0 )
00048f e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x29:
                +
000490 3008     +CPI R16 , LOW ( 8 )
000491 e0e0     +LDI R30 , HIGH ( 8 )
000492 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000493 f474      	BRGE _0x2A
                 ; 0000 00E3                         {
                 ; 0000 00E4                             write_byte_to_eeprom(i + ((st_counts + 1) * 16), buffer[i]);
000494 940e 10b8 	CALL SUBOPT_0xD
000496 940e 10be 	CALL SUBOPT_0xE
000498 eeae      	LDI  R26,LOW(_buffer)
000499 e0b7      	LDI  R27,HIGH(_buffer)
00049a 0fa0      	ADD  R26,R16
00049b 1fb1      	ADC  R27,R17
00049c 91ac      	LD   R26,X
00049d 940e 0c16 	CALL _write_byte_to_eeprom
                 ; 0000 00E5                         }
                +
00049f 5f0f     +SUBI R16 , LOW ( - 1 )
0004a0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004a1 cfee      	RJMP _0x29
                 _0x2A:
                 ; 0000 00E6                         rtc_getTime(&hour, &minute, &second);
0004a2 940e 10c3 	CALL SUBOPT_0xF
                 ; 0000 00E7                         sprintf(time, "%02x%02x", hour, minute);
0004a4 940e 10d4 	CALL SUBOPT_0x10
0004a6 940e 10d9 	CALL SUBOPT_0x11
0004a8 940e 10e6 	CALL SUBOPT_0x12
                 ; 0000 00E8                         for (i = 0; i < 4; i++)
                +
0004aa e000     +LDI R16 , LOW ( 0 )
0004ab e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2C:
                +
0004ac 3004     +CPI R16 , LOW ( 4 )
0004ad e0e0     +LDI R30 , HIGH ( 4 )
0004ae 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
0004af f47c      	BRGE _0x2D
                 ; 0000 00E9                         {
                 ; 0000 00EA                             write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i]);
0004b0 940e 10b8 	CALL SUBOPT_0xD
0004b2 9638      	ADIW R30,8
0004b3 940e 10be 	CALL SUBOPT_0xE
0004b5 e1ac      	LDI  R26,LOW(_time)
0004b6 e0b8      	LDI  R27,HIGH(_time)
0004b7 0fa0      	ADD  R26,R16
0004b8 1fb1      	ADC  R27,R17
0004b9 91ac      	LD   R26,X
0004ba 940e 0c16 	CALL _write_byte_to_eeprom
                 ; 0000 00EB                         }
                +
0004bc 5f0f     +SUBI R16 , LOW ( - 1 )
0004bd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004be cfed      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00EC                         rtc_getDate(&year, &month, &date, &day);
0004bf 940e 10eb 	CALL SUBOPT_0x13
                 ; 0000 00ED                         sprintf(time, "%02x%02x", month, date);
0004c1 940e 10d4 	CALL SUBOPT_0x10
0004c3 8de9      	LDD  R30,Y+25
0004c4 940e 1100 	CALL SUBOPT_0x14
0004c6 8dee      	LDD  R30,Y+30
0004c7 940e 1100 	CALL SUBOPT_0x14
0004c9 940e 10e6 	CALL SUBOPT_0x12
                 ; 0000 00EE                         for (i = 4; i < 8; i++)
                +
0004cb e004     +LDI R16 , LOW ( 4 )
0004cc e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 _0x2F:
                +
0004cd 3008     +CPI R16 , LOW ( 8 )
0004ce e0e0     +LDI R30 , HIGH ( 8 )
0004cf 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0004d0 f45c      	BRGE _0x30
                 ; 0000 00EF                         {
                 ; 0000 00F0                             write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i - 4]);
0004d1 940e 10b8 	CALL SUBOPT_0xD
0004d3 9638      	ADIW R30,8
0004d4 940e 10be 	CALL SUBOPT_0xE
0004d6 01f8      	MOVW R30,R16
0004d7 940e 1106 	CALL SUBOPT_0x15
                 ; 0000 00F1                         }
                +
0004d9 5f0f     +SUBI R16 , LOW ( - 1 )
0004da 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004db cff1      	RJMP _0x2F
                 _0x30:
                 ; 0000 00F2                         write_byte_to_eeprom(0x0, st_counts + 1);
0004dc 940e 110c 	CALL SUBOPT_0x16
0004de 2fa5      	MOV  R26,R21
0004df 5faf      	SUBI R26,-LOW(1)
0004e0 940e 0c16 	CALL _write_byte_to_eeprom
                 ; 0000 00F3                         lcdCommand(0x01);
0004e2 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 00F4                         lcd_gotoxy(1, 1);
                 ; 0000 00F5                         lcd_print("Student added with ID:");
                +
0004e4 efae     +LDI R26 , LOW ( _0xD + ( 192 ) )
0004e5 e0b2     +LDI R27 , HIGH ( _0xD + ( 192 ) )
                 	__POINTW2MN _0xD,192
0004e6 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 00F6                         lcd_gotoxy(1, 2);
                 ; 0000 00F7                         lcd_print(buffer);
0004e8 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 00F8                         delay_ms(3000); // wait
0004ea eba8      	LDI  R26,LOW(3000)
0004eb e0bb      	LDI  R27,HIGH(3000)
0004ec 940e 1282 	CALL _delay_ms
                 ; 0000 00F9                     }
                 _0x27:
                 ; 0000 00FA                 }
                 _0x25:
                 ; 0000 00FB                 memset(buffer,0,32);
0004ee 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 00FC             }
0004f0 cf4f      	RJMP _0x19
                 _0x1B:
                 ; 0000 00FD         }
                 ; 0000 00FE         else if (stage == STAGE_TEMPERATURE_MONITORING)
0004f1 c1f2      	RJMP _0x31
                 _0x18:
0004f2 e0e4      	LDI  R30,LOW(4)
0004f3 15e5      	CP   R30,R5
0004f4 f419      	BRNE _0x32
                 ; 0000 00FF         {
                 ; 0000 0100             show_temperature();
0004f5 940e 0b65 	CALL _show_temperature
                 ; 0000 0101         }
                 ; 0000 0102         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0004f7 c1ec      	RJMP _0x33
                 _0x32:
0004f8 e0e5      	LDI  R30,LOW(5)
0004f9 15e5      	CP   R30,R5
0004fa f009      	BREQ PC+2
0004fb c082      	RJMP _0x34
                 ; 0000 0103         {
                 ; 0000 0104             lcdCommand(0x01);
0004fc 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0105             lcd_gotoxy(1, 1);
                 ; 0000 0106             lcd_print("Number of students : ");
                +
0004fe e1a5     +LDI R26 , LOW ( _0xD + ( 215 ) )
0004ff e0b3     +LDI R27 , HIGH ( _0xD + ( 215 ) )
                 	__POINTW2MN _0xD,215
000500 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0107             lcd_gotoxy(1, 2);
                 ; 0000 0108             st_counts = read_byte_from_eeprom(0x0);
000502 940e 10b2 	CALL SUBOPT_0xC
                 ; 0000 0109             memset(buffer, 0, 32);
000504 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 010A             itoa(st_counts, buffer);
000506 2fe5      	MOV  R30,R21
000507 940e 1115 	CALL SUBOPT_0x18
                 ; 0000 010B             lcd_print(buffer);
000509 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 010C             delay_ms(1000);
00050b eea8      	LDI  R26,LOW(1000)
00050c e0b3      	LDI  R27,HIGH(1000)
00050d 940e 1282 	CALL _delay_ms
                 ; 0000 010D 
                 ; 0000 010E             for (i = 0; i < st_counts; i++)
                +
00050f e000     +LDI R16 , LOW ( 0 )
000510 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x36:
000511 2fe5      	MOV  R30,R21
000512 01d8      	MOVW R26,R16
000513 e0f0      	LDI  R31,0
000514 17ae      	CP   R26,R30
000515 07bf      	CPC  R27,R31
000516 f00c      	BRLT PC+2
000517 c05c      	RJMP _0x37
                 ; 0000 010F             {
                 ; 0000 0110                 memset(buffer, 0, 32);
000518 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0111                 for (j = 0; j < 8; j++)
                +
00051a e020     +LDI R18 , LOW ( 0 )
00051b e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x39:
                +
00051c 3028     +CPI R18 , LOW ( 8 )
00051d e0e0     +LDI R30 , HIGH ( 8 )
00051e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00051f f484      	BRGE _0x3A
                 ; 0000 0112                 {
                 ; 0000 0113                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 16));
000520 01f9      	MOVW R30,R18
000521 51e2      	SUBI R30,LOW(-_buffer)
000522 4ff8      	SBCI R31,HIGH(-_buffer)
000523 93ff      	PUSH R31
000524 93ef      	PUSH R30
000525 940e 111c 	CALL SUBOPT_0x19
000527 01df      	MOVW R26,R30
000528 940e 0c0a 	CALL _read_byte_from_eeprom
00052a 91af      	POP  R26
00052b 91bf      	POP  R27
00052c 93ec      	ST   X,R30
                 ; 0000 0114                 }
                +
00052d 5f2f     +SUBI R18 , LOW ( - 1 )
00052e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00052f cfec      	RJMP _0x39
                 _0x3A:
                 ; 0000 0115                 buffer[j] = '\0';
000530 940e 1123 	CALL SUBOPT_0x1A
                 ; 0000 0116                 lcdCommand(0x01);
000532 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0117                 lcd_gotoxy(1, 1);
                 ; 0000 0118                 lcd_print(buffer);
000534 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 0119 
                 ; 0000 011A                 memset(buffer, 0, 32);
000536 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 011B                 for (j = 0; j < 8; j++)
                +
000538 e020     +LDI R18 , LOW ( 0 )
000539 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3C:
                +
00053a 3028     +CPI R18 , LOW ( 8 )
00053b e0e0     +LDI R30 , HIGH ( 8 )
00053c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00053d f47c      	BRGE _0x3D
                 ; 0000 011C                 {
                 ; 0000 011D                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 16) + 8);
00053e 01f9      	MOVW R30,R18
00053f 51e2      	SUBI R30,LOW(-_buffer)
000540 4ff8      	SBCI R31,HIGH(-_buffer)
000541 93ff      	PUSH R31
000542 93ef      	PUSH R30
000543 940e 111c 	CALL SUBOPT_0x19
000545 940e 112a 	CALL SUBOPT_0x1B
000547 91af      	POP  R26
000548 91bf      	POP  R27
000549 93ec      	ST   X,R30
                 ; 0000 011E                 }
                +
00054a 5f2f     +SUBI R18 , LOW ( - 1 )
00054b 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00054c cfed      	RJMP _0x3C
                 _0x3D:
                 ; 0000 011F                 buffer[j] = '\0';
00054d 940e 1123 	CALL SUBOPT_0x1A
                 ; 0000 0120                 lcd_gotoxy(1, 2);
00054f 940e 112e 	CALL SUBOPT_0x1C
                 ; 0000 0121                 snprintf(time, 3, "%s", buffer);
000551 940e 1133 	CALL SUBOPT_0x1D
000553 eeee      	LDI  R30,LOW(_buffer)
000554 e0f7      	LDI  R31,HIGH(_buffer)
000555 940e 1140 	CALL SUBOPT_0x1E
                 ; 0000 0122                 lcd_print(time);
                 ; 0000 0123                 lcd_print(":");
                +
000557 e2ab     +LDI R26 , LOW ( _0xD + ( 237 ) )
000558 e0b3     +LDI R27 , HIGH ( _0xD + ( 237 ) )
                 	__POINTW2MN _0xD,237
000559 940e 114c 	CALL SUBOPT_0x1F
                 ; 0000 0124                 snprintf(time, 3, "%s", buffer + 2);
                +
00055b efe0     +LDI R30 , LOW ( _buffer + ( 2 ) )
00055c e0f7     +LDI R31 , HIGH ( _buffer + ( 2 ) )
                 	__POINTW1MN _buffer,2
00055d 940e 1140 	CALL SUBOPT_0x1E
                 ; 0000 0125                 lcd_print(time);
                 ; 0000 0126                 lcd_print(" ");
                +
00055f e2ad     +LDI R26 , LOW ( _0xD + ( 239 ) )
000560 e0b3     +LDI R27 , HIGH ( _0xD + ( 239 ) )
                 	__POINTW2MN _0xD,239
000561 940e 114c 	CALL SUBOPT_0x1F
                 ; 0000 0127                 snprintf(time, 3, "%s", buffer + 4);
                +
000563 efe2     +LDI R30 , LOW ( _buffer + ( 4 ) )
000564 e0f7     +LDI R31 , HIGH ( _buffer + ( 4 ) )
                 	__POINTW1MN _buffer,4
000565 940e 1140 	CALL SUBOPT_0x1E
                 ; 0000 0128                 lcd_print(time);
                 ; 0000 0129                 lcd_print("/");
                +
000567 e2af     +LDI R26 , LOW ( _0xD + ( 241 ) )
000568 e0b3     +LDI R27 , HIGH ( _0xD + ( 241 ) )
                 	__POINTW2MN _0xD,241
000569 940e 114c 	CALL SUBOPT_0x1F
                 ; 0000 012A                 snprintf(time, 3, "%s", buffer + 6);
                +
00056b efe4     +LDI R30 , LOW ( _buffer + ( 6 ) )
00056c e0f7     +LDI R31 , HIGH ( _buffer + ( 6 ) )
                 	__POINTW1MN _buffer,6
00056d 940e 1140 	CALL SUBOPT_0x1E
                 ; 0000 012B                 lcd_print(time);
                 ; 0000 012C                 delay_ms(2000);
00056f 940e 114f 	CALL SUBOPT_0x20
                 ; 0000 012D             }
                +
000571 5f0f     +SUBI R16 , LOW ( - 1 )
000572 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000573 cf9d      	RJMP _0x36
                 _0x37:
                 ; 0000 012E 
                 ; 0000 012F             lcdCommand(0x01);
000574 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0130             lcd_gotoxy(1, 1);
                 ; 0000 0131             lcd_print("Press Cancel To Go Back");
                +
000576 e3a1     +LDI R26 , LOW ( _0xD + ( 243 ) )
000577 e0b3     +LDI R27 , HIGH ( _0xD + ( 243 ) )
                 	__POINTW2MN _0xD,243
000578 940e 0b4e 	CALL _lcd_print
                 ; 0000 0132             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x3E:
00057a e0e5      	LDI  R30,LOW(5)
00057b 15e5      	CP   R30,R5
00057c f3e9      	BREQ _0x3E
                 ; 0000 0133                 ;
                 ; 0000 0134         }
                 ; 0000 0135         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
00057d c166      	RJMP _0x41
                 _0x34:
00057e e0e6      	LDI  R30,LOW(6)
00057f 15e5      	CP   R30,R5
000580 f009      	BREQ PC+2
000581 c088      	RJMP _0x42
                 ; 0000 0136         {
                 ; 0000 0137             lcdCommand(0x01);
000582 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0138             lcd_gotoxy(1, 1);
                 ; 0000 0139             lcd_print("Start Transferring...");
                +
000584 e4a9     +LDI R26 , LOW ( _0xD + ( 267 ) )
000585 e0b3     +LDI R27 , HIGH ( _0xD + ( 267 ) )
                 	__POINTW2MN _0xD,267
000586 940e 0b4e 	CALL _lcd_print
                 ; 0000 013A             st_counts = read_byte_from_eeprom(0x0);
000588 940e 10b2 	CALL SUBOPT_0xC
                 ; 0000 013B             for (i = 0; i < st_counts; i++)
                +
00058a e000     +LDI R16 , LOW ( 0 )
00058b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x44:
00058c 2fe5      	MOV  R30,R21
00058d 01d8      	MOVW R26,R16
00058e e0f0      	LDI  R31,0
00058f 17ae      	CP   R26,R30
000590 07bf      	CPC  R27,R31
000591 f00c      	BRLT PC+2
000592 c062      	RJMP _0x45
                 ; 0000 013C             {
                 ; 0000 013D                 for (j = 0; j < 8; j++)
                +
000593 e020     +LDI R18 , LOW ( 0 )
000594 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x47:
                +
000595 3028     +CPI R18 , LOW ( 8 )
000596 e0e0     +LDI R30 , HIGH ( 8 )
000597 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000598 f45c      	BRGE _0x48
                 ; 0000 013E                 {
                 ; 0000 013F                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16)));
000599 940e 111c 	CALL SUBOPT_0x19
00059b 01df      	MOVW R26,R30
00059c 940e 0c0a 	CALL _read_byte_from_eeprom
00059e 2fae      	MOV  R26,R30
00059f 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0140                 }
                +
0005a1 5f2f     +SUBI R18 , LOW ( - 1 )
0005a2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005a3 cff1      	RJMP _0x47
                 _0x48:
                 ; 0000 0141 
                 ; 0000 0142                 USART_Transmit('\r');
0005a4 e0ad      	LDI  R26,LOW(13)
0005a5 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0143 
                 ; 0000 0144                 for (j = 0; j < 2; j++)
                +
0005a7 e020     +LDI R18 , LOW ( 0 )
0005a8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x4A:
                +
0005a9 3022     +CPI R18 , LOW ( 2 )
0005aa e0e0     +LDI R30 , HIGH ( 2 )
0005ab 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
0005ac f454      	BRGE _0x4B
                 ; 0000 0145                 {
                 ; 0000 0146                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005ad 940e 111c 	CALL SUBOPT_0x19
0005af 940e 112a 	CALL SUBOPT_0x1B
0005b1 2fae      	MOV  R26,R30
0005b2 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0147                 }
                +
0005b4 5f2f     +SUBI R18 , LOW ( - 1 )
0005b5 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005b6 cff2      	RJMP _0x4A
                 _0x4B:
                 ; 0000 0148                 USART_Transmit(':');
0005b7 e3aa      	LDI  R26,LOW(58)
0005b8 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0149                 for (j = 2; j < 4; j++)
                +
0005ba e022     +LDI R18 , LOW ( 2 )
0005bb e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 _0x4D:
                +
0005bc 3024     +CPI R18 , LOW ( 4 )
0005bd e0e0     +LDI R30 , HIGH ( 4 )
0005be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0005bf f454      	BRGE _0x4E
                 ; 0000 014A                 {
                 ; 0000 014B                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005c0 940e 111c 	CALL SUBOPT_0x19
0005c2 940e 112a 	CALL SUBOPT_0x1B
0005c4 2fae      	MOV  R26,R30
0005c5 940e 0c21 	CALL _USART_Transmit
                 ; 0000 014C                 }
                +
0005c7 5f2f     +SUBI R18 , LOW ( - 1 )
0005c8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005c9 cff2      	RJMP _0x4D
                 _0x4E:
                 ; 0000 014D                 USART_Transmit(' ');
0005ca e2a0      	LDI  R26,LOW(32)
0005cb 940e 0c21 	CALL _USART_Transmit
                 ; 0000 014E                 for (j = 4; j < 6; j++)
                +
0005cd e024     +LDI R18 , LOW ( 4 )
0005ce e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 _0x50:
                +
0005cf 3026     +CPI R18 , LOW ( 6 )
0005d0 e0e0     +LDI R30 , HIGH ( 6 )
0005d1 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
0005d2 f454      	BRGE _0x51
                 ; 0000 014F                 {
                 ; 0000 0150                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005d3 940e 111c 	CALL SUBOPT_0x19
0005d5 940e 112a 	CALL SUBOPT_0x1B
0005d7 2fae      	MOV  R26,R30
0005d8 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0151                 }
                +
0005da 5f2f     +SUBI R18 , LOW ( - 1 )
0005db 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005dc cff2      	RJMP _0x50
                 _0x51:
                 ; 0000 0152                 USART_Transmit('/');
0005dd e2af      	LDI  R26,LOW(47)
0005de 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0153                 for (j = 6; j < 8; j++)
                +
0005e0 e026     +LDI R18 , LOW ( 6 )
0005e1 e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                 _0x53:
                +
0005e2 3028     +CPI R18 , LOW ( 8 )
0005e3 e0e0     +LDI R30 , HIGH ( 8 )
0005e4 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0005e5 f454      	BRGE _0x54
                 ; 0000 0154                 {
                 ; 0000 0155                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005e6 940e 111c 	CALL SUBOPT_0x19
0005e8 940e 112a 	CALL SUBOPT_0x1B
0005ea 2fae      	MOV  R26,R30
0005eb 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0156                 }
                +
0005ed 5f2f     +SUBI R18 , LOW ( - 1 )
0005ee 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005ef cff2      	RJMP _0x53
                 _0x54:
                 ; 0000 0157 
                 ; 0000 0158                 USART_Transmit('\r');
0005f0 940e 1153 	CALL SUBOPT_0x21
                 ; 0000 0159                 USART_Transmit('\r');
                 ; 0000 015A 
                 ; 0000 015B                 delay_ms(500);
                 ; 0000 015C             }
                +
0005f2 5f0f     +SUBI R16 , LOW ( - 1 )
0005f3 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005f4 cf97      	RJMP _0x44
                 _0x45:
                 ; 0000 015D             for (j = 0; j < 8; j++)
                +
0005f5 e020     +LDI R18 , LOW ( 0 )
0005f6 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x56:
                +
0005f7 3028     +CPI R18 , LOW ( 8 )
0005f8 e0e0     +LDI R30 , HIGH ( 8 )
0005f9 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0005fa f434      	BRGE _0x57
                 ; 0000 015E             {
                 ; 0000 015F                 USART_Transmit('=');
0005fb e3ad      	LDI  R26,LOW(61)
0005fc 940e 0c21 	CALL _USART_Transmit
                 ; 0000 0160             }
                +
0005fe 5f2f     +SUBI R18 , LOW ( - 1 )
0005ff 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000600 cff6      	RJMP _0x56
                 _0x57:
                 ; 0000 0161 
                 ; 0000 0162             USART_Transmit('\r');
000601 940e 1153 	CALL SUBOPT_0x21
                 ; 0000 0163             USART_Transmit('\r');
                 ; 0000 0164             delay_ms(500);
                 ; 0000 0165 
                 ; 0000 0166             lcdCommand(0x01);
000603 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0167             lcd_gotoxy(1, 1);
                 ; 0000 0168             lcd_print("Usart Transmit Finished");
                +
000605 e5af     +LDI R26 , LOW ( _0xD + ( 289 ) )
000606 e0b3     +LDI R27 , HIGH ( _0xD + ( 289 ) )
                 	__POINTW2MN _0xD,289
000607 940e 1072 	CALL SUBOPT_0x2
                 ; 0000 0169             delay_ms(2000);
                 ; 0000 016A             stage = STAGE_INIT_MENU;
                 ; 0000 016B         }
                 ; 0000 016C         else if (stage == STAGE_STUDENT_MANAGMENT)
000609 c0da      	RJMP _0x58
                 _0x42:
00060a e0e7      	LDI  R30,LOW(7)
00060b 15e5      	CP   R30,R5
00060c f469      	BRNE _0x59
                 ; 0000 016D         {
                 ; 0000 016E             lcdCommand(0x01);
00060d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 016F             lcd_gotoxy(1, 1);
                 ; 0000 0170             lcd_print("1: Search Student");
                +
00060f e7a7     +LDI R26 , LOW ( _0xD + ( 313 ) )
000610 e0b3     +LDI R27 , HIGH ( _0xD + ( 313 ) )
                 	__POINTW2MN _0xD,313
000611 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0171             lcd_gotoxy(1, 2);
                 ; 0000 0172             lcd_print("2: Delete Student");
                +
000613 e8a9     +LDI R26 , LOW ( _0xD + ( 331 ) )
000614 e0b3     +LDI R27 , HIGH ( _0xD + ( 331 ) )
                 	__POINTW2MN _0xD,331
000615 d538      	RCALL _lcd_print
                 ; 0000 0173             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x5A:
000616 e0e7      	LDI  R30,LOW(7)
000617 15e5      	CP   R30,R5
000618 f3e9      	BREQ _0x5A
                 ; 0000 0174                 ;
                 ; 0000 0175         }
                 ; 0000 0176         else if (stage == STAGE_SEARCH_STUDENT)
000619 c0ca      	RJMP _0x5D
                 _0x59:
00061a e0e8      	LDI  R30,LOW(8)
00061b 15e5      	CP   R30,R5
00061c f471      	BRNE _0x5E
                 ; 0000 0177         {
                 ; 0000 0178             lcdCommand(0x01);
00061d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0179             lcd_gotoxy(1, 1);
                 ; 0000 017A             lcd_print("Enter Student Code For Search:");
                +
00061f e9ab     +LDI R26 , LOW ( _0xD + ( 349 ) )
000620 e0b3     +LDI R27 , HIGH ( _0xD + ( 349 ) )
                 	__POINTW2MN _0xD,349
000621 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 017B             lcd_gotoxy(1, 2);
                 ; 0000 017C             lcdCommand(0x0f);   // display on, cursor blinking
000623 940e 107a 	CALL SUBOPT_0x3
                 ; 0000 017D             delay_us(100 * 16); // wait
                 ; 0000 017E             while (stage == STAGE_SEARCH_STUDENT)
                 _0x5F:
000625 e0e8      	LDI  R30,LOW(8)
000626 15e5      	CP   R30,R5
000627 f3e9      	BREQ _0x5F
                 ; 0000 017F                 ;
                 ; 0000 0180             lcdCommand(0x0c);   // display on, cursor off
000628 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 0181             delay_us(100 * 16); // wait
                 ; 0000 0182         }
                 ; 0000 0183         else if (stage == STAGE_DELETE_STUDENT)
00062a c0b9      	RJMP _0x62
                 _0x5E:
00062b e0e9      	LDI  R30,LOW(9)
00062c 15e5      	CP   R30,R5
00062d f471      	BRNE _0x63
                 ; 0000 0184         {
                 ; 0000 0185             lcdCommand(0x01);
00062e 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0186             lcd_gotoxy(1, 1);
                 ; 0000 0187             lcd_print("Enter Student Code For Delete:");
                +
000630 ebaa     +LDI R26 , LOW ( _0xD + ( 380 ) )
000631 e0b3     +LDI R27 , HIGH ( _0xD + ( 380 ) )
                 	__POINTW2MN _0xD,380
000632 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0188             lcd_gotoxy(1, 2);
                 ; 0000 0189             lcdCommand(0x0f);   // display on, cursor blinking
000634 940e 107a 	CALL SUBOPT_0x3
                 ; 0000 018A             delay_us(100 * 16); // wait
                 ; 0000 018B             while (stage == STAGE_DELETE_STUDENT)
                 _0x64:
000636 e0e9      	LDI  R30,LOW(9)
000637 15e5      	CP   R30,R5
000638 f3e9      	BREQ _0x64
                 ; 0000 018C                 ;
                 ; 0000 018D             lcdCommand(0x0c); // display on, cursor off
000639 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 018E             delay_us(100 * 16);
                 ; 0000 018F         }
                 ; 0000 0190         else if (stage == STAGE_TRAFFIC_MONITORING)
00063b c0a8      	RJMP _0x67
                 _0x63:
00063c e0ea      	LDI  R30,LOW(10)
00063d 15e5      	CP   R30,R5
00063e f421      	BRNE _0x68
                 ; 0000 0191         {
                 ; 0000 0192             startSonar();
00063f 940e 0d0d 	CALL _startSonar
                 ; 0000 0193             stage = STAGE_INIT_MENU;
000641 2455      	CLR  R5
                 ; 0000 0194         }
                 ; 0000 0195         else if (stage == STAGE_LOGIN_WITH_ADMIN)
000642 c0a1      	RJMP _0x69
                 _0x68:
000643 e0eb      	LDI  R30,LOW(11)
000644 15e5      	CP   R30,R5
000645 f521      	BRNE _0x6A
                 ; 0000 0196         {
                 ; 0000 0197             lcdCommand(0x01);
000646 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0198             lcd_gotoxy(1, 1);
                 ; 0000 0199             lcd_print("Enter Secret Code (or cancel)");
                +
000648 eda9     +LDI R26 , LOW ( _0xD + ( 411 ) )
000649 e0b3     +LDI R27 , HIGH ( _0xD + ( 411 ) )
                 	__POINTW2MN _0xD,411
00064a 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 019A             lcd_gotoxy(1, 2);
                 ; 0000 019B             lcdCommand(0x0f);   // display on, cursor blinking
00064c 940e 107a 	CALL SUBOPT_0x3
                 ; 0000 019C             delay_us(100 * 16); // wait
                 ; 0000 019D             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x6B:
00064e e0eb      	LDI  R30,LOW(11)
00064f 15e5      	CP   R30,R5
000650 f411      	BRNE _0x6E
000651 2066      	TST  R6
000652 f009      	BREQ _0x6F
                 _0x6E:
000653 c001      	RJMP _0x6D
                 _0x6F:
                 ; 0000 019E                 ;
000654 cff9      	RJMP _0x6B
                 _0x6D:
                 ; 0000 019F             if (logged_in == 1)
000655 e0e1      	LDI  R30,LOW(1)
000656 15e6      	CP   R30,R6
000657 f479      	BRNE _0x70
                 ; 0000 01A0             {
                 ; 0000 01A1                 lcdCommand(0x0c); // display on, cursor off
000658 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 01A2                 delay_us(100 * 16);
                 ; 0000 01A3                 lcdCommand(0x01);
00065a 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 01A4                 lcd_gotoxy(1, 1);
                 ; 0000 01A5                 lcd_print("1 : Clear EEPROM");
                +
00065c efa7     +LDI R26 , LOW ( _0xD + ( 441 ) )
00065d e0b3     +LDI R27 , HIGH ( _0xD + ( 441 ) )
                 	__POINTW2MN _0xD,441
00065e 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 01A6                 lcd_gotoxy(1, 2);
                 ; 0000 01A7                 lcd_print("    press cancel to back");
                +
000660 e0a8     +LDI R26 , LOW ( _0xD + ( 458 ) )
000661 e0b4     +LDI R27 , HIGH ( _0xD + ( 458 ) )
                 	__POINTW2MN _0xD,458
000662 d4eb      	RCALL _lcd_print
                 ; 0000 01A8                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x71:
000663 e0eb      	LDI  R30,LOW(11)
000664 15e5      	CP   R30,R5
000665 f3e9      	BREQ _0x71
                 ; 0000 01A9                     ;
                 ; 0000 01AA             }
                 ; 0000 01AB             else
000666 c002      	RJMP _0x74
                 _0x70:
                 ; 0000 01AC             {
                 ; 0000 01AD                 lcdCommand(0x0c); // display on, cursor off
000667 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 01AE                 delay_us(100 * 16);
                 ; 0000 01AF             }
                 _0x74:
                 ; 0000 01B0         }
                 ; 0000 01B1         else if (stage == STAGE_SET_TIMER)
000669 c07a      	RJMP _0x75
                 _0x6A:
00066a e0ee      	LDI  R30,LOW(14)
00066b 15e5      	CP   R30,R5
00066c f4a1      	BRNE _0x76
                 ; 0000 01B2         {
                 ; 0000 01B3             lcdCommand(0x01);
00066d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 01B4             lcd_gotoxy(1, 1);
                 ; 0000 01B5             lcdCommand(0x0c); // display on, cursor off
00066f e0ac      	LDI  R26,LOW(12)
000670 d496      	RCALL _lcdCommand
                 ; 0000 01B6             itoa(submitTime, buffer);
000671 2de9      	MOV  R30,R9
000672 940e 1115 	CALL SUBOPT_0x18
                 ; 0000 01B7             lcd_print("Set Timer(minutes): ");
                +
000674 e2a1     +LDI R26 , LOW ( _0xD + ( 483 ) )
000675 e0b4     +LDI R27 , HIGH ( _0xD + ( 483 ) )
                 	__POINTW2MN _0xD,483
000676 d4d7      	RCALL _lcd_print
                 ; 0000 01B8             lcd_print(buffer);
000677 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 01B9             delay_us(100 * 16); // wait
000679 940e 1094 	CALL SUBOPT_0x6
                 ; 0000 01BA             while(stage == STAGE_SET_TIMER);
                 _0x77:
00067b e0ee      	LDI  R30,LOW(14)
00067c 15e5      	CP   R30,R5
00067d f3e9      	BREQ _0x77
                 ; 0000 01BB             delay_us(100 * 16);
00067e 940e 1094 	CALL SUBOPT_0x6
                 ; 0000 01BC         }
                 ; 0000 01BD         else if(stage == STAGE_SHOW_CLOCK)
000680 c063      	RJMP _0x7A
                 _0x76:
000681 e0ed      	LDI  R30,LOW(13)
000682 15e5      	CP   R30,R5
000683 f009      	BREQ PC+2
000684 c05f      	RJMP _0x7B
                 ; 0000 01BE         {
                 ; 0000 01BF             lcdCommand(0x01);
000685 e0a1      	LDI  R26,LOW(1)
000686 d480      	RCALL _lcdCommand
                 ; 0000 01C0             memset(Date, 0, 20);
000687 01fe      	MOVW R30,R28
000688 93fa      	ST   -Y,R31
000689 93ea      	ST   -Y,R30
00068a e0e0      	LDI  R30,LOW(0)
00068b 93ea      	ST   -Y,R30
00068c e1a4      	LDI  R26,LOW(20)
00068d e0b0      	LDI  R27,0
00068e 940e 0e4a 	CALL _memset
                 ; 0000 01C1             while(stage == STAGE_SHOW_CLOCK){
                 _0x7C:
000690 e0ed      	LDI  R30,LOW(13)
000691 15e5      	CP   R30,R5
000692 f009      	BREQ PC+2
000693 c050      	RJMP _0x7E
                 ; 0000 01C2                 rtc_getTime(&hour, &minute, &second);
000694 940e 10c3 	CALL SUBOPT_0xF
                 ; 0000 01C3                 sprintf(time, "%02x:%02x:%02x  ", hour, minute, second);
                +
000696 eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 512 ) )
000697 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 512 ) )
                 	__POINTW1FN _0x0,512
000698 93fa      	ST   -Y,R31
000699 93ea      	ST   -Y,R30
00069a 940e 10d9 	CALL SUBOPT_0x11
00069c a1ee      	LDD  R30,Y+38
00069d 940e 1100 	CALL SUBOPT_0x14
00069f e08c      	LDI  R24,12
0006a0 940e 1021 	CALL _sprintf
0006a2 9660      	ADIW R28,16
                 ; 0000 01C4                 lcd_gotoxy(1,1);
0006a3 e0e1      	LDI  R30,LOW(1)
0006a4 940e 115d 	CALL SUBOPT_0x22
                 ; 0000 01C5                 lcd_print(time);
0006a6 e1ac      	LDI  R26,LOW(_time)
0006a7 e0b8      	LDI  R27,HIGH(_time)
0006a8 d4a5      	RCALL _lcd_print
                 ; 0000 01C6                 rtc_getDate(&year, &month, &date, &day);
0006a9 940e 10eb 	CALL SUBOPT_0x13
                 ; 0000 01C7                 sprintf(time, "20%02x/%02x/%02x  %3s", year, month, date, days[day - 1]);
                +
0006ab ebe1     +LDI R30 , LOW ( 2 * _0x0 + ( 529 ) )
0006ac e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 529 ) )
                 	__POINTW1FN _0x0,529
0006ad 93fa      	ST   -Y,R31
0006ae 93ea      	ST   -Y,R30
0006af 8de8      	LDD  R30,Y+24
0006b0 940e 1100 	CALL SUBOPT_0x14
0006b2 8ded      	LDD  R30,Y+29
0006b3 940e 1100 	CALL SUBOPT_0x14
0006b5 a1ea      	LDD  R30,Y+34
0006b6 940e 1100 	CALL SUBOPT_0x14
0006b8 a1ef      	LDD  R30,Y+39
0006b9 e0f0      	LDI  R31,0
0006ba 9731      	SBIW R30,1
0006bb e0ae      	LDI  R26,LOW(_days)
0006bc e0b8      	LDI  R27,HIGH(_days)
0006bd 0fee      	LSL  R30
0006be 1fff      	ROL  R31
0006bf 0fae      	ADD  R26,R30
0006c0 1fbf      	ADC  R27,R31
0006c1 940e 144c 	CALL __GETW1P
0006c3 2766      	CLR  R22
0006c4 2777      	CLR  R23
0006c5 940e 1463 	CALL __PUTPARD1
0006c7 e180      	LDI  R24,16
0006c8 940e 1021 	CALL _sprintf
0006ca 9664      	ADIW R28,20
                 ; 0000 01C8                 if(strcmp(time, Date) != 0){
0006cb 940e 1161 	CALL SUBOPT_0x23
0006cd 01de      	MOVW R26,R28
0006ce 9612      	ADIW R26,2
0006cf 940e 0e5a 	CALL _strcmp
0006d1 30e0      	CPI  R30,0
0006d2 f061      	BREQ _0x7F
                 ; 0000 01C9                     lcd_gotoxy(1,2);
0006d3 940e 112e 	CALL SUBOPT_0x1C
                 ; 0000 01CA                     lcd_print(time);
0006d5 e1ac      	LDI  R26,LOW(_time)
0006d6 e0b8      	LDI  R27,HIGH(_time)
0006d7 d476      	RCALL _lcd_print
                 ; 0000 01CB                     strcpy(Date, time);
0006d8 01fe      	MOVW R30,R28
0006d9 93fa      	ST   -Y,R31
0006da 93ea      	ST   -Y,R30
0006db e1ac      	LDI  R26,LOW(_time)
0006dc e0b8      	LDI  R27,HIGH(_time)
0006dd 940e 0e6e 	CALL _strcpy
                 ; 0000 01CC                 }
                 ; 0000 01CD                 delay_ms(1000);
                 _0x7F:
0006df eea8      	LDI  R26,LOW(1000)
0006e0 e0b3      	LDI  R27,HIGH(1000)
0006e1 940e 1282 	CALL _delay_ms
                 ; 0000 01CE             }
0006e3 cfac      	RJMP _0x7C
                 _0x7E:
                 ; 0000 01CF         }
                 ; 0000 01D0     }
                 _0x7B:
                 _0x7A:
                 _0x75:
                 _0x69:
                 _0x67:
                 _0x62:
                 _0x5D:
                 _0x58:
                 _0x41:
                 _0x33:
                 _0x31:
                 _0x17:
                 _0x11:
                 _0xB:
0006e4 cd26      	RJMP _0x7
                 ; 0000 01D1 }
                 _0x80:
0006e5 cfff      	RJMP _0x80
                 ; .FEND
                 
                 	.DSEG
                 _0xD:
00023e           	.BYTE 0x1F8
                 ;
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 01D4 {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0006e6 93ea      	ST   -Y,R30
0006e7 b7ef      	IN   R30,SREG
0006e8 93ea      	ST   -Y,R30
                 ; 0000 01D5     timerCount++;
0006e9 9483      	INC  R8
                 ; 0000 01D6     if(timerCount == 60){
0006ea e3ec      	LDI  R30,LOW(60)
0006eb 15e8      	CP   R30,R8
0006ec f411      	BRNE _0x81
                 ; 0000 01D7         submitTime--;
0006ed 949a      	DEC  R9
                 ; 0000 01D8         timerCount = 0;
0006ee 2488      	CLR  R8
                 ; 0000 01D9     }
                 ; 0000 01DA     TCNT2 = 0;
                 _0x81:
0006ef e0e0      	LDI  R30,LOW(0)
0006f0 bde4      	OUT  0x24,R30
                 ; 0000 01DB     if(submitTime == 0)
0006f1 2099      	TST  R9
0006f2 f409      	BRNE _0x82
                 ; 0000 01DC         TIMSK = 0;
0006f3 bfe9      	OUT  0x39,R30
                 ; 0000 01DD }
                 _0x82:
0006f4 91e9      	LD   R30,Y+
0006f5 bfef      	OUT  SREG,R30
0006f6 91e9      	LD   R30,Y+
0006f7 9518      	RETI
                 ; .FEND
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 01E1 {
                 _int0_routine:
                 ; .FSTART _int0_routine
0006f8 920a      	ST   -Y,R0
0006f9 921a      	ST   -Y,R1
0006fa 92fa      	ST   -Y,R15
0006fb 936a      	ST   -Y,R22
0006fc 937a      	ST   -Y,R23
0006fd 938a      	ST   -Y,R24
0006fe 939a      	ST   -Y,R25
0006ff 93aa      	ST   -Y,R26
000700 93ba      	ST   -Y,R27
000701 93ea      	ST   -Y,R30
000702 93fa      	ST   -Y,R31
000703 b7ef      	IN   R30,SREG
000704 93ea      	ST   -Y,R30
                 ; 0000 01E2     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 01E3     int i;
                 ; 0000 01E4     unsigned char second, minute, hour;
                 ; 0000 01E5     unsigned char day, date, month, year;
                 ; 0000 01E6 
                 ; 0000 01E7     // detect the key
                 ; 0000 01E8     while (1)
000705 9728      	SBIW R28,8
000706 940e 1468 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+12
                 ;	second -> R20
                 ;	minute -> Y+11
                 ;	hour -> Y+10
                 ;	day -> Y+9
                 ;	date -> Y+8
                 ;	month -> Y+7
                 ;	year -> Y+6
                 ; 0000 01E9     {
                 ; 0000 01EA         KEY_PRT = 0xEF;            // ground row 0
000708 eeef      	LDI  R30,LOW(239)
000709 940e 1166 	CALL SUBOPT_0x24
                 ; 0000 01EB         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01EC         if (colloc != 0x0F)        // column detected
00070b f011      	BREQ _0x86
                 ; 0000 01ED         {
                 ; 0000 01EE             rowloc = 0; // save row location
00070c e000      	LDI  R16,LOW(0)
                 ; 0000 01EF             break;      // exit while loop
00070d c012      	RJMP _0x85
                 ; 0000 01F0         }
                 ; 0000 01F1         KEY_PRT = 0xDF;            // ground row 1
                 _0x86:
00070e edef      	LDI  R30,LOW(223)
00070f 940e 1166 	CALL SUBOPT_0x24
                 ; 0000 01F2         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01F3         if (colloc != 0x0F)        // column detected
000711 f011      	BREQ _0x87
                 ; 0000 01F4         {
                 ; 0000 01F5             rowloc = 1; // save row location
000712 e001      	LDI  R16,LOW(1)
                 ; 0000 01F6             break;      // exit while loop
000713 c00c      	RJMP _0x85
                 ; 0000 01F7         }
                 ; 0000 01F8         KEY_PRT = 0xBF;            // ground row 2
                 _0x87:
000714 ebef      	LDI  R30,LOW(191)
000715 940e 1166 	CALL SUBOPT_0x24
                 ; 0000 01F9         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01FA         if (colloc != 0x0F)        // column detected
000717 f011      	BREQ _0x88
                 ; 0000 01FB         {
                 ; 0000 01FC             rowloc = 2; // save row location
000718 e002      	LDI  R16,LOW(2)
                 ; 0000 01FD             break;      // exit while loop
000719 c006      	RJMP _0x85
                 ; 0000 01FE         }
                 ; 0000 01FF         KEY_PRT = 0x7F;            // ground row 3
                 _0x88:
00071a e7ef      	LDI  R30,LOW(127)
00071b bbe8      	OUT  0x18,R30
                 ; 0000 0200         colloc = (KEY_PIN & 0x0F); // read the columns
00071c b3e6      	IN   R30,0x16
00071d 70ef      	ANDI R30,LOW(0xF)
00071e 2f1e      	MOV  R17,R30
                 ; 0000 0201         rowloc = 3;                // save row location
00071f e003      	LDI  R16,LOW(3)
                 ; 0000 0202         break;                     // exit while loop
                 ; 0000 0203     }
                 _0x85:
                 ; 0000 0204     // check column and send result to Port D
                 ; 0000 0205     if (colloc == 0x0E)
000720 301e      	CPI  R17,14
000721 f411      	BRNE _0x89
                 ; 0000 0206         cl = 0;
000722 e030      	LDI  R19,LOW(0)
                 ; 0000 0207     else if (colloc == 0x0D)
000723 c009      	RJMP _0x8A
                 _0x89:
000724 301d      	CPI  R17,13
000725 f411      	BRNE _0x8B
                 ; 0000 0208         cl = 1;
000726 e031      	LDI  R19,LOW(1)
                 ; 0000 0209     else if (colloc == 0x0B)
000727 c005      	RJMP _0x8C
                 _0x8B:
000728 301b      	CPI  R17,11
000729 f411      	BRNE _0x8D
                 ; 0000 020A         cl = 2;
00072a e032      	LDI  R19,LOW(2)
                 ; 0000 020B     else
00072b c001      	RJMP _0x8E
                 _0x8D:
                 ; 0000 020C         cl = 3;
00072c e033      	LDI  R19,LOW(3)
                 ; 0000 020D 
                 ; 0000 020E     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x8E:
                 _0x8C:
                 _0x8A:
00072d b3e8      	IN   R30,0x18
00072e 70ef      	ANDI R30,LOW(0xF)
00072f bbe8      	OUT  0x18,R30
                 ; 0000 020F 
                 ; 0000 0210     // inside menu level 1
                 ; 0000 0211     if (stage == STAGE_INIT_MENU)
000730 2055      	TST  R5
000731 f009      	BREQ PC+2
000732 c079      	RJMP _0x8F
                 ; 0000 0212     {
                 ; 0000 0213         switch (keypad[rowloc][cl] - '0')
000733 940e 116c 	CALL SUBOPT_0x25
000735 91ec      	LD   R30,X
000736 e0f0      	LDI  R31,0
000737 97f0      	SBIW R30,48
                 ; 0000 0214         {
                 ; 0000 0215         case OPTION_ATTENDENCE:
000738 30e1      	CPI  R30,LOW(0x1)
000739 e0a0      	LDI  R26,HIGH(0x1)
00073a 07fa      	CPC  R31,R26
00073b f419      	BRNE _0x93
                 ; 0000 0216             stage = STAGE_ATTENDENC_MENU;
00073c e0e1      	LDI  R30,LOW(1)
00073d 2e5e      	MOV  R5,R30
                 ; 0000 0217             break;
00073e c047      	RJMP _0x92
                 ; 0000 0218         case OPTION_TEMPERATURE_MONITORING:
                 _0x93:
00073f 30e4      	CPI  R30,LOW(0x4)
000740 e0a0      	LDI  R26,HIGH(0x4)
000741 07fa      	CPC  R31,R26
000742 f419      	BRNE _0x94
                 ; 0000 0219             stage = STAGE_TEMPERATURE_MONITORING;
000743 e0e4      	LDI  R30,LOW(4)
000744 2e5e      	MOV  R5,R30
                 ; 0000 021A             break;
000745 c040      	RJMP _0x92
                 ; 0000 021B         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x94:
000746 30e3      	CPI  R30,LOW(0x3)
000747 e0a0      	LDI  R26,HIGH(0x3)
000748 07fa      	CPC  R31,R26
000749 f419      	BRNE _0x95
                 ; 0000 021C             stage = STAGE_VIEW_PRESENT_STUDENTS;
00074a e0e5      	LDI  R30,LOW(5)
00074b 2e5e      	MOV  R5,R30
                 ; 0000 021D             break;
00074c c039      	RJMP _0x92
                 ; 0000 021E         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x95:
00074d 30e5      	CPI  R30,LOW(0x5)
00074e e0a0      	LDI  R26,HIGH(0x5)
00074f 07fa      	CPC  R31,R26
000750 f419      	BRNE _0x96
                 ; 0000 021F             stage = STAGE_RETRIEVE_STUDENT_DATA;
000751 e0e6      	LDI  R30,LOW(6)
000752 2e5e      	MOV  R5,R30
                 ; 0000 0220             break;
000753 c032      	RJMP _0x92
                 ; 0000 0221         case OPTION_STUDENT_MANAGEMENT:
                 _0x96:
000754 30e2      	CPI  R30,LOW(0x2)
000755 e0a0      	LDI  R26,HIGH(0x2)
000756 07fa      	CPC  R31,R26
000757 f419      	BRNE _0x97
                 ; 0000 0222             stage = STAGE_STUDENT_MANAGMENT;
000758 e0e7      	LDI  R30,LOW(7)
000759 2e5e      	MOV  R5,R30
                 ; 0000 0223             break;
00075a c02b      	RJMP _0x92
                 ; 0000 0224         case OPTION_TRAFFIC_MONITORING:
                 _0x97:
00075b 30e6      	CPI  R30,LOW(0x6)
00075c e0a0      	LDI  R26,HIGH(0x6)
00075d 07fa      	CPC  R31,R26
00075e f419      	BRNE _0x98
                 ; 0000 0225             stage = STAGE_TRAFFIC_MONITORING;
00075f e0ea      	LDI  R30,LOW(10)
000760 2e5e      	MOV  R5,R30
                 ; 0000 0226             break;
000761 c024      	RJMP _0x92
                 ; 0000 0227         case OPTION_LOGIN_WITH_ADMIN:
                 _0x98:
000762 30e7      	CPI  R30,LOW(0x7)
000763 e0a0      	LDI  R26,HIGH(0x7)
000764 07fa      	CPC  R31,R26
000765 f419      	BRNE _0x99
                 ; 0000 0228             stage = STAGE_LOGIN_WITH_ADMIN;
000766 e0eb      	LDI  R30,LOW(11)
000767 2e5e      	MOV  R5,R30
                 ; 0000 0229             break;
000768 c01d      	RJMP _0x92
                 ; 0000 022A         case OPTION_SET_TIMER:
                 _0x99:
000769 30e9      	CPI  R30,LOW(0x9)
00076a e0a0      	LDI  R26,HIGH(0x9)
00076b 07fa      	CPC  R31,R26
00076c f419      	BRNE _0x9A
                 ; 0000 022B             stage = STAGE_SET_TIMER;
00076d e0ee      	LDI  R30,LOW(14)
00076e 2e5e      	MOV  R5,R30
                 ; 0000 022C             break;
00076f c016      	RJMP _0x92
                 ; 0000 022D         case OPTION_LOGOUT:
                 _0x9A:
000770 30e8      	CPI  R30,LOW(0x8)
000771 e0a0      	LDI  R26,HIGH(0x8)
000772 07fa      	CPC  R31,R26
000773 f491      	BRNE _0x9E
                 ; 0000 022E #asm("cli") // disable interrupts
000774 94f8      	cli
                 ; 0000 022F             if (logged_in == 1)
000775 e0e1      	LDI  R30,LOW(1)
000776 15e6      	CP   R30,R6
000777 f471      	BRNE _0x9C
                 ; 0000 0230             {
                 ; 0000 0231                 lcdCommand(0x1);
000778 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0232                 lcd_gotoxy(1, 1);
                 ; 0000 0233                 lcd_print("Logout ...");
                +
00077a e3a6     +LDI R26 , LOW ( _0x9D + ( 0 ) )
00077b e0b4     +LDI R27 , HIGH ( _0x9D + ( 0 ) )
                 	__POINTW2MN _0x9D,0
00077c 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0234                 lcd_gotoxy(1, 2);
                 ; 0000 0235                 lcd_print("Going To Admin Page In 2 Sec");
                +
00077e e4a1     +LDI R26 , LOW ( _0x9D + ( 11 ) )
00077f e0b4     +LDI R27 , HIGH ( _0x9D + ( 11 ) )
                 	__POINTW2MN _0x9D,11
000780 940e 1178 	CALL SUBOPT_0x26
                 ; 0000 0236                 delay_ms(2000);
                 ; 0000 0237                 logged_in = 0;
000782 2466      	CLR  R6
                 ; 0000 0238 #asm("sei")
000783 9478      	sei
                 ; 0000 0239                 stage = STAGE_LOGIN_WITH_ADMIN;
000784 e0eb      	LDI  R30,LOW(11)
000785 2e5e      	MOV  R5,R30
                 ; 0000 023A             }
                 ; 0000 023B             break;
                 _0x9C:
                 ; 0000 023C         default:
                 _0x9E:
                 ; 0000 023D             break;
                 ; 0000 023E         }
                 _0x92:
                 ; 0000 023F 
                 ; 0000 0240         if (keypad[rowloc][cl] == 'L')
000786 940e 116c 	CALL SUBOPT_0x25
000788 91ac      	LD   R26,X
000789 34ac      	CPI  R26,LOW(0x4C)
00078a f451      	BRNE _0x9F
                 ; 0000 0241         {
                 ; 0000 0242             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
00078b e0e0      	LDI  R30,LOW(0)
00078c 15e4      	CP   R30,R4
00078d f420      	BRSH _0xA0
00078e 2de4      	MOV  R30,R4
00078f e0f0      	LDI  R31,0
000790 9731      	SBIW R30,1
000791 c001      	RJMP _0xA1
                 _0xA0:
000792 e0e4      	LDI  R30,LOW(4)
                 _0xA1:
000793 2e4e      	MOV  R4,R30
                 ; 0000 0243         }
                 ; 0000 0244         else if (keypad[rowloc][cl] == 'R')
000794 c016      	RJMP _0xA3
                 _0x9F:
000795 940e 116c 	CALL SUBOPT_0x25
000797 91ac      	LD   R26,X
000798 35a2      	CPI  R26,LOW(0x52)
000799 f451      	BRNE _0xA4
                 ; 0000 0245         {
                 ; 0000 0246             page_num = (page_num + 1) % MENU_PAGE_COUNT;
00079a 2de4      	MOV  R30,R4
00079b e0f0      	LDI  R31,0
00079c 9631      	ADIW R30,1
00079d 01df      	MOVW R26,R30
00079e e0e5      	LDI  R30,LOW(5)
00079f e0f0      	LDI  R31,HIGH(5)
0007a0 940e 143e 	CALL __MODW21
0007a2 2e4e      	MOV  R4,R30
                 ; 0000 0247         }
                 ; 0000 0248         else if(keypad[rowloc][cl] == 'O')
0007a3 c007      	RJMP _0xA5
                 _0xA4:
0007a4 940e 116c 	CALL SUBOPT_0x25
0007a6 91ac      	LD   R26,X
0007a7 34af      	CPI  R26,LOW(0x4F)
0007a8 f411      	BRNE _0xA6
                 ; 0000 0249         {
                 ; 0000 024A             stage = STAGE_SHOW_CLOCK;
0007a9 e0ed      	LDI  R30,LOW(13)
0007aa 2e5e      	MOV  R5,R30
                 ; 0000 024B         }
                 ; 0000 024C     }
                 _0xA6:
                 _0xA5:
                 _0xA3:
                 ; 0000 024D     else if (stage == STAGE_ATTENDENC_MENU)
0007ab c34a      	RJMP _0xA7
                 _0x8F:
0007ac e0e1      	LDI  R30,LOW(1)
0007ad 15e5      	CP   R30,R5
0007ae f4e1      	BRNE _0xA8
                 ; 0000 024E     {
                 ; 0000 024F         switch (keypad[rowloc][cl])
0007af 940e 116c 	CALL SUBOPT_0x25
0007b1 91ec      	LD   R30,X
0007b2 e0f0      	LDI  R31,0
                 ; 0000 0250         {
                 ; 0000 0251         case 'C':
0007b3 34e3      	CPI  R30,LOW(0x43)
0007b4 e0a0      	LDI  R26,HIGH(0x43)
0007b5 07fa      	CPC  R31,R26
0007b6 f411      	BRNE _0xAC
                 ; 0000 0252             stage = STAGE_INIT_MENU;
0007b7 2455      	CLR  R5
                 ; 0000 0253             break;
0007b8 c011      	RJMP _0xAB
                 ; 0000 0254         case '1':
                 _0xAC:
0007b9 33e1      	CPI  R30,LOW(0x31)
0007ba e0a0      	LDI  R26,HIGH(0x31)
0007bb 07fa      	CPC  R31,R26
0007bc f429      	BRNE _0xAD
                 ; 0000 0255             memset(buffer, 0, 32);
0007bd 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0256             stage = STAGE_SUBMIT_CODE;
0007bf e0e2      	LDI  R30,LOW(2)
0007c0 2e5e      	MOV  R5,R30
                 ; 0000 0257             break;
0007c1 c008      	RJMP _0xAB
                 ; 0000 0258         case '2':
                 _0xAD:
0007c2 33e2      	CPI  R30,LOW(0x32)
0007c3 e0a0      	LDI  R26,HIGH(0x32)
0007c4 07fa      	CPC  R31,R26
0007c5 f421      	BRNE _0xAF
                 ; 0000 0259             memset(buffer, 0, 32);
0007c6 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 025A             stage = STAGE_SUBMIT_WITH_CARD;
0007c8 e0e3      	LDI  R30,LOW(3)
0007c9 2e5e      	MOV  R5,R30
                 ; 0000 025B             break;
                 ; 0000 025C         default:
                 _0xAF:
                 ; 0000 025D             break;
                 ; 0000 025E         }
                 _0xAB:
                 ; 0000 025F     }
                 ; 0000 0260     else if (stage == STAGE_SUBMIT_CODE)
0007ca c32b      	RJMP _0xB0
                 _0xA8:
0007cb e0e2      	LDI  R30,LOW(2)
0007cc 15e5      	CP   R30,R5
0007cd f009      	BREQ PC+2
0007ce c0fc      	RJMP _0xB1
                 ; 0000 0261     {
                 ; 0000 0262         if (keypad[rowloc][cl] == 'C')
0007cf 940e 116c 	CALL SUBOPT_0x25
0007d1 91ac      	LD   R26,X
0007d2 34a3      	CPI  R26,LOW(0x43)
0007d3 f421      	BRNE _0xB2
                 ; 0000 0263         {
                 ; 0000 0264             memset(buffer, 0, 32);
0007d4 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0265             stage = STAGE_ATTENDENC_MENU;
0007d6 e0e1      	LDI  R30,LOW(1)
0007d7 2e5e      	MOV  R5,R30
                 ; 0000 0266         }
                 ; 0000 0267         if ((keypad[rowloc][cl] - '0') < 10)
                 _0xB2:
0007d8 940e 116c 	CALL SUBOPT_0x25
0007da 91ec      	LD   R30,X
0007db e0f0      	LDI  R31,0
0007dc 97fa      	SBIW R30,58
0007dd f47c      	BRGE _0xB3
                 ; 0000 0268         {
                 ; 0000 0269             if (strlen(buffer) <= 30)
0007de 940e 1099 	CALL SUBOPT_0x7
0007e0 977f      	SBIW R30,31
0007e1 f450      	BRSH _0xB4
                 ; 0000 026A             {
                 ; 0000 026B                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0007e2 940e 1099 	CALL SUBOPT_0x7
0007e4 940e 117b 	CALL SUBOPT_0x27
0007e6 940e 117f 	CALL SUBOPT_0x28
                 ; 0000 026C                 buffer[strlen(buffer) + 1] = '\0';
0007e8 940e 1183 	CALL SUBOPT_0x29
                 ; 0000 026D                 lcdData(keypad[rowloc][cl]);
0007ea 91ac      	LD   R26,X
0007eb d327      	RCALL _lcdData
                 ; 0000 026E             }
                 ; 0000 026F         }
                 _0xB4:
                 ; 0000 0270         else if (keypad[rowloc][cl] == 'D')
0007ec c0dd      	RJMP _0xB5
                 _0xB3:
0007ed 940e 116c 	CALL SUBOPT_0x25
0007ef 91ac      	LD   R26,X
0007f0 34a4      	CPI  R26,LOW(0x44)
0007f1 f461      	BRNE _0xB6
                 ; 0000 0271         {
                 ; 0000 0272             buffer_len = strlen(buffer);
0007f2 940e 1099 	CALL SUBOPT_0x7
0007f4 2f5e      	MOV  R21,R30
                 ; 0000 0273             if (buffer_len > 0)
0007f5 3051      	CPI  R21,1
0007f6 f030      	BRLO _0xB7
                 ; 0000 0274             {
                 ; 0000 0275                 buffer[buffer_len - 1] = '\0';
0007f7 940e 1188 	CALL SUBOPT_0x2A
                 ; 0000 0276                 lcdCommand(0x10);
                 ; 0000 0277                 lcd_print(" ");
                +
0007f9 e5ae     +LDI R26 , LOW ( _0x9D + ( 40 ) )
0007fa e0b4     +LDI R27 , HIGH ( _0x9D + ( 40 ) )
                 	__POINTW2MN _0x9D,40
0007fb 940e 1192 	CALL SUBOPT_0x2B
                 ; 0000 0278                 lcdCommand(0x10);
                 ; 0000 0279             }
                 ; 0000 027A         }
                 _0xB7:
                 ; 0000 027B         else if(keypad[rowloc][cl] == 'O')
0007fd c0cc      	RJMP _0xB8
                 _0xB6:
0007fe 940e 116c 	CALL SUBOPT_0x25
000800 91ac      	LD   R26,X
000801 34af      	CPI  R26,LOW(0x4F)
000802 f481      	BRNE _0xB9
                 ; 0000 027C         {
                 ; 0000 027D             lcdCommand(0xC0);
000803 940e 1197 	CALL SUBOPT_0x2C
                 ; 0000 027E             for(i = 0; i < strlen(buffer); i++)
                 _0xBB:
000805 940e 1099 	CALL SUBOPT_0x7
000807 940e 119e 	CALL SUBOPT_0x2D
000809 f430      	BRSH _0xBC
                 ; 0000 027F                 lcd_print(" ");
                +
00080a e6a0     +LDI R26 , LOW ( _0x9D + ( 42 ) )
00080b e0b4     +LDI R27 , HIGH ( _0x9D + ( 42 ) )
                 	__POINTW2MN _0x9D,42
00080c d341      	RCALL _lcd_print
00080d 940e 11a3 	CALL SUBOPT_0x2E
00080f cff5      	RJMP _0xBB
                 _0xBC:
                 ; 0000 0280 lcdCommand(0xC0);
000810 940e 11a9 	CALL SUBOPT_0x2F
                 ; 0000 0281             memset(buffer, 0, 32);
                 ; 0000 0282         }
                 ; 0000 0283         else if (keypad[rowloc][cl] == 'E')
000812 c0b7      	RJMP _0xBD
                 _0xB9:
000813 940e 116c 	CALL SUBOPT_0x25
000815 91ac      	LD   R26,X
000816 34a5      	CPI  R26,LOW(0x45)
000817 f009      	BREQ PC+2
000818 c0aa      	RJMP _0xBE
                 ; 0000 0284         {
                 ; 0000 0285 
                 ; 0000 0286 #asm("cli")
000819 94f8      	cli
                 ; 0000 0287 
                 ; 0000 0288             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0289                 strlen(buffer) != 8)
00081a 940e 109d 	CALL SUBOPT_0x8
                +
00081c e6e2     +LDI R30 , LOW ( _0x9D + ( 44 ) )
00081d e0f4     +LDI R31 , HIGH ( _0x9D + ( 44 ) )
                 	__POINTW1MN _0x9D,44
00081e 940e 10a2 	CALL SUBOPT_0x9
000820 f431      	BRNE _0xC0
000821 940e 1099 	CALL SUBOPT_0x7
000823 30e8      	CPI  R30,LOW(0x8)
000824 e0a0      	LDI  R26,HIGH(0x8)
000825 07fa      	CPC  R31,R26
000826 f061      	BREQ _0xBF
                 _0xC0:
                 ; 0000 028A             {
                 ; 0000 028B                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000827 9a97      	SBI  0x12,7
                 ; 0000 028C                 lcdCommand(0x01);
000828 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 028D                 lcd_gotoxy(1, 1);
                 ; 0000 028E                 lcd_print("Incorrect Student Code Format");
                +
00082a e6a5     +LDI R26 , LOW ( _0x9D + ( 47 ) )
00082b e0b4     +LDI R27 , HIGH ( _0x9D + ( 47 ) )
                 	__POINTW2MN _0x9D,47
00082c 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 028F                 lcd_gotoxy(1, 2);
                 ; 0000 0290                 lcd_print("You Will Back Menu In 2 Second");
                +
00082e e8a3     +LDI R26 , LOW ( _0x9D + ( 77 ) )
00082f e0b4     +LDI R27 , HIGH ( _0x9D + ( 77 ) )
                 	__POINTW2MN _0x9D,77
000830 940e 10af 	CALL SUBOPT_0xB
                 ; 0000 0291                 delay_ms(2000);
                 ; 0000 0292                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0293             }
                 ; 0000 0294             else if (search_student_code() > 0)
000832 c08c      	RJMP _0xC2
                 _0xBF:
000833 d409      	RCALL _search_student_code
000834 30e1      	CPI  R30,LOW(0x1)
000835 f060      	BRLO _0xC3
                 ; 0000 0295             {
                 ; 0000 0296                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000836 9a97      	SBI  0x12,7
                 ; 0000 0297                 lcdCommand(0x01);
000837 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0298                 lcd_gotoxy(1, 1);
                 ; 0000 0299                 lcd_print("Duplicate Student Code Entered");
                +
000839 eaa2     +LDI R26 , LOW ( _0x9D + ( 108 ) )
00083a e0b4     +LDI R27 , HIGH ( _0x9D + ( 108 ) )
                 	__POINTW2MN _0x9D,108
00083b 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 029A                 lcd_gotoxy(1, 2);
                 ; 0000 029B                 lcd_print("You Will Back Menu In 2 Second");
                +
00083d eca1     +LDI R26 , LOW ( _0x9D + ( 139 ) )
00083e e0b4     +LDI R27 , HIGH ( _0x9D + ( 139 ) )
                 	__POINTW2MN _0x9D,139
00083f 940e 10af 	CALL SUBOPT_0xB
                 ; 0000 029C                 delay_ms(2000);
                 ; 0000 029D                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 029E             }
                 ; 0000 029F             else
000841 c07d      	RJMP _0xC4
                 _0xC3:
                 ; 0000 02A0             {
                 ; 0000 02A1                 // save the buffer to EEPROM
                 ; 0000 02A2                 st_counts = read_byte_from_eeprom(0x0);
000842 940e 11ad 	CALL SUBOPT_0x30
000844 2f2e      	MOV  R18,R30
                 ; 0000 02A3                 for (i = 0; i < 8; i++)
000845 e0e0      	LDI  R30,LOW(0)
000846 87ec      	STD  Y+12,R30
000847 87ed      	STD  Y+12+1,R30
                 _0xC6:
000848 85ac      	LDD  R26,Y+12
000849 85bd      	LDD  R27,Y+12+1
00084a 9718      	SBIW R26,8
00084b f45c      	BRGE _0xC7
                 ; 0000 02A4                 {
                 ; 0000 02A5                     write_byte_to_eeprom(i + ((st_counts + 1) * 16), buffer[i]);
00084c 940e 11b1 	CALL SUBOPT_0x31
00084e 940e 11b7 	CALL SUBOPT_0x32
000850 51e2      	SUBI R30,LOW(-_buffer)
000851 4ff8      	SBCI R31,HIGH(-_buffer)
000852 81a0      	LD   R26,Z
000853 d3c2      	RCALL _write_byte_to_eeprom
                 ; 0000 02A6                 }
000854 940e 11a3 	CALL SUBOPT_0x2E
000856 cff1      	RJMP _0xC6
                 _0xC7:
                 ; 0000 02A7                 rtc_getTime(&hour, &minute, &second);
000857 01fe      	MOVW R30,R28
000858 963a      	ADIW R30,10
000859 93fa      	ST   -Y,R31
00085a 93ea      	ST   -Y,R30
00085b 01fe      	MOVW R30,R28
00085c 963d      	ADIW R30,13
00085d 93fa      	ST   -Y,R31
00085e 93ea      	ST   -Y,R30
00085f b7ad      	IN   R26,SPL
000860 b7be      	IN   R27,SPH
000861 934f      	PUSH R20
000862 d581      	RCALL _rtc_getTime
000863 914f      	POP  R20
                 ; 0000 02A8                 sprintf(time, "%02x%02x", hour, minute);
000864 940e 1161 	CALL SUBOPT_0x23
000866 940e 10d4 	CALL SUBOPT_0x10
000868 85ee      	LDD  R30,Y+14
000869 940e 1100 	CALL SUBOPT_0x14
00086b 89eb      	LDD  R30,Y+19
00086c 940e 1100 	CALL SUBOPT_0x14
00086e 940e 10e6 	CALL SUBOPT_0x12
                 ; 0000 02A9                 for (i = 0; i < 4; i++)
000870 e0e0      	LDI  R30,LOW(0)
000871 87ec      	STD  Y+12,R30
000872 87ed      	STD  Y+12+1,R30
                 _0xC9:
000873 85ac      	LDD  R26,Y+12
000874 85bd      	LDD  R27,Y+12+1
000875 9714      	SBIW R26,4
000876 f464      	BRGE _0xCA
                 ; 0000 02AA                 {
                 ; 0000 02AB                     write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i]);
000877 940e 11b1 	CALL SUBOPT_0x31
000879 9638      	ADIW R30,8
00087a 940e 11b7 	CALL SUBOPT_0x32
00087c 5ee4      	SUBI R30,LOW(-_time)
00087d 4ff7      	SBCI R31,HIGH(-_time)
00087e 81a0      	LD   R26,Z
00087f d396      	RCALL _write_byte_to_eeprom
                 ; 0000 02AC                 }
000880 940e 11a3 	CALL SUBOPT_0x2E
000882 cff0      	RJMP _0xC9
                 _0xCA:
                 ; 0000 02AD                 rtc_getDate(&year, &month, &date, &day);
000883 01fe      	MOVW R30,R28
000884 9636      	ADIW R30,6
000885 93fa      	ST   -Y,R31
000886 93ea      	ST   -Y,R30
000887 01fe      	MOVW R30,R28
000888 9639      	ADIW R30,9
000889 93fa      	ST   -Y,R31
00088a 93ea      	ST   -Y,R30
00088b 01fe      	MOVW R30,R28
00088c 963c      	ADIW R30,12
00088d 93fa      	ST   -Y,R31
00088e 93ea      	ST   -Y,R30
00088f 01de      	MOVW R26,R28
000890 961f      	ADIW R26,15
000891 d563      	RCALL _rtc_getDate
                 ; 0000 02AE                 sprintf(time, "%02x%02x", month, date);
000892 940e 1161 	CALL SUBOPT_0x23
000894 940e 10d4 	CALL SUBOPT_0x10
000896 85eb      	LDD  R30,Y+11
000897 940e 1100 	CALL SUBOPT_0x14
000899 89e8      	LDD  R30,Y+16
00089a 940e 1100 	CALL SUBOPT_0x14
00089c 940e 10e6 	CALL SUBOPT_0x12
                 ; 0000 02AF                 for (i = 4; i < 8; i++)
00089e e0e4      	LDI  R30,LOW(4)
00089f e0f0      	LDI  R31,HIGH(4)
0008a0 87ec      	STD  Y+12,R30
0008a1 87fd      	STD  Y+12+1,R31
                 _0xCC:
0008a2 85ac      	LDD  R26,Y+12
0008a3 85bd      	LDD  R27,Y+12+1
0008a4 9718      	SBIW R26,8
0008a5 f454      	BRGE _0xCD
                 ; 0000 02B0                 {
                 ; 0000 02B1                     write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i - 4]);
0008a6 940e 11b1 	CALL SUBOPT_0x31
0008a8 9638      	ADIW R30,8
0008a9 940e 11b7 	CALL SUBOPT_0x32
0008ab 940e 1106 	CALL SUBOPT_0x15
                 ; 0000 02B2                 }
0008ad 940e 11a3 	CALL SUBOPT_0x2E
0008af cff2      	RJMP _0xCC
                 _0xCD:
                 ; 0000 02B3                 write_byte_to_eeprom(0x0, st_counts + 1);
0008b0 940e 110c 	CALL SUBOPT_0x16
0008b2 2fa2      	MOV  R26,R18
0008b3 5faf      	SUBI R26,-LOW(1)
0008b4 d361      	RCALL _write_byte_to_eeprom
                 ; 0000 02B4 
                 ; 0000 02B5                 lcdCommand(0x01);
0008b5 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 02B6                 lcd_gotoxy(1, 1);
                 ; 0000 02B7                 lcd_print("Student Code Successfully Added");
                +
0008b7 eea0     +LDI R26 , LOW ( _0x9D + ( 170 ) )
0008b8 e0b4     +LDI R27 , HIGH ( _0x9D + ( 170 ) )
                 	__POINTW2MN _0x9D,170
0008b9 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 02B8                 lcd_gotoxy(1, 2);
                 ; 0000 02B9                 lcd_print("You Will Back Menu In 2 Second");
                +
0008bb e0a0     +LDI R26 , LOW ( _0x9D + ( 202 ) )
0008bc e0b5     +LDI R27 , HIGH ( _0x9D + ( 202 ) )
                 	__POINTW2MN _0x9D,202
0008bd 940e 1178 	CALL SUBOPT_0x26
                 ; 0000 02BA                 delay_ms(2000);
                 ; 0000 02BB             }
                 _0xC4:
                 _0xC2:
                 ; 0000 02BC             memset(buffer, 0, 32);
0008bf 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 02BD #asm("sei")
0008c1 9478      	sei
                 ; 0000 02BE             stage = STAGE_ATTENDENC_MENU;
0008c2 c005      	RJMP _0x1BB
                 ; 0000 02BF         }
                 ; 0000 02C0         else if (keypad[rowloc][cl] == 'C')
                 _0xBE:
0008c3 940e 116c 	CALL SUBOPT_0x25
0008c5 91ac      	LD   R26,X
0008c6 34a3      	CPI  R26,LOW(0x43)
0008c7 f411      	BRNE _0xCF
                 ; 0000 02C1             stage = STAGE_ATTENDENC_MENU;
                 _0x1BB:
0008c8 e0e1      	LDI  R30,LOW(1)
0008c9 2e5e      	MOV  R5,R30
                 ; 0000 02C2     }
                 _0xCF:
                 _0xBD:
                 _0xB8:
                 _0xB5:
                 ; 0000 02C3     else if (stage == STAGE_SUBMIT_WITH_CARD)
0008ca c22b      	RJMP _0xD0
                 _0xB1:
0008cb e0e3      	LDI  R30,LOW(3)
0008cc 15e5      	CP   R30,R5
0008cd f451      	BRNE _0xD1
                 ; 0000 02C4     {
                 ; 0000 02C5         if (keypad[rowloc][cl] == 'C')
0008ce 940e 116c 	CALL SUBOPT_0x25
0008d0 91ac      	LD   R26,X
0008d1 34a3      	CPI  R26,LOW(0x43)
0008d2 f421      	BRNE _0xD2
                 ; 0000 02C6         {
                 ; 0000 02C7             memset(buffer, 0, 32);
0008d3 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 02C8             stage = STAGE_ATTENDENC_MENU;
0008d5 e0e1      	LDI  R30,LOW(1)
0008d6 2e5e      	MOV  R5,R30
                 ; 0000 02C9         }
                 ; 0000 02CA     }
                 _0xD2:
                 ; 0000 02CB     else if (stage == STAGE_TEMPERATURE_MONITORING)
0008d7 c21e      	RJMP _0xD3
                 _0xD1:
0008d8 e0e4      	LDI  R30,LOW(4)
0008d9 15e5      	CP   R30,R5
0008da f439      	BRNE _0xD4
                 ; 0000 02CC     {
                 ; 0000 02CD         if (keypad[rowloc][cl] == 'C')
0008db 940e 116c 	CALL SUBOPT_0x25
0008dd 91ac      	LD   R26,X
0008de 34a3      	CPI  R26,LOW(0x43)
0008df f409      	BRNE _0xD5
                 ; 0000 02CE             stage = STAGE_INIT_MENU;
0008e0 2455      	CLR  R5
                 ; 0000 02CF     }
                 _0xD5:
                 ; 0000 02D0     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0008e1 c214      	RJMP _0xD6
                 _0xD4:
0008e2 e0e5      	LDI  R30,LOW(5)
0008e3 15e5      	CP   R30,R5
0008e4 f439      	BRNE _0xD7
                 ; 0000 02D1     {
                 ; 0000 02D2         if (keypad[rowloc][cl] == 'C')
0008e5 940e 116c 	CALL SUBOPT_0x25
0008e7 91ac      	LD   R26,X
0008e8 34a3      	CPI  R26,LOW(0x43)
0008e9 f409      	BRNE _0xD8
                 ; 0000 02D3             stage = STAGE_INIT_MENU;
0008ea 2455      	CLR  R5
                 ; 0000 02D4     }
                 _0xD8:
                 ; 0000 02D5     else if (stage == STAGE_STUDENT_MANAGMENT)
0008eb c20a      	RJMP _0xD9
                 _0xD7:
0008ec e0e7      	LDI  R30,LOW(7)
0008ed 15e5      	CP   R30,R5
0008ee f571      	BRNE _0xDA
                 ; 0000 02D6     {
                 ; 0000 02D7         if (keypad[rowloc][cl] == 'C')
0008ef 940e 116c 	CALL SUBOPT_0x25
0008f1 91ac      	LD   R26,X
0008f2 34a3      	CPI  R26,LOW(0x43)
0008f3 f411      	BRNE _0xDB
                 ; 0000 02D8             stage = STAGE_INIT_MENU;
0008f4 2455      	CLR  R5
                 ; 0000 02D9         else if (keypad[rowloc][cl] == '1')
0008f5 c026      	RJMP _0xDC
                 _0xDB:
0008f6 940e 116c 	CALL SUBOPT_0x25
0008f8 91ac      	LD   R26,X
0008f9 33a1      	CPI  R26,LOW(0x31)
0008fa f411      	BRNE _0xDD
                 ; 0000 02DA             stage = STAGE_SEARCH_STUDENT;
0008fb e0e8      	LDI  R30,LOW(8)
0008fc c01e      	RJMP _0x1BC
                 ; 0000 02DB         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xDD:
0008fd 940e 116c 	CALL SUBOPT_0x25
0008ff 91ac      	LD   R26,X
000900 33a2      	CPI  R26,LOW(0x32)
000901 f419      	BRNE _0xE0
000902 e0e1      	LDI  R30,LOW(1)
000903 15e6      	CP   R30,R6
000904 f009      	BREQ _0xE1
                 _0xE0:
000905 c002      	RJMP _0xDF
                 _0xE1:
                 ; 0000 02DC             stage = STAGE_DELETE_STUDENT;
000906 e0e9      	LDI  R30,LOW(9)
000907 c013      	RJMP _0x1BC
                 ; 0000 02DD         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xDF:
000908 940e 116c 	CALL SUBOPT_0x25
00090a 91ac      	LD   R26,X
00090b 33a2      	CPI  R26,LOW(0x32)
00090c f411      	BRNE _0xE4
00090d 2066      	TST  R6
00090e f009      	BREQ _0xE5
                 _0xE4:
00090f c00c      	RJMP _0xE3
                 _0xE5:
                 ; 0000 02DE         {
                 ; 0000 02DF             lcdCommand(0x01);
000910 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 02E0             lcd_gotoxy(1, 1);
                 ; 0000 02E1             lcd_print("You Must First Login");
                +
000912 e1af     +LDI R26 , LOW ( _0x9D + ( 233 ) )
000913 e0b5     +LDI R27 , HIGH ( _0x9D + ( 233 ) )
                 	__POINTW2MN _0x9D,233
000914 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 02E2             lcd_gotoxy(1, 2);
                 ; 0000 02E3             lcd_print("You Will Go Admin Page 2 Sec");
                +
000916 e3a4     +LDI R26 , LOW ( _0x9D + ( 254 ) )
000917 e0b5     +LDI R27 , HIGH ( _0x9D + ( 254 ) )
                 	__POINTW2MN _0x9D,254
000918 940e 1178 	CALL SUBOPT_0x26
                 ; 0000 02E4             delay_ms(2000);
                 ; 0000 02E5             stage = STAGE_LOGIN_WITH_ADMIN;
00091a e0eb      	LDI  R30,LOW(11)
                 _0x1BC:
00091b 2e5e      	MOV  R5,R30
                 ; 0000 02E6         }
                 ; 0000 02E7     }
                 _0xE3:
                 _0xDC:
                 ; 0000 02E8     else if (stage == STAGE_SEARCH_STUDENT)
00091c c1d9      	RJMP _0xE6
                 _0xDA:
00091d e0e8      	LDI  R30,LOW(8)
00091e 15e5      	CP   R30,R5
00091f f009      	BREQ PC+2
000920 c06d      	RJMP _0xE7
                 ; 0000 02E9     {
                 ; 0000 02EA         if (keypad[rowloc][cl] == 'C')
000921 940e 116c 	CALL SUBOPT_0x25
000923 91ac      	LD   R26,X
000924 34a3      	CPI  R26,LOW(0x43)
000925 f419      	BRNE _0xE8
                 ; 0000 02EB         {
                 ; 0000 02EC             memset(buffer, 0, 32);
000926 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 02ED             stage = STAGE_STUDENT_MANAGMENT;
000928 c062      	RJMP _0x1BD
                 ; 0000 02EE         }
                 ; 0000 02EF         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xE8:
000929 940e 116c 	CALL SUBOPT_0x25
00092b 91ec      	LD   R30,X
00092c e0f0      	LDI  R31,0
00092d 97fa      	SBIW R30,58
00092e f47c      	BRGE _0xEA
                 ; 0000 02F0         {
                 ; 0000 02F1             if (strlen(buffer) <= 30)
00092f 940e 1099 	CALL SUBOPT_0x7
000931 977f      	SBIW R30,31
000932 f450      	BRSH _0xEB
                 ; 0000 02F2             {
                 ; 0000 02F3                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000933 940e 1099 	CALL SUBOPT_0x7
000935 940e 117b 	CALL SUBOPT_0x27
000937 940e 117f 	CALL SUBOPT_0x28
                 ; 0000 02F4                 buffer[strlen(buffer) + 1] = '\0';
000939 940e 1183 	CALL SUBOPT_0x29
                 ; 0000 02F5                 lcdData(keypad[rowloc][cl]);
00093b 91ac      	LD   R26,X
00093c d1d6      	RCALL _lcdData
                 ; 0000 02F6             }
                 ; 0000 02F7         }
                 _0xEB:
                 ; 0000 02F8         else if (keypad[rowloc][cl] == 'D')
00093d c04f      	RJMP _0xEC
                 _0xEA:
00093e 940e 116c 	CALL SUBOPT_0x25
000940 91ac      	LD   R26,X
000941 34a4      	CPI  R26,LOW(0x44)
000942 f461      	BRNE _0xED
                 ; 0000 02F9         {
                 ; 0000 02FA             buffer_len = strlen(buffer);
000943 940e 1099 	CALL SUBOPT_0x7
000945 2f5e      	MOV  R21,R30
                 ; 0000 02FB             if (buffer_len > 0)
000946 3051      	CPI  R21,1
000947 f030      	BRLO _0xEE
                 ; 0000 02FC             {
                 ; 0000 02FD                 buffer[buffer_len - 1] = '\0';
000948 940e 1188 	CALL SUBOPT_0x2A
                 ; 0000 02FE                 lcdCommand(0x10);
                 ; 0000 02FF                 lcd_print(" ");
                +
00094a e5a1     +LDI R26 , LOW ( _0x9D + ( 283 ) )
00094b e0b5     +LDI R27 , HIGH ( _0x9D + ( 283 ) )
                 	__POINTW2MN _0x9D,283
00094c 940e 1192 	CALL SUBOPT_0x2B
                 ; 0000 0300                 lcdCommand(0x10);
                 ; 0000 0301             }
                 ; 0000 0302         }
                 _0xEE:
                 ; 0000 0303         else if (keypad[rowloc][cl] == 'O')
00094e c03e      	RJMP _0xEF
                 _0xED:
00094f 940e 116c 	CALL SUBOPT_0x25
000951 91ac      	LD   R26,X
000952 34af      	CPI  R26,LOW(0x4F)
000953 f481      	BRNE _0xF0
                 ; 0000 0304         {
                 ; 0000 0305             lcdCommand(0xC0);
000954 940e 1197 	CALL SUBOPT_0x2C
                 ; 0000 0306             for(i = 0; i < strlen(buffer); i++)
                 _0xF2:
000956 940e 1099 	CALL SUBOPT_0x7
000958 940e 119e 	CALL SUBOPT_0x2D
00095a f430      	BRSH _0xF3
                 ; 0000 0307                 lcd_print(" ");
                +
00095b e5a3     +LDI R26 , LOW ( _0x9D + ( 285 ) )
00095c e0b5     +LDI R27 , HIGH ( _0x9D + ( 285 ) )
                 	__POINTW2MN _0x9D,285
00095d d1f0      	RCALL _lcd_print
00095e 940e 11a3 	CALL SUBOPT_0x2E
000960 cff5      	RJMP _0xF2
                 _0xF3:
                 ; 0000 0308 lcdCommand(0xC0);
000961 940e 11a9 	CALL SUBOPT_0x2F
                 ; 0000 0309             memset(buffer, 0, 32);
                 ; 0000 030A         }
                 ; 0000 030B         else if (keypad[rowloc][cl] == 'E')
000963 c029      	RJMP _0xF4
                 _0xF0:
000964 940e 116c 	CALL SUBOPT_0x25
000966 91ac      	LD   R26,X
000967 34a5      	CPI  R26,LOW(0x45)
000968 f4e9      	BRNE _0xF5
                 ; 0000 030C         {
                 ; 0000 030D             // search from eeprom data
                 ; 0000 030E             unsigned char result = search_student_code();
                 ; 0000 030F 
                 ; 0000 0310             if (result > 0)
000969 940e 11c0 	CALL SUBOPT_0x33
                 ;	i -> Y+13
                 ;	minute -> Y+12
                 ;	hour -> Y+11
                 ;	day -> Y+10
                 ;	date -> Y+9
                 ;	month -> Y+8
                 ;	year -> Y+7
                 ;	result -> Y+0
00096b f048      	BRLO _0xF6
                 ; 0000 0311             {
                 ; 0000 0312                 lcdCommand(0x01);
00096c 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0313                 lcd_gotoxy(1, 1);
                 ; 0000 0314                 lcd_print("Student Code Found");
                +
00096e e5a5     +LDI R26 , LOW ( _0x9D + ( 287 ) )
00096f e0b5     +LDI R27 , HIGH ( _0x9D + ( 287 ) )
                 	__POINTW2MN _0x9D,287
000970 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0315                 lcd_gotoxy(1, 2);
                 ; 0000 0316                 lcd_print("You Will Back Menu In 2 Second");
                +
000972 e6a8     +LDI R26 , LOW ( _0x9D + ( 306 ) )
000973 e0b5     +LDI R27 , HIGH ( _0x9D + ( 306 ) )
                 	__POINTW2MN _0x9D,306
000974 c008      	RJMP _0x1BE
                 ; 0000 0317                 delay_ms(2000);
                 ; 0000 0318             }
                 ; 0000 0319             else
                 _0xF6:
                 ; 0000 031A             {
                 ; 0000 031B                 lcdCommand(0x01);
000975 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 031C                 lcd_gotoxy(1, 1);
                 ; 0000 031D                 lcd_print("Ops , Student Code Not Found");
                +
000977 e8a7     +LDI R26 , LOW ( _0x9D + ( 337 ) )
000978 e0b5     +LDI R27 , HIGH ( _0x9D + ( 337 ) )
                 	__POINTW2MN _0x9D,337
000979 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 031E                 lcd_gotoxy(1, 2);
                 ; 0000 031F                 lcd_print("You Will Back Menu In 2 Second");
                +
00097b eaa4     +LDI R26 , LOW ( _0x9D + ( 366 ) )
00097c e0b5     +LDI R27 , HIGH ( _0x9D + ( 366 ) )
                 	__POINTW2MN _0x9D,366
                 _0x1BE:
00097d d1d0      	RCALL _lcd_print
                 ; 0000 0320                 delay_ms(2000);
00097e 940e 114f 	CALL SUBOPT_0x20
                 ; 0000 0321             }
                 ; 0000 0322             memset(buffer, 0, 32);
000980 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0323             stage = STAGE_STUDENT_MANAGMENT;
000982 e0e7      	LDI  R30,LOW(7)
000983 2e5e      	MOV  R5,R30
                 ; 0000 0324         }
000984 9621      	ADIW R28,1
                 ; 0000 0325         else if (keypad[rowloc][cl] == 'C')
000985 c007      	RJMP _0xF8
                 _0xF5:
000986 940e 116c 	CALL SUBOPT_0x25
000988 91ac      	LD   R26,X
000989 34a3      	CPI  R26,LOW(0x43)
00098a f411      	BRNE _0xF9
                 ; 0000 0326             stage = STAGE_STUDENT_MANAGMENT;
                 _0x1BD:
00098b e0e7      	LDI  R30,LOW(7)
00098c 2e5e      	MOV  R5,R30
                 ; 0000 0327     }
                 _0xF9:
                 _0xF8:
                 _0xF4:
                 _0xEF:
                 _0xEC:
                 ; 0000 0328     else if (stage == STAGE_DELETE_STUDENT)
00098d c168      	RJMP _0xFA
                 _0xE7:
00098e e0e9      	LDI  R30,LOW(9)
00098f 15e5      	CP   R30,R5
000990 f009      	BREQ PC+2
000991 c072      	RJMP _0xFB
                 ; 0000 0329     {
                 ; 0000 032A         if (keypad[rowloc][cl] == 'C')
000992 940e 116c 	CALL SUBOPT_0x25
000994 91ac      	LD   R26,X
000995 34a3      	CPI  R26,LOW(0x43)
000996 f429      	BRNE _0xFC
                 ; 0000 032B         {
                 ; 0000 032C             memset(buffer, 0, 32);
000997 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 032D             stage = STAGE_STUDENT_MANAGMENT;
000999 e0e7      	LDI  R30,LOW(7)
00099a 2e5e      	MOV  R5,R30
                 ; 0000 032E         }
                 ; 0000 032F         else if ((keypad[rowloc][cl] - '0') < 10)
00099b c067      	RJMP _0xFD
                 _0xFC:
00099c 940e 116c 	CALL SUBOPT_0x25
00099e 91ec      	LD   R30,X
00099f e0f0      	LDI  R31,0
0009a0 97fa      	SBIW R30,58
0009a1 f47c      	BRGE _0xFE
                 ; 0000 0330         {
                 ; 0000 0331             if (strlen(buffer) <= 30)
0009a2 940e 1099 	CALL SUBOPT_0x7
0009a4 977f      	SBIW R30,31
0009a5 f450      	BRSH _0xFF
                 ; 0000 0332             {
                 ; 0000 0333                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0009a6 940e 1099 	CALL SUBOPT_0x7
0009a8 940e 117b 	CALL SUBOPT_0x27
0009aa 940e 117f 	CALL SUBOPT_0x28
                 ; 0000 0334                 buffer[strlen(buffer) + 1] = '\0';
0009ac 940e 1183 	CALL SUBOPT_0x29
                 ; 0000 0335                 lcdData(keypad[rowloc][cl]);
0009ae 91ac      	LD   R26,X
0009af d163      	RCALL _lcdData
                 ; 0000 0336             }
                 ; 0000 0337         }
                 _0xFF:
                 ; 0000 0338         else if (keypad[rowloc][cl] == 'D')
0009b0 c052      	RJMP _0x100
                 _0xFE:
0009b1 940e 116c 	CALL SUBOPT_0x25
0009b3 91ac      	LD   R26,X
0009b4 34a4      	CPI  R26,LOW(0x44)
0009b5 f461      	BRNE _0x101
                 ; 0000 0339         {
                 ; 0000 033A             buffer_len = strlen(buffer);
0009b6 940e 1099 	CALL SUBOPT_0x7
0009b8 2f5e      	MOV  R21,R30
                 ; 0000 033B             if (buffer_len > 0)
0009b9 3051      	CPI  R21,1
0009ba f030      	BRLO _0x102
                 ; 0000 033C             {
                 ; 0000 033D                 buffer[buffer_len - 1] = '\0';
0009bb 940e 1188 	CALL SUBOPT_0x2A
                 ; 0000 033E                 lcdCommand(0x10);
                 ; 0000 033F                 lcd_print(" ");
                +
0009bd eca3     +LDI R26 , LOW ( _0x9D + ( 397 ) )
0009be e0b5     +LDI R27 , HIGH ( _0x9D + ( 397 ) )
                 	__POINTW2MN _0x9D,397
0009bf 940e 1192 	CALL SUBOPT_0x2B
                 ; 0000 0340                 lcdCommand(0x10);
                 ; 0000 0341             }
                 ; 0000 0342         }
                 _0x102:
                 ; 0000 0343         else if (keypad[rowloc][cl] == 'O')
0009c1 c041      	RJMP _0x103
                 _0x101:
0009c2 940e 116c 	CALL SUBOPT_0x25
0009c4 91ac      	LD   R26,X
0009c5 34af      	CPI  R26,LOW(0x4F)
0009c6 f481      	BRNE _0x104
                 ; 0000 0344         {
                 ; 0000 0345             lcdCommand(0xC0);
0009c7 940e 1197 	CALL SUBOPT_0x2C
                 ; 0000 0346             for(i = 0; i < strlen(buffer); i++)
                 _0x106:
0009c9 940e 1099 	CALL SUBOPT_0x7
0009cb 940e 119e 	CALL SUBOPT_0x2D
0009cd f430      	BRSH _0x107
                 ; 0000 0347                 lcd_print(" ");
                +
0009ce eca5     +LDI R26 , LOW ( _0x9D + ( 399 ) )
0009cf e0b5     +LDI R27 , HIGH ( _0x9D + ( 399 ) )
                 	__POINTW2MN _0x9D,399
0009d0 d17d      	RCALL _lcd_print
0009d1 940e 11a3 	CALL SUBOPT_0x2E
0009d3 cff5      	RJMP _0x106
                 _0x107:
                 ; 0000 0348 lcdCommand(0xC0);
0009d4 940e 11a9 	CALL SUBOPT_0x2F
                 ; 0000 0349             memset(buffer, 0, 32);
                 ; 0000 034A         }
                 ; 0000 034B         else if (keypad[rowloc][cl] == 'E')
0009d6 c02c      	RJMP _0x108
                 _0x104:
0009d7 940e 116c 	CALL SUBOPT_0x25
0009d9 91ac      	LD   R26,X
0009da 34a5      	CPI  R26,LOW(0x45)
0009db f539      	BRNE _0x109
                 ; 0000 034C         {
                 ; 0000 034D             // search from eeprom data
                 ; 0000 034E             unsigned char result = search_student_code();
                 ; 0000 034F 
                 ; 0000 0350             if (result > 0)
0009dc 940e 11c0 	CALL SUBOPT_0x33
                 ;	i -> Y+13
                 ;	minute -> Y+12
                 ;	hour -> Y+11
                 ;	day -> Y+10
                 ;	date -> Y+9
                 ;	month -> Y+8
                 ;	year -> Y+7
                 ;	result -> Y+0
0009de f0a0      	BRLO _0x10A
                 ; 0000 0351             {
                 ; 0000 0352                 lcdCommand(0x01);
0009df 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0353                 lcd_gotoxy(1, 1);
                 ; 0000 0354                 lcd_print("Student Code Found");
                +
0009e1 eca7     +LDI R26 , LOW ( _0x9D + ( 401 ) )
0009e2 e0b5     +LDI R27 , HIGH ( _0x9D + ( 401 ) )
                 	__POINTW2MN _0x9D,401
0009e3 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0355                 lcd_gotoxy(1, 2);
                 ; 0000 0356                 lcd_print("Wait For Delete...");
                +
0009e5 edaa     +LDI R26 , LOW ( _0x9D + ( 420 ) )
0009e6 e0b5     +LDI R27 , HIGH ( _0x9D + ( 420 ) )
                 	__POINTW2MN _0x9D,420
0009e7 d166      	RCALL _lcd_print
                 ; 0000 0357                 delete_student_code(result);
0009e8 81a8      	LD   R26,Y
0009e9 d295      	RCALL _delete_student_code
                 ; 0000 0358                 lcdCommand(0x01);
0009ea 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0359                 lcd_gotoxy(1, 1);
                 ; 0000 035A                 lcd_print("Student Code Was Deleted");
                +
0009ec eead     +LDI R26 , LOW ( _0x9D + ( 439 ) )
0009ed e0b5     +LDI R27 , HIGH ( _0x9D + ( 439 ) )
                 	__POINTW2MN _0x9D,439
0009ee 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 035B                 lcd_gotoxy(1, 2);
                 ; 0000 035C                 lcd_print("You Will Back Menu In 2 Second");
                +
0009f0 e0a6     +LDI R26 , LOW ( _0x9D + ( 464 ) )
0009f1 e0b6     +LDI R27 , HIGH ( _0x9D + ( 464 ) )
                 	__POINTW2MN _0x9D,464
0009f2 c008      	RJMP _0x1BF
                 ; 0000 035D                 delay_ms(2000);
                 ; 0000 035E             }
                 ; 0000 035F             else
                 _0x10A:
                 ; 0000 0360             {
                 ; 0000 0361                 lcdCommand(0x01);
0009f3 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0362                 lcd_gotoxy(1, 1);
                 ; 0000 0363                 lcd_print("Ops , Student Code Not Found");
                +
0009f5 e2a5     +LDI R26 , LOW ( _0x9D + ( 495 ) )
0009f6 e0b6     +LDI R27 , HIGH ( _0x9D + ( 495 ) )
                 	__POINTW2MN _0x9D,495
0009f7 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0364                 lcd_gotoxy(1, 2);
                 ; 0000 0365                 lcd_print("You Will Back Menu In 2 Second");
                +
0009f9 e4a2     +LDI R26 , LOW ( _0x9D + ( 524 ) )
0009fa e0b6     +LDI R27 , HIGH ( _0x9D + ( 524 ) )
                 	__POINTW2MN _0x9D,524
                 _0x1BF:
0009fb d152      	RCALL _lcd_print
                 ; 0000 0366                 delay_ms(2000);
0009fc 940e 114f 	CALL SUBOPT_0x20
                 ; 0000 0367             }
                 ; 0000 0368             memset(buffer, 0, 32);
0009fe 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0369             stage = STAGE_STUDENT_MANAGMENT;
000a00 e0e7      	LDI  R30,LOW(7)
000a01 2e5e      	MOV  R5,R30
                 ; 0000 036A         }
000a02 9621      	ADIW R28,1
                 ; 0000 036B     }
                 _0x109:
                 _0x108:
                 _0x103:
                 _0x100:
                 _0xFD:
                 ; 0000 036C     else if (stage == STAGE_TRAFFIC_MONITORING)
000a03 c0f2      	RJMP _0x10C
                 _0xFB:
000a04 e0ea      	LDI  R30,LOW(10)
000a05 15e5      	CP   R30,R5
000a06 f439      	BRNE _0x10D
                 ; 0000 036D     {
                 ; 0000 036E         if (keypad[rowloc][cl] == 'C')
000a07 940e 116c 	CALL SUBOPT_0x25
000a09 91ac      	LD   R26,X
000a0a 34a3      	CPI  R26,LOW(0x43)
000a0b f409      	BRNE _0x10E
                 ; 0000 036F             stage = STAGE_INIT_MENU;
000a0c 2455      	CLR  R5
                 ; 0000 0370     }
                 _0x10E:
                 ; 0000 0371     else if (stage == STAGE_SHOW_CLOCK)
000a0d c0e8      	RJMP _0x10F
                 _0x10D:
000a0e e0ed      	LDI  R30,LOW(13)
000a0f 15e5      	CP   R30,R5
000a10 f439      	BRNE _0x110
                 ; 0000 0372     {
                 ; 0000 0373         if (keypad[rowloc][cl] == 'C')
000a11 940e 116c 	CALL SUBOPT_0x25
000a13 91ac      	LD   R26,X
000a14 34a3      	CPI  R26,LOW(0x43)
000a15 f409      	BRNE _0x111
                 ; 0000 0374             stage = STAGE_INIT_MENU;
000a16 2455      	CLR  R5
                 ; 0000 0375     }
                 _0x111:
                 ; 0000 0376     else if (stage == STAGE_SET_TIMER)
000a17 c0de      	RJMP _0x112
                 _0x110:
000a18 e0ee      	LDI  R30,LOW(14)
000a19 15e5      	CP   R30,R5
000a1a f009      	BREQ PC+2
000a1b c043      	RJMP _0x113
                 ; 0000 0377     {
                 ; 0000 0378         if (keypad[rowloc][cl] == 'C')
000a1c 940e 116c 	CALL SUBOPT_0x25
000a1e 91ac      	LD   R26,X
000a1f 34a3      	CPI  R26,LOW(0x43)
000a20 f419      	BRNE _0x114
                 ; 0000 0379         {
                 ; 0000 037A             memset(buffer, 0, 32);
000a21 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 037B             stage = STAGE_INIT_MENU;
000a23 c039      	RJMP _0x1C0
                 ; 0000 037C         }
                 ; 0000 037D 
                 ; 0000 037E         else if(keypad[rowloc][cl] == 'R')
                 _0x114:
000a24 940e 116c 	CALL SUBOPT_0x25
000a26 91ac      	LD   R26,X
000a27 35a2      	CPI  R26,LOW(0x52)
000a28 f481      	BRNE _0x116
                 ; 0000 037F         {
                 ; 0000 0380             if(submitTime < 20){
000a29 e1e4      	LDI  R30,LOW(20)
000a2a 169e      	CP   R9,R30
000a2b f460      	BRSH _0x117
                 ; 0000 0381                 submitTime++;
000a2c 9493      	INC  R9
                 ; 0000 0382                 itoa(submitTime, buffer);
000a2d 2de9      	MOV  R30,R9
000a2e 940e 1115 	CALL SUBOPT_0x18
                 ; 0000 0383                 lcd_gotoxy(21,1);
000a30 e1e5      	LDI  R30,LOW(21)
000a31 940e 115d 	CALL SUBOPT_0x22
                 ; 0000 0384                 lcd_print(buffer);
000a33 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 0385                 lcd_print("  ");
                +
000a35 e6a1     +LDI R26 , LOW ( _0x9D + ( 555 ) )
000a36 e0b6     +LDI R27 , HIGH ( _0x9D + ( 555 ) )
                 	__POINTW2MN _0x9D,555
000a37 d116      	RCALL _lcd_print
                 ; 0000 0386             }
                 ; 0000 0387         }
                 _0x117:
                 ; 0000 0388         else if(keypad[rowloc][cl] == 'L')
000a38 c025      	RJMP _0x118
                 _0x116:
000a39 940e 116c 	CALL SUBOPT_0x25
000a3b 91ac      	LD   R26,X
000a3c 34ac      	CPI  R26,LOW(0x4C)
000a3d f481      	BRNE _0x119
                 ; 0000 0389         {
                 ; 0000 038A             if(submitTime > 1){
000a3e e0e1      	LDI  R30,LOW(1)
000a3f 15e9      	CP   R30,R9
000a40 f460      	BRSH _0x11A
                 ; 0000 038B                 submitTime--;
000a41 949a      	DEC  R9
                 ; 0000 038C                 itoa(submitTime, buffer);
000a42 2de9      	MOV  R30,R9
000a43 940e 1115 	CALL SUBOPT_0x18
                 ; 0000 038D                 lcd_gotoxy(21,1);
000a45 e1e5      	LDI  R30,LOW(21)
000a46 940e 115d 	CALL SUBOPT_0x22
                 ; 0000 038E                 lcd_print(buffer);
000a48 940e 1111 	CALL SUBOPT_0x17
                 ; 0000 038F                 lcd_print("  ");
                +
000a4a e6a4     +LDI R26 , LOW ( _0x9D + ( 558 ) )
000a4b e0b6     +LDI R27 , HIGH ( _0x9D + ( 558 ) )
                 	__POINTW2MN _0x9D,558
000a4c d101      	RCALL _lcd_print
                 ; 0000 0390             }
                 ; 0000 0391         }
                 _0x11A:
                 ; 0000 0392         else if(keypad[rowloc][cl] == 'E')
000a4d c010      	RJMP _0x11B
                 _0x119:
000a4e 940e 116c 	CALL SUBOPT_0x25
000a50 91ac      	LD   R26,X
000a51 34a5      	CPI  R26,LOW(0x45)
000a52 f459      	BRNE _0x11C
                 ; 0000 0393         {
                 ; 0000 0394             lcdCommand(0x01);
000a53 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0395             lcd_gotoxy(1,1);
                 ; 0000 0396             lcd_print("Timer started");
                +
000a55 e6a7     +LDI R26 , LOW ( _0x9D + ( 561 ) )
000a56 e0b6     +LDI R27 , HIGH ( _0x9D + ( 561 ) )
                 	__POINTW2MN _0x9D,561
000a57 d0f6      	RCALL _lcd_print
                 ; 0000 0397             memset(buffer, 0, 32);
000a58 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 0398             delay_ms(2000);
000a5a 940e 114f 	CALL SUBOPT_0x20
                 ; 0000 0399             Timer2_Init();
000a5c d3ae      	RCALL _Timer2_Init
                 ; 0000 039A             stage = STAGE_INIT_MENU;
                 _0x1C0:
000a5d 2455      	CLR  R5
                 ; 0000 039B         }
                 ; 0000 039C 
                 ; 0000 039D     }
                 _0x11C:
                 _0x11B:
                 _0x118:
                 ; 0000 039E     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
000a5e c097      	RJMP _0x11D
                 _0x113:
000a5f e0eb      	LDI  R30,LOW(11)
000a60 15e5      	CP   R30,R5
000a61 f419      	BRNE _0x11F
000a62 e0e1      	LDI  R30,LOW(1)
000a63 15e6      	CP   R30,R6
000a64 f409      	BRNE _0x120
                 _0x11F:
000a65 c071      	RJMP _0x11E
                 _0x120:
                 ; 0000 039F     {
                 ; 0000 03A0         if (keypad[rowloc][cl] == 'C')
000a66 940e 116c 	CALL SUBOPT_0x25
000a68 91ac      	LD   R26,X
000a69 34a3      	CPI  R26,LOW(0x43)
000a6a f421      	BRNE _0x121
                 ; 0000 03A1         {
                 ; 0000 03A2             memset(buffer, 0, 32);
000a6b 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 03A3             stage = STAGE_INIT_MENU;
000a6d 2455      	CLR  R5
                 ; 0000 03A4         }
                 ; 0000 03A5 
                 ; 0000 03A6         else if ((keypad[rowloc][cl] - '0') < 10)
000a6e c067      	RJMP _0x122
                 _0x121:
000a6f 940e 116c 	CALL SUBOPT_0x25
000a71 91ec      	LD   R30,X
000a72 e0f0      	LDI  R31,0
000a73 97fa      	SBIW R30,58
000a74 f47c      	BRGE _0x123
                 ; 0000 03A7         {
                 ; 0000 03A8             if (strlen(buffer) <= 30)
000a75 940e 1099 	CALL SUBOPT_0x7
000a77 977f      	SBIW R30,31
000a78 f450      	BRSH _0x124
                 ; 0000 03A9             {
                 ; 0000 03AA                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000a79 940e 1099 	CALL SUBOPT_0x7
000a7b 940e 117b 	CALL SUBOPT_0x27
000a7d 940e 117f 	CALL SUBOPT_0x28
                 ; 0000 03AB                 buffer[strlen(buffer) + 1] = '\0';
000a7f 940e 1183 	CALL SUBOPT_0x29
                 ; 0000 03AC                 lcdData(keypad[rowloc][cl]);
000a81 91ac      	LD   R26,X
000a82 d090      	RCALL _lcdData
                 ; 0000 03AD             }
                 ; 0000 03AE         }
                 _0x124:
                 ; 0000 03AF         else if (keypad[rowloc][cl] == 'D')
000a83 c052      	RJMP _0x125
                 _0x123:
000a84 940e 116c 	CALL SUBOPT_0x25
000a86 91ac      	LD   R26,X
000a87 34a4      	CPI  R26,LOW(0x44)
000a88 f461      	BRNE _0x126
                 ; 0000 03B0         {
                 ; 0000 03B1             buffer_len = strlen(buffer);
000a89 940e 1099 	CALL SUBOPT_0x7
000a8b 2f5e      	MOV  R21,R30
                 ; 0000 03B2             if (buffer_len > 0)
000a8c 3051      	CPI  R21,1
000a8d f030      	BRLO _0x127
                 ; 0000 03B3             {
                 ; 0000 03B4                 buffer[buffer_len - 1] = '\0';
000a8e 940e 1188 	CALL SUBOPT_0x2A
                 ; 0000 03B5                 lcdCommand(0x10);
                 ; 0000 03B6                 lcd_print(" ");
                +
000a90 e7a5     +LDI R26 , LOW ( _0x9D + ( 575 ) )
000a91 e0b6     +LDI R27 , HIGH ( _0x9D + ( 575 ) )
                 	__POINTW2MN _0x9D,575
000a92 940e 1192 	CALL SUBOPT_0x2B
                 ; 0000 03B7                 lcdCommand(0x10);
                 ; 0000 03B8             }
                 ; 0000 03B9         }
                 _0x127:
                 ; 0000 03BA         else if (keypad[rowloc][cl] == 'O')
000a94 c041      	RJMP _0x128
                 _0x126:
000a95 940e 116c 	CALL SUBOPT_0x25
000a97 91ac      	LD   R26,X
000a98 34af      	CPI  R26,LOW(0x4F)
000a99 f481      	BRNE _0x129
                 ; 0000 03BB         {
                 ; 0000 03BC             lcdCommand(0xC0);
000a9a 940e 1197 	CALL SUBOPT_0x2C
                 ; 0000 03BD             for(i = 0; i < strlen(buffer); i++)
                 _0x12B:
000a9c 940e 1099 	CALL SUBOPT_0x7
000a9e 940e 119e 	CALL SUBOPT_0x2D
000aa0 f430      	BRSH _0x12C
                 ; 0000 03BE                 lcd_print(" ");
                +
000aa1 e7a7     +LDI R26 , LOW ( _0x9D + ( 577 ) )
000aa2 e0b6     +LDI R27 , HIGH ( _0x9D + ( 577 ) )
                 	__POINTW2MN _0x9D,577
000aa3 d0aa      	RCALL _lcd_print
000aa4 940e 11a3 	CALL SUBOPT_0x2E
000aa6 cff5      	RJMP _0x12B
                 _0x12C:
                 ; 0000 03BF lcdCommand(0xC0);
000aa7 940e 11a9 	CALL SUBOPT_0x2F
                 ; 0000 03C0             memset(buffer, 0, 32);
                 ; 0000 03C1         }
                 ; 0000 03C2         else if (keypad[rowloc][cl] == 'E')
000aa9 c02c      	RJMP _0x12D
                 _0x129:
000aaa 940e 116c 	CALL SUBOPT_0x25
000aac 91ac      	LD   R26,X
000aad 34a5      	CPI  R26,LOW(0x45)
000aae f539      	BRNE _0x12E
                 ; 0000 03C3         {
                 ; 0000 03C4             // search from eeprom data
                 ; 0000 03C5             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 03C6 
                 ; 0000 03C7             if (input_hash == secret)
000aaf 9722      	SBIW R28,2
                 ;	i -> Y+14
                 ;	minute -> Y+13
                 ;	hour -> Y+12
                 ;	day -> Y+11
                 ;	date -> Y+10
                 ;	month -> Y+9
                 ;	year -> Y+8
                 ;	input_hash -> Y+0
000ab0 eeae      	LDI  R26,LOW(_buffer)
000ab1 e0b7      	LDI  R27,HIGH(_buffer)
000ab2 d2db      	RCALL _simple_hash
000ab3 83e8      	ST   Y,R30
000ab4 83f9      	STD  Y+1,R31
000ab5 81a8      	LD   R26,Y
000ab6 81b9      	LDD  R27,Y+1
000ab7 36a4      	CPI  R26,LOW(0xF64)
000ab8 e0ef      	LDI  R30,HIGH(0xF64)
000ab9 07be      	CPC  R27,R30
000aba f469      	BRNE _0x12F
                 ; 0000 03C8             {
                 ; 0000 03C9                 lcdCommand(0x01);
000abb 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 03CA                 lcd_gotoxy(1, 1);
                 ; 0000 03CB                 lcd_print("Login Successfully");
                +
000abd e7a9     +LDI R26 , LOW ( _0x9D + ( 579 ) )
000abe e0b6     +LDI R27 , HIGH ( _0x9D + ( 579 ) )
                 	__POINTW2MN _0x9D,579
000abf 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 03CC                 lcd_gotoxy(1, 2);
                 ; 0000 03CD                 lcd_print("Wait...");
                +
000ac1 e8ac     +LDI R26 , LOW ( _0x9D + ( 598 ) )
000ac2 e0b6     +LDI R27 , HIGH ( _0x9D + ( 598 ) )
                 	__POINTW2MN _0x9D,598
000ac3 940e 1178 	CALL SUBOPT_0x26
                 ; 0000 03CE                 delay_ms(2000);
                 ; 0000 03CF                 logged_in = 1;
000ac5 e0e1      	LDI  R30,LOW(1)
000ac6 2e6e      	MOV  R6,R30
                 ; 0000 03D0             }
                 ; 0000 03D1             else
000ac7 c00a      	RJMP _0x130
                 _0x12F:
                 ; 0000 03D2             {
                 ; 0000 03D3                 lcdCommand(0x01);
000ac8 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 03D4                 lcd_gotoxy(1, 1);
                 ; 0000 03D5                 lcd_print("Ops , secret is incorrect");
                +
000aca e9a4     +LDI R26 , LOW ( _0x9D + ( 606 ) )
000acb e0b6     +LDI R27 , HIGH ( _0x9D + ( 606 ) )
                 	__POINTW2MN _0x9D,606
000acc 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 03D6                 lcd_gotoxy(1, 2);
                 ; 0000 03D7                 lcd_print("You Will Back Menu In 2 Second");
                +
000ace eaae     +LDI R26 , LOW ( _0x9D + ( 632 ) )
000acf e0b6     +LDI R27 , HIGH ( _0x9D + ( 632 ) )
                 	__POINTW2MN _0x9D,632
000ad0 940e 1178 	CALL SUBOPT_0x26
                 ; 0000 03D8                 delay_ms(2000);
                 ; 0000 03D9             }
                 _0x130:
                 ; 0000 03DA             memset(buffer, 0, 32);
000ad2 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 03DB             stage = STAGE_INIT_MENU;
000ad4 2455      	CLR  R5
                 ; 0000 03DC         }
000ad5 9622      	ADIW R28,2
                 ; 0000 03DD     }
                 _0x12E:
                 _0x12D:
                 _0x128:
                 _0x125:
                 _0x122:
                 ; 0000 03DE     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
000ad6 c01f      	RJMP _0x131
                 _0x11E:
000ad7 e0eb      	LDI  R30,LOW(11)
000ad8 15e5      	CP   R30,R5
000ad9 f411      	BRNE _0x133
000ada 2066      	TST  R6
000adb f409      	BRNE _0x134
                 _0x133:
000adc c019      	RJMP _0x132
                 _0x134:
                 ; 0000 03DF     {
                 ; 0000 03E0         switch (keypad[rowloc][cl])
000add 940e 116c 	CALL SUBOPT_0x25
000adf 91ec      	LD   R30,X
000ae0 e0f0      	LDI  R31,0
                 ; 0000 03E1         {
                 ; 0000 03E2         case 'C':
000ae1 34e3      	CPI  R30,LOW(0x43)
000ae2 e0a0      	LDI  R26,HIGH(0x43)
000ae3 07fa      	CPC  R31,R26
000ae4 f411      	BRNE _0x138
                 ; 0000 03E3             stage = STAGE_INIT_MENU;
000ae5 2455      	CLR  R5
                 ; 0000 03E4             break;
000ae6 c00c      	RJMP _0x137
                 ; 0000 03E5         case '1':
                 _0x138:
000ae7 33e1      	CPI  R30,LOW(0x31)
000ae8 e0a0      	LDI  R26,HIGH(0x31)
000ae9 07fa      	CPC  R31,R26
000aea f441      	BRNE _0x13A
                 ; 0000 03E6 #asm("cli") // disable interrupts
000aeb 94f8      	cli
                 ; 0000 03E7             lcdCommand(0x1);
000aec 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 03E8             lcd_gotoxy(1, 1);
                 ; 0000 03E9             lcd_print("Clearing EEPROM ...");
                +
000aee ecad     +LDI R26 , LOW ( _0x9D + ( 663 ) )
000aef e0b6     +LDI R27 , HIGH ( _0x9D + ( 663 ) )
                 	__POINTW2MN _0x9D,663
000af0 d05d      	RCALL _lcd_print
                 ; 0000 03EA             clear_eeprom();
000af1 d0fe      	RCALL _clear_eeprom
                 ; 0000 03EB #asm("sei") // enable interrupts
000af2 9478      	sei
                 ; 0000 03EC             break;
                 ; 0000 03ED         default:
                 _0x13A:
                 ; 0000 03EE             break;
                 ; 0000 03EF         }
                 _0x137:
                 ; 0000 03F0         memset(buffer, 0, 32);
000af3 940e 108a 	CALL SUBOPT_0x5
                 ; 0000 03F1         stage = STAGE_INIT_MENU;
000af5 2455      	CLR  R5
                 ; 0000 03F2     }
                 ; 0000 03F3 }
                 _0x132:
                 _0x131:
                 _0x11D:
                 _0x112:
                 _0x10F:
                 _0x10C:
                 _0xFA:
                 _0xE6:
                 _0xD9:
                 _0xD6:
                 _0xD3:
                 _0xD0:
                 _0xB0:
                 _0xA7:
000af6 940e 146f 	CALL __LOADLOCR6
000af8 962e      	ADIW R28,14
000af9 91e9      	LD   R30,Y+
000afa bfef      	OUT  SREG,R30
000afb 91f9      	LD   R31,Y+
000afc 91e9      	LD   R30,Y+
000afd 91b9      	LD   R27,Y+
000afe 91a9      	LD   R26,Y+
000aff 9199      	LD   R25,Y+
000b00 9189      	LD   R24,Y+
000b01 9179      	LD   R23,Y+
000b02 9169      	LD   R22,Y+
000b03 90f9      	LD   R15,Y+
000b04 9019      	LD   R1,Y+
000b05 9009      	LD   R0,Y+
000b06 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x9D:
000436           	.BYTE 0x2AB
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 03F6 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 03F7     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000b07 940e 11c7 	CALL SUBOPT_0x34
                 ;	cmnd -> Y+0
                 ; 0000 03F8     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
000b09 98d8      	CBI  0x1B,0
                 ; 0000 03F9     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000b0a 940e 11d0 	CALL SUBOPT_0x35
                 ; 0000 03FA     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03FB     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03FC     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03FD     delay_us(20 * 16);         // wait
                +
000b0c e880     +LDI R24 , LOW ( 640 )
000b0d e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
000b0e 9701     +SBIW R24 , 1
000b0f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 03FE     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000b10 940e 11d7 	CALL SUBOPT_0x36
                 ; 0000 03FF     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0400     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0401     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0402 }
000b12 c2c0      	RJMP _0x20C0006
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 0404 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 0405     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
000b13 940e 11c7 	CALL SUBOPT_0x34
                 ;	data -> Y+0
                 ; 0000 0406     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
000b15 9ad8      	SBI  0x1B,0
                 ; 0000 0407     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000b16 940e 11d0 	CALL SUBOPT_0x35
                 ; 0000 0408     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0409     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 040A     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 040B     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
000b18 940e 11d7 	CALL SUBOPT_0x36
                 ; 0000 040C     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 040D     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 040E     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 040F }
000b1a c2b8      	RJMP _0x20C0006
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 0411 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 0412     LCD_DDR = 0xFF;            // LCD port is output
000b1b efef      	LDI  R30,LOW(255)
000b1c bbea      	OUT  0x1A,R30
                 ; 0000 0413     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000b1d 98da      	CBI  0x1B,2
                 ; 0000 0414     delay_us(2000 * 16);       // wait for stable power
                +
000b1e e080     +LDI R24 , LOW ( 64000 )
000b1f ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000b20 9701     +SBIW R24 , 1
000b21 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0415     lcdCommand(0x33);          //$33 for 4-bit mode
000b22 e3a3      	LDI  R26,LOW(51)
000b23 940e 11e5 	CALL SUBOPT_0x37
                 ; 0000 0416     delay_us(100 * 16);        // wait
                 ; 0000 0417     lcdCommand(0x32);          //$32 for 4-bit mode
000b25 e3a2      	LDI  R26,LOW(50)
000b26 940e 11e5 	CALL SUBOPT_0x37
                 ; 0000 0418     delay_us(100 * 16);        // wait
                 ; 0000 0419     lcdCommand(0x28);          //$28 for 4-bit mode
000b28 e2a8      	LDI  R26,LOW(40)
000b29 940e 11e5 	CALL SUBOPT_0x37
                 ; 0000 041A     delay_us(100 * 16);        // wait
                 ; 0000 041B     lcdCommand(0x0c);          // display on, cursor off
000b2b 940e 1082 	CALL SUBOPT_0x4
                 ; 0000 041C     delay_us(100 * 16);        // wait
                 ; 0000 041D     lcdCommand(0x01);          // clear LCD
000b2d e0a1      	LDI  R26,LOW(1)
000b2e dfd8      	RCALL _lcdCommand
                 ; 0000 041E     delay_us(2000 * 16);       // wait
                +
000b2f e080     +LDI R24 , LOW ( 64000 )
000b30 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000b31 9701     +SBIW R24 , 1
000b32 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 041F     lcdCommand(0x06);          // shift cursor right
000b33 e0a6      	LDI  R26,LOW(6)
000b34 940e 11e5 	CALL SUBOPT_0x37
                 ; 0000 0420     delay_us(100 * 16);
                 ; 0000 0421 }
000b36 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0423 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 0424     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 0425     lcdCommand(firstCharAdr[y - 1] + x - 1);
000b37 93aa      	ST   -Y,R26
000b38 9724      	SBIW R28,4
000b39 e8e0      	LDI  R30,LOW(128)
000b3a 83e8      	ST   Y,R30
000b3b ece0      	LDI  R30,LOW(192)
000b3c 83e9      	STD  Y+1,R30
000b3d e9e4      	LDI  R30,LOW(148)
000b3e 83ea      	STD  Y+2,R30
000b3f ede4      	LDI  R30,LOW(212)
000b40 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000b41 81ec      	LDD  R30,Y+4
000b42 e0f0      	LDI  R31,0
000b43 9731      	SBIW R30,1
000b44 01de      	MOVW R26,R28
000b45 0fae      	ADD  R26,R30
000b46 1fbf      	ADC  R27,R31
000b47 91ec      	LD   R30,X
000b48 81ad      	LDD  R26,Y+5
000b49 0fae      	ADD  R26,R30
000b4a 50a1      	SUBI R26,LOW(1)
000b4b 940e 11e5 	CALL SUBOPT_0x37
                 ; 0000 0426     delay_us(100 * 16);
                 ; 0000 0427 }
000b4d c2a5      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0429 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 042A     unsigned char i = 0;
                 ; 0000 042B     while (str[i] != 0)
000b4e 93ba      	ST   -Y,R27
000b4f 93aa      	ST   -Y,R26
000b50 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000b51 e010      	LDI  R17,0
                 _0x13B:
000b52 81a9      	LDD  R26,Y+1
000b53 81ba      	LDD  R27,Y+1+1
000b54 27ee      	CLR  R30
000b55 0fa1      	ADD  R26,R17
000b56 1fbe      	ADC  R27,R30
000b57 91ec      	LD   R30,X
000b58 30e0      	CPI  R30,0
000b59 f049      	BREQ _0x13D
                 ; 0000 042C     {
                 ; 0000 042D         lcdData(str[i]);
000b5a 81a9      	LDD  R26,Y+1
000b5b 81ba      	LDD  R27,Y+1+1
000b5c 27ee      	CLR  R30
000b5d 0fa1      	ADD  R26,R17
000b5e 1fbe      	ADC  R27,R30
000b5f 91ac      	LD   R26,X
000b60 dfb2      	RCALL _lcdData
                 ; 0000 042E         i++;
000b61 5f1f      	SUBI R17,-1
                 ; 0000 042F     }
000b62 cfef      	RJMP _0x13B
                 _0x13D:
                 ; 0000 0430 }
000b63 8118      	LDD  R17,Y+0
000b64 c0ba      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 0433 {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 0434     unsigned char temperatureVal = 0;
                 ; 0000 0435     unsigned char temperatureRep[3];
                 ; 0000 0436 
                 ; 0000 0437     DDRA &= ~(1 << 3);
000b65 9723      	SBIW R28,3
000b66 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000b67 e010      	LDI  R17,0
000b68 98d3      	CBI  0x1A,3
                 ; 0000 0438     ADMUX = 0xE3;
000b69 eee3      	LDI  R30,LOW(227)
000b6a b9e7      	OUT  0x7,R30
                 ; 0000 0439     ADCSRA = 0x87;
000b6b e8e7      	LDI  R30,LOW(135)
000b6c b9e6      	OUT  0x6,R30
                 ; 0000 043A 
                 ; 0000 043B     lcdCommand(0x01);
000b6d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 043C     lcd_gotoxy(1, 1);
                 ; 0000 043D     lcd_print("Temperature(C):");
                +
000b6f eea1     +LDI R26 , LOW ( _0x13E + ( 0 ) )
000b70 e0b6     +LDI R27 , HIGH ( _0x13E + ( 0 ) )
                 	__POINTW2MN _0x13E,0
000b71 dfdc      	RCALL _lcd_print
                 ; 0000 043E 
                 ; 0000 043F     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0x13F:
000b72 e0e4      	LDI  R30,LOW(4)
000b73 15e5      	CP   R30,R5
000b74 f4e9      	BRNE _0x141
                 ; 0000 0440     {
                 ; 0000 0441         ADCSRA |= (1 << ADSC);
000b75 9a36      	SBI  0x6,6
                 ; 0000 0442         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x142:
000b76 9b34      	SBIS 0x6,4
                 ; 0000 0443             ;
000b77 cffe      	RJMP _0x142
                 ; 0000 0444         if (ADCH != temperatureVal)
000b78 b1e5      	IN   R30,0x5
000b79 171e      	CP   R17,R30
000b7a f091      	BREQ _0x145
                 ; 0000 0445         {
                 ; 0000 0446             temperatureVal = ADCH;
000b7b b115      	IN   R17,5
                 ; 0000 0447             itoa(temperatureVal, temperatureRep);
000b7c 2fe1      	MOV  R30,R17
000b7d e0f0      	LDI  R31,0
000b7e 93fa      	ST   -Y,R31
000b7f 93ea      	ST   -Y,R30
000b80 01de      	MOVW R26,R28
000b81 9613      	ADIW R26,3
000b82 940e 0e1c 	CALL _itoa
                 ; 0000 0448             lcd_gotoxy(17, 1);
000b84 e1e1      	LDI  R30,LOW(17)
000b85 940e 115d 	CALL SUBOPT_0x22
                 ; 0000 0449             lcd_print(temperatureRep);
000b87 01de      	MOVW R26,R28
000b88 9611      	ADIW R26,1
000b89 dfc4      	RCALL _lcd_print
                 ; 0000 044A             lcd_print(" ");
                +
000b8a efa1     +LDI R26 , LOW ( _0x13E + ( 16 ) )
000b8b e0b6     +LDI R27 , HIGH ( _0x13E + ( 16 ) )
                 	__POINTW2MN _0x13E,16
000b8c dfc1      	RCALL _lcd_print
                 ; 0000 044B         }
                 ; 0000 044C         delay_ms(500);
                 _0x145:
000b8d efa4      	LDI  R26,LOW(500)
000b8e e0b1      	LDI  R27,HIGH(500)
000b8f 940e 1282 	CALL _delay_ms
                 ; 0000 044D     }
000b91 cfe0      	RJMP _0x13F
                 _0x141:
                 ; 0000 044E 
                 ; 0000 044F     ADCSRA = 0x0;
000b92 e0e0      	LDI  R30,LOW(0)
000b93 b9e6      	OUT  0x6,R30
                 ; 0000 0450 }
000b94 8118      	LDD  R17,Y+0
000b95 c219      	RJMP _0x20C0007
                 ; .FEND
                 
                 	.DSEG
                 _0x13E:
0006e1           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 0453 {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 0454     while (stage == STAGE_INIT_MENU)
                 _0x146:
000b96 2055      	TST  R5
000b97 f009      	BREQ PC+2
000b98 c056      	RJMP _0x148
                 ; 0000 0455     {
                 ; 0000 0456         lcdCommand(0x01);
000b99 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0457         lcd_gotoxy(1, 1);
                 ; 0000 0458         if (page_num == 0)
000b9b 2044      	TST  R4
000b9c f471      	BRNE _0x149
                 ; 0000 0459         {
                 ; 0000 045A             lcd_print("1: Attendance Initialization");
                +
000b9d efa3     +LDI R26 , LOW ( _0x14A + ( 0 ) )
000b9e e0b6     +LDI R27 , HIGH ( _0x14A + ( 0 ) )
                 	__POINTW2MN _0x14A,0
000b9f 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 045B             lcd_gotoxy(1, 2);
                 ; 0000 045C             lcd_print("2: Student Management");
                +
000ba1 e1a0     +LDI R26 , LOW ( _0x14A + ( 29 ) )
000ba2 e0b7     +LDI R27 , HIGH ( _0x14A + ( 29 ) )
                 	__POINTW2MN _0x14A,29
000ba3 dfaa      	RCALL _lcd_print
                 ; 0000 045D             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0x14B:
000ba4 2044      	TST  R4
000ba5 f411      	BRNE _0x14E
000ba6 2055      	TST  R5
000ba7 f009      	BREQ _0x14F
                 _0x14E:
000ba8 c001      	RJMP _0x14D
                 _0x14F:
                 ; 0000 045E                 ;
000ba9 cffa      	RJMP _0x14B
                 _0x14D:
                 ; 0000 045F         }
                 ; 0000 0460         else if (page_num == 1)
000baa c043      	RJMP _0x150
                 _0x149:
000bab e0e1      	LDI  R30,LOW(1)
000bac 15e4      	CP   R30,R4
000bad f479      	BRNE _0x151
                 ; 0000 0461         {
                 ; 0000 0462             lcd_print("3: View Present Students ");
                +
000bae e2a6     +LDI R26 , LOW ( _0x14A + ( 51 ) )
000baf e0b7     +LDI R27 , HIGH ( _0x14A + ( 51 ) )
                 	__POINTW2MN _0x14A,51
000bb0 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0463             lcd_gotoxy(1, 2);
                 ; 0000 0464             lcd_print("4: Temperature Monitoring");
                +
000bb2 e4a0     +LDI R26 , LOW ( _0x14A + ( 77 ) )
000bb3 e0b7     +LDI R27 , HIGH ( _0x14A + ( 77 ) )
                 	__POINTW2MN _0x14A,77
000bb4 df99      	RCALL _lcd_print
                 ; 0000 0465             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0x152:
000bb5 e0e1      	LDI  R30,LOW(1)
000bb6 15e4      	CP   R30,R4
000bb7 f411      	BRNE _0x155
000bb8 2055      	TST  R5
000bb9 f009      	BREQ _0x156
                 _0x155:
000bba c001      	RJMP _0x154
                 _0x156:
                 ; 0000 0466                 ;
000bbb cff9      	RJMP _0x152
                 _0x154:
                 ; 0000 0467         }
                 ; 0000 0468         else if (page_num == 2)
000bbc c031      	RJMP _0x157
                 _0x151:
000bbd e0e2      	LDI  R30,LOW(2)
000bbe 15e4      	CP   R30,R4
000bbf f479      	BRNE _0x158
                 ; 0000 0469         {
                 ; 0000 046A             lcd_print("5: Retrieve Student Data");
                +
000bc0 e5aa     +LDI R26 , LOW ( _0x14A + ( 103 ) )
000bc1 e0b7     +LDI R27 , HIGH ( _0x14A + ( 103 ) )
                 	__POINTW2MN _0x14A,103
000bc2 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 046B             lcd_gotoxy(1, 2);
                 ; 0000 046C             lcd_print("6: Traffic Monitoring");
                +
000bc4 e7a3     +LDI R26 , LOW ( _0x14A + ( 128 ) )
000bc5 e0b7     +LDI R27 , HIGH ( _0x14A + ( 128 ) )
                 	__POINTW2MN _0x14A,128
000bc6 df87      	RCALL _lcd_print
                 ; 0000 046D             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x159:
000bc7 e0e2      	LDI  R30,LOW(2)
000bc8 15e4      	CP   R30,R4
000bc9 f411      	BRNE _0x15C
000bca 2055      	TST  R5
000bcb f009      	BREQ _0x15D
                 _0x15C:
000bcc c001      	RJMP _0x15B
                 _0x15D:
                 ; 0000 046E                 ;
000bcd cff9      	RJMP _0x159
                 _0x15B:
                 ; 0000 046F         }
                 ; 0000 0470         else if (page_num == 3)
000bce c01f      	RJMP _0x15E
                 _0x158:
000bcf e0e3      	LDI  R30,LOW(3)
000bd0 15e4      	CP   R30,R4
000bd1 f479      	BRNE _0x15F
                 ; 0000 0471         {
                 ; 0000 0472             lcd_print("7: Login With Admin");
                +
000bd2 e8a9     +LDI R26 , LOW ( _0x14A + ( 150 ) )
000bd3 e0b7     +LDI R27 , HIGH ( _0x14A + ( 150 ) )
                 	__POINTW2MN _0x14A,150
000bd4 940e 106b 	CALL SUBOPT_0x1
                 ; 0000 0473             lcd_gotoxy(1, 2);
                 ; 0000 0474             lcd_print("8: Logout");
                +
000bd6 e9ad     +LDI R26 , LOW ( _0x14A + ( 170 ) )
000bd7 e0b7     +LDI R27 , HIGH ( _0x14A + ( 170 ) )
                 	__POINTW2MN _0x14A,170
000bd8 df75      	RCALL _lcd_print
                 ; 0000 0475             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x160:
000bd9 e0e3      	LDI  R30,LOW(3)
000bda 15e4      	CP   R30,R4
000bdb f411      	BRNE _0x163
000bdc 2055      	TST  R5
000bdd f009      	BREQ _0x164
                 _0x163:
000bde c001      	RJMP _0x162
                 _0x164:
                 ; 0000 0476                 ;
000bdf cff9      	RJMP _0x160
                 _0x162:
                 ; 0000 0477         }
                 ; 0000 0478         else if (page_num == 4)
000be0 c00d      	RJMP _0x165
                 _0x15F:
000be1 e0e4      	LDI  R30,LOW(4)
000be2 15e4      	CP   R30,R4
000be3 f451      	BRNE _0x166
                 ; 0000 0479         {
                 ; 0000 047A             lcd_print("9: Set Timer");
                +
000be4 eaa7     +LDI R26 , LOW ( _0x14A + ( 180 ) )
000be5 e0b7     +LDI R27 , HIGH ( _0x14A + ( 180 ) )
                 	__POINTW2MN _0x14A,180
000be6 df67      	RCALL _lcd_print
                 ; 0000 047B             while (page_num == 4 && stage == STAGE_INIT_MENU)
                 _0x167:
000be7 e0e4      	LDI  R30,LOW(4)
000be8 15e4      	CP   R30,R4
000be9 f411      	BRNE _0x16A
000bea 2055      	TST  R5
000beb f009      	BREQ _0x16B
                 _0x16A:
000bec c001      	RJMP _0x169
                 _0x16B:
                 ; 0000 047C                 ;
000bed cff9      	RJMP _0x167
                 _0x169:
                 ; 0000 047D         }
                 ; 0000 047E     }
                 _0x166:
                 _0x165:
                 _0x15E:
                 _0x157:
                 _0x150:
000bee cfa7      	RJMP _0x146
                 _0x148:
                 ; 0000 047F }
000bef 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x14A:
0006f3           	.BYTE 0xC1
                 ;
                 ;void clear_eeprom()
                 ; 0000 0482 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0483     unsigned int i;
                 ; 0000 0484 
                 ; 0000 0485     for (i = 0; i <= 1023; i++)
000bf0 931a      	ST   -Y,R17
000bf1 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000bf2 e000     +LDI R16 , LOW ( 0 )
000bf3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16D:
                +
000bf4 3000     +CPI R16 , LOW ( 1024 )
000bf5 e0e4     +LDI R30 , HIGH ( 1024 )
000bf6 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000bf7 f478      	BRSH _0x16E
                 ; 0000 0486     {
                 ; 0000 0487         // Wait for the previous write to complete
                 ; 0000 0488         while (EECR & (1 << EEWE))
                 _0x16F:
000bf8 99e1      	SBIC 0x1C,1
                 ; 0000 0489             ;
000bf9 cffe      	RJMP _0x16F
                 ; 0000 048A 
                 ; 0000 048B         // Set up address registers
                 ; 0000 048C         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000bfa 2fe1      	MOV  R30,R17
000bfb 70f0      	ANDI R31,HIGH(0x0)
000bfc 70e3      	ANDI R30,LOW(0x3)
000bfd bbef      	OUT  0x1F,R30
                 ; 0000 048D         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000bfe 2fe0      	MOV  R30,R16
000bff bbee      	OUT  0x1E,R30
                 ; 0000 048E 
                 ; 0000 048F         // Set up data register
                 ; 0000 0490         EEDR = 0; // Write 0 to EEPROM
000c00 e0e0      	LDI  R30,LOW(0)
000c01 bbed      	OUT  0x1D,R30
                 ; 0000 0491 
                 ; 0000 0492         // Enable write
                 ; 0000 0493         EECR |= (1 << EEMWE); // Master write enable
000c02 9ae2      	SBI  0x1C,2
                 ; 0000 0494         EECR |= (1 << EEWE);  // Start EEPROM write
000c03 9ae1      	SBI  0x1C,1
                 ; 0000 0495     }
                +
000c04 5f0f     +SUBI R16 , LOW ( - 1 )
000c05 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000c06 cfed      	RJMP _0x16D
                 _0x16E:
                 ; 0000 0496 }
000c07 9109      	LD   R16,Y+
000c08 9119      	LD   R17,Y+
000c09 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0499 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 049A     unsigned char x;
                 ; 0000 049B     // Wait for the previous write to complete
                 ; 0000 049C     while (EECR & (1 << EEWE))
000c0a 93ba      	ST   -Y,R27
000c0b 93aa      	ST   -Y,R26
000c0c 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x172:
000c0d 99e1      	SBIC 0x1C,1
                 ; 0000 049D         ;
000c0e cffe      	RJMP _0x172
                 ; 0000 049E 
                 ; 0000 049F     // Set up address registers
                 ; 0000 04A0     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000c0f 940e 11e8 	CALL SUBOPT_0x38
                 ; 0000 04A1     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 04A2     EECR |= (1 << EERE);        // Read Enable
000c11 9ae0      	SBI  0x1C,0
                 ; 0000 04A3     x = EEDR;
000c12 b31d      	IN   R17,29
                 ; 0000 04A4     return x;
000c13 2fe1      	MOV  R30,R17
000c14 8118      	LDD  R17,Y+0
000c15 c009      	RJMP _0x20C0009
                 ; 0000 04A5 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 04A8 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 04A9     // Wait for the previous write to complete
                 ; 0000 04AA     while (EECR & (1 << EEWE))
000c16 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x175:
000c17 99e1      	SBIC 0x1C,1
                 ; 0000 04AB         ;
000c18 cffe      	RJMP _0x175
                 ; 0000 04AC 
                 ; 0000 04AD     // Set up address registers
                 ; 0000 04AE     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000c19 940e 11e8 	CALL SUBOPT_0x38
                 ; 0000 04AF     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 04B0 
                 ; 0000 04B1     // Set up data register
                 ; 0000 04B2     EEDR = value; // Write 0 to EEPROM
000c1b 81e8      	LD   R30,Y
000c1c bbed      	OUT  0x1D,R30
                 ; 0000 04B3 
                 ; 0000 04B4     // Enable write
                 ; 0000 04B5     EECR |= (1 << EEMWE); // Master write enable
000c1d 9ae2      	SBI  0x1C,2
                 ; 0000 04B6     EECR |= (1 << EEWE);  // Start EEPROM write
000c1e 9ae1      	SBI  0x1C,1
                 ; 0000 04B7 }
                 _0x20C0009:
000c1f 9623      	ADIW R28,3
000c20 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 04BA {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 04BB     while (!(UCSRA & (1 << UDRE)))
000c21 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x178:
000c22 9b5d      	SBIS 0xB,5
                 ; 0000 04BC         ;
000c23 cffe      	RJMP _0x178
                 ; 0000 04BD     UDR = data;
000c24 81e8      	LD   R30,Y
000c25 b9ec      	OUT  0xC,R30
                 ; 0000 04BE }
000c26 c1ac      	RJMP _0x20C0006
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 04C1 {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 04C2     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x17B:
000c27 995f      	SBIC 0xB,7
000c28 c003      	RJMP _0x17E
000c29 e0e3      	LDI  R30,LOW(3)
000c2a 15e5      	CP   R30,R5
000c2b f009      	BREQ _0x17F
                 _0x17E:
000c2c c001      	RJMP _0x17D
                 _0x17F:
000c2d cff9      	RJMP _0x17B
                 _0x17D:
                 ; 0000 04C3     return UDR;
000c2e b1ec      	IN   R30,0xC
000c2f 9508      	RET
                 ; 0000 04C4 }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 04C7 {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 04C8     UBRRL = (unsigned char)ubrr;
000c30 93ba      	ST   -Y,R27
000c31 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000c32 81e8      	LD   R30,Y
000c33 b9e9      	OUT  0x9,R30
                 ; 0000 04C9     UBRRH = (unsigned char)(ubrr >> 8);
000c34 81e9      	LDD  R30,Y+1
000c35 70f0      	ANDI R31,HIGH(0x0)
000c36 bde0      	OUT  0x20,R30
                 ; 0000 04CA     UCSRB = (1 << RXEN) | (1 << TXEN);
000c37 e1e8      	LDI  R30,LOW(24)
000c38 b9ea      	OUT  0xA,R30
                 ; 0000 04CB     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
000c39 e0e6      	LDI  R30,LOW(6)
000c3a bde0      	OUT  0x20,R30
                 ; 0000 04CC }
000c3b 9622      	ADIW R28,2
000c3c 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 04CF {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 04D0     unsigned char st_counts, i, j;
                 ; 0000 04D1     char temp[10];
                 ; 0000 04D2 
                 ; 0000 04D3     st_counts = read_byte_from_eeprom(0x0);
000c3d 972a      	SBIW R28,10
000c3e 940e 146a 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
000c40 940e 11ad 	CALL SUBOPT_0x30
000c42 2f1e      	MOV  R17,R30
                 ; 0000 04D4 
                 ; 0000 04D5     for (i = 0; i < st_counts; i++)
000c43 e000      	LDI  R16,LOW(0)
                 _0x181:
000c44 1701      	CP   R16,R17
000c45 f5a0      	BRSH _0x182
                 ; 0000 04D6     {
                 ; 0000 04D7         memset(temp, 0, 10);
000c46 01fe      	MOVW R30,R28
000c47 9634      	ADIW R30,4
000c48 93fa      	ST   -Y,R31
000c49 93ea      	ST   -Y,R30
000c4a e0e0      	LDI  R30,LOW(0)
000c4b 93ea      	ST   -Y,R30
000c4c e0aa      	LDI  R26,LOW(10)
000c4d e0b0      	LDI  R27,0
000c4e 940e 0e4a 	CALL _memset
                 ; 0000 04D8         for (j = 0; j < 8; j++)
000c50 e030      	LDI  R19,LOW(0)
                 _0x184:
000c51 3038      	CPI  R19,8
000c52 f478      	BRSH _0x185
                 ; 0000 04D9         {
                 ; 0000 04DA             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 16));
000c53 2fe3      	MOV  R30,R19
000c54 e0f0      	LDI  R31,0
000c55 01de      	MOVW R26,R28
000c56 9614      	ADIW R26,4
000c57 0fea      	ADD  R30,R26
000c58 1ffb      	ADC  R31,R27
000c59 93ff      	PUSH R31
000c5a 93ef      	PUSH R30
000c5b 940e 11ef 	CALL SUBOPT_0x39
000c5d 91af      	POP  R26
000c5e 91bf      	POP  R27
000c5f 93ec      	ST   X,R30
                 ; 0000 04DB         }
000c60 5f3f      	SUBI R19,-1
000c61 cfef      	RJMP _0x184
                 _0x185:
                 ; 0000 04DC         temp[j] = '\0';
000c62 2fe3      	MOV  R30,R19
000c63 e0f0      	LDI  R31,0
000c64 01de      	MOVW R26,R28
000c65 9614      	ADIW R26,4
000c66 0fae      	ADD  R26,R30
000c67 1fbf      	ADC  R27,R31
000c68 e0e0      	LDI  R30,LOW(0)
000c69 93ec      	ST   X,R30
                 ; 0000 04DD         if (strncmp(temp, buffer, 8) == 0)
000c6a 01fe      	MOVW R30,R28
000c6b 9634      	ADIW R30,4
000c6c 93fa      	ST   -Y,R31
000c6d 93ea      	ST   -Y,R30
000c6e 940e 109d 	CALL SUBOPT_0x8
000c70 e0a8      	LDI  R26,LOW(8)
000c71 940e 0e94 	CALL _strncmp
000c73 30e0      	CPI  R30,0
000c74 f419      	BRNE _0x186
                 ; 0000 04DE             return (i + 1);
000c75 2fe0      	MOV  R30,R16
000c76 5fef      	SUBI R30,-LOW(1)
000c77 c003      	RJMP _0x20C0008
                 ; 0000 04DF     }
                 _0x186:
000c78 5f0f      	SUBI R16,-1
000c79 cfca      	RJMP _0x181
                 _0x182:
                 ; 0000 04E0 
                 ; 0000 04E1     return 0;
000c7a e0e0      	LDI  R30,LOW(0)
                 _0x20C0008:
000c7b 940e 1471 	CALL __LOADLOCR4
000c7d 962e      	ADIW R28,14
000c7e 9508      	RET
                 ; 0000 04E2 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 04E5 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 04E6     unsigned char st_counts, i, j;
                 ; 0000 04E7     unsigned char temp;
                 ; 0000 04E8 
                 ; 0000 04E9     st_counts = read_byte_from_eeprom(0x0);
000c7f 93aa      	ST   -Y,R26
000c80 940e 146a 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000c82 940e 11ad 	CALL SUBOPT_0x30
000c84 2f1e      	MOV  R17,R30
                 ; 0000 04EA 
                 ; 0000 04EB     for (i = index; i <= st_counts; i++)
000c85 810c      	LDD  R16,Y+4
                 _0x188:
000c86 1710      	CP   R17,R16
000c87 f130      	BRLO _0x189
                 ; 0000 04EC     {
                 ; 0000 04ED         for (j = 0; j < 8; j++)
000c88 e030      	LDI  R19,LOW(0)
                 _0x18B:
000c89 3038      	CPI  R19,8
000c8a f450      	BRSH _0x18C
                 ; 0000 04EE         {
                 ; 0000 04EF             temp = read_byte_from_eeprom(j + ((i + 1) * 16));
000c8b 940e 11ef 	CALL SUBOPT_0x39
000c8d 940e 11fa 	CALL SUBOPT_0x3A
                 ; 0000 04F0             write_byte_to_eeprom(j + (i * 16), temp);
000c8f 93fa      	ST   -Y,R31
000c90 93ea      	ST   -Y,R30
000c91 2fa2      	MOV  R26,R18
000c92 df83      	RCALL _write_byte_to_eeprom
                 ; 0000 04F1         }
000c93 5f3f      	SUBI R19,-1
000c94 cff4      	RJMP _0x18B
                 _0x18C:
                 ; 0000 04F2         for (j = 0; j < 8; j++)
000c95 e030      	LDI  R19,LOW(0)
                 _0x18E:
000c96 3038      	CPI  R19,8
000c97 f4a0      	BRSH _0x18F
                 ; 0000 04F3         {
                 ; 0000 04F4             temp = read_byte_from_eeprom(j + ((i + 1) * 16) + 8);
000c98 2fa3      	MOV  R26,R19
000c99 27bb      	CLR  R27
000c9a 2fe0      	MOV  R30,R16
000c9b e0f0      	LDI  R31,0
000c9c 9631      	ADIW R30,1
000c9d 940e 1418 	CALL __LSLW4
000c9f 0fae      	ADD  R26,R30
000ca0 1fbf      	ADC  R27,R31
000ca1 9618      	ADIW R26,8
000ca2 df67      	RCALL _read_byte_from_eeprom
000ca3 940e 11fa 	CALL SUBOPT_0x3A
                 ; 0000 04F5             write_byte_to_eeprom(j + (i * 16) + 8, temp);
000ca5 9638      	ADIW R30,8
000ca6 93fa      	ST   -Y,R31
000ca7 93ea      	ST   -Y,R30
000ca8 2fa2      	MOV  R26,R18
000ca9 df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 04F6         }
000caa 5f3f      	SUBI R19,-1
000cab cfea      	RJMP _0x18E
                 _0x18F:
                 ; 0000 04F7     }
000cac 5f0f      	SUBI R16,-1
000cad cfd8      	RJMP _0x188
                 _0x189:
                 ; 0000 04F8     write_byte_to_eeprom(0x0, st_counts - 1);
000cae 940e 110c 	CALL SUBOPT_0x16
000cb0 2fa1      	MOV  R26,R17
000cb1 50a1      	SUBI R26,LOW(1)
000cb2 df63      	RCALL _write_byte_to_eeprom
                 ; 0000 04F9 }
000cb3 940e 1471 	CALL __LOADLOCR4
000cb5 940c 0eeb 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 04FC {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 04FD     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000cb7 9a8d      	SBI  0x11,5
                 ; 0000 04FE     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000cb8 988e      	CBI  0x11,6
                 ; 0000 04FF }
000cb9 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 0502 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 0503     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000cba 9a95      	SBI  0x12,5
                 ; 0000 0504     delay_us(15 * 16);              // Wait for 15 microseconds
                +
000cbb ee80     +LDI R24 , LOW ( 480 )
000cbc e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
000cbd 9701     +SBIW R24 , 1
000cbe f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0000 0505     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000cbf 9895      	CBI  0x12,5
                 ; 0000 0506 }
000cc0 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0509 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 050A     uint32_t i, result;
                 ; 0000 050B 
                 ; 0000 050C     // Wait for rising edge on Echo pin
                 ; 0000 050D     for (i = 0; i < 600000; i++)
000cc1 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
000cc2 e0e0      	LDI  R30,LOW(0)
                +
000cc3 83ec     +STD Y + 4 , R30
000cc4 83ed     +STD Y + 4 + 1 , R30
000cc5 83ee     +STD Y + 4 + 2 , R30
000cc6 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x191:
000cc7 940e 1203 	CALL SUBOPT_0x3B
000cc9 f430      	BRSH _0x192
                 ; 0000 050E     {
                 ; 0000 050F         if (!(US_PIN & (1 << US_ECHO_POS)))
000cca 9b86      	SBIS 0x10,6
                 ; 0000 0510             continue;
000ccb c001      	RJMP _0x190
                 ; 0000 0511         else
                 ; 0000 0512             break;
000ccc c003      	RJMP _0x192
                 ; 0000 0513     }
                 _0x190:
000ccd 940e 120f 	CALL SUBOPT_0x3C
000ccf cff7      	RJMP _0x191
                 _0x192:
                 ; 0000 0514 
                 ; 0000 0515     if (i == 600000)
000cd0 940e 1203 	CALL SUBOPT_0x3B
000cd2 f419      	BRNE _0x195
                 ; 0000 0516         return US_ERROR; // Timeout error if no rising edge detected
000cd3 efef      	LDI  R30,LOW(65535)
000cd4 efff      	LDI  R31,HIGH(65535)
000cd5 c133      	RJMP _0x20C0004
                 ; 0000 0517 
                 ; 0000 0518     // Start timer with prescaler 64
                 ; 0000 0519     TCCR1A = 0x00;
                 _0x195:
000cd6 e0e0      	LDI  R30,LOW(0)
000cd7 bdef      	OUT  0x2F,R30
                 ; 0000 051A     TCCR1B = (1 << CS11) | (1 << CS10);
000cd8 e0e3      	LDI  R30,LOW(3)
000cd9 bdee      	OUT  0x2E,R30
                 ; 0000 051B     TCNT1 = 0x00; // Reset timer
000cda e0e0      	LDI  R30,LOW(0)
000cdb e0f0      	LDI  R31,HIGH(0)
000cdc bdfd      	OUT  0x2C+1,R31
000cdd bdec      	OUT  0x2C,R30
                 ; 0000 051C 
                 ; 0000 051D     // Wait for falling edge on Echo pin
                 ; 0000 051E     for (i = 0; i < 600000; i++)
                +
000cde 83ec     +STD Y + 4 , R30
000cdf 83ed     +STD Y + 4 + 1 , R30
000ce0 83ee     +STD Y + 4 + 2 , R30
000ce1 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x197:
000ce2 940e 1203 	CALL SUBOPT_0x3B
000ce4 f470      	BRSH _0x198
                 ; 0000 051F     {
                 ; 0000 0520         if (!(US_PIN & (1 << US_ECHO_POS)))
000ce5 9b86      	SBIS 0x10,6
                 ; 0000 0521             break; // Falling edge detected
000ce6 c00c      	RJMP _0x198
                 ; 0000 0522         if (TCNT1 > 60000)
000ce7 b5ec      	IN   R30,0x2C
000ce8 b5fd      	IN   R31,0x2C+1
000ce9 36e1      	CPI  R30,LOW(0xEA61)
000cea eeaa      	LDI  R26,HIGH(0xEA61)
000ceb 07fa      	CPC  R31,R26
000cec f018      	BRLO _0x19A
                 ; 0000 0523             return US_NO_OBSTACLE; // No obstacle in range
000ced efee      	LDI  R30,LOW(65534)
000cee efff      	LDI  R31,HIGH(65534)
000cef c119      	RJMP _0x20C0004
                 ; 0000 0524     }
                 _0x19A:
000cf0 940e 120f 	CALL SUBOPT_0x3C
000cf2 cfef      	RJMP _0x197
                 _0x198:
                 ; 0000 0525 
                 ; 0000 0526     result = TCNT1; // Capture timer value
000cf3 b5ec      	IN   R30,0x2C
000cf4 b5fd      	IN   R31,0x2C+1
000cf5 2766      	CLR  R22
000cf6 2777      	CLR  R23
000cf7 940e 145e 	CALL __PUTD1S0
                 ; 0000 0527     TCCR1B = 0x00;  // Stop timer
000cf9 e0e0      	LDI  R30,LOW(0)
000cfa bdee      	OUT  0x2E,R30
                 ; 0000 0528 
                 ; 0000 0529     if (result > 60000)
000cfb 940e 1459 	CALL __GETD2S0
                +
000cfd 36a1     +CPI R26 , LOW ( 0xEA61 )
000cfe eeea     +LDI R30 , HIGH ( 0xEA61 )
000cff 07be     +CPC R27 , R30
000d00 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000d01 078e     +CPC R24 , R30
000d02 e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000d03 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000d04 f018      	BRLO _0x19B
                 ; 0000 052A         return US_NO_OBSTACLE;
000d05 efee      	LDI  R30,LOW(65534)
000d06 efff      	LDI  R31,HIGH(65534)
000d07 c101      	RJMP _0x20C0004
                 ; 0000 052B     else
                 _0x19B:
                 ; 0000 052C         return (result >> 1); // Return the measured pulse width
000d08 940e 1454 	CALL __GETD1S0
000d0a 940e 1421 	CALL __LSRD1
000d0c c0fc      	RJMP _0x20C0004
                 ; 0000 052D }
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 0530 {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 0531     char numberString[16];
                 ; 0000 0532     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 0533     int distance, previous_distance = -1;
                 ; 0000 0534     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0535 
                 ; 0000 0536     lcdCommand(0x01);
000d0d 9760      	SBIW R28,16
000d0e 940e 1468 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
000d10 ef4f     +LDI R20 , LOW ( - 1 )
000d11 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000d12 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0537     lcd_gotoxy(1, 1);
                 ; 0000 0538     lcd_print("Distance: ");
                +
000d14 eba4     +LDI R26 , LOW ( _0x19E + ( 0 ) )
000d15 e0b7     +LDI R27 , HIGH ( _0x19E + ( 0 ) )
                 	__POINTW2MN _0x19E,0
000d16 de37      	RCALL _lcd_print
                 ; 0000 0539 
                 ; 0000 053A     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x19F:
000d17 e0ea      	LDI  R30,LOW(10)
000d18 15e5      	CP   R30,R5
000d19 f009      	BREQ PC+2
000d1a c06f      	RJMP _0x1A1
                 ; 0000 053B     {
                 ; 0000 053C         HCSR04Trigger();              // Send trigger pulse
000d1b df9e      	RCALL _HCSR04Trigger
                 ; 0000 053D         pulseWidth = GetPulseWidth(); // Measure echo pulse
000d1c dfa4      	RCALL _GetPulseWidth
000d1d 018f      	MOVW R16,R30
                 ; 0000 053E 
                 ; 0000 053F         if (pulseWidth == US_ERROR)
000d1e efef      	LDI  R30,LOW(65535)
000d1f efff      	LDI  R31,HIGH(65535)
000d20 17e0      	CP   R30,R16
000d21 07f1      	CPC  R31,R17
000d22 f429      	BRNE _0x1A2
                 ; 0000 0540         {
                 ; 0000 0541             lcdCommand(0x01);
000d23 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0542             lcd_gotoxy(1, 1);
                 ; 0000 0543             lcd_print("Error"); // Display error message
                +
000d25 ebaf     +LDI R26 , LOW ( _0x19E + ( 11 ) )
000d26 e0b7     +LDI R27 , HIGH ( _0x19E + ( 11 ) )
                 	__POINTW2MN _0x19E,11
000d27 c05c      	RJMP _0x1C1
                 ; 0000 0544         }
                 ; 0000 0545         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x1A2:
000d28 efee      	LDI  R30,LOW(65534)
000d29 efff      	LDI  R31,HIGH(65534)
000d2a 17e0      	CP   R30,R16
000d2b 07f1      	CPC  R31,R17
000d2c f429      	BRNE _0x1A4
                 ; 0000 0546         {
                 ; 0000 0547             lcdCommand(0x01);
000d2d 940e 1063 	CALL SUBOPT_0x0
                 ; 0000 0548             lcd_gotoxy(1, 1);
                 ; 0000 0549             lcd_print("No Obstacle"); // Display no obstacle message
                +
000d2f eca5     +LDI R26 , LOW ( _0x19E + ( 17 ) )
000d30 e0b7     +LDI R27 , HIGH ( _0x19E + ( 17 ) )
                 	__POINTW2MN _0x19E,17
000d31 c052      	RJMP _0x1C1
                 ; 0000 054A         }
                 ; 0000 054B         else
                 _0x1A4:
                 ; 0000 054C         {
                 ; 0000 054D             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
000d32 01f8      	MOVW R30,R16
000d33 2766      	CLR  R22
000d34 2777      	CLR  R23
000d35 940e 12f2 	CALL __CDF1
                +
000d37 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000d38 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000d39 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000d3a e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000d3b 940e 1375 	CALL __MULF12
000d3d 01df      	MOVW R26,R30
000d3e 01cb      	MOVW R24,R22
                +
000d3f e0e0     +LDI R30 , LOW ( 0x40000000 )
000d40 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000d41 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000d42 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000d43 940e 13c3 	CALL __DIVF21
                +
000d45 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000d46 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000d47 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000d48 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000d49 940e 1325 	CALL __ADDF12
000d4b 940e 12bb 	CALL __CFD1
000d4d 019f      	MOVW R18,R30
                 ; 0000 054E 
                 ; 0000 054F             if (distance != previous_distance)
                +
000d4e 1742     +CP R20 , R18
000d4f 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000d50 f081      	BREQ _0x1A6
                 ; 0000 0550             {
                 ; 0000 0551                 previous_distance = distance;
000d51 01a9      	MOVW R20,R18
                 ; 0000 0552                 // Display distance on LCD
                 ; 0000 0553                 itoa(distance, numberString); // Convert distance to string
000d52 933a      	ST   -Y,R19
000d53 932a      	ST   -Y,R18
000d54 01de      	MOVW R26,R28
000d55 9618      	ADIW R26,8
000d56 940e 0e1c 	CALL _itoa
                 ; 0000 0554                 lcd_gotoxy(11, 1);
000d58 e0eb      	LDI  R30,LOW(11)
000d59 940e 115d 	CALL SUBOPT_0x22
                 ; 0000 0555                 lcd_print(numberString);
000d5b 01de      	MOVW R26,R28
000d5c 9616      	ADIW R26,6
000d5d ddf0      	RCALL _lcd_print
                 ; 0000 0556                 lcd_print(" cm ");
                +
000d5e eda1     +LDI R26 , LOW ( _0x19E + ( 29 ) )
000d5f e0b7     +LDI R27 , HIGH ( _0x19E + ( 29 ) )
                 	__POINTW2MN _0x19E,29
000d60 dded      	RCALL _lcd_print
                 ; 0000 0557             }
                 ; 0000 0558             // Counting logic based on distance
                 ; 0000 0559             if (distance < 6)
                 _0x1A6:
                +
000d61 3026     +CPI R18 , LOW ( 6 )
000d62 e0e0     +LDI R30 , HIGH ( 6 )
000d63 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000d64 f40c      	BRGE _0x1A7
                 ; 0000 055A             {
                 ; 0000 055B                 US_count++; // Increment count if distance is below threshold
000d65 9473      	INC  R7
                 ; 0000 055C             }
                 ; 0000 055D 
                 ; 0000 055E             // Update count on LCD only if it changes
                 ; 0000 055F             if (US_count != previous_count)
                 _0x1A7:
000d66 91e0 0830 	LDS  R30,_previous_count_S0000015000
000d68 91f0 0831 	LDS  R31,_previous_count_S0000015000+1
000d6a 2da7      	MOV  R26,R7
000d6b e0b0      	LDI  R27,0
000d6c 17ea      	CP   R30,R26
000d6d 07fb      	CPC  R31,R27
000d6e f0b1      	BREQ _0x1A8
                 ; 0000 0560             {
                 ; 0000 0561                 previous_count = US_count;
000d6f 2de7      	MOV  R30,R7
000d70 e0f0      	LDI  R31,0
000d71 93e0 0830 	STS  _previous_count_S0000015000,R30
000d73 93f0 0831 	STS  _previous_count_S0000015000+1,R31
                 ; 0000 0562                 lcd_gotoxy(1, 2); // Move to second line
000d75 940e 112e 	CALL SUBOPT_0x1C
                 ; 0000 0563                 itoa(US_count, numberString);
000d77 2de7      	MOV  R30,R7
000d78 e0f0      	LDI  R31,0
000d79 93fa      	ST   -Y,R31
000d7a 93ea      	ST   -Y,R30
000d7b 01de      	MOVW R26,R28
000d7c 9618      	ADIW R26,8
000d7d 940e 0e1c 	CALL _itoa
                 ; 0000 0564                 lcd_print("Count: ");
                +
000d7f eda6     +LDI R26 , LOW ( _0x19E + ( 34 ) )
000d80 e0b7     +LDI R27 , HIGH ( _0x19E + ( 34 ) )
                 	__POINTW2MN _0x19E,34
000d81 ddcc      	RCALL _lcd_print
                 ; 0000 0565                 lcd_print(numberString);
000d82 01de      	MOVW R26,R28
000d83 9616      	ADIW R26,6
                 _0x1C1:
000d84 ddc9      	RCALL _lcd_print
                 ; 0000 0566             }
                 ; 0000 0567         }
                 _0x1A8:
                 ; 0000 0568         delay_ms(500);
000d85 efa4      	LDI  R26,LOW(500)
000d86 e0b1      	LDI  R27,HIGH(500)
000d87 940e 1282 	CALL _delay_ms
                 ; 0000 0569     }
000d89 cf8d      	RJMP _0x19F
                 _0x1A1:
                 ; 0000 056A }
000d8a 940e 146f 	CALL __LOADLOCR6
000d8c 9666      	ADIW R28,22
000d8d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x19E:
0007b4           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 056D {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 056E     unsigned int hash = 0;
                 ; 0000 056F     while (*str)
000d8e 93ba      	ST   -Y,R27
000d8f 93aa      	ST   -Y,R26
000d90 931a      	ST   -Y,R17
000d91 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000d92 e000     +LDI R16 , LOW ( 0 )
000d93 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1A9:
000d94 81aa      	LDD  R26,Y+2
000d95 81bb      	LDD  R27,Y+2+1
000d96 91ec      	LD   R30,X
000d97 30e0      	CPI  R30,0
000d98 f099      	BREQ _0x1AB
                 ; 0000 0570     {
                 ; 0000 0571         hash = (hash * 31) + *str; // A basic hash formula
                +
000d99 e1af     +LDI R26 , 31
000d9a 9fa0     +MUL R26 , R16
000d9b 01f0     +MOVW R30 , R0
000d9c 9fa1     +MUL R26 , R17
000d9d 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000d9e 010f      	MOVW R0,R30
000d9f 81aa      	LDD  R26,Y+2
000da0 81bb      	LDD  R27,Y+2+1
000da1 91ec      	LD   R30,X
000da2 e0f0      	LDI  R31,0
000da3 0de0      	ADD  R30,R0
000da4 1df1      	ADC  R31,R1
000da5 018f      	MOVW R16,R30
                 ; 0000 0572         str++;
000da6 81ea      	LDD  R30,Y+2
000da7 81fb      	LDD  R31,Y+2+1
000da8 9631      	ADIW R30,1
000da9 83ea      	STD  Y+2,R30
000daa 83fb      	STD  Y+2+1,R31
                 ; 0000 0573     }
000dab cfe8      	RJMP _0x1A9
                 _0x1AB:
                 ; 0000 0574     return hash;
000dac 01f8      	MOVW R30,R16
000dad 8119      	LDD  R17,Y+1
000dae 8108      	LDD  R16,Y+0
                 _0x20C0007:
000daf 9624      	ADIW R28,4
000db0 9508      	RET
                 ; 0000 0575 }
                 ; .FEND
                 ;
                 ;void I2C_init()
                 ; 0000 0578 {
                 _I2C_init:
                 ; .FSTART _I2C_init
                 ; 0000 0579     TWSR = 0x00;
000db1 e0e0      	LDI  R30,LOW(0)
000db2 b9e1      	OUT  0x1,R30
                 ; 0000 057A     TWBR = 0x47;
000db3 e4e7      	LDI  R30,LOW(71)
000db4 b9e0      	OUT  0x0,R30
                 ; 0000 057B     TWCR = 0x04;
000db5 e0e4      	LDI  R30,LOW(4)
000db6 bfe6      	OUT  0x36,R30
                 ; 0000 057C }
000db7 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_start()
                 ; 0000 057F {
                 _I2C_start:
                 ; .FSTART _I2C_start
                 ; 0000 0580     TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
000db8 eae4      	LDI  R30,LOW(164)
000db9 bfe6      	OUT  0x36,R30
                 ; 0000 0581     while(!(TWCR & (1 << TWINT)));
                 _0x1AC:
000dba b7e6      	IN   R30,0x36
000dbb 78e0      	ANDI R30,LOW(0x80)
000dbc f3e9      	BREQ _0x1AC
                 ; 0000 0582 }
000dbd 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_write(unsigned char data)
                 ; 0000 0585 {
                 _I2C_write:
                 ; .FSTART _I2C_write
                 ; 0000 0586     TWDR = data;
000dbe 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000dbf 81e8      	LD   R30,Y
000dc0 b9e3      	OUT  0x3,R30
                 ; 0000 0587     TWCR = (1 << TWINT) | (1 << TWEN);
000dc1 e8e4      	LDI  R30,LOW(132)
000dc2 bfe6      	OUT  0x36,R30
                 ; 0000 0588     while(!(TWCR & (1 << TWINT)));
                 _0x1AF:
000dc3 b7e6      	IN   R30,0x36
000dc4 78e0      	ANDI R30,LOW(0x80)
000dc5 f3e9      	BREQ _0x1AF
                 ; 0000 0589 }
000dc6 c00c      	RJMP _0x20C0006
                 ; .FEND
                 ;
                 ;unsigned char I2C_read(unsigned char ackVal)
                 ; 0000 058C {
                 _I2C_read:
                 ; .FSTART _I2C_read
                 ; 0000 058D     TWCR = (1 << TWINT) | (1 << TWEN) | (ackVal << TWEA);
000dc7 93aa      	ST   -Y,R26
                 ;	ackVal -> Y+0
000dc8 81e8      	LD   R30,Y
000dc9 95e2      	SWAP R30
000dca 7fe0      	ANDI R30,0xF0
000dcb 0fee      	LSL  R30
000dcc 0fee      	LSL  R30
000dcd 68e4      	ORI  R30,LOW(0x84)
000dce bfe6      	OUT  0x36,R30
                 ; 0000 058E     while(!(TWCR & (1 << TWINT)));
                 _0x1B2:
000dcf b7e6      	IN   R30,0x36
000dd0 78e0      	ANDI R30,LOW(0x80)
000dd1 f3e9      	BREQ _0x1B2
                 ; 0000 058F     return TWDR;
000dd2 b1e3      	IN   R30,0x3
                 _0x20C0006:
000dd3 9621      	ADIW R28,1
000dd4 9508      	RET
                 ; 0000 0590 }
                 ; .FEND
                 ;
                 ;void I2C_stop()
                 ; 0000 0593 {
                 _I2C_stop:
                 ; .FSTART _I2C_stop
                 ; 0000 0594     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
000dd5 e9e4      	LDI  R30,LOW(148)
000dd6 bfe6      	OUT  0x36,R30
                 ; 0000 0595     while(TWCR & (1 << TWSTO));
                 _0x1B5:
000dd7 b7e6      	IN   R30,0x36
000dd8 fde4      	SBRC R30,4
000dd9 cffd      	RJMP _0x1B5
                 ; 0000 0596 }
000dda 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_init()
                 ; 0000 0599 {
                 _rtc_init:
                 ; .FSTART _rtc_init
                 ; 0000 059A     I2C_init();
000ddb dfd5      	RCALL _I2C_init
                 ; 0000 059B     I2C_start();
000ddc 940e 121c 	CALL SUBOPT_0x3D
                 ; 0000 059C     I2C_write(0xD0);
                 ; 0000 059D     I2C_write(0x07);
000dde e0a7      	LDI  R26,LOW(7)
000ddf dfde      	RCALL _I2C_write
                 ; 0000 059E     I2C_write(0x00);
000de0 e0a0      	LDI  R26,LOW(0)
000de1 940e 1221 	CALL SUBOPT_0x3E
                 ; 0000 059F     I2C_stop();
                 ; 0000 05A0 }
000de3 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getTime(unsigned char* hour, unsigned char* minute, unsigned char* second)
                 ; 0000 05A3 {
                 _rtc_getTime:
                 ; .FSTART _rtc_getTime
                 ; 0000 05A4     I2C_start();
000de4 93ba      	ST   -Y,R27
000de5 93aa      	ST   -Y,R26
                 ;	*hour -> Y+4
                 ;	*minute -> Y+2
                 ;	*second -> Y+0
000de6 940e 121c 	CALL SUBOPT_0x3D
                 ; 0000 05A5     I2C_write(0xD0);
                 ; 0000 05A6     I2C_write(0x00);
000de8 e0a0      	LDI  R26,LOW(0)
000de9 940e 1221 	CALL SUBOPT_0x3E
                 ; 0000 05A7     I2C_stop();
                 ; 0000 05A8 
                 ; 0000 05A9     I2C_start();
000deb 940e 1225 	CALL SUBOPT_0x3F
                 ; 0000 05AA     I2C_write(0xD1);
                 ; 0000 05AB     *second = I2C_read(1);
                 ; 0000 05AC     *minute = I2C_read(1);
                 ; 0000 05AD     *hour = I2C_read(0);
000ded e0a0      	LDI  R26,LOW(0)
000dee dfd8      	RCALL _I2C_read
000def 81ac      	LDD  R26,Y+4
000df0 81bd      	LDD  R27,Y+4+1
000df1 93ec      	ST   X,R30
                 ; 0000 05AE     I2C_stop();
000df2 dfe2      	RCALL _I2C_stop
                 ; 0000 05AF }
                 _0x20C0005:
000df3 9626      	ADIW R28,6
000df4 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getDate(unsigned char* year, unsigned char* month, unsigned char* date, unsigned char* day)
                 ; 0000 05B2 {
                 _rtc_getDate:
                 ; .FSTART _rtc_getDate
                 ; 0000 05B3     I2C_start();
000df5 93ba      	ST   -Y,R27
000df6 93aa      	ST   -Y,R26
                 ;	*year -> Y+6
                 ;	*month -> Y+4
                 ;	*date -> Y+2
                 ;	*day -> Y+0
000df7 940e 121c 	CALL SUBOPT_0x3D
                 ; 0000 05B4     I2C_write(0xD0);
                 ; 0000 05B5     I2C_write(0x03);
000df9 e0a3      	LDI  R26,LOW(3)
000dfa 940e 1221 	CALL SUBOPT_0x3E
                 ; 0000 05B6     I2C_stop();
                 ; 0000 05B7 
                 ; 0000 05B8     I2C_start();
000dfc 940e 1225 	CALL SUBOPT_0x3F
                 ; 0000 05B9     I2C_write(0xD1);
                 ; 0000 05BA     *day = I2C_read(1);
                 ; 0000 05BB     *date = I2C_read(1);
                 ; 0000 05BC     *month = I2C_read(1);
000dfe e0a1      	LDI  R26,LOW(1)
000dff dfc7      	RCALL _I2C_read
000e00 81ac      	LDD  R26,Y+4
000e01 81bd      	LDD  R27,Y+4+1
000e02 93ec      	ST   X,R30
                 ; 0000 05BD     *year = I2C_read(0);
000e03 e0a0      	LDI  R26,LOW(0)
000e04 dfc2      	RCALL _I2C_read
000e05 81ae      	LDD  R26,Y+6
000e06 81bf      	LDD  R27,Y+6+1
000e07 93ec      	ST   X,R30
                 ; 0000 05BE     I2C_stop();
000e08 dfcc      	RCALL _I2C_stop
                 ; 0000 05BF }
                 _0x20C0004:
000e09 9628      	ADIW R28,8
000e0a 9508      	RET
                 ; .FEND
                 ;
                 ;void Timer2_Init()
                 ; 0000 05C2 {
                 _Timer2_Init:
                 ; .FSTART _Timer2_Init
                 ; 0000 05C3     //Disable timer2 interrupts
                 ; 0000 05C4     TIMSK = 0;
000e0b e0e0      	LDI  R30,LOW(0)
000e0c bfe9      	OUT  0x39,R30
                 ; 0000 05C5     //Enable asynchronous mode
                 ; 0000 05C6     ASSR = (1 << AS2);
000e0d e0e8      	LDI  R30,LOW(8)
000e0e bde2      	OUT  0x22,R30
                 ; 0000 05C7     //set initial counter value
                 ; 0000 05C8     TCNT2 = 0;
000e0f e0e0      	LDI  R30,LOW(0)
000e10 bde4      	OUT  0x24,R30
                 ; 0000 05C9     //set prescaller 128
                 ; 0000 05CA     TCCR2 = 0;
000e11 bde5      	OUT  0x25,R30
                 ; 0000 05CB     TCCR2 |= (1 << CS22) | ( 1 << CS00);
000e12 b5e5      	IN   R30,0x25
000e13 60e5      	ORI  R30,LOW(0x5)
000e14 bde5      	OUT  0x25,R30
                 ; 0000 05CC     //wait for registers update
                 ; 0000 05CD     while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB)));
                 _0x1B8:
000e15 b5e2      	IN   R30,0x22
000e16 70e5      	ANDI R30,LOW(0x5)
000e17 f7e9      	BRNE _0x1B8
                 ; 0000 05CE     //clear interrupt flags
                 ; 0000 05CF     TIFR = (1 << TOV2);
000e18 e4e0      	LDI  R30,LOW(64)
000e19 bfe8      	OUT  0x38,R30
                 ; 0000 05D0     //enable TOV2 interrupt
                 ; 0000 05D1     TIMSK  = (1 << TOIE2);
000e1a bfe9      	OUT  0x39,R30
                 ; 0000 05D2 }
000e1b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000e1c 93ba      	ST   -Y,R27
000e1d 93aa      	ST   -Y,R26
000e1e 91a9          ld   r26,y+
000e1f 91b9          ld   r27,y+
000e20 91e9          ld   r30,y+
000e21 91f9          ld   r31,y+
000e22 9630          adiw r30,0
000e23 f42a          brpl __itoa0
000e24 95e0          com  r30
000e25 95f0          com  r31
000e26 9631          adiw r30,1
000e27 e26d          ldi  r22,'-'
000e28 936d          st   x+,r22
                 __itoa0:
000e29 94e8          clt
000e2a e180          ldi  r24,low(10000)
000e2b e297          ldi  r25,high(10000)
000e2c d00d          rcall __itoa1
000e2d ee88          ldi  r24,low(1000)
000e2e e093          ldi  r25,high(1000)
000e2f d00a          rcall __itoa1
000e30 e684          ldi  r24,100
000e31 2799          clr  r25
000e32 d007          rcall __itoa1
000e33 e08a          ldi  r24,10
000e34 d005          rcall __itoa1
000e35 2f6e          mov  r22,r30
000e36 d010          rcall __itoa5
000e37 2766          clr  r22
000e38 936c          st   x,r22
000e39 9508          ret
                 
                 __itoa1:
000e3a 2766          clr	 r22
                 __itoa2:
000e3b 17e8          cp   r30,r24
000e3c 07f9          cpc  r31,r25
000e3d f020          brlo __itoa3
000e3e 9563          inc  r22
000e3f 1be8          sub  r30,r24
000e40 0bf9          sbc  r31,r25
000e41 f7c9          brne __itoa2
                 __itoa3:
000e42 2366          tst  r22
000e43 f411          brne __itoa4
000e44 f016          brts __itoa5
000e45 9508          ret
                 __itoa4:
000e46 9468          set
                 __itoa5:
000e47 5d60          subi r22,-0x30
000e48 936d          st   x+,r22
000e49 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000e4a 93ba      	ST   -Y,R27
000e4b 93aa      	ST   -Y,R26
000e4c 81b9          ldd  r27,y+1
000e4d 81a8          ld   r26,y
000e4e 9610          adiw r26,0
000e4f f031          breq memset1
000e50 81fc          ldd  r31,y+4
000e51 81eb          ldd  r30,y+3
000e52 816a          ldd  r22,y+2
                 memset0:
000e53 9361          st   z+,r22
000e54 9711          sbiw r26,1
000e55 f7e9          brne memset0
                 memset1:
000e56 81eb          ldd  r30,y+3
000e57 81fc          ldd  r31,y+4
000e58 940c 0eeb 	JMP  _0x20C0003
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
000e5a 93ba      	ST   -Y,R27
000e5b 93aa      	ST   -Y,R26
000e5c 91e9          ld   r30,y+
000e5d 91f9          ld   r31,y+
000e5e 91a9          ld   r26,y+
000e5f 91b9          ld   r27,y+
                 strcmp0:
000e60 916d          ld   r22,x+
000e61 9171          ld   r23,z+
000e62 1767          cp   r22,r23
000e63 f421          brne strcmp1
000e64 2366          tst  r22
000e65 f7d1          brne strcmp0
                 strcmp3:
000e66 27ee          clr  r30
000e67 9508          ret
                 strcmp1:
000e68 1b67          sub  r22,r23
000e69 f3e1          breq strcmp3
000e6a e0e1          ldi  r30,1
000e6b f408          brcc strcmp2
000e6c 50e2          subi r30,2
                 strcmp2:
000e6d 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
000e6e 93ba      	ST   -Y,R27
000e6f 93aa      	ST   -Y,R26
000e70 91e9          ld   r30,y+
000e71 91f9          ld   r31,y+
000e72 91a9          ld   r26,y+
000e73 91b9          ld   r27,y+
000e74 01cd          movw r24,r26
                 strcpy0:
000e75 9161          ld   r22,z+
000e76 936d          st   x+,r22
000e77 2366          tst  r22
000e78 f7e1          brne strcpy0
000e79 01fc          movw r30,r24
000e7a 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000e7b 93ba      	ST   -Y,R27
000e7c 93aa      	ST   -Y,R26
000e7d 91a9          ld   r26,y+
000e7e 91b9          ld   r27,y+
000e7f 27ee          clr  r30
000e80 27ff          clr  r31
                 strlen0:
000e81 916d          ld   r22,x+
000e82 2366          tst  r22
000e83 f011          breq strlen1
000e84 9631          adiw r30,1
000e85 cffb          rjmp strlen0
                 strlen1:
000e86 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000e87 93ba      	ST   -Y,R27
000e88 93aa      	ST   -Y,R26
000e89 27aa          clr  r26
000e8a 27bb          clr  r27
000e8b 91e9          ld   r30,y+
000e8c 91f9          ld   r31,y+
                 strlenf0:
000e8d 9005      	lpm  r0,z+
000e8e 2000          tst  r0
000e8f f011          breq strlenf1
000e90 9611          adiw r26,1
000e91 cffb          rjmp strlenf0
                 strlenf1:
000e92 01fd          movw r30,r26
000e93 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000e94 93aa      	ST   -Y,R26
000e95 2766          clr  r22
000e96 2777          clr  r23
000e97 9189          ld   r24,y+
000e98 91e9          ld   r30,y+
000e99 91f9          ld   r31,y+
000e9a 91a9          ld   r26,y+
000e9b 91b9          ld   r27,y+
                 strncmp0:
000e9c 2388          tst  r24
000e9d f049          breq strncmp1
000e9e 958a          dec  r24
000e9f 916d          ld   r22,x+
000ea0 9171          ld   r23,z+
000ea1 1767          cp   r22,r23
000ea2 f421          brne strncmp1
000ea3 2366          tst  r22
000ea4 f7b9          brne strncmp0
                 strncmp3:
000ea5 27ee          clr  r30
000ea6 9508          ret
                 strncmp1:
000ea7 1b67          sub  r22,r23
000ea8 f3e1          breq strncmp3
000ea9 e0e1          ldi  r30,1
000eaa f408          brcc strncmp2
000eab 50e2          subi r30,2
                 strncmp2:
000eac 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000ead 93ba      	ST   -Y,R27
000eae 93aa      	ST   -Y,R26
000eaf 931a      	ST   -Y,R17
000eb0 930a      	ST   -Y,R16
000eb1 81aa      	LDD  R26,Y+2
000eb2 81bb      	LDD  R27,Y+2+1
000eb3 9612      	ADIW R26,2
000eb4 940e 144c 	CALL __GETW1P
000eb6 9730      	SBIW R30,0
000eb7 f159      	BREQ _0x2060010
000eb8 81aa      	LDD  R26,Y+2
000eb9 81bb      	LDD  R27,Y+2+1
000eba 9614      	ADIW R26,4
000ebb 940e 144c 	CALL __GETW1P
000ebd 018f      	MOVW R16,R30
000ebe 9730      	SBIW R30,0
000ebf f061      	BREQ _0x2060012
                +
000ec0 3002     +CPI R16 , LOW ( 2 )
000ec1 e0e0     +LDI R30 , HIGH ( 2 )
000ec2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000ec3 f098      	BRLO _0x2060013
000ec4 01f8      	MOVW R30,R16
000ec5 9731      	SBIW R30,1
000ec6 018f      	MOVW R16,R30
                +
000ec7 81aa     +LDD R26 , Y + 2
000ec8 81bb     +LDD R27 , Y + 2 + 1
000ec9 9614     +ADIW R26 , 4
000eca 93ed     +ST X + , R30
000ecb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000ecc 81aa      	LDD  R26,Y+2
000ecd 81bb      	LDD  R27,Y+2+1
000ece 9612      	ADIW R26,2
000ecf 91ed      	LD   R30,X+
000ed0 91fd      	LD   R31,X+
000ed1 9631      	ADIW R30,1
000ed2 93fe      	ST   -X,R31
000ed3 93ee      	ST   -X,R30
000ed4 9731      	SBIW R30,1
000ed5 81ac      	LDD  R26,Y+4
000ed6 83a0      	STD  Z+0,R26
                 _0x2060013:
000ed7 81aa      	LDD  R26,Y+2
000ed8 81bb      	LDD  R27,Y+2+1
000ed9 940e 144c 	CALL __GETW1P
000edb 23ff      	TST  R31
000edc f02a      	BRMI _0x2060014
000edd 91ed      	LD   R30,X+
000ede 91fd      	LD   R31,X+
000edf 9631      	ADIW R30,1
000ee0 93fe      	ST   -X,R31
000ee1 93ee      	ST   -X,R30
                 _0x2060014:
000ee2 c006      	RJMP _0x2060015
                 _0x2060010:
000ee3 81aa      	LDD  R26,Y+2
000ee4 81bb      	LDD  R27,Y+2+1
000ee5 efef      	LDI  R30,LOW(65535)
000ee6 efff      	LDI  R31,HIGH(65535)
000ee7 93ed      	ST   X+,R30
000ee8 93fc      	ST   X,R31
                 _0x2060015:
000ee9 8119      	LDD  R17,Y+1
000eea 8108      	LDD  R16,Y+0
                 _0x20C0003:
000eeb 9625      	ADIW R28,5
000eec 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000eed 93ba      	ST   -Y,R27
000eee 93aa      	ST   -Y,R26
000eef 9726      	SBIW R28,6
000ef0 940e 1468 	CALL __SAVELOCR6
000ef2 e010      	LDI  R17,0
000ef3 85ac      	LDD  R26,Y+12
000ef4 85bd      	LDD  R27,Y+12+1
000ef5 e0e0      	LDI  R30,LOW(0)
000ef6 e0f0      	LDI  R31,HIGH(0)
000ef7 93ed      	ST   X+,R30
000ef8 93fc      	ST   X,R31
                 _0x2060016:
000ef9 89ea      	LDD  R30,Y+18
000efa 89fb      	LDD  R31,Y+18+1
000efb 9631      	ADIW R30,1
000efc 8bea      	STD  Y+18,R30
000efd 8bfb      	STD  Y+18+1,R31
000efe 9731      	SBIW R30,1
000eff 91e4      	LPM  R30,Z
000f00 2f2e      	MOV  R18,R30
000f01 30e0      	CPI  R30,0
000f02 f409      	BRNE PC+2
000f03 c115      	RJMP _0x2060018
000f04 2fe1      	MOV  R30,R17
000f05 30e0      	CPI  R30,0
000f06 f439      	BRNE _0x206001C
000f07 3225      	CPI  R18,37
000f08 f411      	BRNE _0x206001D
000f09 e011      	LDI  R17,LOW(1)
000f0a c002      	RJMP _0x206001E
                 _0x206001D:
000f0b 940e 1237 	CALL SUBOPT_0x40
                 _0x206001E:
000f0d c10a      	RJMP _0x206001B
                 _0x206001C:
000f0e 30e1      	CPI  R30,LOW(0x1)
000f0f f4a9      	BRNE _0x206001F
000f10 3225      	CPI  R18,37
000f11 f419      	BRNE _0x2060020
000f12 940e 1237 	CALL SUBOPT_0x40
000f14 c102      	RJMP _0x20600CC
                 _0x2060020:
000f15 e012      	LDI  R17,LOW(2)
000f16 e040      	LDI  R20,LOW(0)
000f17 e000      	LDI  R16,LOW(0)
000f18 322d      	CPI  R18,45
000f19 f411      	BRNE _0x2060021
000f1a e001      	LDI  R16,LOW(1)
000f1b c0fc      	RJMP _0x206001B
                 _0x2060021:
000f1c 322b      	CPI  R18,43
000f1d f411      	BRNE _0x2060022
000f1e e24b      	LDI  R20,LOW(43)
000f1f c0f8      	RJMP _0x206001B
                 _0x2060022:
000f20 3220      	CPI  R18,32
000f21 f411      	BRNE _0x2060023
000f22 e240      	LDI  R20,LOW(32)
000f23 c0f4      	RJMP _0x206001B
                 _0x2060023:
000f24 c002      	RJMP _0x2060024
                 _0x206001F:
000f25 30e2      	CPI  R30,LOW(0x2)
000f26 f439      	BRNE _0x2060025
                 _0x2060024:
000f27 e050      	LDI  R21,LOW(0)
000f28 e013      	LDI  R17,LOW(3)
000f29 3320      	CPI  R18,48
000f2a f411      	BRNE _0x2060026
000f2b 6800      	ORI  R16,LOW(128)
000f2c c0eb      	RJMP _0x206001B
                 _0x2060026:
000f2d c003      	RJMP _0x2060027
                 _0x2060025:
000f2e 30e3      	CPI  R30,LOW(0x3)
000f2f f009      	BREQ PC+2
000f30 c0e7      	RJMP _0x206001B
                 _0x2060027:
000f31 3320      	CPI  R18,48
000f32 f010      	BRLO _0x206002A
000f33 332a      	CPI  R18,58
000f34 f008      	BRLO _0x206002B
                 _0x206002A:
000f35 c007      	RJMP _0x2060029
                 _0x206002B:
000f36 e0aa      	LDI  R26,LOW(10)
000f37 9f5a      	MUL  R21,R26
000f38 2d50      	MOV  R21,R0
000f39 2fe2      	MOV  R30,R18
000f3a 53e0      	SUBI R30,LOW(48)
000f3b 0f5e      	ADD  R21,R30
000f3c c0db      	RJMP _0x206001B
                 _0x2060029:
000f3d 2fe2      	MOV  R30,R18
000f3e 36e3      	CPI  R30,LOW(0x63)
000f3f f449      	BRNE _0x206002F
000f40 940e 123e 	CALL SUBOPT_0x41
000f42 89e8      	LDD  R30,Y+16
000f43 89f9      	LDD  R31,Y+16+1
000f44 81a4      	LDD  R26,Z+4
000f45 93aa      	ST   -Y,R26
000f46 940e 1244 	CALL SUBOPT_0x42
000f48 c0ce      	RJMP _0x2060030
                 _0x206002F:
000f49 37e3      	CPI  R30,LOW(0x73)
000f4a f441      	BRNE _0x2060032
000f4b 940e 123e 	CALL SUBOPT_0x41
000f4d 940e 124a 	CALL SUBOPT_0x43
000f4f 940e 0e7b 	CALL _strlen
000f51 2f1e      	MOV  R17,R30
000f52 c00a      	RJMP _0x2060033
                 _0x2060032:
000f53 37e0      	CPI  R30,LOW(0x70)
000f54 f461      	BRNE _0x2060035
000f55 940e 123e 	CALL SUBOPT_0x41
000f57 940e 124a 	CALL SUBOPT_0x43
000f59 940e 0e87 	CALL _strlenf
000f5b 2f1e      	MOV  R17,R30
000f5c 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000f5d 6002      	ORI  R16,LOW(2)
000f5e 770f      	ANDI R16,LOW(127)
000f5f e030      	LDI  R19,LOW(0)
000f60 c034      	RJMP _0x2060036
                 _0x2060035:
000f61 36e4      	CPI  R30,LOW(0x64)
000f62 f011      	BREQ _0x2060039
000f63 36e9      	CPI  R30,LOW(0x69)
000f64 f411      	BRNE _0x206003A
                 _0x2060039:
000f65 6004      	ORI  R16,LOW(4)
000f66 c002      	RJMP _0x206003B
                 _0x206003A:
000f67 37e5      	CPI  R30,LOW(0x75)
000f68 f431      	BRNE _0x206003C
                 _0x206003B:
000f69 e5e4      	LDI  R30,LOW(_tbl10_G103*2)
000f6a e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
000f6b 83ee      	STD  Y+6,R30
000f6c 83ff      	STD  Y+6+1,R31
000f6d e015      	LDI  R17,LOW(5)
000f6e c00c      	RJMP _0x206003D
                 _0x206003C:
000f6f 35e8      	CPI  R30,LOW(0x58)
000f70 f411      	BRNE _0x206003F
000f71 6008      	ORI  R16,LOW(8)
000f72 c003      	RJMP _0x2060040
                 _0x206003F:
000f73 37e8      	CPI  R30,LOW(0x78)
000f74 f009      	BREQ PC+2
000f75 c0a1      	RJMP _0x2060071
                 _0x2060040:
000f76 e5ee      	LDI  R30,LOW(_tbl16_G103*2)
000f77 e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
000f78 83ee      	STD  Y+6,R30
000f79 83ff      	STD  Y+6+1,R31
000f7a e014      	LDI  R17,LOW(4)
                 _0x206003D:
000f7b ff02      	SBRS R16,2
000f7c c014      	RJMP _0x2060042
000f7d 940e 123e 	CALL SUBOPT_0x41
000f7f 940e 1254 	CALL SUBOPT_0x44
000f81 85ab      	LDD  R26,Y+11
000f82 23aa      	TST  R26
000f83 f43a      	BRPL _0x2060043
000f84 85ea      	LDD  R30,Y+10
000f85 85fb      	LDD  R31,Y+10+1
000f86 940e 140c 	CALL __ANEGW1
000f88 87ea      	STD  Y+10,R30
000f89 87fb      	STD  Y+10+1,R31
000f8a e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000f8b 3040      	CPI  R20,0
000f8c f011      	BREQ _0x2060044
000f8d 5f1f      	SUBI R17,-LOW(1)
000f8e c001      	RJMP _0x2060045
                 _0x2060044:
000f8f 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000f90 c004      	RJMP _0x2060046
                 _0x2060042:
000f91 940e 123e 	CALL SUBOPT_0x41
000f93 940e 1254 	CALL SUBOPT_0x44
                 _0x2060046:
                 _0x2060036:
000f95 fd00      	SBRC R16,0
000f96 c011      	RJMP _0x2060047
                 _0x2060048:
000f97 1715      	CP   R17,R21
000f98 f478      	BRSH _0x206004A
000f99 ff07      	SBRS R16,7
000f9a c008      	RJMP _0x206004B
000f9b ff02      	SBRS R16,2
000f9c c004      	RJMP _0x206004C
000f9d 7f0b      	ANDI R16,LOW(251)
000f9e 2f24      	MOV  R18,R20
000f9f 5011      	SUBI R17,LOW(1)
000fa0 c001      	RJMP _0x206004D
                 _0x206004C:
000fa1 e320      	LDI  R18,LOW(48)
                 _0x206004D:
000fa2 c001      	RJMP _0x206004E
                 _0x206004B:
000fa3 e220      	LDI  R18,LOW(32)
                 _0x206004E:
000fa4 940e 1237 	CALL SUBOPT_0x40
000fa6 5051      	SUBI R21,LOW(1)
000fa7 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000fa8 2f31      	MOV  R19,R17
000fa9 ff01      	SBRS R16,1
000faa c017      	RJMP _0x206004F
                 _0x2060050:
000fab 3030      	CPI  R19,0
000fac f0a1      	BREQ _0x2060052
000fad ff03      	SBRS R16,3
000fae c006      	RJMP _0x2060053
000faf 81ee      	LDD  R30,Y+6
000fb0 81ff      	LDD  R31,Y+6+1
000fb1 9125      	LPM  R18,Z+
000fb2 83ee      	STD  Y+6,R30
000fb3 83ff      	STD  Y+6+1,R31
000fb4 c005      	RJMP _0x2060054
                 _0x2060053:
000fb5 81ae      	LDD  R26,Y+6
000fb6 81bf      	LDD  R27,Y+6+1
000fb7 912d      	LD   R18,X+
000fb8 83ae      	STD  Y+6,R26
000fb9 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000fba 940e 1237 	CALL SUBOPT_0x40
000fbc 3050      	CPI  R21,0
000fbd f009      	BREQ _0x2060055
000fbe 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000fbf 5031      	SUBI R19,LOW(1)
000fc0 cfea      	RJMP _0x2060050
                 _0x2060052:
000fc1 c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000fc2 e320      	LDI  R18,LOW(48)
000fc3 81ee      	LDD  R30,Y+6
000fc4 81ff      	LDD  R31,Y+6+1
000fc5 940e 1450 	CALL __GETW1PF
000fc7 87e8      	STD  Y+8,R30
000fc8 87f9      	STD  Y+8+1,R31
000fc9 81ee      	LDD  R30,Y+6
000fca 81ff      	LDD  R31,Y+6+1
000fcb 9632      	ADIW R30,2
000fcc 83ee      	STD  Y+6,R30
000fcd 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000fce 85e8      	LDD  R30,Y+8
000fcf 85f9      	LDD  R31,Y+8+1
000fd0 85aa      	LDD  R26,Y+10
000fd1 85bb      	LDD  R27,Y+10+1
000fd2 17ae      	CP   R26,R30
000fd3 07bf      	CPC  R27,R31
000fd4 f050      	BRLO _0x206005C
000fd5 5f2f      	SUBI R18,-LOW(1)
000fd6 85a8      	LDD  R26,Y+8
000fd7 85b9      	LDD  R27,Y+8+1
000fd8 85ea      	LDD  R30,Y+10
000fd9 85fb      	LDD  R31,Y+10+1
000fda 1bea      	SUB  R30,R26
000fdb 0bfb      	SBC  R31,R27
000fdc 87ea      	STD  Y+10,R30
000fdd 87fb      	STD  Y+10+1,R31
000fde cfef      	RJMP _0x206005A
                 _0x206005C:
000fdf 332a      	CPI  R18,58
000fe0 f028      	BRLO _0x206005D
000fe1 ff03      	SBRS R16,3
000fe2 c002      	RJMP _0x206005E
000fe3 5f29      	SUBI R18,-LOW(7)
000fe4 c001      	RJMP _0x206005F
                 _0x206005E:
000fe5 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000fe6 fd04      	SBRC R16,4
000fe7 c01a      	RJMP _0x2060061
000fe8 3321      	CPI  R18,49
000fe9 f420      	BRSH _0x2060063
000fea 85a8      	LDD  R26,Y+8
000feb 85b9      	LDD  R27,Y+8+1
000fec 9711      	SBIW R26,1
000fed f409      	BRNE _0x2060062
                 _0x2060063:
000fee c009      	RJMP _0x20600CD
                 _0x2060062:
000fef 1753      	CP   R21,R19
000ff0 f010      	BRLO _0x2060067
000ff1 ff00      	SBRS R16,0
000ff2 c001      	RJMP _0x2060068
                 _0x2060067:
000ff3 c013      	RJMP _0x2060066
                 _0x2060068:
000ff4 e220      	LDI  R18,LOW(32)
000ff5 ff07      	SBRS R16,7
000ff6 c00b      	RJMP _0x2060069
000ff7 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000ff8 6100      	ORI  R16,LOW(16)
000ff9 ff02      	SBRS R16,2
000ffa c007      	RJMP _0x206006A
000ffb 7f0b      	ANDI R16,LOW(251)
000ffc 934a      	ST   -Y,R20
000ffd 940e 1244 	CALL SUBOPT_0x42
000fff 3050      	CPI  R21,0
001000 f009      	BREQ _0x206006B
001001 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
001002 940e 1237 	CALL SUBOPT_0x40
001004 3050      	CPI  R21,0
001005 f009      	BREQ _0x206006C
001006 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
001007 5031      	SUBI R19,LOW(1)
001008 85a8      	LDD  R26,Y+8
001009 85b9      	LDD  R27,Y+8+1
00100a 9712      	SBIW R26,2
00100b f008      	BRLO _0x2060059
00100c cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
00100d ff00      	SBRS R16,0
00100e c008      	RJMP _0x206006D
                 _0x206006E:
00100f 3050      	CPI  R21,0
001010 f031      	BREQ _0x2060070
001011 5051      	SUBI R21,LOW(1)
001012 e2e0      	LDI  R30,LOW(32)
001013 93ea      	ST   -Y,R30
001014 940e 1244 	CALL SUBOPT_0x42
001016 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
001017 e010      	LDI  R17,LOW(0)
                 _0x206001B:
001018 cee0      	RJMP _0x2060016
                 _0x2060018:
001019 85ac      	LDD  R26,Y+12
00101a 85bd      	LDD  R27,Y+12+1
00101b 940e 144c 	CALL __GETW1P
00101d 940e 146f 	CALL __LOADLOCR6
00101f 9664      	ADIW R28,20
001020 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
001021 92ff      	PUSH R15
001022 2ef8      	MOV  R15,R24
001023 9726      	SBIW R28,6
001024 940e 146a 	CALL __SAVELOCR4
001026 940e 125c 	CALL SUBOPT_0x45
001028 9730      	SBIW R30,0
001029 f419      	BRNE _0x2060072
00102a efef      	LDI  R30,LOW(65535)
00102b efff      	LDI  R31,HIGH(65535)
00102c c031      	RJMP _0x20C0001
                 _0x2060072:
00102d 01de      	MOVW R26,R28
00102e 9616      	ADIW R26,6
00102f 940e 1408 	CALL __ADDW2R15
001031 018d      	MOVW R16,R26
001032 940e 125c 	CALL SUBOPT_0x45
001034 83ee      	STD  Y+6,R30
001035 83ff      	STD  Y+6+1,R31
001036 e0e0      	LDI  R30,LOW(0)
001037 87e8      	STD  Y+8,R30
001038 87e9      	STD  Y+8+1,R30
001039 940e 1263 	CALL SUBOPT_0x46
00103b c021      	RJMP _0x20C0002
                 ; .FEND
                 _snprintf:
                 ; .FSTART _snprintf
00103c 92ff      	PUSH R15
00103d 2ef8      	MOV  R15,R24
00103e 9726      	SBIW R28,6
00103f 940e 146a 	CALL __SAVELOCR4
                +
001041 e020     +LDI R18 , LOW ( 0 )
001042 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
001043 940e 127b 	CALL SUBOPT_0x47
001045 9730      	SBIW R30,0
001046 f419      	BRNE _0x2060073
001047 efef      	LDI  R30,LOW(65535)
001048 efff      	LDI  R31,HIGH(65535)
001049 c014      	RJMP _0x20C0001
                 _0x2060073:
00104a 940e 125c 	CALL SUBOPT_0x45
00104c 9730      	SBIW R30,0
00104d f079      	BREQ _0x2060074
00104e 01de      	MOVW R26,R28
00104f 9616      	ADIW R26,6
001050 940e 1408 	CALL __ADDW2R15
001052 018d      	MOVW R16,R26
001053 940e 127b 	CALL SUBOPT_0x47
001055 83ee      	STD  Y+6,R30
001056 83ff      	STD  Y+6+1,R31
001057 940e 125c 	CALL SUBOPT_0x45
001059 87e8      	STD  Y+8,R30
00105a 87f9      	STD  Y+8+1,R31
00105b 940e 1263 	CALL SUBOPT_0x46
                 _0x2060074:
                 _0x20C0002:
00105d 01f9      	MOVW R30,R18
                 _0x20C0001:
00105e 940e 1471 	CALL __LOADLOCR4
001060 962a      	ADIW R28,10
001061 90ff      	POP  R15
001062 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
0007de           	.BYTE 0x10
                 _buffer:
0007ee           	.BYTE 0x20
                 _days:
00080e           	.BYTE 0xE
                 _time:
00081c           	.BYTE 0x14
                 _previous_count_S0000015000:
000830           	.BYTE 0x2
                 __seed_G100:
000832           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:219 WORDS
                 SUBOPT_0x0:
001063 e0a1      	LDI  R26,LOW(1)
001064 940e 0b07 	CALL _lcdCommand
001066 e0e1      	LDI  R30,LOW(1)
001067 93ea      	ST   -Y,R30
001068 e0a1      	LDI  R26,LOW(1)
001069 940c 0b37 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x1:
00106b 940e 0b4e 	CALL _lcd_print
00106d e0e1      	LDI  R30,LOW(1)
00106e 93ea      	ST   -Y,R30
00106f e0a2      	LDI  R26,LOW(2)
001070 940c 0b37 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
001072 940e 0b4e 	CALL _lcd_print
001074 eda0      	LDI  R26,LOW(2000)
001075 e0b7      	LDI  R27,HIGH(2000)
001076 940e 1282 	CALL _delay_ms
001078 2455      	CLR  R5
001079 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
00107a e0af      	LDI  R26,LOW(15)
00107b 940e 0b07 	CALL _lcdCommand
                +
00107d e880     +LDI R24 , LOW ( 3200 )
00107e e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
00107f 9701     +SBIW R24 , 1
001080 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
001081 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
001082 e0ac      	LDI  R26,LOW(12)
001083 940e 0b07 	CALL _lcdCommand
                +
001085 e880     +LDI R24 , LOW ( 3200 )
001086 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
001087 9701     +SBIW R24 , 1
001088 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
001089 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:181 WORDS
                 SUBOPT_0x5:
00108a eeee      	LDI  R30,LOW(_buffer)
00108b e0f7      	LDI  R31,HIGH(_buffer)
00108c 93fa      	ST   -Y,R31
00108d 93ea      	ST   -Y,R30
00108e e0e0      	LDI  R30,LOW(0)
00108f 93ea      	ST   -Y,R30
001090 e2a0      	LDI  R26,LOW(32)
001091 e0b0      	LDI  R27,0
001092 940c 0e4a 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
                +
001094 e880     +LDI R24 , LOW ( 3200 )
001095 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
001096 9701     +SBIW R24 , 1
001097 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
001098 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x7:
001099 eeae      	LDI  R26,LOW(_buffer)
00109a e0b7      	LDI  R27,HIGH(_buffer)
00109b 940c 0e7b 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00109d eeee      	LDI  R30,LOW(_buffer)
00109e e0f7      	LDI  R31,HIGH(_buffer)
00109f 93fa      	ST   -Y,R31
0010a0 93ea      	ST   -Y,R30
0010a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0010a2 93fa      	ST   -Y,R31
0010a3 93ea      	ST   -Y,R30
0010a4 e0a2      	LDI  R26,LOW(2)
0010a5 940e 0e94 	CALL _strncmp
0010a7 30e0      	CPI  R30,0
0010a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
0010a9 eda0      	LDI  R26,LOW(2000)
0010aa e0b7      	LDI  R27,HIGH(2000)
0010ab 940e 1282 	CALL _delay_ms
0010ad 9897      	CBI  0x12,7
0010ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0010af 940e 0b4e 	CALL _lcd_print
0010b1 cff7      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0010b2 e0a0      	LDI  R26,LOW(0)
0010b3 e0b0      	LDI  R27,0
0010b4 940e 0c0a 	CALL _read_byte_from_eeprom
0010b6 2f5e      	MOV  R21,R30
0010b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
0010b8 2fe5      	MOV  R30,R21
0010b9 e0f0      	LDI  R31,0
0010ba 9631      	ADIW R30,1
0010bb 940e 1418 	CALL __LSLW4
0010bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0010be 0fe0      	ADD  R30,R16
0010bf 1ff1      	ADC  R31,R17
0010c0 93fa      	ST   -Y,R31
0010c1 93ea      	ST   -Y,R30
0010c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xF:
0010c3 01fe      	MOVW R30,R28
0010c4 9678      	ADIW R30,24
0010c5 93fa      	ST   -Y,R31
0010c6 93ea      	ST   -Y,R30
0010c7 01fe      	MOVW R30,R28
0010c8 967b      	ADIW R30,27
0010c9 93fa      	ST   -Y,R31
0010ca 93ea      	ST   -Y,R30
0010cb 01de      	MOVW R26,R28
0010cc 965e      	ADIW R26,30
0010cd 940e 0de4 	CALL _rtc_getTime
0010cf e1ec      	LDI  R30,LOW(_time)
0010d0 e0f8      	LDI  R31,HIGH(_time)
0010d1 93fa      	ST   -Y,R31
0010d2 93ea      	ST   -Y,R30
0010d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
                +
0010d4 e6e0     +LDI R30 , LOW ( 2 * _0x0 + ( 192 ) )
0010d5 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 192 ) )
                 	__POINTW1FN _0x0,192
0010d6 93fa      	ST   -Y,R31
0010d7 93ea      	ST   -Y,R30
0010d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
0010d9 8dec      	LDD  R30,Y+28
0010da 27ff      	CLR  R31
0010db 2766      	CLR  R22
0010dc 2777      	CLR  R23
0010dd 940e 1463 	CALL __PUTPARD1
0010df a1e9      	LDD  R30,Y+33
0010e0 27ff      	CLR  R31
0010e1 2766      	CLR  R22
0010e2 2777      	CLR  R23
0010e3 940e 1463 	CALL __PUTPARD1
0010e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
0010e6 e088      	LDI  R24,8
0010e7 940e 1021 	CALL _sprintf
0010e9 962c      	ADIW R28,12
0010ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x13:
0010eb 01fe      	MOVW R30,R28
0010ec 9674      	ADIW R30,20
0010ed 93fa      	ST   -Y,R31
0010ee 93ea      	ST   -Y,R30
0010ef 01fe      	MOVW R30,R28
0010f0 9677      	ADIW R30,23
0010f1 93fa      	ST   -Y,R31
0010f2 93ea      	ST   -Y,R30
0010f3 01fe      	MOVW R30,R28
0010f4 967a      	ADIW R30,26
0010f5 93fa      	ST   -Y,R31
0010f6 93ea      	ST   -Y,R30
0010f7 01de      	MOVW R26,R28
0010f8 965d      	ADIW R26,29
0010f9 940e 0df5 	CALL _rtc_getDate
0010fb e1ec      	LDI  R30,LOW(_time)
0010fc e0f8      	LDI  R31,HIGH(_time)
0010fd 93fa      	ST   -Y,R31
0010fe 93ea      	ST   -Y,R30
0010ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x14:
001100 27ff      	CLR  R31
001101 2766      	CLR  R22
001102 2777      	CLR  R23
001103 940e 1463 	CALL __PUTPARD1
001105 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
001106 9734      	SBIW R30,4
001107 5ee4      	SUBI R30,LOW(-_time)
001108 4ff7      	SBCI R31,HIGH(-_time)
001109 81a0      	LD   R26,Z
00110a 940c 0c16 	JMP  _write_byte_to_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
00110c e0e0      	LDI  R30,LOW(0)
00110d e0f0      	LDI  R31,HIGH(0)
00110e 93fa      	ST   -Y,R31
00110f 93ea      	ST   -Y,R30
001110 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x17:
001111 eeae      	LDI  R26,LOW(_buffer)
001112 e0b7      	LDI  R27,HIGH(_buffer)
001113 940c 0b4e 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
001115 e0f0      	LDI  R31,0
001116 93fa      	ST   -Y,R31
001117 93ea      	ST   -Y,R30
001118 eeae      	LDI  R26,LOW(_buffer)
001119 e0b7      	LDI  R27,HIGH(_buffer)
00111a 940c 0e1c 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x19:
00111c 01f8      	MOVW R30,R16
00111d 9631      	ADIW R30,1
00111e 940e 1418 	CALL __LSLW4
001120 0fe2      	ADD  R30,R18
001121 1ff3      	ADC  R31,R19
001122 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
001123 eeae      	LDI  R26,LOW(_buffer)
001124 e0b7      	LDI  R27,HIGH(_buffer)
001125 0fa2      	ADD  R26,R18
001126 1fb3      	ADC  R27,R19
001127 e0e0      	LDI  R30,LOW(0)
001128 93ec      	ST   X,R30
001129 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
00112a 9638      	ADIW R30,8
00112b 01df      	MOVW R26,R30
00112c 940c 0c0a 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
00112e e0e1      	LDI  R30,LOW(1)
00112f 93ea      	ST   -Y,R30
001130 e0a2      	LDI  R26,LOW(2)
001131 940c 0b37 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1D:
001133 e1ec      	LDI  R30,LOW(_time)
001134 e0f8      	LDI  R31,HIGH(_time)
001135 93fa      	ST   -Y,R31
001136 93ea      	ST   -Y,R30
001137 e0e3      	LDI  R30,LOW(3)
001138 e0f0      	LDI  R31,HIGH(3)
001139 93fa      	ST   -Y,R31
00113a 93ea      	ST   -Y,R30
                +
00113b e9e6     +LDI R30 , LOW ( 2 * _0x0 + ( 246 ) )
00113c e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW1FN _0x0,246
00113d 93fa      	ST   -Y,R31
00113e 93ea      	ST   -Y,R30
00113f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1E:
001140 2766      	CLR  R22
001141 2777      	CLR  R23
001142 940e 1463 	CALL __PUTPARD1
001144 e084      	LDI  R24,4
001145 940e 103c 	CALL _snprintf
001147 962a      	ADIW R28,10
001148 e1ac      	LDI  R26,LOW(_time)
001149 e0b8      	LDI  R27,HIGH(_time)
00114a 940c 0b4e 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
00114c 940e 0b4e 	CALL _lcd_print
00114e cfe4      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x20:
00114f eda0      	LDI  R26,LOW(2000)
001150 e0b7      	LDI  R27,HIGH(2000)
001151 940c 1282 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
001153 e0ad      	LDI  R26,LOW(13)
001154 940e 0c21 	CALL _USART_Transmit
001156 e0ad      	LDI  R26,LOW(13)
001157 940e 0c21 	CALL _USART_Transmit
001159 efa4      	LDI  R26,LOW(500)
00115a e0b1      	LDI  R27,HIGH(500)
00115b 940c 1282 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
00115d 93ea      	ST   -Y,R30
00115e e0a1      	LDI  R26,LOW(1)
00115f 940c 0b37 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x23:
001161 e1ec      	LDI  R30,LOW(_time)
001162 e0f8      	LDI  R31,HIGH(_time)
001163 93fa      	ST   -Y,R31
001164 93ea      	ST   -Y,R30
001165 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x24:
001166 bbe8      	OUT  0x18,R30
001167 b3e6      	IN   R30,0x16
001168 70ef      	ANDI R30,LOW(0xF)
001169 2f1e      	MOV  R17,R30
00116a 301f      	CPI  R17,15
00116b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 49 TIMES, CODE SIZE REDUCTION:429 WORDS
                 SUBOPT_0x25:
00116c 2fe0      	MOV  R30,R16
00116d edae      	LDI  R26,LOW(_keypad)
00116e e0b7      	LDI  R27,HIGH(_keypad)
00116f e0f0      	LDI  R31,0
001170 940e 141c 	CALL __LSLW2
001172 0fae      	ADD  R26,R30
001173 1fbf      	ADC  R27,R31
001174 27ee      	CLR  R30
001175 0fa3      	ADD  R26,R19
001176 1fbe      	ADC  R27,R30
001177 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x26:
001178 940e 0b4e 	CALL _lcd_print
00117a cfd4      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x27:
00117b 51e2      	SUBI R30,LOW(-_buffer)
00117c 4ff8      	SBCI R31,HIGH(-_buffer)
00117d 010f      	MOVW R0,R30
00117e cfed      	RJMP SUBOPT_0x25
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x28:
00117f 91ec      	LD   R30,X
001180 01d0      	MOVW R26,R0
001181 93ec      	ST   X,R30
001182 cf16      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x29:
                +
001183 51e1     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
001184 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
001185 e0a0      	LDI  R26,LOW(0)
001186 83a0      	STD  Z+0,R26
001187 cfe4      	RJMP SUBOPT_0x25
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x2A:
001188 2fe5      	MOV  R30,R21
001189 e0f0      	LDI  R31,0
00118a 9731      	SBIW R30,1
00118b 51e2      	SUBI R30,LOW(-_buffer)
00118c 4ff8      	SBCI R31,HIGH(-_buffer)
00118d e0a0      	LDI  R26,LOW(0)
00118e 83a0      	STD  Z+0,R26
00118f e1a0      	LDI  R26,LOW(16)
001190 940c 0b07 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2B:
001192 940e 0b4e 	CALL _lcd_print
001194 e1a0      	LDI  R26,LOW(16)
001195 940c 0b07 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2C:
001197 eca0      	LDI  R26,LOW(192)
001198 940e 0b07 	CALL _lcdCommand
00119a e0e0      	LDI  R30,LOW(0)
00119b 87ec      	STD  Y+12,R30
00119c 87ed      	STD  Y+12+1,R30
00119d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2D:
00119e 85ac      	LDD  R26,Y+12
00119f 85bd      	LDD  R27,Y+12+1
0011a0 17ae      	CP   R26,R30
0011a1 07bf      	CPC  R27,R31
0011a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2E:
0011a3 85ec      	LDD  R30,Y+12
0011a4 85fd      	LDD  R31,Y+12+1
0011a5 9631      	ADIW R30,1
0011a6 87ec      	STD  Y+12,R30
0011a7 87fd      	STD  Y+12+1,R31
0011a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2F:
0011a9 eca0      	LDI  R26,LOW(192)
0011aa 940e 0b07 	CALL _lcdCommand
0011ac cedd      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x30:
0011ad e0a0      	LDI  R26,LOW(0)
0011ae e0b0      	LDI  R27,0
0011af 940c 0c0a 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x31:
0011b1 2fe2      	MOV  R30,R18
0011b2 e0f0      	LDI  R31,0
0011b3 9631      	ADIW R30,1
0011b4 940e 1418 	CALL __LSLW4
0011b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x32:
0011b7 85ac      	LDD  R26,Y+12
0011b8 85bd      	LDD  R27,Y+12+1
0011b9 0fea      	ADD  R30,R26
0011ba 1ffb      	ADC  R31,R27
0011bb 93fa      	ST   -Y,R31
0011bc 93ea      	ST   -Y,R30
0011bd 85ee      	LDD  R30,Y+14
0011be 85ff      	LDD  R31,Y+14+1
0011bf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
0011c0 9721      	SBIW R28,1
0011c1 940e 0c3d 	CALL _search_student_code
0011c3 83e8      	ST   Y,R30
0011c4 81a8      	LD   R26,Y
0011c5 30a1      	CPI  R26,LOW(0x1)
0011c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x34:
0011c7 93aa      	ST   -Y,R26
0011c8 b3eb      	IN   R30,0x1B
0011c9 70ef      	ANDI R30,LOW(0xF)
0011ca 2fae      	MOV  R26,R30
0011cb 81e8      	LD   R30,Y
0011cc 7fe0      	ANDI R30,LOW(0xF0)
0011cd 2bea      	OR   R30,R26
0011ce bbeb      	OUT  0x1B,R30
0011cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
0011d0 98d9      	CBI  0x1B,1
0011d1 9ada      	SBI  0x1B,2
                +
0011d2 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
0011d3 958a     +DEC R24
0011d4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
0011d5 98da      	CBI  0x1B,2
0011d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x36:
0011d7 b3eb      	IN   R30,0x1B
0011d8 70ef      	ANDI R30,LOW(0xF)
0011d9 2fae      	MOV  R26,R30
0011da 81e8      	LD   R30,Y
0011db 95e2      	SWAP R30
0011dc 7fe0      	ANDI R30,0xF0
0011dd 2bea      	OR   R30,R26
0011de bbeb      	OUT  0x1B,R30
0011df 9ada      	SBI  0x1B,2
                +
0011e0 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
0011e1 958a     +DEC R24
0011e2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
0011e3 98da      	CBI  0x1B,2
0011e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
0011e5 940e 0b07 	CALL _lcdCommand
0011e7 ceac      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
0011e8 81ea      	LDD  R30,Y+2
0011e9 70f0      	ANDI R31,HIGH(0x0)
0011ea 70e3      	ANDI R30,LOW(0x3)
0011eb bbef      	OUT  0x1F,R30
0011ec 81e9      	LDD  R30,Y+1
0011ed bbee      	OUT  0x1E,R30
0011ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x39:
0011ef 2fa3      	MOV  R26,R19
0011f0 27bb      	CLR  R27
0011f1 2fe0      	MOV  R30,R16
0011f2 e0f0      	LDI  R31,0
0011f3 9631      	ADIW R30,1
0011f4 940e 1418 	CALL __LSLW4
0011f6 0fae      	ADD  R26,R30
0011f7 1fbf      	ADC  R27,R31
0011f8 940c 0c0a 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
0011fa 2f2e      	MOV  R18,R30
0011fb 2fa3      	MOV  R26,R19
0011fc 27bb      	CLR  R27
0011fd e1e0      	LDI  R30,LOW(16)
0011fe 9fe0      	MUL  R30,R16
0011ff 01f0      	MOVW R30,R0
001200 0fea      	ADD  R30,R26
001201 1ffb      	ADC  R31,R27
001202 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3B:
                +
001203 81ac     +LDD R26 , Y + 4
001204 81bd     +LDD R27 , Y + 4 + 1
001205 818e     +LDD R24 , Y + 4 + 2
001206 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
001207 3ca0     +CPI R26 , LOW ( 0x927C0 )
001208 e2e7     +LDI R30 , HIGH ( 0x927C0 )
001209 07be     +CPC R27 , R30
00120a e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
00120b 078e     +CPC R24 , R30
00120c e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
00120d 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
00120e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3C:
                +
00120f 81ec     +LDD R30 , Y + 4
001210 81fd     +LDD R31 , Y + 4 + 1
001211 816e     +LDD R22 , Y + 4 + 2
001212 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001213 5fef     +SUBI R30 , LOW ( - 1 )
001214 4fff     +SBCI R31 , HIGH ( - 1 )
001215 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001216 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001217 83ec     +STD Y + 4 , R30
001218 83fd     +STD Y + 4 + 1 , R31
001219 836e     +STD Y + 4 + 2 , R22
00121a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00121b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
00121c 940e 0db8 	CALL _I2C_start
00121e eda0      	LDI  R26,LOW(208)
00121f 940c 0dbe 	JMP  _I2C_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
001221 940e 0dbe 	CALL _I2C_write
001223 940c 0dd5 	JMP  _I2C_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3F:
001225 940e 0db8 	CALL _I2C_start
001227 eda1      	LDI  R26,LOW(209)
001228 940e 0dbe 	CALL _I2C_write
00122a e0a1      	LDI  R26,LOW(1)
00122b 940e 0dc7 	CALL _I2C_read
00122d 81a8      	LD   R26,Y
00122e 81b9      	LDD  R27,Y+1
00122f 93ec      	ST   X,R30
001230 e0a1      	LDI  R26,LOW(1)
001231 940e 0dc7 	CALL _I2C_read
001233 81aa      	LDD  R26,Y+2
001234 81bb      	LDD  R27,Y+2+1
001235 93ec      	ST   X,R30
001236 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x40:
001237 932a      	ST   -Y,R18
001238 85ad      	LDD  R26,Y+13
001239 85be      	LDD  R27,Y+13+1
00123a 85ef      	LDD  R30,Y+15
00123b 89f8      	LDD  R31,Y+15+1
00123c 9509      	ICALL
00123d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
00123e 89e8      	LDD  R30,Y+16
00123f 89f9      	LDD  R31,Y+16+1
001240 9734      	SBIW R30,4
001241 8be8      	STD  Y+16,R30
001242 8bf9      	STD  Y+16+1,R31
001243 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
001244 85ad      	LDD  R26,Y+13
001245 85be      	LDD  R27,Y+13+1
001246 85ef      	LDD  R30,Y+15
001247 89f8      	LDD  R31,Y+15+1
001248 9509      	ICALL
001249 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
00124a 89a8      	LDD  R26,Y+16
00124b 89b9      	LDD  R27,Y+16+1
00124c 9614      	ADIW R26,4
00124d 940e 144c 	CALL __GETW1P
00124f 83ee      	STD  Y+6,R30
001250 83ff      	STD  Y+6+1,R31
001251 81ae      	LDD  R26,Y+6
001252 81bf      	LDD  R27,Y+6+1
001253 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x44:
001254 89a8      	LDD  R26,Y+16
001255 89b9      	LDD  R27,Y+16+1
001256 9614      	ADIW R26,4
001257 940e 144c 	CALL __GETW1P
001259 87ea      	STD  Y+10,R30
00125a 87fb      	STD  Y+10+1,R31
00125b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x45:
00125c 01de      	MOVW R26,R28
00125d 961c      	ADIW R26,12
00125e 940e 1408 	CALL __ADDW2R15
001260 940e 144c 	CALL __GETW1P
001262 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x46:
001263 01de      	MOVW R26,R28
001264 961a      	ADIW R26,10
001265 940e 1408 	CALL __ADDW2R15
001267 940e 144c 	CALL __GETW1P
001269 93fa      	ST   -Y,R31
00126a 93ea      	ST   -Y,R30
00126b 931a      	ST   -Y,R17
00126c 930a      	ST   -Y,R16
00126d eaed      	LDI  R30,LOW(_put_buff_G103)
00126e e0fe      	LDI  R31,HIGH(_put_buff_G103)
00126f 93fa      	ST   -Y,R31
001270 93ea      	ST   -Y,R30
001271 01de      	MOVW R26,R28
001272 961a      	ADIW R26,10
001273 940e 0eed 	CALL __print_G103
001275 019f      	MOVW R18,R30
001276 81ae      	LDD  R26,Y+6
001277 81bf      	LDD  R27,Y+6+1
001278 e0e0      	LDI  R30,LOW(0)
001279 93ec      	ST   X,R30
00127a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
00127b 01de      	MOVW R26,R28
00127c 961e      	ADIW R26,14
00127d 940e 1408 	CALL __ADDW2R15
00127f 940e 144c 	CALL __GETW1P
001281 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001282 9610      	adiw r26,0
001283 f039      	breq __delay_ms1
                 __delay_ms0:
001284 95a8      	wdr
                +
001285 ed80     +LDI R24 , LOW ( 0x7D0 )
001286 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001287 9701     +SBIW R24 , 1
001288 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001289 9711      	sbiw r26,1
00128a f7c9      	brne __delay_ms0
                 __delay_ms1:
00128b 9508      	ret
                 
                 __ROUND_REPACK:
00128c 2355      	TST  R21
00128d f442      	BRPL __REPACK
00128e 3850      	CPI  R21,0x80
00128f f411      	BRNE __ROUND_REPACK0
001290 ffe0      	SBRS R30,0
001291 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001292 9631      	ADIW R30,1
001293 1f69      	ADC  R22,R25
001294 1f79      	ADC  R23,R25
001295 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001296 e850      	LDI  R21,0x80
001297 2757      	EOR  R21,R23
001298 f411      	BRNE __REPACK0
001299 935f      	PUSH R21
00129a c0c8      	RJMP __ZERORES
                 __REPACK0:
00129b 3f5f      	CPI  R21,0xFF
00129c f031      	BREQ __REPACK1
00129d 0f66      	LSL  R22
00129e 0c00      	LSL  R0
00129f 9557      	ROR  R21
0012a0 9567      	ROR  R22
0012a1 2f75      	MOV  R23,R21
0012a2 9508      	RET
                 __REPACK1:
0012a3 935f      	PUSH R21
0012a4 2000      	TST  R0
0012a5 f00a      	BRMI __REPACK2
0012a6 c0c8      	RJMP __MAXRES
                 __REPACK2:
0012a7 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
0012a8 e850      	LDI  R21,0x80
0012a9 2e19      	MOV  R1,R25
0012aa 2215      	AND  R1,R21
0012ab 0f88      	LSL  R24
0012ac 1f99      	ROL  R25
0012ad 2795      	EOR  R25,R21
0012ae 0f55      	LSL  R21
0012af 9587      	ROR  R24
                 
                 __UNPACK1:
0012b0 e850      	LDI  R21,0x80
0012b1 2e07      	MOV  R0,R23
0012b2 2205      	AND  R0,R21
0012b3 0f66      	LSL  R22
0012b4 1f77      	ROL  R23
0012b5 2775      	EOR  R23,R21
0012b6 0f55      	LSL  R21
0012b7 9567      	ROR  R22
0012b8 9508      	RET
                 
                 __CFD1U:
0012b9 9468      	SET
0012ba c001      	RJMP __CFD1U0
                 __CFD1:
0012bb 94e8      	CLT
                 __CFD1U0:
0012bc 935f      	PUSH R21
0012bd dff2      	RCALL __UNPACK1
0012be 3870      	CPI  R23,0x80
0012bf f018      	BRLO __CFD10
0012c0 3f7f      	CPI  R23,0xFF
0012c1 f408      	BRCC __CFD10
0012c2 c0a0      	RJMP __ZERORES
                 __CFD10:
0012c3 e156      	LDI  R21,22
0012c4 1b57      	SUB  R21,R23
0012c5 f4aa      	BRPL __CFD11
0012c6 9551      	NEG  R21
0012c7 3058      	CPI  R21,8
0012c8 f40e      	BRTC __CFD19
0012c9 3059      	CPI  R21,9
                 __CFD19:
0012ca f030      	BRLO __CFD17
0012cb efef      	SER  R30
0012cc efff      	SER  R31
0012cd ef6f      	SER  R22
0012ce e77f      	LDI  R23,0x7F
0012cf f977      	BLD  R23,7
0012d0 c01a      	RJMP __CFD15
                 __CFD17:
0012d1 2777      	CLR  R23
0012d2 2355      	TST  R21
0012d3 f0b9      	BREQ __CFD15
                 __CFD18:
0012d4 0fee      	LSL  R30
0012d5 1fff      	ROL  R31
0012d6 1f66      	ROL  R22
0012d7 1f77      	ROL  R23
0012d8 955a      	DEC  R21
0012d9 f7d1      	BRNE __CFD18
0012da c010      	RJMP __CFD15
                 __CFD11:
0012db 2777      	CLR  R23
                 __CFD12:
0012dc 3058      	CPI  R21,8
0012dd f028      	BRLO __CFD13
0012de 2fef      	MOV  R30,R31
0012df 2ff6      	MOV  R31,R22
0012e0 2f67      	MOV  R22,R23
0012e1 5058      	SUBI R21,8
0012e2 cff9      	RJMP __CFD12
                 __CFD13:
0012e3 2355      	TST  R21
0012e4 f031      	BREQ __CFD15
                 __CFD14:
0012e5 9576      	LSR  R23
0012e6 9567      	ROR  R22
0012e7 95f7      	ROR  R31
0012e8 95e7      	ROR  R30
0012e9 955a      	DEC  R21
0012ea f7d1      	BRNE __CFD14
                 __CFD15:
0012eb 2000      	TST  R0
0012ec f40a      	BRPL __CFD16
0012ed d122      	RCALL __ANEGD1
                 __CFD16:
0012ee 915f      	POP  R21
0012ef 9508      	RET
                 
                 __CDF1U:
0012f0 9468      	SET
0012f1 c001      	RJMP __CDF1U0
                 __CDF1:
0012f2 94e8      	CLT
                 __CDF1U0:
0012f3 9730      	SBIW R30,0
0012f4 4060      	SBCI R22,0
0012f5 4070      	SBCI R23,0
0012f6 f0b1      	BREQ __CDF10
0012f7 2400      	CLR  R0
0012f8 f026      	BRTS __CDF11
0012f9 2377      	TST  R23
0012fa f412      	BRPL __CDF11
0012fb 9400      	COM  R0
0012fc d113      	RCALL __ANEGD1
                 __CDF11:
0012fd 2e17      	MOV  R1,R23
0012fe e17e      	LDI  R23,30
0012ff 2011      	TST  R1
                 __CDF12:
001300 f032      	BRMI __CDF13
001301 957a      	DEC  R23
001302 0fee      	LSL  R30
001303 1fff      	ROL  R31
001304 1f66      	ROL  R22
001305 1c11      	ROL  R1
001306 cff9      	RJMP __CDF12
                 __CDF13:
001307 2fef      	MOV  R30,R31
001308 2ff6      	MOV  R31,R22
001309 2d61      	MOV  R22,R1
00130a 935f      	PUSH R21
00130b df8a      	RCALL __REPACK
00130c 915f      	POP  R21
                 __CDF10:
00130d 9508      	RET
                 
                 __SWAPACC:
00130e 934f      	PUSH R20
00130f 01af      	MOVW R20,R30
001310 01fd      	MOVW R30,R26
001311 01da      	MOVW R26,R20
001312 01ab      	MOVW R20,R22
001313 01bc      	MOVW R22,R24
001314 01ca      	MOVW R24,R20
001315 2d40      	MOV  R20,R0
001316 2c01      	MOV  R0,R1
001317 2e14      	MOV  R1,R20
001318 914f      	POP  R20
001319 9508      	RET
                 
                 __UADD12:
00131a 0fea      	ADD  R30,R26
00131b 1ffb      	ADC  R31,R27
00131c 1f68      	ADC  R22,R24
00131d 9508      	RET
                 
                 __NEGMAN1:
00131e 95e0      	COM  R30
00131f 95f0      	COM  R31
001320 9560      	COM  R22
001321 5fef      	SUBI R30,-1
001322 4fff      	SBCI R31,-1
001323 4f6f      	SBCI R22,-1
001324 9508      	RET
                 
                 __ADDF12:
001325 935f      	PUSH R21
001326 df81      	RCALL __UNPACK
001327 3890      	CPI  R25,0x80
001328 f139      	BREQ __ADDF129
                 
                 __ADDF120:
001329 3870      	CPI  R23,0x80
00132a f121      	BREQ __ADDF128
                 __ADDF121:
00132b 2f57      	MOV  R21,R23
00132c 1b59      	SUB  R21,R25
00132d f12b      	BRVS __ADDF1211
00132e f412      	BRPL __ADDF122
00132f dfde      	RCALL __SWAPACC
001330 cffa      	RJMP __ADDF121
                 __ADDF122:
001331 3158      	CPI  R21,24
001332 f018      	BRLO __ADDF123
001333 27aa      	CLR  R26
001334 27bb      	CLR  R27
001335 2788      	CLR  R24
                 __ADDF123:
001336 3058      	CPI  R21,8
001337 f028      	BRLO __ADDF124
001338 2fab      	MOV  R26,R27
001339 2fb8      	MOV  R27,R24
00133a 2788      	CLR  R24
00133b 5058      	SUBI R21,8
00133c cff9      	RJMP __ADDF123
                 __ADDF124:
00133d 2355      	TST  R21
00133e f029      	BREQ __ADDF126
                 __ADDF125:
00133f 9586      	LSR  R24
001340 95b7      	ROR  R27
001341 95a7      	ROR  R26
001342 955a      	DEC  R21
001343 f7d9      	BRNE __ADDF125
                 __ADDF126:
001344 2d50      	MOV  R21,R0
001345 2551      	EOR  R21,R1
001346 f072      	BRMI __ADDF127
001347 dfd2      	RCALL __UADD12
001348 f438      	BRCC __ADDF129
001349 9567      	ROR  R22
00134a 95f7      	ROR  R31
00134b 95e7      	ROR  R30
00134c 9573      	INC  R23
00134d f413      	BRVC __ADDF129
00134e c020      	RJMP __MAXRES
                 __ADDF128:
00134f dfbe      	RCALL __SWAPACC
                 __ADDF129:
001350 df45      	RCALL __REPACK
001351 915f      	POP  R21
001352 9508      	RET
                 __ADDF1211:
001353 f7d8      	BRCC __ADDF128
001354 cffb      	RJMP __ADDF129
                 __ADDF127:
001355 1bea      	SUB  R30,R26
001356 0bfb      	SBC  R31,R27
001357 0b68      	SBC  R22,R24
001358 f051      	BREQ __ZERORES
001359 f410      	BRCC __ADDF1210
00135a 9400      	COM  R0
00135b dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00135c 2366      	TST  R22
00135d f392      	BRMI __ADDF129
00135e 0fee      	LSL  R30
00135f 1fff      	ROL  R31
001360 1f66      	ROL  R22
001361 957a      	DEC  R23
001362 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001363 27ee      	CLR  R30
001364 27ff      	CLR  R31
001365 2766      	CLR  R22
001366 2777      	CLR  R23
001367 915f      	POP  R21
001368 9508      	RET
                 
                 __MINRES:
001369 efef      	SER  R30
00136a efff      	SER  R31
00136b e76f      	LDI  R22,0x7F
00136c ef7f      	SER  R23
00136d 915f      	POP  R21
00136e 9508      	RET
                 
                 __MAXRES:
00136f efef      	SER  R30
001370 efff      	SER  R31
001371 e76f      	LDI  R22,0x7F
001372 e77f      	LDI  R23,0x7F
001373 915f      	POP  R21
001374 9508      	RET
                 
                 __MULF12:
001375 935f      	PUSH R21
001376 df31      	RCALL __UNPACK
001377 3870      	CPI  R23,0x80
001378 f351      	BREQ __ZERORES
001379 3890      	CPI  R25,0x80
00137a f341      	BREQ __ZERORES
00137b 2401      	EOR  R0,R1
00137c 9408      	SEC
00137d 1f79      	ADC  R23,R25
00137e f423      	BRVC __MULF124
00137f f31c      	BRLT __ZERORES
                 __MULF125:
001380 2000      	TST  R0
001381 f33a      	BRMI __MINRES
001382 cfec      	RJMP __MAXRES
                 __MULF124:
001383 920f      	PUSH R0
001384 931f      	PUSH R17
001385 932f      	PUSH R18
001386 933f      	PUSH R19
001387 934f      	PUSH R20
001388 2711      	CLR  R17
001389 2722      	CLR  R18
00138a 2799      	CLR  R25
00138b 9f68      	MUL  R22,R24
00138c 01a0      	MOVW R20,R0
00138d 9f8f      	MUL  R24,R31
00138e 2d30      	MOV  R19,R0
00138f 0d41      	ADD  R20,R1
001390 1f59      	ADC  R21,R25
001391 9f6b      	MUL  R22,R27
001392 0d30      	ADD  R19,R0
001393 1d41      	ADC  R20,R1
001394 1f59      	ADC  R21,R25
001395 9f8e      	MUL  R24,R30
001396 d027      	RCALL __MULF126
001397 9fbf      	MUL  R27,R31
001398 d025      	RCALL __MULF126
001399 9f6a      	MUL  R22,R26
00139a d023      	RCALL __MULF126
00139b 9fbe      	MUL  R27,R30
00139c d01d      	RCALL __MULF127
00139d 9faf      	MUL  R26,R31
00139e d01b      	RCALL __MULF127
00139f 9fae      	MUL  R26,R30
0013a0 0d11      	ADD  R17,R1
0013a1 1f29      	ADC  R18,R25
0013a2 1f39      	ADC  R19,R25
0013a3 1f49      	ADC  R20,R25
0013a4 1f59      	ADC  R21,R25
0013a5 2fe3      	MOV  R30,R19
0013a6 2ff4      	MOV  R31,R20
0013a7 2f65      	MOV  R22,R21
0013a8 2f52      	MOV  R21,R18
0013a9 914f      	POP  R20
0013aa 913f      	POP  R19
0013ab 912f      	POP  R18
0013ac 911f      	POP  R17
0013ad 900f      	POP  R0
0013ae 2366      	TST  R22
0013af f02a      	BRMI __MULF122
0013b0 0f55      	LSL  R21
0013b1 1fee      	ROL  R30
0013b2 1fff      	ROL  R31
0013b3 1f66      	ROL  R22
0013b4 c002      	RJMP __MULF123
                 __MULF122:
0013b5 9573      	INC  R23
0013b6 f24b      	BRVS __MULF125
                 __MULF123:
0013b7 ded4      	RCALL __ROUND_REPACK
0013b8 915f      	POP  R21
0013b9 9508      	RET
                 
                 __MULF127:
0013ba 0d10      	ADD  R17,R0
0013bb 1d21      	ADC  R18,R1
0013bc 1f39      	ADC  R19,R25
0013bd c002      	RJMP __MULF128
                 __MULF126:
0013be 0d20      	ADD  R18,R0
0013bf 1d31      	ADC  R19,R1
                 __MULF128:
0013c0 1f49      	ADC  R20,R25
0013c1 1f59      	ADC  R21,R25
0013c2 9508      	RET
                 
                 __DIVF21:
0013c3 935f      	PUSH R21
0013c4 dee3      	RCALL __UNPACK
0013c5 3870      	CPI  R23,0x80
0013c6 f421      	BRNE __DIVF210
0013c7 2011      	TST  R1
                 __DIVF211:
0013c8 f40a      	BRPL __DIVF219
0013c9 cf9f      	RJMP __MINRES
                 __DIVF219:
0013ca cfa4      	RJMP __MAXRES
                 __DIVF210:
0013cb 3890      	CPI  R25,0x80
0013cc f409      	BRNE __DIVF218
                 __DIVF217:
0013cd cf95      	RJMP __ZERORES
                 __DIVF218:
0013ce 2401      	EOR  R0,R1
0013cf 9408      	SEC
0013d0 0b97      	SBC  R25,R23
0013d1 f41b      	BRVC __DIVF216
0013d2 f3d4      	BRLT __DIVF217
0013d3 2000      	TST  R0
0013d4 cff3      	RJMP __DIVF211
                 __DIVF216:
0013d5 2f79      	MOV  R23,R25
0013d6 931f      	PUSH R17
0013d7 932f      	PUSH R18
0013d8 933f      	PUSH R19
0013d9 934f      	PUSH R20
0013da 2411      	CLR  R1
0013db 2711      	CLR  R17
0013dc 2722      	CLR  R18
0013dd 2733      	CLR  R19
0013de 2744      	CLR  R20
0013df 2755      	CLR  R21
0013e0 e290      	LDI  R25,32
                 __DIVF212:
0013e1 17ae      	CP   R26,R30
0013e2 07bf      	CPC  R27,R31
0013e3 0786      	CPC  R24,R22
0013e4 0741      	CPC  R20,R17
0013e5 f030      	BRLO __DIVF213
0013e6 1bae      	SUB  R26,R30
0013e7 0bbf      	SBC  R27,R31
0013e8 0b86      	SBC  R24,R22
0013e9 0b41      	SBC  R20,R17
0013ea 9408      	SEC
0013eb c001      	RJMP __DIVF214
                 __DIVF213:
0013ec 9488      	CLC
                 __DIVF214:
0013ed 1f55      	ROL  R21
0013ee 1f22      	ROL  R18
0013ef 1f33      	ROL  R19
0013f0 1c11      	ROL  R1
0013f1 1faa      	ROL  R26
0013f2 1fbb      	ROL  R27
0013f3 1f88      	ROL  R24
0013f4 1f44      	ROL  R20
0013f5 959a      	DEC  R25
0013f6 f751      	BRNE __DIVF212
0013f7 01f9      	MOVW R30,R18
0013f8 2d61      	MOV  R22,R1
0013f9 914f      	POP  R20
0013fa 913f      	POP  R19
0013fb 912f      	POP  R18
0013fc 911f      	POP  R17
0013fd 2366      	TST  R22
0013fe f032      	BRMI __DIVF215
0013ff 0f55      	LSL  R21
001400 1fee      	ROL  R30
001401 1fff      	ROL  R31
001402 1f66      	ROL  R22
001403 957a      	DEC  R23
001404 f243      	BRVS __DIVF217
                 __DIVF215:
001405 de86      	RCALL __ROUND_REPACK
001406 915f      	POP  R21
001407 9508      	RET
                 
                 __ADDW2R15:
001408 2400      	CLR  R0
001409 0daf      	ADD  R26,R15
00140a 1db0      	ADC  R27,R0
00140b 9508      	RET
                 
                 __ANEGW1:
00140c 95f1      	NEG  R31
00140d 95e1      	NEG  R30
00140e 40f0      	SBCI R31,0
00140f 9508      	RET
                 
                 __ANEGD1:
001410 95f0      	COM  R31
001411 9560      	COM  R22
001412 9570      	COM  R23
001413 95e1      	NEG  R30
001414 4fff      	SBCI R31,-1
001415 4f6f      	SBCI R22,-1
001416 4f7f      	SBCI R23,-1
001417 9508      	RET
                 
                 __LSLW4:
001418 0fee      	LSL  R30
001419 1fff      	ROL  R31
                 __LSLW3:
00141a 0fee      	LSL  R30
00141b 1fff      	ROL  R31
                 __LSLW2:
00141c 0fee      	LSL  R30
00141d 1fff      	ROL  R31
00141e 0fee      	LSL  R30
00141f 1fff      	ROL  R31
001420 9508      	RET
                 
                 __LSRD1:
001421 9576      	LSR  R23
001422 9567      	ROR  R22
001423 95f7      	ROR  R31
001424 95e7      	ROR  R30
001425 9508      	RET
                 
                 __CWD1:
001426 2f6f      	MOV  R22,R31
001427 0f66      	ADD  R22,R22
001428 0b66      	SBC  R22,R22
001429 2f76      	MOV  R23,R22
00142a 9508      	RET
                 
                 __DIVW21U:
00142b 2400      	CLR  R0
00142c 2411      	CLR  R1
00142d e190      	LDI  R25,16
                 __DIVW21U1:
00142e 0faa      	LSL  R26
00142f 1fbb      	ROL  R27
001430 1c00      	ROL  R0
001431 1c11      	ROL  R1
001432 1a0e      	SUB  R0,R30
001433 0a1f      	SBC  R1,R31
001434 f418      	BRCC __DIVW21U2
001435 0e0e      	ADD  R0,R30
001436 1e1f      	ADC  R1,R31
001437 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001438 60a1      	SBR  R26,1
                 __DIVW21U3:
001439 959a      	DEC  R25
00143a f799      	BRNE __DIVW21U1
00143b 01fd      	MOVW R30,R26
00143c 01d0      	MOVW R26,R0
00143d 9508      	RET
                 
                 __MODW21:
00143e 94e8      	CLT
00143f ffb7      	SBRS R27,7
001440 c004      	RJMP __MODW211
001441 95a0      	COM  R26
001442 95b0      	COM  R27
001443 9611      	ADIW R26,1
001444 9468      	SET
                 __MODW211:
001445 fdf7      	SBRC R31,7
001446 dfc5      	RCALL __ANEGW1
001447 dfe3      	RCALL __DIVW21U
001448 01fd      	MOVW R30,R26
001449 f40e      	BRTC __MODW212
00144a dfc1      	RCALL __ANEGW1
                 __MODW212:
00144b 9508      	RET
                 
                 __GETW1P:
00144c 91ed      	LD   R30,X+
00144d 91fc      	LD   R31,X
00144e 9711      	SBIW R26,1
00144f 9508      	RET
                 
                 __GETW1PF:
001450 9005      	LPM  R0,Z+
001451 91f4      	LPM  R31,Z
001452 2de0      	MOV  R30,R0
001453 9508      	RET
                 
                 __GETD1S0:
001454 81e8      	LD   R30,Y
001455 81f9      	LDD  R31,Y+1
001456 816a      	LDD  R22,Y+2
001457 817b      	LDD  R23,Y+3
001458 9508      	RET
                 
                 __GETD2S0:
001459 81a8      	LD   R26,Y
00145a 81b9      	LDD  R27,Y+1
00145b 818a      	LDD  R24,Y+2
00145c 819b      	LDD  R25,Y+3
00145d 9508      	RET
                 
                 __PUTD1S0:
00145e 83e8      	ST   Y,R30
00145f 83f9      	STD  Y+1,R31
001460 836a      	STD  Y+2,R22
001461 837b      	STD  Y+3,R23
001462 9508      	RET
                 
                 __PUTPARD1:
001463 937a      	ST   -Y,R23
001464 936a      	ST   -Y,R22
001465 93fa      	ST   -Y,R31
001466 93ea      	ST   -Y,R30
001467 9508      	RET
                 
                 __SAVELOCR6:
001468 935a      	ST   -Y,R21
                 __SAVELOCR5:
001469 934a      	ST   -Y,R20
                 __SAVELOCR4:
00146a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00146b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00146c 931a      	ST   -Y,R17
00146d 930a      	ST   -Y,R16
00146e 9508      	RET
                 
                 __LOADLOCR6:
00146f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001470 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001471 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001472 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001473 8119      	LDD  R17,Y+1
001474 8108      	LD   R16,Y
001475 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
001476 0fac      	ADD  R26,R28
001477 1fbd      	ADC  R27,R29
                 __INITLOC0:
001478 9005      	LPM  R0,Z+
001479 920d      	ST   X+,R0
00147a 958a      	DEC  R24
00147b f7e1      	BRNE __INITLOC0
00147c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  49 r1 :  28 r2 :   0 r3 :   0 r4 :  15 r5 :  83 r6 :   9 r7 :   4 
r8 :   3 r9 :  11 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   8 
r16:  86 r17:  85 r18:  81 r19:  69 r20:  38 r21:  94 r22:  91 r23:  62 
r24:  71 r25:  49 r26: 488 r27: 218 r28:  66 r29:   2 r30: 855 r31: 261 
x  :  93 y  : 422 z  :  25 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  38 add   :  31 
adiw  :  82 and   :   2 andi  :  22 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   7 brcs  :   0 break :   0 breq  :  77 
brge  :  19 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   4 brmi  :   8 brne  : 149 brpl  :   8 brsh  :  20 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 497 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  74 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  75 cpc   :  50 cpi   : 132 cpse  :   0 dec   :  15 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  25 inc   :   6 jmp   :  43 ld    : 121 ldd   : 148 ldi   : 658 
lds   :   2 lpm   :  15 lsl   :  19 lsr   :   3 mov   : 113 movw  :  80 
mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   8 out   :  55 pop   :  26 push  :  26 rcall :  87 ret   : 109 
reti  :   2 rjmp  : 267 rol   :  32 ror   :  15 sbc   :  10 sbci  :  34 
sbi   :  16 sbic  :   4 sbis  :   4 sbiw  :  55 sbr   :   1 sbrc  :   4 
sbrs  :  12 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 192 std   :  66 sts   :   2 sub   :   9 subi  :  54 swap  :   2 
tst   :  39 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0028fa   8664   1826  10490   32768  32.0%
[.dseg] 0x000060 0x000836      0   1556   1556    2048  76.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
