
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Thu Jan 02 20:09:10 2025

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 450 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x01C2
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R5
                 	.DEF _page_num=R4
                 	.DEF _US_count=R7
                 	.DEF _logged_in=R6
                 	.DEF _submitTime=R9
                 	.DEF _timerCount=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03b1 	JMP  __RESET
000002 940c 06ce 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 06bc 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0001      	.DB  0x0,0x0,0x1,0x0
000035 0500      	.DB  0x0,0x5
                 
                 _0x3:
000036 3837
000037 4f39
000038 3534
000039 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00003a 3231
00003b 4333
00003c 304c
00003d 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x5:
00003e 0222
00003f 0226
000040 022a
000041 022e      	.DB  LOW(_0x4),HIGH(_0x4),LOW(_0x4+4),HIGH(_0x4+4),LOW(_0x4+8),HIGH(_0x4+8),LOW(_0x4+12),HIGH(_0x4+12)
000042 0232
000043 0236
000044 023a      	.DB  LOW(_0x4+16),HIGH(_0x4+16),LOW(_0x4+20),HIGH(_0x4+20),LOW(_0x4+24),HIGH(_0x4+24)
                 _0x19B:
000045 ffff      	.DB  0xFF,0xFF
                 _0x0:
000046 7553
000047 006e
000048 6f4d
000049 006e      	.DB  0x53,0x75,0x6E,0x0,0x4D,0x6F,0x6E,0x0
00004a 7554
00004b 0065
00004c 6557
00004d 0064      	.DB  0x54,0x75,0x65,0x0,0x57,0x65,0x64,0x0
00004e 6854
00004f 0075
000050 7246
000051 0069      	.DB  0x54,0x68,0x75,0x0,0x46,0x72,0x69,0x0
000052 6153
000053 0074
000054 3a31
000055 5320      	.DB  0x53,0x61,0x74,0x0,0x31,0x3A,0x20,0x53
000056 6275
000057 696d
000058 2074
000059 7453      	.DB  0x75,0x62,0x6D,0x69,0x74,0x20,0x53,0x74
00005a 6475
00005b 6e65
00005c 2074
00005d 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
00005e 6564
00005f 3200
000060 203a
000061 7553      	.DB  0x64,0x65,0x0,0x32,0x3A,0x20,0x53,0x75
000062 6d62
000063 7469
000064 5720
000065 7469      	.DB  0x62,0x6D,0x69,0x74,0x20,0x57,0x69,0x74
000066 2068
000067 6143
000068 6472
000069 5400      	.DB  0x68,0x20,0x43,0x61,0x72,0x64,0x0,0x54
00006a 6d69
00006b 2065
00006c 6f66
00006d 2072      	.DB  0x69,0x6D,0x65,0x20,0x66,0x6F,0x72,0x20
00006e 7573
00006f 6d62
000070 7469
000071 6920      	.DB  0x73,0x75,0x62,0x6D,0x69,0x74,0x20,0x69
000072 2073
000073 6966
000074 696e
000075 6873      	.DB  0x73,0x20,0x66,0x69,0x6E,0x69,0x73,0x68
000076 6465
000077 4500
000078 746e
000079 7265      	.DB  0x65,0x64,0x0,0x45,0x6E,0x74,0x65,0x72
00007a 7920
00007b 756f
00007c 2072
00007d 7473      	.DB  0x20,0x79,0x6F,0x75,0x72,0x20,0x73,0x74
00007e 6475
00007f 6e65
000080 2074
000081 6f63      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x63,0x6F
000082 6564
000083 003a
000084 7242
000085 6e69      	.DB  0x64,0x65,0x3A,0x0,0x42,0x72,0x69,0x6E
000086 2067
000087 6f79
000088 7275
000089 6320      	.DB  0x67,0x20,0x79,0x6F,0x75,0x72,0x20,0x63
00008a 7261
00008b 2064
00008c 656e
00008d 7261      	.DB  0x61,0x72,0x64,0x20,0x6E,0x65,0x61,0x72
00008e 6420
00008f 7665
000090 6369
000091 3a65      	.DB  0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x3A
000092 3400
000093 0030
000094 6e49
000095 6176      	.DB  0x0,0x34,0x30,0x0,0x49,0x6E,0x76,0x61
000096 696c
000097 2064
000098 6143
000099 6472      	.DB  0x6C,0x69,0x64,0x20,0x43,0x61,0x72,0x64
00009a 4400
00009b 7075
00009c 696c
00009d 6163      	.DB  0x0,0x44,0x75,0x70,0x6C,0x69,0x63,0x61
00009e 6574
00009f 5320
0000a0 7574
0000a1 6564      	.DB  0x74,0x65,0x20,0x53,0x74,0x75,0x64,0x65
0000a2 746e
0000a3 4320
0000a4 646f
0000a5 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
0000a6 3025
0000a7 7832
0000a8 3025
0000a9 7832      	.DB  0x25,0x30,0x32,0x78,0x25,0x30,0x32,0x78
0000aa 5300
0000ab 7574
0000ac 6564
0000ad 746e      	.DB  0x0,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000ae 6120
0000af 6464
0000b0 6465
0000b1 7720      	.DB  0x20,0x61,0x64,0x64,0x65,0x64,0x20,0x77
0000b2 7469
0000b3 2068
0000b4 4449
0000b5 003a      	.DB  0x69,0x74,0x68,0x20,0x49,0x44,0x3A,0x0
0000b6 754e
0000b7 626d
0000b8 7265
0000b9 6f20      	.DB  0x4E,0x75,0x6D,0x62,0x65,0x72,0x20,0x6F
0000ba 2066
0000bb 7473
0000bc 6475
0000bd 6e65      	.DB  0x66,0x20,0x73,0x74,0x75,0x64,0x65,0x6E
0000be 7374
0000bf 3a20
0000c0 0020
0000c1 7325      	.DB  0x74,0x73,0x20,0x3A,0x20,0x0,0x25,0x73
0000c2 2f00
0000c3 5000
0000c4 6572
0000c5 7373      	.DB  0x0,0x2F,0x0,0x50,0x72,0x65,0x73,0x73
0000c6 4320
0000c7 6e61
0000c8 6563
0000c9 206c      	.DB  0x20,0x43,0x61,0x6E,0x63,0x65,0x6C,0x20
0000ca 6f54
0000cb 4720
0000cc 206f
0000cd 6142      	.DB  0x54,0x6F,0x20,0x47,0x6F,0x20,0x42,0x61
0000ce 6b63
0000cf 5300
0000d0 6174
0000d1 7472      	.DB  0x63,0x6B,0x0,0x53,0x74,0x61,0x72,0x74
0000d2 5420
0000d3 6172
0000d4 736e
0000d5 6566      	.DB  0x20,0x54,0x72,0x61,0x6E,0x73,0x66,0x65
0000d6 7272
0000d7 6e69
0000d8 2e67
0000d9 2e2e      	.DB  0x72,0x72,0x69,0x6E,0x67,0x2E,0x2E,0x2E
0000da 5500
0000db 6173
0000dc 7472
0000dd 5420      	.DB  0x0,0x55,0x73,0x61,0x72,0x74,0x20,0x54
0000de 6172
0000df 736e
0000e0 696d
0000e1 2074      	.DB  0x72,0x61,0x6E,0x73,0x6D,0x69,0x74,0x20
0000e2 6946
0000e3 696e
0000e4 6873
0000e5 6465      	.DB  0x46,0x69,0x6E,0x69,0x73,0x68,0x65,0x64
0000e6 3100
0000e7 203a
0000e8 6553
0000e9 7261      	.DB  0x0,0x31,0x3A,0x20,0x53,0x65,0x61,0x72
0000ea 6863
0000eb 5320
0000ec 7574
0000ed 6564      	.DB  0x63,0x68,0x20,0x53,0x74,0x75,0x64,0x65
0000ee 746e
0000ef 3200
0000f0 203a
0000f1 6544      	.DB  0x6E,0x74,0x0,0x32,0x3A,0x20,0x44,0x65
0000f2 656c
0000f3 6574
0000f4 5320
0000f5 7574      	.DB  0x6C,0x65,0x74,0x65,0x20,0x53,0x74,0x75
0000f6 6564
0000f7 746e
0000f8 4500
0000f9 746e      	.DB  0x64,0x65,0x6E,0x74,0x0,0x45,0x6E,0x74
0000fa 7265
0000fb 5320
0000fc 7574
0000fd 6564      	.DB  0x65,0x72,0x20,0x53,0x74,0x75,0x64,0x65
0000fe 746e
0000ff 4320
000100 646f
000101 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000102 6f46
000103 2072
000104 6553
000105 7261      	.DB  0x46,0x6F,0x72,0x20,0x53,0x65,0x61,0x72
000106 6863
000107 003a
000108 6e45
000109 6574      	.DB  0x63,0x68,0x3A,0x0,0x45,0x6E,0x74,0x65
00010a 2072
00010b 7453
00010c 6475
00010d 6e65      	.DB  0x72,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
00010e 2074
00010f 6f43
000110 6564
000111 4620      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x46
000112 726f
000113 4420
000114 6c65
000115 7465      	.DB  0x6F,0x72,0x20,0x44,0x65,0x6C,0x65,0x74
000116 3a65
000117 4500
000118 746e
000119 7265      	.DB  0x65,0x3A,0x0,0x45,0x6E,0x74,0x65,0x72
00011a 5320
00011b 6365
00011c 6572
00011d 2074      	.DB  0x20,0x53,0x65,0x63,0x72,0x65,0x74,0x20
00011e 6f43
00011f 6564
000120 2820
000121 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x28,0x6F,0x72
000122 6320
000123 6e61
000124 6563
000125 296c      	.DB  0x20,0x63,0x61,0x6E,0x63,0x65,0x6C,0x29
000126 3100
000127 3a20
000128 4320
000129 656c      	.DB  0x0,0x31,0x20,0x3A,0x20,0x43,0x6C,0x65
00012a 7261
00012b 4520
00012c 5045
00012d 4f52      	.DB  0x61,0x72,0x20,0x45,0x45,0x50,0x52,0x4F
00012e 004d
00012f 2020
000130 2020
000131 7270      	.DB  0x4D,0x0,0x20,0x20,0x20,0x20,0x70,0x72
000132 7365
000133 2073
000134 6163
000135 636e      	.DB  0x65,0x73,0x73,0x20,0x63,0x61,0x6E,0x63
000136 6c65
000137 7420
000138 206f
000139 6162      	.DB  0x65,0x6C,0x20,0x74,0x6F,0x20,0x62,0x61
00013a 6b63
00013b 5300
00013c 7465
00013d 5420      	.DB  0x63,0x6B,0x0,0x53,0x65,0x74,0x20,0x54
00013e 6d69
00013f 7265
000140 6d28
000141 6e69      	.DB  0x69,0x6D,0x65,0x72,0x28,0x6D,0x69,0x6E
000142 7475
000143 7365
000144 3a29
000145 0020      	.DB  0x75,0x74,0x65,0x73,0x29,0x3A,0x20,0x0
000146 3025
000147 7832
000148 253a
000149 3230      	.DB  0x25,0x30,0x32,0x78,0x3A,0x25,0x30,0x32
00014a 3a78
00014b 3025
00014c 7832
00014d 2020      	.DB  0x78,0x3A,0x25,0x30,0x32,0x78,0x20,0x20
00014e 3200
00014f 2530
000150 3230
000151 2f78      	.DB  0x0,0x32,0x30,0x25,0x30,0x32,0x78,0x2F
000152 3025
000153 7832
000154 252f
000155 3230      	.DB  0x25,0x30,0x32,0x78,0x2F,0x25,0x30,0x32
000156 2078
000157 2520
000158 7333
000159 4c00      	.DB  0x78,0x20,0x20,0x25,0x33,0x73,0x0,0x4C
00015a 676f
00015b 756f
00015c 2074
00015d 2e2e      	.DB  0x6F,0x67,0x6F,0x75,0x74,0x20,0x2E,0x2E
00015e 002e
00015f 6f47
000160 6e69
000161 2067      	.DB  0x2E,0x0,0x47,0x6F,0x69,0x6E,0x67,0x20
000162 6f54
000163 4120
000164 6d64
000165 6e69      	.DB  0x54,0x6F,0x20,0x41,0x64,0x6D,0x69,0x6E
000166 5020
000167 6761
000168 2065
000169 6e49      	.DB  0x20,0x50,0x61,0x67,0x65,0x20,0x49,0x6E
00016a 3220
00016b 5320
00016c 6365
00016d 4900      	.DB  0x20,0x32,0x20,0x53,0x65,0x63,0x0,0x49
00016e 636e
00016f 726f
000170 6572
000171 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
000172 5320
000173 7574
000174 6564
000175 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000176 4320
000177 646f
000178 2065
000179 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
00017a 6d72
00017b 7461
00017c 5900
00017d 756f      	.DB  0x72,0x6D,0x61,0x74,0x0,0x59,0x6F,0x75
00017e 5720
00017f 6c69
000180 206c
000181 6142      	.DB  0x20,0x57,0x69,0x6C,0x6C,0x20,0x42,0x61
000182 6b63
000183 4d20
000184 6e65
000185 2075      	.DB  0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20
000186 6e49
000187 3220
000188 5320
000189 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
00018a 6e6f
00018b 0064
00018c 7544
00018d 6c70      	.DB  0x6F,0x6E,0x64,0x0,0x44,0x75,0x70,0x6C
00018e 6369
00018f 7461
000190 2065
000191 7453      	.DB  0x69,0x63,0x61,0x74,0x65,0x20,0x53,0x74
000192 6475
000193 6e65
000194 2074
000195 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
000196 6564
000197 4520
000198 746e
000199 7265      	.DB  0x64,0x65,0x20,0x45,0x6E,0x74,0x65,0x72
00019a 6465
00019b 5300
00019c 7574
00019d 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
00019e 746e
00019f 4320
0001a0 646f
0001a1 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
0001a2 7553
0001a3 6363
0001a4 7365
0001a5 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0001a6 6c75
0001a7 796c
0001a8 4120
0001a9 6464      	.DB  0x75,0x6C,0x6C,0x79,0x20,0x41,0x64,0x64
0001aa 6465
0001ab 5900
0001ac 756f
0001ad 4d20      	.DB  0x65,0x64,0x0,0x59,0x6F,0x75,0x20,0x4D
0001ae 7375
0001af 2074
0001b0 6946
0001b1 7372      	.DB  0x75,0x73,0x74,0x20,0x46,0x69,0x72,0x73
0001b2 2074
0001b3 6f4c
0001b4 6967
0001b5 006e      	.DB  0x74,0x20,0x4C,0x6F,0x67,0x69,0x6E,0x0
0001b6 6f59
0001b7 2075
0001b8 6957
0001b9 6c6c      	.DB  0x59,0x6F,0x75,0x20,0x57,0x69,0x6C,0x6C
0001ba 4720
0001bb 206f
0001bc 6441
0001bd 696d      	.DB  0x20,0x47,0x6F,0x20,0x41,0x64,0x6D,0x69
0001be 206e
0001bf 6150
0001c0 6567
0001c1 3220      	.DB  0x6E,0x20,0x50,0x61,0x67,0x65,0x20,0x32
0001c2 5320
0001c3 6365
0001c4 5300
0001c5 7574      	.DB  0x20,0x53,0x65,0x63,0x0,0x53,0x74,0x75
0001c6 6564
0001c7 746e
0001c8 4320
0001c9 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
0001ca 2065
0001cb 6f46
0001cc 6e75
0001cd 0064      	.DB  0x65,0x20,0x46,0x6F,0x75,0x6E,0x64,0x0
0001ce 704f
0001cf 2073
0001d0 202c
0001d1 7453      	.DB  0x4F,0x70,0x73,0x20,0x2C,0x20,0x53,0x74
0001d2 6475
0001d3 6e65
0001d4 2074
0001d5 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0001d6 6564
0001d7 4e20
0001d8 746f
0001d9 4620      	.DB  0x64,0x65,0x20,0x4E,0x6F,0x74,0x20,0x46
0001da 756f
0001db 646e
0001dc 5700
0001dd 6961      	.DB  0x6F,0x75,0x6E,0x64,0x0,0x57,0x61,0x69
0001de 2074
0001df 6f46
0001e0 2072
0001e1 6544      	.DB  0x74,0x20,0x46,0x6F,0x72,0x20,0x44,0x65
0001e2 656c
0001e3 6574
0001e4 2e2e
0001e5 002e      	.DB  0x6C,0x65,0x74,0x65,0x2E,0x2E,0x2E,0x0
0001e6 7453
0001e7 6475
0001e8 6e65
0001e9 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0001ea 6f43
0001eb 6564
0001ec 5720
0001ed 7361      	.DB  0x43,0x6F,0x64,0x65,0x20,0x57,0x61,0x73
0001ee 4420
0001ef 6c65
0001f0 7465
0001f1 6465      	.DB  0x20,0x44,0x65,0x6C,0x65,0x74,0x65,0x64
0001f2 5400
0001f3 6d69
0001f4 7265
0001f5 7320      	.DB  0x0,0x54,0x69,0x6D,0x65,0x72,0x20,0x73
0001f6 6174
0001f7 7472
0001f8 6465
0001f9 4c00      	.DB  0x74,0x61,0x72,0x74,0x65,0x64,0x0,0x4C
0001fa 676f
0001fb 6e69
0001fc 5320
0001fd 6375      	.DB  0x6F,0x67,0x69,0x6E,0x20,0x53,0x75,0x63
0001fe 6563
0001ff 7373
000200 7566
000201 6c6c      	.DB  0x63,0x65,0x73,0x73,0x66,0x75,0x6C,0x6C
000202 0079
000203 6157
000204 7469
000205 2e2e      	.DB  0x79,0x0,0x57,0x61,0x69,0x74,0x2E,0x2E
000206 002e
000207 704f
000208 2073
000209 202c      	.DB  0x2E,0x0,0x4F,0x70,0x73,0x20,0x2C,0x20
00020a 6573
00020b 7263
00020c 7465
00020d 6920      	.DB  0x73,0x65,0x63,0x72,0x65,0x74,0x20,0x69
00020e 2073
00020f 6e69
000210 6f63
000211 7272      	.DB  0x73,0x20,0x69,0x6E,0x63,0x6F,0x72,0x72
000212 6365
000213 0074
000214 6c43
000215 6165      	.DB  0x65,0x63,0x74,0x0,0x43,0x6C,0x65,0x61
000216 6972
000217 676e
000218 4520
000219 5045      	.DB  0x72,0x69,0x6E,0x67,0x20,0x45,0x45,0x50
00021a 4f52
00021b 204d
00021c 2e2e
00021d 002e      	.DB  0x52,0x4F,0x4D,0x20,0x2E,0x2E,0x2E,0x0
00021e 6554
00021f 706d
000220 7265
000221 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
000222 7275
000223 2865
000224 2943
000225 003a      	.DB  0x75,0x72,0x65,0x28,0x43,0x29,0x3A,0x0
000226 3a31
000227 4120
000228 7474
000229 6e65      	.DB  0x31,0x3A,0x20,0x41,0x74,0x74,0x65,0x6E
00022a 6164
00022b 636e
00022c 2065
00022d 6e49      	.DB  0x64,0x61,0x6E,0x63,0x65,0x20,0x49,0x6E
00022e 7469
00022f 6169
000230 696c
000231 617a      	.DB  0x69,0x74,0x69,0x61,0x6C,0x69,0x7A,0x61
000232 6974
000233 6e6f
000234 3200
000235 203a      	.DB  0x74,0x69,0x6F,0x6E,0x0,0x32,0x3A,0x20
000236 7453
000237 6475
000238 6e65
000239 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
00023a 614d
00023b 616e
00023c 6567
00023d 656d      	.DB  0x4D,0x61,0x6E,0x61,0x67,0x65,0x6D,0x65
00023e 746e
00023f 3300
000240 203a
000241 6956      	.DB  0x6E,0x74,0x0,0x33,0x3A,0x20,0x56,0x69
000242 7765
000243 5020
000244 6572
000245 6573      	.DB  0x65,0x77,0x20,0x50,0x72,0x65,0x73,0x65
000246 746e
000247 5320
000248 7574
000249 6564      	.DB  0x6E,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00024a 746e
00024b 2073
00024c 3400
00024d 203a      	.DB  0x6E,0x74,0x73,0x20,0x0,0x34,0x3A,0x20
00024e 6554
00024f 706d
000250 7265
000251 7461      	.DB  0x54,0x65,0x6D,0x70,0x65,0x72,0x61,0x74
000252 7275
000253 2065
000254 6f4d
000255 696e      	.DB  0x75,0x72,0x65,0x20,0x4D,0x6F,0x6E,0x69
000256 6f74
000257 6972
000258 676e
000259 3500      	.DB  0x74,0x6F,0x72,0x69,0x6E,0x67,0x0,0x35
00025a 203a
00025b 6552
00025c 7274
00025d 6569      	.DB  0x3A,0x20,0x52,0x65,0x74,0x72,0x69,0x65
00025e 6576
00025f 5320
000260 7574
000261 6564      	.DB  0x76,0x65,0x20,0x53,0x74,0x75,0x64,0x65
000262 746e
000263 4420
000264 7461
000265 0061      	.DB  0x6E,0x74,0x20,0x44,0x61,0x74,0x61,0x0
000266 3a36
000267 5420
000268 6172
000269 6666      	.DB  0x36,0x3A,0x20,0x54,0x72,0x61,0x66,0x66
00026a 6369
00026b 4d20
00026c 6e6f
00026d 7469      	.DB  0x69,0x63,0x20,0x4D,0x6F,0x6E,0x69,0x74
00026e 726f
00026f 6e69
000270 0067
000271 3a37      	.DB  0x6F,0x72,0x69,0x6E,0x67,0x0,0x37,0x3A
000272 4c20
000273 676f
000274 6e69
000275 5720      	.DB  0x20,0x4C,0x6F,0x67,0x69,0x6E,0x20,0x57
000276 7469
000277 2068
000278 6441
000279 696d      	.DB  0x69,0x74,0x68,0x20,0x41,0x64,0x6D,0x69
00027a 006e
00027b 3a38
00027c 4c20
00027d 676f      	.DB  0x6E,0x0,0x38,0x3A,0x20,0x4C,0x6F,0x67
00027e 756f
00027f 0074
000280 3a39
000281 5320      	.DB  0x6F,0x75,0x74,0x0,0x39,0x3A,0x20,0x53
000282 7465
000283 5420
000284 6d69
000285 7265      	.DB  0x65,0x74,0x20,0x54,0x69,0x6D,0x65,0x72
000286 4400
000287 7369
000288 6174
000289 636e      	.DB  0x0,0x44,0x69,0x73,0x74,0x61,0x6E,0x63
00028a 3a65
00028b 0020
00028c 7245
00028d 6f72      	.DB  0x65,0x3A,0x20,0x0,0x45,0x72,0x72,0x6F
00028e 0072
00028f 6f4e
000290 4f20
000291 7362      	.DB  0x72,0x0,0x4E,0x6F,0x20,0x4F,0x62,0x73
000292 6174
000293 6c63
000294 0065
000295 6320      	.DB  0x74,0x61,0x63,0x6C,0x65,0x0,0x20,0x63
000296 206d
000297 4300
000298 756f
000299 746e      	.DB  0x6D,0x20,0x0,0x43,0x6F,0x75,0x6E,0x74
00029a 203a
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1293): warning: .cseg .db misalignment - padding zero byte
00029b 0000      	.DB  0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1295): warning: .cseg .db misalignment - padding zero byte
00029c 0001      	.DB  0x1
                 _0x2000000:
00029d 4e2d
00029e 4e41
00029f 4900
0002a0 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1298): warning: .cseg .db misalignment - padding zero byte
0002a1 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0002a2 0006      	.DW  0x06
0002a3 0004      	.DW  0x04
0002a4 0066      	.DW  __REG_VARS*2
                 
0002a5 0010      	.DW  0x10
0002a6 07de      	.DW  _keypad
0002a7 006c      	.DW  _0x3*2
                 
0002a8 0004      	.DW  0x04
0002a9 0222      	.DW  _0x4
0002aa 008c      	.DW  _0x0*2
                 
0002ab 0004      	.DW  0x04
0002ac 0226      	.DW  _0x4+4
0002ad 0090      	.DW  _0x0*2+4
                 
0002ae 0004      	.DW  0x04
0002af 022a      	.DW  _0x4+8
0002b0 0094      	.DW  _0x0*2+8
                 
0002b1 0004      	.DW  0x04
0002b2 022e      	.DW  _0x4+12
0002b3 0098      	.DW  _0x0*2+12
                 
0002b4 0004      	.DW  0x04
0002b5 0232      	.DW  _0x4+16
0002b6 009c      	.DW  _0x0*2+16
                 
0002b7 0004      	.DW  0x04
0002b8 0236      	.DW  _0x4+20
0002b9 00a0      	.DW  _0x0*2+20
                 
0002ba 0004      	.DW  0x04
0002bb 023a      	.DW  _0x4+24
0002bc 00a4      	.DW  _0x0*2+24
                 
0002bd 000e      	.DW  0x0E
0002be 080e      	.DW  _days
0002bf 007c      	.DW  _0x5*2
                 
0002c0 0017      	.DW  0x17
0002c1 023e      	.DW  _0xC
0002c2 00a8      	.DW  _0x0*2+28
                 
0002c3 0014      	.DW  0x14
0002c4 0255      	.DW  _0xC+23
0002c5 00bf      	.DW  _0x0*2+51
                 
0002c6 001c      	.DW  0x1C
0002c7 0269      	.DW  _0xC+43
0002c8 00d3      	.DW  _0x0*2+71
                 
0002c9 0019      	.DW  0x19
0002ca 0285      	.DW  _0xC+71
0002cb 00ef      	.DW  _0x0*2+99
                 
0002cc 001c      	.DW  0x1C
0002cd 029e      	.DW  _0xC+96
0002ce 00d3      	.DW  _0x0*2+71
                 
0002cf 001d      	.DW  0x1D
0002d0 02ba      	.DW  _0xC+124
0002d1 0108      	.DW  _0x0*2+124
                 
0002d2 0003      	.DW  0x03
0002d3 02d7      	.DW  _0xC+153
0002d4 0125      	.DW  _0x0*2+153
                 
0002d5 000d      	.DW  0x0D
0002d6 02da      	.DW  _0xC+156
0002d7 0128      	.DW  _0x0*2+156
                 
0002d8 0017      	.DW  0x17
0002d9 02e7      	.DW  _0xC+169
0002da 0135      	.DW  _0x0*2+169
                 
0002db 0017      	.DW  0x17
0002dc 02fe      	.DW  _0xC+192
0002dd 0155      	.DW  _0x0*2+201
                 
0002de 0016      	.DW  0x16
0002df 0315      	.DW  _0xC+215
0002e0 016c      	.DW  _0x0*2+224
                 
0002e1 0002      	.DW  0x02
0002e2 032b      	.DW  _0xC+237
0002e3 0106      	.DW  _0x0*2+122
                 
0002e4 0002      	.DW  0x02
0002e5 032d      	.DW  _0xC+239
0002e6 0180      	.DW  _0x0*2+244
                 
0002e7 0002      	.DW  0x02
0002e8 032f      	.DW  _0xC+241
0002e9 0185      	.DW  _0x0*2+249
                 
0002ea 0018      	.DW  0x18
0002eb 0331      	.DW  _0xC+243
0002ec 0187      	.DW  _0x0*2+251
                 
0002ed 0016      	.DW  0x16
0002ee 0349      	.DW  _0xC+267
0002ef 019f      	.DW  _0x0*2+275
                 
0002f0 0018      	.DW  0x18
0002f1 035f      	.DW  _0xC+289
0002f2 01b5      	.DW  _0x0*2+297
                 
0002f3 0012      	.DW  0x12
0002f4 0377      	.DW  _0xC+313
0002f5 01cd      	.DW  _0x0*2+321
                 
0002f6 0012      	.DW  0x12
0002f7 0389      	.DW  _0xC+331
0002f8 01df      	.DW  _0x0*2+339
                 
0002f9 001f      	.DW  0x1F
0002fa 039b      	.DW  _0xC+349
0002fb 01f1      	.DW  _0x0*2+357
                 
0002fc 001f      	.DW  0x1F
0002fd 03ba      	.DW  _0xC+380
0002fe 0210      	.DW  _0x0*2+388
                 
0002ff 001e      	.DW  0x1E
000300 03d9      	.DW  _0xC+411
000301 022f      	.DW  _0x0*2+419
                 
000302 0011      	.DW  0x11
000303 03f7      	.DW  _0xC+441
000304 024d      	.DW  _0x0*2+449
                 
000305 0019      	.DW  0x19
000306 0408      	.DW  _0xC+458
000307 025e      	.DW  _0x0*2+466
                 
000308 0015      	.DW  0x15
000309 0421      	.DW  _0xC+483
00030a 0277      	.DW  _0x0*2+491
                 
00030b 000b      	.DW  0x0B
00030c 0436      	.DW  _0x9B
00030d 02b3      	.DW  _0x0*2+551
                 
00030e 001d      	.DW  0x1D
00030f 0441      	.DW  _0x9B+11
000310 02be      	.DW  _0x0*2+562
                 
000311 0002      	.DW  0x02
000312 045e      	.DW  _0x9B+40
000313 0180      	.DW  _0x0*2+244
                 
000314 0002      	.DW  0x02
000315 0460      	.DW  _0x9B+42
000316 0180      	.DW  _0x0*2+244
                 
000317 0003      	.DW  0x03
000318 0462      	.DW  _0x9B+44
000319 0125      	.DW  _0x0*2+153
                 
00031a 001e      	.DW  0x1E
00031b 0465      	.DW  _0x9B+47
00031c 02db      	.DW  _0x0*2+591
                 
00031d 001f      	.DW  0x1F
00031e 0483      	.DW  _0x9B+77
00031f 02f9      	.DW  _0x0*2+621
                 
000320 001f      	.DW  0x1F
000321 04a2      	.DW  _0x9B+108
000322 0318      	.DW  _0x0*2+652
                 
000323 001f      	.DW  0x1F
000324 04c1      	.DW  _0x9B+139
000325 02f9      	.DW  _0x0*2+621
                 
000326 0020      	.DW  0x20
000327 04e0      	.DW  _0x9B+170
000328 0337      	.DW  _0x0*2+683
                 
000329 001f      	.DW  0x1F
00032a 0500      	.DW  _0x9B+202
00032b 02f9      	.DW  _0x0*2+621
                 
00032c 0015      	.DW  0x15
00032d 051f      	.DW  _0x9B+233
00032e 0357      	.DW  _0x0*2+715
                 
00032f 001d      	.DW  0x1D
000330 0534      	.DW  _0x9B+254
000331 036c      	.DW  _0x0*2+736
                 
000332 0002      	.DW  0x02
000333 0551      	.DW  _0x9B+283
000334 0180      	.DW  _0x0*2+244
                 
000335 0002      	.DW  0x02
000336 0553      	.DW  _0x9B+285
000337 0180      	.DW  _0x0*2+244
                 
000338 0013      	.DW  0x13
000339 0555      	.DW  _0x9B+287
00033a 0389      	.DW  _0x0*2+765
                 
00033b 001f      	.DW  0x1F
00033c 0568      	.DW  _0x9B+306
00033d 02f9      	.DW  _0x0*2+621
                 
00033e 001d      	.DW  0x1D
00033f 0587      	.DW  _0x9B+337
000340 039c      	.DW  _0x0*2+784
                 
000341 001f      	.DW  0x1F
000342 05a4      	.DW  _0x9B+366
000343 02f9      	.DW  _0x0*2+621
                 
000344 0002      	.DW  0x02
000345 05c3      	.DW  _0x9B+397
000346 0180      	.DW  _0x0*2+244
                 
000347 0002      	.DW  0x02
000348 05c5      	.DW  _0x9B+399
000349 0180      	.DW  _0x0*2+244
                 
00034a 0013      	.DW  0x13
00034b 05c7      	.DW  _0x9B+401
00034c 0389      	.DW  _0x0*2+765
                 
00034d 0013      	.DW  0x13
00034e 05da      	.DW  _0x9B+420
00034f 03b9      	.DW  _0x0*2+813
                 
000350 0019      	.DW  0x19
000351 05ed      	.DW  _0x9B+439
000352 03cc      	.DW  _0x0*2+832
                 
000353 001f      	.DW  0x1F
000354 0606      	.DW  _0x9B+464
000355 02f9      	.DW  _0x0*2+621
                 
000356 001d      	.DW  0x1D
000357 0625      	.DW  _0x9B+495
000358 039c      	.DW  _0x0*2+784
                 
000359 001f      	.DW  0x1F
00035a 0642      	.DW  _0x9B+524
00035b 02f9      	.DW  _0x0*2+621
                 
00035c 0003      	.DW  0x03
00035d 0661      	.DW  _0x9B+555
00035e 029a      	.DW  _0x0*2+526
                 
00035f 0003      	.DW  0x03
000360 0664      	.DW  _0x9B+558
000361 029a      	.DW  _0x0*2+526
                 
000362 000e      	.DW  0x0E
000363 0667      	.DW  _0x9B+561
000364 03e5      	.DW  _0x0*2+857
                 
000365 0002      	.DW  0x02
000366 0675      	.DW  _0x9B+575
000367 0180      	.DW  _0x0*2+244
                 
000368 0002      	.DW  0x02
000369 0677      	.DW  _0x9B+577
00036a 0180      	.DW  _0x0*2+244
                 
00036b 0013      	.DW  0x13
00036c 0679      	.DW  _0x9B+579
00036d 03f3      	.DW  _0x0*2+871
                 
00036e 0008      	.DW  0x08
00036f 068c      	.DW  _0x9B+598
000370 0406      	.DW  _0x0*2+890
                 
000371 001a      	.DW  0x1A
000372 0694      	.DW  _0x9B+606
000373 040e      	.DW  _0x0*2+898
                 
000374 001f      	.DW  0x1F
000375 06ae      	.DW  _0x9B+632
000376 02f9      	.DW  _0x0*2+621
                 
000377 0014      	.DW  0x14
000378 06cd      	.DW  _0x9B+663
000379 0428      	.DW  _0x0*2+924
                 
00037a 0010      	.DW  0x10
00037b 06e1      	.DW  _0x13C
00037c 043c      	.DW  _0x0*2+944
                 
00037d 0002      	.DW  0x02
00037e 06f1      	.DW  _0x13C+16
00037f 0180      	.DW  _0x0*2+244
                 
000380 001d      	.DW  0x1D
000381 06f3      	.DW  _0x148
000382 044c      	.DW  _0x0*2+960
                 
000383 0016      	.DW  0x16
000384 0710      	.DW  _0x148+29
000385 0469      	.DW  _0x0*2+989
                 
000386 001a      	.DW  0x1A
000387 0726      	.DW  _0x148+51
000388 047f      	.DW  _0x0*2+1011
                 
000389 001a      	.DW  0x1A
00038a 0740      	.DW  _0x148+77
00038b 0499      	.DW  _0x0*2+1037
                 
00038c 0019      	.DW  0x19
00038d 075a      	.DW  _0x148+103
00038e 04b3      	.DW  _0x0*2+1063
                 
00038f 0016      	.DW  0x16
000390 0773      	.DW  _0x148+128
000391 04cc      	.DW  _0x0*2+1088
                 
000392 0014      	.DW  0x14
000393 0789      	.DW  _0x148+150
000394 04e2      	.DW  _0x0*2+1110
                 
000395 000a      	.DW  0x0A
000396 079d      	.DW  _0x148+170
000397 04f6      	.DW  _0x0*2+1130
                 
000398 000d      	.DW  0x0D
000399 07a7      	.DW  _0x148+180
00039a 0500      	.DW  _0x0*2+1140
                 
00039b 0002      	.DW  0x02
00039c 0830      	.DW  _previous_count_S0000015000
00039d 008a      	.DW  _0x19B*2
                 
00039e 000b      	.DW  0x0B
00039f 07b4      	.DW  _0x19C
0003a0 050d      	.DW  _0x0*2+1153
                 
0003a1 0006      	.DW  0x06
0003a2 07bf      	.DW  _0x19C+11
0003a3 0518      	.DW  _0x0*2+1164
                 
0003a4 000c      	.DW  0x0C
0003a5 07c5      	.DW  _0x19C+17
0003a6 051e      	.DW  _0x0*2+1170
                 
0003a7 0005      	.DW  0x05
0003a8 07d1      	.DW  _0x19C+29
0003a9 052a      	.DW  _0x0*2+1182
                 
0003aa 0008      	.DW  0x08
0003ab 07d6      	.DW  _0x19C+34
0003ac 052f      	.DW  _0x0*2+1187
                 
0003ad 0001      	.DW  0x01
0003ae 0832      	.DW  __seed_G100
0003af 0538      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0003b0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0003b1 94f8      	CLI
0003b2 27ee      	CLR  R30
0003b3 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0003b4 e0f1      	LDI  R31,1
0003b5 bffb      	OUT  GICR,R31
0003b6 bfeb      	OUT  GICR,R30
0003b7 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0003b8 e08d      	LDI  R24,(14-2)+1
0003b9 e0a2      	LDI  R26,2
0003ba 27bb      	CLR  R27
                 __CLEAR_REG:
0003bb 93ed      	ST   X+,R30
0003bc 958a      	DEC  R24
0003bd f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0003be e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0003bf e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0003c0 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0003c1 93ed      	ST   X+,R30
0003c2 9701      	SBIW R24,1
0003c3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0003c4 e4e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0003c5 e0f5      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0003c6 9185      	LPM  R24,Z+
0003c7 9195      	LPM  R25,Z+
0003c8 9700      	SBIW R24,0
0003c9 f061      	BREQ __GLOBAL_INI_END
0003ca 91a5      	LPM  R26,Z+
0003cb 91b5      	LPM  R27,Z+
0003cc 9005      	LPM  R0,Z+
0003cd 9015      	LPM  R1,Z+
0003ce 01bf      	MOVW R22,R30
0003cf 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0003d0 9005      	LPM  R0,Z+
0003d1 920d      	ST   X+,R0
0003d2 9701      	SBIW R24,1
0003d3 f7e1      	BRNE __GLOBAL_INI_LOOP
0003d4 01fb      	MOVW R30,R22
0003d5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0003d6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0003d7 bfed      	OUT  SPL,R30
0003d8 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0003d9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0003da e2c2      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0003db e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0003dc 940c 03de 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x222
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;
                 ;#define LCD_PRT PORTA // LCD DATA PORT
                 ;#define LCD_DDR DDRA  // LCD DATA DDR
                 ;#define LCD_PIN PINA  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTB // keyboard PORT
                 ;#define KEY_DDR DDRB  // keyboard DDR
                 ;#define KEY_PIN PINB  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 5
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;void I2C_init();
                 ;void I2C_start();
                 ;void I2C_write(unsigned char data);
                 ;unsigned char I2C_read(unsigned char ackVal);
                 ;void I2C_stop();
                 ;void rtc_init();
                 ;void rtc_getTime(unsigned char*, unsigned char*, unsigned char*);
                 ;void rtc_getDate(unsigned char*, unsigned char*, unsigned char*, unsigned char*);
                 ;void Timer2_Init();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {{'7', '8', '9', 'O'},
                 ;                              {'4', '5', '6', 'D'},
                 ;                              {'1', '2', '3', 'C'},
                 ;                              {'L', '0', 'R', 'E'}};
                 
                 	.DSEG
                 ;
                 ;unsigned char stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 1;
                 ;char* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
                 _0x4:
000222           	.BYTE 0x1C
                 ;char time[20] = "";
                 ;unsigned char submitTime = 5;
                 ;unsigned char timerCount = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;    STAGE_SHOW_CLOCK,
                 ;    STAGE_SET_TIMER,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;    OPTION_SET_TIMER = 9,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0076     int i, j;
                 ; 0000 0077     unsigned char st_counts;
                 ; 0000 0078     unsigned char data;
                 ; 0000 0079     unsigned char second, minute, hour;
                 ; 0000 007A     unsigned char day, date, month, year;
                 ; 0000 007B 
                 ; 0000 007C     KEY_DDR = 0xF0;
0003de 9727      	SBIW R28,7
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
                 ;	second -> Y+6
                 ;	minute -> Y+5
                 ;	hour -> Y+4
                 ;	day -> Y+3
                 ;	date -> Y+2
                 ;	month -> Y+1
                 ;	year -> Y+0
0003df efe0      	LDI  R30,LOW(240)
0003e0 bbe7      	OUT  0x17,R30
                 ; 0000 007D     KEY_PRT = 0xFF;
0003e1 efef      	LDI  R30,LOW(255)
0003e2 bbe8      	OUT  0x18,R30
                 ; 0000 007E     KEY_PRT &= 0x0F;                  // ground all rows at once
0003e3 b3e8      	IN   R30,0x18
0003e4 70ef      	ANDI R30,LOW(0xF)
0003e5 bbe8      	OUT  0x18,R30
                 ; 0000 007F     MCUCR = 0x02;                     // make INT0 falling edge triggered
0003e6 e0e2      	LDI  R30,LOW(2)
0003e7 bfe5      	OUT  0x35,R30
                 ; 0000 0080     GICR = (1 << INT0);               // enable external interrupt 0
0003e8 e4e0      	LDI  R30,LOW(64)
0003e9 bfeb      	OUT  0x3B,R30
                 ; 0000 0081     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
0003ea 9a8f      	SBI  0x11,7
                 ; 0000 0082     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
0003eb 9897      	CBI  0x12,7
                 ; 0000 0083     USART_init(0x33);
0003ec e3a3      	LDI  R26,LOW(51)
0003ed e0b0      	LDI  R27,0
0003ee 940e 0c02 	CALL _USART_init
                 ; 0000 0084     HCSR04Init(); // Initialize ultrasonic sensor
0003f0 940e 0c89 	CALL _HCSR04Init
                 ; 0000 0085     lcd_init();
0003f2 940e 0aed 	CALL _lcd_init
                 ; 0000 0086     rtc_init();
0003f4 940e 0dad 	CALL _rtc_init
                 ; 0000 0087 
                 ; 0000 0088 #asm("sei")           // enable interrupts
0003f6 9478      	sei
                 ; 0000 0089     lcdCommand(0x01); // clear LCD
0003f7 e0a1      	LDI  R26,LOW(1)
0003f8 940e 0ad9 	CALL _lcdCommand
                 ; 0000 008A     while (1)
                 _0x6:
                 ; 0000 008B     {
                 ; 0000 008C         if (stage == STAGE_INIT_MENU)
0003fa 2055      	TST  R5
0003fb f419      	BRNE _0x9
                 ; 0000 008D         {
                 ; 0000 008E             show_menu();
0003fc 940e 0b68 	CALL _show_menu
                 ; 0000 008F         }
                 ; 0000 0090         else if (stage == STAGE_ATTENDENC_MENU)
0003fe c2bb      	RJMP _0xA
                 _0x9:
0003ff e0e1      	LDI  R30,LOW(1)
000400 15e5      	CP   R30,R5
000401 f471      	BRNE _0xB
                 ; 0000 0091         {
                 ; 0000 0092             lcdCommand(0x01);
000402 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0093             lcd_gotoxy(1, 1);
                 ; 0000 0094             lcd_print("1: Submit Student Code");
                +
000404 e3ae     +LDI R26 , LOW ( _0xC + ( 0 ) )
000405 e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
000406 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0095             lcd_gotoxy(1, 2);
                 ; 0000 0096             lcd_print("2: Submit With Card");
                +
000408 e5a5     +LDI R26 , LOW ( _0xC + ( 23 ) )
000409 e0b2     +LDI R27 , HIGH ( _0xC + ( 23 ) )
                 	__POINTW2MN _0xC,23
00040a 940e 0b20 	CALL _lcd_print
                 ; 0000 0097             while (stage == STAGE_ATTENDENC_MENU)
                 _0xD:
00040c e0e1      	LDI  R30,LOW(1)
00040d 15e5      	CP   R30,R5
00040e f3e9      	BREQ _0xD
                 ; 0000 0098                 ;
                 ; 0000 0099         }
                 ; 0000 009A         else if (stage == STAGE_SUBMIT_CODE)
00040f c2aa      	RJMP _0x10
                 _0xB:
000410 e0e2      	LDI  R30,LOW(2)
000411 15e5      	CP   R30,R5
000412 f4b1      	BRNE _0x11
                 ; 0000 009B         {
                 ; 0000 009C             if(submitTime == 0)
000413 2099      	TST  R9
000414 f431      	BRNE _0x12
                 ; 0000 009D             {
                 ; 0000 009E                 lcdCommand(0x01);
000415 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 009F                 lcd_gotoxy(1, 1);
                 ; 0000 00A0                 lcd_print("Time for submit is finished");
                +
000417 e6a9     +LDI R26 , LOW ( _0xC + ( 43 ) )
000418 e0b2     +LDI R27 , HIGH ( _0xC + ( 43 ) )
                 	__POINTW2MN _0xC,43
000419 940e 1023 	CALL SUBOPT_0x2
                 ; 0000 00A1                 delay_ms(2000);
                 ; 0000 00A2                 stage = STAGE_INIT_MENU;
                 ; 0000 00A3             }
                 ; 0000 00A4             lcdCommand(0x01);
                 _0x12:
00041b 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00A5             lcd_gotoxy(1, 1);
                 ; 0000 00A6             lcd_print("Enter your student code:");
                +
00041d e8a5     +LDI R26 , LOW ( _0xC + ( 71 ) )
00041e e0b2     +LDI R27 , HIGH ( _0xC + ( 71 ) )
                 	__POINTW2MN _0xC,71
00041f 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 00A7             lcd_gotoxy(1, 2);
                 ; 0000 00A8             lcdCommand(0x0f);   // display on, cursor blinking
000421 940e 102b 	CALL SUBOPT_0x3
                 ; 0000 00A9             delay_us(100 * 16); // wait
                 ; 0000 00AA             while (stage == STAGE_SUBMIT_CODE)
                 _0x13:
000423 e0e2      	LDI  R30,LOW(2)
000424 15e5      	CP   R30,R5
000425 f3e9      	BREQ _0x13
                 ; 0000 00AB                 ;
                 ; 0000 00AC             lcdCommand(0x0c);   // display on, cursor off
000426 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 00AD             delay_us(100 * 16); // wait
                 ; 0000 00AE         }
                 ; 0000 00AF         else if(stage == STAGE_SUBMIT_WITH_CARD)
000428 c291      	RJMP _0x16
                 _0x11:
000429 e0e3      	LDI  R30,LOW(3)
00042a 15e5      	CP   R30,R5
00042b f009      	BREQ PC+2
00042c c0b4      	RJMP _0x17
                 ; 0000 00B0         {
                 ; 0000 00B1             memset(buffer,0,32);
00042d 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 00B2             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x18:
00042f e0e3      	LDI  R30,LOW(3)
000430 15e5      	CP   R30,R5
000431 f009      	BREQ PC+2
000432 c0ad      	RJMP _0x1A
                 ; 0000 00B3             {
                 ; 0000 00B4                 if(submitTime == 0)
000433 2099      	TST  R9
000434 f439      	BRNE _0x1B
                 ; 0000 00B5                 {
                 ; 0000 00B6                     lcdCommand(0x01);
000435 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00B7                     lcd_gotoxy(1, 1);
                 ; 0000 00B8                     lcd_print("Time for submit is finished");
                +
000437 e9ae     +LDI R26 , LOW ( _0xC + ( 96 ) )
000438 e0b2     +LDI R27 , HIGH ( _0xC + ( 96 ) )
                 	__POINTW2MN _0xC,96
000439 940e 1023 	CALL SUBOPT_0x2
                 ; 0000 00B9                     delay_ms(2000);
                 ; 0000 00BA                     stage = STAGE_INIT_MENU;
                 ; 0000 00BB                     break;
00043b c0a4      	RJMP _0x1A
                 ; 0000 00BC                 }
                 ; 0000 00BD                 lcdCommand(0x01);
                 _0x1B:
00043c 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00BE                 lcd_gotoxy(1, 1);
                 ; 0000 00BF                 lcd_print("Bring your card near device:");
                +
00043e ebaa     +LDI R26 , LOW ( _0xC + ( 124 ) )
00043f e0b2     +LDI R27 , HIGH ( _0xC + ( 124 ) )
                 	__POINTW2MN _0xC,124
000440 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 00C0                 lcd_gotoxy(1, 2);
                 ; 0000 00C1                 delay_us(100 * 16); // wait
000442 940e 1045 	CALL SUBOPT_0x6
                 ; 0000 00C2                 while((data = USART_Receive()) != '\r'){
                 _0x1C:
000444 940e 0bf9 	CALL _USART_Receive
000446 2f4e      	MOV  R20,R30
000447 30ed      	CPI  R30,LOW(0xD)
000448 f049      	BREQ _0x1E
                 ; 0000 00C3                     if(stage != STAGE_SUBMIT_WITH_CARD)
000449 e0e3      	LDI  R30,LOW(3)
00044a 15e5      	CP   R30,R5
00044b f431      	BRNE _0x1E
                 ; 0000 00C4                         break;
                 ; 0000 00C5                     buffer[strlen(buffer)] = data;
00044c 940e 104a 	CALL SUBOPT_0x7
00044e 51e2      	SUBI R30,LOW(-_buffer)
00044f 4ff8      	SBCI R31,HIGH(-_buffer)
000450 8340      	ST   Z,R20
                 ; 0000 00C6                 }
000451 cff2      	RJMP _0x1C
                 _0x1E:
                 ; 0000 00C7                 if(stage != STAGE_SUBMIT_WITH_CARD){
000452 e0e3      	LDI  R30,LOW(3)
000453 15e5      	CP   R30,R5
000454 f019      	BREQ _0x20
                 ; 0000 00C8                     memset(buffer,0,32);
000455 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 00C9                     break;
000457 c088      	RJMP _0x1A
                 ; 0000 00CA                 }
                 ; 0000 00CB                 if (strncmp(buffer, "40", 2) != 0 ||
                 _0x20:
                 ; 0000 00CC                         strlen(buffer) != 8)
000458 940e 104e 	CALL SUBOPT_0x8
                +
00045a ede7     +LDI R30 , LOW ( _0xC + ( 153 ) )
00045b e0f2     +LDI R31 , HIGH ( _0xC + ( 153 ) )
                 	__POINTW1MN _0xC,153
00045c 940e 1053 	CALL SUBOPT_0x9
00045e f431      	BRNE _0x22
00045f 940e 104a 	CALL SUBOPT_0x7
000461 30e8      	CPI  R30,LOW(0x8)
000462 e0a0      	LDI  R26,HIGH(0x8)
000463 07fa      	CPC  R31,R26
000464 f051      	BREQ _0x21
                 _0x22:
                 ; 0000 00CD                 {
                 ; 0000 00CE                     lcdCommand(0x01);
000465 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00CF                     lcd_gotoxy(1, 1);
                 ; 0000 00D0                     lcd_print("Invalid Card");
                +
000467 edaa     +LDI R26 , LOW ( _0xC + ( 156 ) )
000468 e0b2     +LDI R27 , HIGH ( _0xC + ( 156 ) )
                 	__POINTW2MN _0xC,156
000469 940e 0b20 	CALL _lcd_print
                 ; 0000 00D1                     BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00046b 9a97      	SBI  0x12,7
                 ; 0000 00D2                     delay_ms(2000);
00046c 940e 105a 	CALL SUBOPT_0xA
                 ; 0000 00D3                     BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00D4                 }
                 ; 0000 00D5                 else{
00046e c06e      	RJMP _0x24
                 _0x21:
                 ; 0000 00D6                     if (search_student_code() > 0){
00046f 940e 0c0f 	CALL _search_student_code
000471 30e1      	CPI  R30,LOW(0x1)
000472 f040      	BRLO _0x25
                 ; 0000 00D7                         BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000473 9a97      	SBI  0x12,7
                 ; 0000 00D8                         lcdCommand(0x01);
000474 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00D9                         lcd_gotoxy(1, 1);
                 ; 0000 00DA                         lcd_print("Duplicate Student Code");
                +
000476 eea7     +LDI R26 , LOW ( _0xC + ( 169 ) )
000477 e0b2     +LDI R27 , HIGH ( _0xC + ( 169 ) )
                 	__POINTW2MN _0xC,169
000478 940e 1060 	CALL SUBOPT_0xB
                 ; 0000 00DB                         delay_ms(2000);
                 ; 0000 00DC                         BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00DD                     }
                 ; 0000 00DE                     else{
00047a c062      	RJMP _0x26
                 _0x25:
                 ; 0000 00DF                         // save the buffer to EEPROM
                 ; 0000 00E0                         st_counts = read_byte_from_eeprom(0x0);
00047b 940e 1063 	CALL SUBOPT_0xC
                 ; 0000 00E1                         for (i = 0; i < 8; i++)
                +
00047d e000     +LDI R16 , LOW ( 0 )
00047e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x28:
                +
00047f 3008     +CPI R16 , LOW ( 8 )
000480 e0e0     +LDI R30 , HIGH ( 8 )
000481 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000482 f474      	BRGE _0x29
                 ; 0000 00E2                         {
                 ; 0000 00E3                             write_byte_to_eeprom(i + ((st_counts + 1) * 16), buffer[i]);
000483 940e 1069 	CALL SUBOPT_0xD
000485 940e 106f 	CALL SUBOPT_0xE
000487 eeae      	LDI  R26,LOW(_buffer)
000488 e0b7      	LDI  R27,HIGH(_buffer)
000489 0fa0      	ADD  R26,R16
00048a 1fb1      	ADC  R27,R17
00048b 91ac      	LD   R26,X
00048c 940e 0be8 	CALL _write_byte_to_eeprom
                 ; 0000 00E4                         }
                +
00048e 5f0f     +SUBI R16 , LOW ( - 1 )
00048f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000490 cfee      	RJMP _0x28
                 _0x29:
                 ; 0000 00E5                         rtc_getTime(&hour, &minute, &second);
000491 940e 1074 	CALL SUBOPT_0xF
                 ; 0000 00E6                         sprintf(time, "%02x%02x", hour, minute);
000493 940e 1085 	CALL SUBOPT_0x10
000495 940e 108a 	CALL SUBOPT_0x11
000497 940e 1097 	CALL SUBOPT_0x12
                 ; 0000 00E7                         for (i = 0; i < 4; i++)
                +
000499 e000     +LDI R16 , LOW ( 0 )
00049a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2B:
                +
00049b 3004     +CPI R16 , LOW ( 4 )
00049c e0e0     +LDI R30 , HIGH ( 4 )
00049d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00049e f47c      	BRGE _0x2C
                 ; 0000 00E8                         {
                 ; 0000 00E9                             write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i]);
00049f 940e 1069 	CALL SUBOPT_0xD
0004a1 9638      	ADIW R30,8
0004a2 940e 106f 	CALL SUBOPT_0xE
0004a4 e1ac      	LDI  R26,LOW(_time)
0004a5 e0b8      	LDI  R27,HIGH(_time)
0004a6 0fa0      	ADD  R26,R16
0004a7 1fb1      	ADC  R27,R17
0004a8 91ac      	LD   R26,X
0004a9 940e 0be8 	CALL _write_byte_to_eeprom
                 ; 0000 00EA                         }
                +
0004ab 5f0f     +SUBI R16 , LOW ( - 1 )
0004ac 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004ad cfed      	RJMP _0x2B
                 _0x2C:
                 ; 0000 00EB                         rtc_getDate(&year, &month, &date, &day);
0004ae 940e 109c 	CALL SUBOPT_0x13
                 ; 0000 00EC                         sprintf(time, "%02x%02x", month, date);
0004b0 940e 1085 	CALL SUBOPT_0x10
0004b2 81ed      	LDD  R30,Y+5
0004b3 940e 10b0 	CALL SUBOPT_0x14
0004b5 85ea      	LDD  R30,Y+10
0004b6 940e 10b0 	CALL SUBOPT_0x14
0004b8 940e 1097 	CALL SUBOPT_0x12
                 ; 0000 00ED                         for (i = 4; i < 8; i++)
                +
0004ba e004     +LDI R16 , LOW ( 4 )
0004bb e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 _0x2E:
                +
0004bc 3008     +CPI R16 , LOW ( 8 )
0004bd e0e0     +LDI R30 , HIGH ( 8 )
0004be 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0004bf f45c      	BRGE _0x2F
                 ; 0000 00EE                         {
                 ; 0000 00EF                             write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i - 4]);
0004c0 940e 1069 	CALL SUBOPT_0xD
0004c2 9638      	ADIW R30,8
0004c3 940e 106f 	CALL SUBOPT_0xE
0004c5 01f8      	MOVW R30,R16
0004c6 940e 10b6 	CALL SUBOPT_0x15
                 ; 0000 00F0                         }
                +
0004c8 5f0f     +SUBI R16 , LOW ( - 1 )
0004c9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004ca cff1      	RJMP _0x2E
                 _0x2F:
                 ; 0000 00F1                         write_byte_to_eeprom(0x0, st_counts + 1);
0004cb 940e 10bc 	CALL SUBOPT_0x16
0004cd 2fa5      	MOV  R26,R21
0004ce 5faf      	SUBI R26,-LOW(1)
0004cf 940e 0be8 	CALL _write_byte_to_eeprom
                 ; 0000 00F2                         lcdCommand(0x01);
0004d1 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 00F3                         lcd_gotoxy(1, 1);
                 ; 0000 00F4                         lcd_print("Student added with ID:");
                +
0004d3 efae     +LDI R26 , LOW ( _0xC + ( 192 ) )
0004d4 e0b2     +LDI R27 , HIGH ( _0xC + ( 192 ) )
                 	__POINTW2MN _0xC,192
0004d5 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 00F5                         lcd_gotoxy(1, 2);
                 ; 0000 00F6                         lcd_print(buffer);
0004d7 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 00F7                         delay_ms(3000); // wait
0004d9 eba8      	LDI  R26,LOW(3000)
0004da e0bb      	LDI  R27,HIGH(3000)
0004db 940e 1232 	CALL _delay_ms
                 ; 0000 00F8                     }
                 _0x26:
                 ; 0000 00F9                 }
                 _0x24:
                 ; 0000 00FA                 memset(buffer,0,32);
0004dd 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 00FB             }
0004df cf4f      	RJMP _0x18
                 _0x1A:
                 ; 0000 00FC         }
                 ; 0000 00FD         else if (stage == STAGE_TEMPERATURE_MONITORING)
0004e0 c1d9      	RJMP _0x30
                 _0x17:
0004e1 e0e4      	LDI  R30,LOW(4)
0004e2 15e5      	CP   R30,R5
0004e3 f419      	BRNE _0x31
                 ; 0000 00FE         {
                 ; 0000 00FF             show_temperature();
0004e4 940e 0b37 	CALL _show_temperature
                 ; 0000 0100         }
                 ; 0000 0101         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0004e6 c1d3      	RJMP _0x32
                 _0x31:
0004e7 e0e5      	LDI  R30,LOW(5)
0004e8 15e5      	CP   R30,R5
0004e9 f009      	BREQ PC+2
0004ea c082      	RJMP _0x33
                 ; 0000 0102         {
                 ; 0000 0103             lcdCommand(0x01);
0004eb 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0104             lcd_gotoxy(1, 1);
                 ; 0000 0105             lcd_print("Number of students : ");
                +
0004ed e1a5     +LDI R26 , LOW ( _0xC + ( 215 ) )
0004ee e0b3     +LDI R27 , HIGH ( _0xC + ( 215 ) )
                 	__POINTW2MN _0xC,215
0004ef 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0106             lcd_gotoxy(1, 2);
                 ; 0000 0107             st_counts = read_byte_from_eeprom(0x0);
0004f1 940e 1063 	CALL SUBOPT_0xC
                 ; 0000 0108             memset(buffer, 0, 32);
0004f3 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0109             itoa(st_counts, buffer);
0004f5 2fe5      	MOV  R30,R21
0004f6 940e 10c5 	CALL SUBOPT_0x18
                 ; 0000 010A             lcd_print(buffer);
0004f8 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 010B             delay_ms(1000);
0004fa eea8      	LDI  R26,LOW(1000)
0004fb e0b3      	LDI  R27,HIGH(1000)
0004fc 940e 1232 	CALL _delay_ms
                 ; 0000 010C 
                 ; 0000 010D             for (i = 0; i < st_counts; i++)
                +
0004fe e000     +LDI R16 , LOW ( 0 )
0004ff e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x35:
000500 2fe5      	MOV  R30,R21
000501 01d8      	MOVW R26,R16
000502 e0f0      	LDI  R31,0
000503 17ae      	CP   R26,R30
000504 07bf      	CPC  R27,R31
000505 f00c      	BRLT PC+2
000506 c05c      	RJMP _0x36
                 ; 0000 010E             {
                 ; 0000 010F                 memset(buffer, 0, 32);
000507 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0110                 for (j = 0; j < 8; j++)
                +
000509 e020     +LDI R18 , LOW ( 0 )
00050a e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x38:
                +
00050b 3028     +CPI R18 , LOW ( 8 )
00050c e0e0     +LDI R30 , HIGH ( 8 )
00050d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00050e f484      	BRGE _0x39
                 ; 0000 0111                 {
                 ; 0000 0112                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 16));
00050f 01f9      	MOVW R30,R18
000510 51e2      	SUBI R30,LOW(-_buffer)
000511 4ff8      	SBCI R31,HIGH(-_buffer)
000512 93ff      	PUSH R31
000513 93ef      	PUSH R30
000514 940e 10cc 	CALL SUBOPT_0x19
000516 01df      	MOVW R26,R30
000517 940e 0bdc 	CALL _read_byte_from_eeprom
000519 91af      	POP  R26
00051a 91bf      	POP  R27
00051b 93ec      	ST   X,R30
                 ; 0000 0113                 }
                +
00051c 5f2f     +SUBI R18 , LOW ( - 1 )
00051d 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00051e cfec      	RJMP _0x38
                 _0x39:
                 ; 0000 0114                 buffer[j] = '\0';
00051f 940e 10d3 	CALL SUBOPT_0x1A
                 ; 0000 0115                 lcdCommand(0x01);
000521 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0116                 lcd_gotoxy(1, 1);
                 ; 0000 0117                 lcd_print(buffer);
000523 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 0118 
                 ; 0000 0119                 memset(buffer, 0, 32);
000525 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 011A                 for (j = 0; j < 8; j++)
                +
000527 e020     +LDI R18 , LOW ( 0 )
000528 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3B:
                +
000529 3028     +CPI R18 , LOW ( 8 )
00052a e0e0     +LDI R30 , HIGH ( 8 )
00052b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
00052c f47c      	BRGE _0x3C
                 ; 0000 011B                 {
                 ; 0000 011C                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 16) + 8);
00052d 01f9      	MOVW R30,R18
00052e 51e2      	SUBI R30,LOW(-_buffer)
00052f 4ff8      	SBCI R31,HIGH(-_buffer)
000530 93ff      	PUSH R31
000531 93ef      	PUSH R30
000532 940e 10cc 	CALL SUBOPT_0x19
000534 940e 10da 	CALL SUBOPT_0x1B
000536 91af      	POP  R26
000537 91bf      	POP  R27
000538 93ec      	ST   X,R30
                 ; 0000 011D                 }
                +
000539 5f2f     +SUBI R18 , LOW ( - 1 )
00053a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00053b cfed      	RJMP _0x3B
                 _0x3C:
                 ; 0000 011E                 buffer[j] = '\0';
00053c 940e 10d3 	CALL SUBOPT_0x1A
                 ; 0000 011F                 lcd_gotoxy(1, 2);
00053e 940e 10de 	CALL SUBOPT_0x1C
                 ; 0000 0120                 snprintf(time, 3, "%s", buffer);
000540 940e 10e3 	CALL SUBOPT_0x1D
000542 eeee      	LDI  R30,LOW(_buffer)
000543 e0f7      	LDI  R31,HIGH(_buffer)
000544 940e 10f0 	CALL SUBOPT_0x1E
                 ; 0000 0121                 lcd_print(time);
                 ; 0000 0122                 lcd_print(":");
                +
000546 e2ab     +LDI R26 , LOW ( _0xC + ( 237 ) )
000547 e0b3     +LDI R27 , HIGH ( _0xC + ( 237 ) )
                 	__POINTW2MN _0xC,237
000548 940e 10fc 	CALL SUBOPT_0x1F
                 ; 0000 0123                 snprintf(time, 3, "%s", buffer + 2);
                +
00054a efe0     +LDI R30 , LOW ( _buffer + ( 2 ) )
00054b e0f7     +LDI R31 , HIGH ( _buffer + ( 2 ) )
                 	__POINTW1MN _buffer,2
00054c 940e 10f0 	CALL SUBOPT_0x1E
                 ; 0000 0124                 lcd_print(time);
                 ; 0000 0125                 lcd_print(" ");
                +
00054e e2ad     +LDI R26 , LOW ( _0xC + ( 239 ) )
00054f e0b3     +LDI R27 , HIGH ( _0xC + ( 239 ) )
                 	__POINTW2MN _0xC,239
000550 940e 10fc 	CALL SUBOPT_0x1F
                 ; 0000 0126                 snprintf(time, 3, "%s", buffer + 4);
                +
000552 efe2     +LDI R30 , LOW ( _buffer + ( 4 ) )
000553 e0f7     +LDI R31 , HIGH ( _buffer + ( 4 ) )
                 	__POINTW1MN _buffer,4
000554 940e 10f0 	CALL SUBOPT_0x1E
                 ; 0000 0127                 lcd_print(time);
                 ; 0000 0128                 lcd_print("/");
                +
000556 e2af     +LDI R26 , LOW ( _0xC + ( 241 ) )
000557 e0b3     +LDI R27 , HIGH ( _0xC + ( 241 ) )
                 	__POINTW2MN _0xC,241
000558 940e 10fc 	CALL SUBOPT_0x1F
                 ; 0000 0129                 snprintf(time, 3, "%s", buffer + 6);
                +
00055a efe4     +LDI R30 , LOW ( _buffer + ( 6 ) )
00055b e0f7     +LDI R31 , HIGH ( _buffer + ( 6 ) )
                 	__POINTW1MN _buffer,6
00055c 940e 10f0 	CALL SUBOPT_0x1E
                 ; 0000 012A                 lcd_print(time);
                 ; 0000 012B                 delay_ms(2000);
00055e 940e 10ff 	CALL SUBOPT_0x20
                 ; 0000 012C             }
                +
000560 5f0f     +SUBI R16 , LOW ( - 1 )
000561 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000562 cf9d      	RJMP _0x35
                 _0x36:
                 ; 0000 012D 
                 ; 0000 012E             lcdCommand(0x01);
000563 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 012F             lcd_gotoxy(1, 1);
                 ; 0000 0130             lcd_print("Press Cancel To Go Back");
                +
000565 e3a1     +LDI R26 , LOW ( _0xC + ( 243 ) )
000566 e0b3     +LDI R27 , HIGH ( _0xC + ( 243 ) )
                 	__POINTW2MN _0xC,243
000567 940e 0b20 	CALL _lcd_print
                 ; 0000 0131             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x3D:
000569 e0e5      	LDI  R30,LOW(5)
00056a 15e5      	CP   R30,R5
00056b f3e9      	BREQ _0x3D
                 ; 0000 0132                 ;
                 ; 0000 0133         }
                 ; 0000 0134         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
00056c c14d      	RJMP _0x40
                 _0x33:
00056d e0e6      	LDI  R30,LOW(6)
00056e 15e5      	CP   R30,R5
00056f f009      	BREQ PC+2
000570 c087      	RJMP _0x41
                 ; 0000 0135         {
                 ; 0000 0136             lcdCommand(0x01);
000571 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0137             lcd_gotoxy(1, 1);
                 ; 0000 0138             lcd_print("Start Transferring...");
                +
000573 e4a9     +LDI R26 , LOW ( _0xC + ( 267 ) )
000574 e0b3     +LDI R27 , HIGH ( _0xC + ( 267 ) )
                 	__POINTW2MN _0xC,267
000575 d5aa      	RCALL _lcd_print
                 ; 0000 0139             st_counts = read_byte_from_eeprom(0x0);
000576 940e 1063 	CALL SUBOPT_0xC
                 ; 0000 013A             for (i = 0; i < st_counts; i++)
                +
000578 e000     +LDI R16 , LOW ( 0 )
000579 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x43:
00057a 2fe5      	MOV  R30,R21
00057b 01d8      	MOVW R26,R16
00057c e0f0      	LDI  R31,0
00057d 17ae      	CP   R26,R30
00057e 07bf      	CPC  R27,R31
00057f f00c      	BRLT PC+2
000580 c062      	RJMP _0x44
                 ; 0000 013B             {
                 ; 0000 013C                 for (j = 0; j < 8; j++)
                +
000581 e020     +LDI R18 , LOW ( 0 )
000582 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x46:
                +
000583 3028     +CPI R18 , LOW ( 8 )
000584 e0e0     +LDI R30 , HIGH ( 8 )
000585 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000586 f45c      	BRGE _0x47
                 ; 0000 013D                 {
                 ; 0000 013E                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16)));
000587 940e 10cc 	CALL SUBOPT_0x19
000589 01df      	MOVW R26,R30
00058a 940e 0bdc 	CALL _read_byte_from_eeprom
00058c 2fae      	MOV  R26,R30
00058d 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 013F                 }
                +
00058f 5f2f     +SUBI R18 , LOW ( - 1 )
000590 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000591 cff1      	RJMP _0x46
                 _0x47:
                 ; 0000 0140 
                 ; 0000 0141                 USART_Transmit('\r');
000592 e0ad      	LDI  R26,LOW(13)
000593 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0142 
                 ; 0000 0143                 for (j = 0; j < 2; j++)
                +
000595 e020     +LDI R18 , LOW ( 0 )
000596 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x49:
                +
000597 3022     +CPI R18 , LOW ( 2 )
000598 e0e0     +LDI R30 , HIGH ( 2 )
000599 073e     +CPC R19 , R30
                 	__CPWRN 18,19,2
00059a f454      	BRGE _0x4A
                 ; 0000 0144                 {
                 ; 0000 0145                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
00059b 940e 10cc 	CALL SUBOPT_0x19
00059d 940e 10da 	CALL SUBOPT_0x1B
00059f 2fae      	MOV  R26,R30
0005a0 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0146                 }
                +
0005a2 5f2f     +SUBI R18 , LOW ( - 1 )
0005a3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005a4 cff2      	RJMP _0x49
                 _0x4A:
                 ; 0000 0147                 USART_Transmit(':');
0005a5 e3aa      	LDI  R26,LOW(58)
0005a6 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0148                 for (j = 2; j < 4; j++)
                +
0005a8 e022     +LDI R18 , LOW ( 2 )
0005a9 e030     +LDI R19 , HIGH ( 2 )
                 	__GETWRN 18,19,2
                 _0x4C:
                +
0005aa 3024     +CPI R18 , LOW ( 4 )
0005ab e0e0     +LDI R30 , HIGH ( 4 )
0005ac 073e     +CPC R19 , R30
                 	__CPWRN 18,19,4
0005ad f454      	BRGE _0x4D
                 ; 0000 0149                 {
                 ; 0000 014A                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005ae 940e 10cc 	CALL SUBOPT_0x19
0005b0 940e 10da 	CALL SUBOPT_0x1B
0005b2 2fae      	MOV  R26,R30
0005b3 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 014B                 }
                +
0005b5 5f2f     +SUBI R18 , LOW ( - 1 )
0005b6 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005b7 cff2      	RJMP _0x4C
                 _0x4D:
                 ; 0000 014C                 USART_Transmit(' ');
0005b8 e2a0      	LDI  R26,LOW(32)
0005b9 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 014D                 for (j = 4; j < 6; j++)
                +
0005bb e024     +LDI R18 , LOW ( 4 )
0005bc e030     +LDI R19 , HIGH ( 4 )
                 	__GETWRN 18,19,4
                 _0x4F:
                +
0005bd 3026     +CPI R18 , LOW ( 6 )
0005be e0e0     +LDI R30 , HIGH ( 6 )
0005bf 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
0005c0 f454      	BRGE _0x50
                 ; 0000 014E                 {
                 ; 0000 014F                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005c1 940e 10cc 	CALL SUBOPT_0x19
0005c3 940e 10da 	CALL SUBOPT_0x1B
0005c5 2fae      	MOV  R26,R30
0005c6 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0150                 }
                +
0005c8 5f2f     +SUBI R18 , LOW ( - 1 )
0005c9 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005ca cff2      	RJMP _0x4F
                 _0x50:
                 ; 0000 0151                 USART_Transmit('/');
0005cb e2af      	LDI  R26,LOW(47)
0005cc 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0152                 for (j = 6; j < 8; j++)
                +
0005ce e026     +LDI R18 , LOW ( 6 )
0005cf e030     +LDI R19 , HIGH ( 6 )
                 	__GETWRN 18,19,6
                 _0x52:
                +
0005d0 3028     +CPI R18 , LOW ( 8 )
0005d1 e0e0     +LDI R30 , HIGH ( 8 )
0005d2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0005d3 f454      	BRGE _0x53
                 ; 0000 0153                 {
                 ; 0000 0154                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 16) + 8));
0005d4 940e 10cc 	CALL SUBOPT_0x19
0005d6 940e 10da 	CALL SUBOPT_0x1B
0005d8 2fae      	MOV  R26,R30
0005d9 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 0155                 }
                +
0005db 5f2f     +SUBI R18 , LOW ( - 1 )
0005dc 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005dd cff2      	RJMP _0x52
                 _0x53:
                 ; 0000 0156 
                 ; 0000 0157                 USART_Transmit('\r');
0005de 940e 1103 	CALL SUBOPT_0x21
                 ; 0000 0158                 USART_Transmit('\r');
                 ; 0000 0159 
                 ; 0000 015A                 delay_ms(500);
                 ; 0000 015B             }
                +
0005e0 5f0f     +SUBI R16 , LOW ( - 1 )
0005e1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0005e2 cf97      	RJMP _0x43
                 _0x44:
                 ; 0000 015C             for (j = 0; j < 8; j++)
                +
0005e3 e020     +LDI R18 , LOW ( 0 )
0005e4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x55:
                +
0005e5 3028     +CPI R18 , LOW ( 8 )
0005e6 e0e0     +LDI R30 , HIGH ( 8 )
0005e7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0005e8 f434      	BRGE _0x56
                 ; 0000 015D             {
                 ; 0000 015E                 USART_Transmit('=');
0005e9 e3ad      	LDI  R26,LOW(61)
0005ea 940e 0bf3 	CALL _USART_Transmit
                 ; 0000 015F             }
                +
0005ec 5f2f     +SUBI R18 , LOW ( - 1 )
0005ed 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0005ee cff6      	RJMP _0x55
                 _0x56:
                 ; 0000 0160 
                 ; 0000 0161             USART_Transmit('\r');
0005ef 940e 1103 	CALL SUBOPT_0x21
                 ; 0000 0162             USART_Transmit('\r');
                 ; 0000 0163             delay_ms(500);
                 ; 0000 0164 
                 ; 0000 0165             lcdCommand(0x01);
0005f1 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0166             lcd_gotoxy(1, 1);
                 ; 0000 0167             lcd_print("Usart Transmit Finished");
                +
0005f3 e5af     +LDI R26 , LOW ( _0xC + ( 289 ) )
0005f4 e0b3     +LDI R27 , HIGH ( _0xC + ( 289 ) )
                 	__POINTW2MN _0xC,289
0005f5 940e 1023 	CALL SUBOPT_0x2
                 ; 0000 0168             delay_ms(2000);
                 ; 0000 0169             stage = STAGE_INIT_MENU;
                 ; 0000 016A         }
                 ; 0000 016B         else if (stage == STAGE_STUDENT_MANAGMENT)
0005f7 c0c2      	RJMP _0x57
                 _0x41:
0005f8 e0e7      	LDI  R30,LOW(7)
0005f9 15e5      	CP   R30,R5
0005fa f469      	BRNE _0x58
                 ; 0000 016C         {
                 ; 0000 016D             lcdCommand(0x01);
0005fb 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 016E             lcd_gotoxy(1, 1);
                 ; 0000 016F             lcd_print("1: Search Student");
                +
0005fd e7a7     +LDI R26 , LOW ( _0xC + ( 313 ) )
0005fe e0b3     +LDI R27 , HIGH ( _0xC + ( 313 ) )
                 	__POINTW2MN _0xC,313
0005ff 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0170             lcd_gotoxy(1, 2);
                 ; 0000 0171             lcd_print("2: Delete Student");
                +
000601 e8a9     +LDI R26 , LOW ( _0xC + ( 331 ) )
000602 e0b3     +LDI R27 , HIGH ( _0xC + ( 331 ) )
                 	__POINTW2MN _0xC,331
000603 d51c      	RCALL _lcd_print
                 ; 0000 0172             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x59:
000604 e0e7      	LDI  R30,LOW(7)
000605 15e5      	CP   R30,R5
000606 f3e9      	BREQ _0x59
                 ; 0000 0173                 ;
                 ; 0000 0174         }
                 ; 0000 0175         else if (stage == STAGE_SEARCH_STUDENT)
000607 c0b2      	RJMP _0x5C
                 _0x58:
000608 e0e8      	LDI  R30,LOW(8)
000609 15e5      	CP   R30,R5
00060a f471      	BRNE _0x5D
                 ; 0000 0176         {
                 ; 0000 0177             lcdCommand(0x01);
00060b 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0178             lcd_gotoxy(1, 1);
                 ; 0000 0179             lcd_print("Enter Student Code For Search:");
                +
00060d e9ab     +LDI R26 , LOW ( _0xC + ( 349 ) )
00060e e0b3     +LDI R27 , HIGH ( _0xC + ( 349 ) )
                 	__POINTW2MN _0xC,349
00060f 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 017A             lcd_gotoxy(1, 2);
                 ; 0000 017B             lcdCommand(0x0f);   // display on, cursor blinking
000611 940e 102b 	CALL SUBOPT_0x3
                 ; 0000 017C             delay_us(100 * 16); // wait
                 ; 0000 017D             while (stage == STAGE_SEARCH_STUDENT)
                 _0x5E:
000613 e0e8      	LDI  R30,LOW(8)
000614 15e5      	CP   R30,R5
000615 f3e9      	BREQ _0x5E
                 ; 0000 017E                 ;
                 ; 0000 017F             lcdCommand(0x0c);   // display on, cursor off
000616 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 0180             delay_us(100 * 16); // wait
                 ; 0000 0181         }
                 ; 0000 0182         else if (stage == STAGE_DELETE_STUDENT)
000618 c0a1      	RJMP _0x61
                 _0x5D:
000619 e0e9      	LDI  R30,LOW(9)
00061a 15e5      	CP   R30,R5
00061b f471      	BRNE _0x62
                 ; 0000 0183         {
                 ; 0000 0184             lcdCommand(0x01);
00061c 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0185             lcd_gotoxy(1, 1);
                 ; 0000 0186             lcd_print("Enter Student Code For Delete:");
                +
00061e ebaa     +LDI R26 , LOW ( _0xC + ( 380 ) )
00061f e0b3     +LDI R27 , HIGH ( _0xC + ( 380 ) )
                 	__POINTW2MN _0xC,380
000620 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0187             lcd_gotoxy(1, 2);
                 ; 0000 0188             lcdCommand(0x0f);   // display on, cursor blinking
000622 940e 102b 	CALL SUBOPT_0x3
                 ; 0000 0189             delay_us(100 * 16); // wait
                 ; 0000 018A             while (stage == STAGE_DELETE_STUDENT)
                 _0x63:
000624 e0e9      	LDI  R30,LOW(9)
000625 15e5      	CP   R30,R5
000626 f3e9      	BREQ _0x63
                 ; 0000 018B                 ;
                 ; 0000 018C             lcdCommand(0x0c); // display on, cursor off
000627 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 018D             delay_us(100 * 16);
                 ; 0000 018E         }
                 ; 0000 018F         else if (stage == STAGE_TRAFFIC_MONITORING)
000629 c090      	RJMP _0x66
                 _0x62:
00062a e0ea      	LDI  R30,LOW(10)
00062b 15e5      	CP   R30,R5
00062c f421      	BRNE _0x67
                 ; 0000 0190         {
                 ; 0000 0191             startSonar();
00062d 940e 0cdf 	CALL _startSonar
                 ; 0000 0192             stage = STAGE_INIT_MENU;
00062f 2455      	CLR  R5
                 ; 0000 0193         }
                 ; 0000 0194         else if (stage == STAGE_LOGIN_WITH_ADMIN)
000630 c089      	RJMP _0x68
                 _0x67:
000631 e0eb      	LDI  R30,LOW(11)
000632 15e5      	CP   R30,R5
000633 f521      	BRNE _0x69
                 ; 0000 0195         {
                 ; 0000 0196             lcdCommand(0x01);
000634 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0197             lcd_gotoxy(1, 1);
                 ; 0000 0198             lcd_print("Enter Secret Code (or cancel)");
                +
000636 eda9     +LDI R26 , LOW ( _0xC + ( 411 ) )
000637 e0b3     +LDI R27 , HIGH ( _0xC + ( 411 ) )
                 	__POINTW2MN _0xC,411
000638 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0199             lcd_gotoxy(1, 2);
                 ; 0000 019A             lcdCommand(0x0f);   // display on, cursor blinking
00063a 940e 102b 	CALL SUBOPT_0x3
                 ; 0000 019B             delay_us(100 * 16); // wait
                 ; 0000 019C             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x6A:
00063c e0eb      	LDI  R30,LOW(11)
00063d 15e5      	CP   R30,R5
00063e f411      	BRNE _0x6D
00063f 2066      	TST  R6
000640 f009      	BREQ _0x6E
                 _0x6D:
000641 c001      	RJMP _0x6C
                 _0x6E:
                 ; 0000 019D                 ;
000642 cff9      	RJMP _0x6A
                 _0x6C:
                 ; 0000 019E             if (logged_in == 1)
000643 e0e1      	LDI  R30,LOW(1)
000644 15e6      	CP   R30,R6
000645 f479      	BRNE _0x6F
                 ; 0000 019F             {
                 ; 0000 01A0                 lcdCommand(0x0c); // display on, cursor off
000646 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 01A1                 delay_us(100 * 16);
                 ; 0000 01A2                 lcdCommand(0x01);
000648 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 01A3                 lcd_gotoxy(1, 1);
                 ; 0000 01A4                 lcd_print("1 : Clear EEPROM");
                +
00064a efa7     +LDI R26 , LOW ( _0xC + ( 441 ) )
00064b e0b3     +LDI R27 , HIGH ( _0xC + ( 441 ) )
                 	__POINTW2MN _0xC,441
00064c 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 01A5                 lcd_gotoxy(1, 2);
                 ; 0000 01A6                 lcd_print("    press cancel to back");
                +
00064e e0a8     +LDI R26 , LOW ( _0xC + ( 458 ) )
00064f e0b4     +LDI R27 , HIGH ( _0xC + ( 458 ) )
                 	__POINTW2MN _0xC,458
000650 d4cf      	RCALL _lcd_print
                 ; 0000 01A7                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x70:
000651 e0eb      	LDI  R30,LOW(11)
000652 15e5      	CP   R30,R5
000653 f3e9      	BREQ _0x70
                 ; 0000 01A8                     ;
                 ; 0000 01A9             }
                 ; 0000 01AA             else
000654 c002      	RJMP _0x73
                 _0x6F:
                 ; 0000 01AB             {
                 ; 0000 01AC                 lcdCommand(0x0c); // display on, cursor off
000655 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 01AD                 delay_us(100 * 16);
                 ; 0000 01AE             }
                 _0x73:
                 ; 0000 01AF         }
                 ; 0000 01B0         else if (stage == STAGE_SET_TIMER)
000657 c062      	RJMP _0x74
                 _0x69:
000658 e0ee      	LDI  R30,LOW(14)
000659 15e5      	CP   R30,R5
00065a f4a1      	BRNE _0x75
                 ; 0000 01B1         {
                 ; 0000 01B2             lcdCommand(0x01);
00065b 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 01B3             lcd_gotoxy(1, 1);
                 ; 0000 01B4             lcdCommand(0x0c); // display on, cursor off
00065d e0ac      	LDI  R26,LOW(12)
00065e d47a      	RCALL _lcdCommand
                 ; 0000 01B5             itoa(submitTime, buffer);
00065f 2de9      	MOV  R30,R9
000660 940e 10c5 	CALL SUBOPT_0x18
                 ; 0000 01B6             lcd_print("Set Timer(minutes): ");
                +
000662 e2a1     +LDI R26 , LOW ( _0xC + ( 483 ) )
000663 e0b4     +LDI R27 , HIGH ( _0xC + ( 483 ) )
                 	__POINTW2MN _0xC,483
000664 d4bb      	RCALL _lcd_print
                 ; 0000 01B7             lcd_print(buffer);
000665 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 01B8             delay_us(100 * 16); // wait
000667 940e 1045 	CALL SUBOPT_0x6
                 ; 0000 01B9             while(stage == STAGE_SET_TIMER);
                 _0x76:
000669 e0ee      	LDI  R30,LOW(14)
00066a 15e5      	CP   R30,R5
00066b f3e9      	BREQ _0x76
                 ; 0000 01BA             delay_us(100 * 16);
00066c 940e 1045 	CALL SUBOPT_0x6
                 ; 0000 01BB         }
                 ; 0000 01BC         else if(stage == STAGE_SHOW_CLOCK)
00066e c04b      	RJMP _0x79
                 _0x75:
00066f e0ed      	LDI  R30,LOW(13)
000670 15e5      	CP   R30,R5
000671 f009      	BREQ PC+2
000672 c047      	RJMP _0x7A
                 ; 0000 01BD         {
                 ; 0000 01BE             while(stage == STAGE_SHOW_CLOCK){
                 _0x7B:
000673 e0ed      	LDI  R30,LOW(13)
000674 15e5      	CP   R30,R5
000675 f009      	BREQ PC+2
000676 c043      	RJMP _0x7D
                 ; 0000 01BF                 lcdCommand(0x01);
000677 e0a1      	LDI  R26,LOW(1)
000678 d460      	RCALL _lcdCommand
                 ; 0000 01C0                 rtc_getTime(&hour, &minute, &second);
000679 940e 1074 	CALL SUBOPT_0xF
                 ; 0000 01C1                 sprintf(time, "%02x:%02x:%02x  ", hour, minute, second);
                +
00067b e8ec     +LDI R30 , LOW ( 2 * _0x0 + ( 512 ) )
00067c e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 512 ) )
                 	__POINTW1FN _0x0,512
00067d 93fa      	ST   -Y,R31
00067e 93ea      	ST   -Y,R30
00067f 940e 108a 	CALL SUBOPT_0x11
000681 89ea      	LDD  R30,Y+18
000682 940e 10b0 	CALL SUBOPT_0x14
000684 e08c      	LDI  R24,12
000685 940e 0fd2 	CALL _sprintf
000687 9660      	ADIW R28,16
                 ; 0000 01C2                 lcd_gotoxy(1,1);
000688 e0e1      	LDI  R30,LOW(1)
000689 940e 110d 	CALL SUBOPT_0x22
                 ; 0000 01C3                 lcd_print(time);
00068b e1ac      	LDI  R26,LOW(_time)
00068c e0b8      	LDI  R27,HIGH(_time)
00068d d492      	RCALL _lcd_print
                 ; 0000 01C4                 rtc_getDate(&year, &month, &date, &day);
00068e 940e 109c 	CALL SUBOPT_0x13
                 ; 0000 01C5                 sprintf(time, "20%02x/%02x/%02x  %3s", year, month, date, days[day - 1]);
                +
000690 e9ed     +LDI R30 , LOW ( 2 * _0x0 + ( 529 ) )
000691 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 529 ) )
                 	__POINTW1FN _0x0,529
000692 93fa      	ST   -Y,R31
000693 93ea      	ST   -Y,R30
000694 81ec      	LDD  R30,Y+4
000695 940e 10b0 	CALL SUBOPT_0x14
000697 85e9      	LDD  R30,Y+9
000698 940e 10b0 	CALL SUBOPT_0x14
00069a 85ee      	LDD  R30,Y+14
00069b 940e 10b0 	CALL SUBOPT_0x14
00069d 89eb      	LDD  R30,Y+19
00069e e0f0      	LDI  R31,0
00069f 9731      	SBIW R30,1
0006a0 e0ae      	LDI  R26,LOW(_days)
0006a1 e0b8      	LDI  R27,HIGH(_days)
0006a2 0fee      	LSL  R30
0006a3 1fff      	ROL  R31
0006a4 0fae      	ADD  R26,R30
0006a5 1fbf      	ADC  R27,R31
0006a6 940e 13fc 	CALL __GETW1P
0006a8 2766      	CLR  R22
0006a9 2777      	CLR  R23
0006aa 940e 1413 	CALL __PUTPARD1
0006ac e180      	LDI  R24,16
0006ad 940e 0fd2 	CALL _sprintf
0006af 9664      	ADIW R28,20
                 ; 0000 01C6                 lcd_gotoxy(1,2);
0006b0 940e 10de 	CALL SUBOPT_0x1C
                 ; 0000 01C7                 lcd_print(time);
0006b2 e1ac      	LDI  R26,LOW(_time)
0006b3 e0b8      	LDI  R27,HIGH(_time)
0006b4 d46b      	RCALL _lcd_print
                 ; 0000 01C8                 delay_ms(1000);
0006b5 eea8      	LDI  R26,LOW(1000)
0006b6 e0b3      	LDI  R27,HIGH(1000)
0006b7 940e 1232 	CALL _delay_ms
                 ; 0000 01C9             }
0006b9 cfb9      	RJMP _0x7B
                 _0x7D:
                 ; 0000 01CA         }
                 ; 0000 01CB     }
                 _0x7A:
                 _0x79:
                 _0x74:
                 _0x68:
                 _0x66:
                 _0x61:
                 _0x5C:
                 _0x57:
                 _0x40:
                 _0x32:
                 _0x30:
                 _0x16:
                 _0x10:
                 _0xA:
0006ba cd3f      	RJMP _0x6
                 ; 0000 01CC }
                 _0x7E:
0006bb cfff      	RJMP _0x7E
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
00023e           	.BYTE 0x1F8
                 ;
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 01CF {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
0006bc 93ea      	ST   -Y,R30
0006bd b7ef      	IN   R30,SREG
0006be 93ea      	ST   -Y,R30
                 ; 0000 01D0     timerCount++;
0006bf 9483      	INC  R8
                 ; 0000 01D1     if(timerCount == 60){
0006c0 e3ec      	LDI  R30,LOW(60)
0006c1 15e8      	CP   R30,R8
0006c2 f411      	BRNE _0x7F
                 ; 0000 01D2         submitTime--;
0006c3 949a      	DEC  R9
                 ; 0000 01D3         timerCount = 0;
0006c4 2488      	CLR  R8
                 ; 0000 01D4     }
                 ; 0000 01D5     TCNT2 = 0;
                 _0x7F:
0006c5 e0e0      	LDI  R30,LOW(0)
0006c6 bde4      	OUT  0x24,R30
                 ; 0000 01D6     if(submitTime == 0)
0006c7 2099      	TST  R9
0006c8 f409      	BRNE _0x80
                 ; 0000 01D7         TIMSK = 0;
0006c9 bfe9      	OUT  0x39,R30
                 ; 0000 01D8 }
                 _0x80:
0006ca 91e9      	LD   R30,Y+
0006cb bfef      	OUT  SREG,R30
0006cc 91e9      	LD   R30,Y+
0006cd 9518      	RETI
                 ; .FEND
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 01DC {
                 _int0_routine:
                 ; .FSTART _int0_routine
0006ce 920a      	ST   -Y,R0
0006cf 921a      	ST   -Y,R1
0006d0 92fa      	ST   -Y,R15
0006d1 936a      	ST   -Y,R22
0006d2 937a      	ST   -Y,R23
0006d3 938a      	ST   -Y,R24
0006d4 939a      	ST   -Y,R25
0006d5 93aa      	ST   -Y,R26
0006d6 93ba      	ST   -Y,R27
0006d7 93ea      	ST   -Y,R30
0006d8 93fa      	ST   -Y,R31
0006d9 b7ef      	IN   R30,SREG
0006da 93ea      	ST   -Y,R30
                 ; 0000 01DD     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 01DE     int i;
                 ; 0000 01DF     unsigned char second, minute, hour;
                 ; 0000 01E0     unsigned char day, date, month, year;
                 ; 0000 01E1 
                 ; 0000 01E2     // detect the key
                 ; 0000 01E3     while (1)
0006db 9728      	SBIW R28,8
0006dc 940e 1418 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+12
                 ;	second -> R20
                 ;	minute -> Y+11
                 ;	hour -> Y+10
                 ;	day -> Y+9
                 ;	date -> Y+8
                 ;	month -> Y+7
                 ;	year -> Y+6
                 ; 0000 01E4     {
                 ; 0000 01E5         KEY_PRT = 0xEF;            // ground row 0
0006de eeef      	LDI  R30,LOW(239)
0006df 940e 1111 	CALL SUBOPT_0x23
                 ; 0000 01E6         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01E7         if (colloc != 0x0F)        // column detected
0006e1 f011      	BREQ _0x84
                 ; 0000 01E8         {
                 ; 0000 01E9             rowloc = 0; // save row location
0006e2 e000      	LDI  R16,LOW(0)
                 ; 0000 01EA             break;      // exit while loop
0006e3 c012      	RJMP _0x83
                 ; 0000 01EB         }
                 ; 0000 01EC         KEY_PRT = 0xDF;            // ground row 1
                 _0x84:
0006e4 edef      	LDI  R30,LOW(223)
0006e5 940e 1111 	CALL SUBOPT_0x23
                 ; 0000 01ED         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01EE         if (colloc != 0x0F)        // column detected
0006e7 f011      	BREQ _0x85
                 ; 0000 01EF         {
                 ; 0000 01F0             rowloc = 1; // save row location
0006e8 e001      	LDI  R16,LOW(1)
                 ; 0000 01F1             break;      // exit while loop
0006e9 c00c      	RJMP _0x83
                 ; 0000 01F2         }
                 ; 0000 01F3         KEY_PRT = 0xBF;            // ground row 2
                 _0x85:
0006ea ebef      	LDI  R30,LOW(191)
0006eb 940e 1111 	CALL SUBOPT_0x23
                 ; 0000 01F4         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01F5         if (colloc != 0x0F)        // column detected
0006ed f011      	BREQ _0x86
                 ; 0000 01F6         {
                 ; 0000 01F7             rowloc = 2; // save row location
0006ee e002      	LDI  R16,LOW(2)
                 ; 0000 01F8             break;      // exit while loop
0006ef c006      	RJMP _0x83
                 ; 0000 01F9         }
                 ; 0000 01FA         KEY_PRT = 0x7F;            // ground row 3
                 _0x86:
0006f0 e7ef      	LDI  R30,LOW(127)
0006f1 bbe8      	OUT  0x18,R30
                 ; 0000 01FB         colloc = (KEY_PIN & 0x0F); // read the columns
0006f2 b3e6      	IN   R30,0x16
0006f3 70ef      	ANDI R30,LOW(0xF)
0006f4 2f1e      	MOV  R17,R30
                 ; 0000 01FC         rowloc = 3;                // save row location
0006f5 e003      	LDI  R16,LOW(3)
                 ; 0000 01FD         break;                     // exit while loop
                 ; 0000 01FE     }
                 _0x83:
                 ; 0000 01FF     // check column and send result to Port D
                 ; 0000 0200     if (colloc == 0x0E)
0006f6 301e      	CPI  R17,14
0006f7 f411      	BRNE _0x87
                 ; 0000 0201         cl = 0;
0006f8 e030      	LDI  R19,LOW(0)
                 ; 0000 0202     else if (colloc == 0x0D)
0006f9 c009      	RJMP _0x88
                 _0x87:
0006fa 301d      	CPI  R17,13
0006fb f411      	BRNE _0x89
                 ; 0000 0203         cl = 1;
0006fc e031      	LDI  R19,LOW(1)
                 ; 0000 0204     else if (colloc == 0x0B)
0006fd c005      	RJMP _0x8A
                 _0x89:
0006fe 301b      	CPI  R17,11
0006ff f411      	BRNE _0x8B
                 ; 0000 0205         cl = 2;
000700 e032      	LDI  R19,LOW(2)
                 ; 0000 0206     else
000701 c001      	RJMP _0x8C
                 _0x8B:
                 ; 0000 0207         cl = 3;
000702 e033      	LDI  R19,LOW(3)
                 ; 0000 0208 
                 ; 0000 0209     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x8C:
                 _0x8A:
                 _0x88:
000703 b3e8      	IN   R30,0x18
000704 70ef      	ANDI R30,LOW(0xF)
000705 bbe8      	OUT  0x18,R30
                 ; 0000 020A 
                 ; 0000 020B     // inside menu level 1
                 ; 0000 020C     if (stage == STAGE_INIT_MENU)
000706 2055      	TST  R5
000707 f009      	BREQ PC+2
000708 c079      	RJMP _0x8D
                 ; 0000 020D     {
                 ; 0000 020E         switch (keypad[rowloc][cl] - '0')
000709 940e 1117 	CALL SUBOPT_0x24
00070b 91ec      	LD   R30,X
00070c e0f0      	LDI  R31,0
00070d 97f0      	SBIW R30,48
                 ; 0000 020F         {
                 ; 0000 0210         case OPTION_ATTENDENCE:
00070e 30e1      	CPI  R30,LOW(0x1)
00070f e0a0      	LDI  R26,HIGH(0x1)
000710 07fa      	CPC  R31,R26
000711 f419      	BRNE _0x91
                 ; 0000 0211             stage = STAGE_ATTENDENC_MENU;
000712 e0e1      	LDI  R30,LOW(1)
000713 2e5e      	MOV  R5,R30
                 ; 0000 0212             break;
000714 c047      	RJMP _0x90
                 ; 0000 0213         case OPTION_TEMPERATURE_MONITORING:
                 _0x91:
000715 30e4      	CPI  R30,LOW(0x4)
000716 e0a0      	LDI  R26,HIGH(0x4)
000717 07fa      	CPC  R31,R26
000718 f419      	BRNE _0x92
                 ; 0000 0214             stage = STAGE_TEMPERATURE_MONITORING;
000719 e0e4      	LDI  R30,LOW(4)
00071a 2e5e      	MOV  R5,R30
                 ; 0000 0215             break;
00071b c040      	RJMP _0x90
                 ; 0000 0216         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x92:
00071c 30e3      	CPI  R30,LOW(0x3)
00071d e0a0      	LDI  R26,HIGH(0x3)
00071e 07fa      	CPC  R31,R26
00071f f419      	BRNE _0x93
                 ; 0000 0217             stage = STAGE_VIEW_PRESENT_STUDENTS;
000720 e0e5      	LDI  R30,LOW(5)
000721 2e5e      	MOV  R5,R30
                 ; 0000 0218             break;
000722 c039      	RJMP _0x90
                 ; 0000 0219         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x93:
000723 30e5      	CPI  R30,LOW(0x5)
000724 e0a0      	LDI  R26,HIGH(0x5)
000725 07fa      	CPC  R31,R26
000726 f419      	BRNE _0x94
                 ; 0000 021A             stage = STAGE_RETRIEVE_STUDENT_DATA;
000727 e0e6      	LDI  R30,LOW(6)
000728 2e5e      	MOV  R5,R30
                 ; 0000 021B             break;
000729 c032      	RJMP _0x90
                 ; 0000 021C         case OPTION_STUDENT_MANAGEMENT:
                 _0x94:
00072a 30e2      	CPI  R30,LOW(0x2)
00072b e0a0      	LDI  R26,HIGH(0x2)
00072c 07fa      	CPC  R31,R26
00072d f419      	BRNE _0x95
                 ; 0000 021D             stage = STAGE_STUDENT_MANAGMENT;
00072e e0e7      	LDI  R30,LOW(7)
00072f 2e5e      	MOV  R5,R30
                 ; 0000 021E             break;
000730 c02b      	RJMP _0x90
                 ; 0000 021F         case OPTION_TRAFFIC_MONITORING:
                 _0x95:
000731 30e6      	CPI  R30,LOW(0x6)
000732 e0a0      	LDI  R26,HIGH(0x6)
000733 07fa      	CPC  R31,R26
000734 f419      	BRNE _0x96
                 ; 0000 0220             stage = STAGE_TRAFFIC_MONITORING;
000735 e0ea      	LDI  R30,LOW(10)
000736 2e5e      	MOV  R5,R30
                 ; 0000 0221             break;
000737 c024      	RJMP _0x90
                 ; 0000 0222         case OPTION_LOGIN_WITH_ADMIN:
                 _0x96:
000738 30e7      	CPI  R30,LOW(0x7)
000739 e0a0      	LDI  R26,HIGH(0x7)
00073a 07fa      	CPC  R31,R26
00073b f419      	BRNE _0x97
                 ; 0000 0223             stage = STAGE_LOGIN_WITH_ADMIN;
00073c e0eb      	LDI  R30,LOW(11)
00073d 2e5e      	MOV  R5,R30
                 ; 0000 0224             break;
00073e c01d      	RJMP _0x90
                 ; 0000 0225         case OPTION_SET_TIMER:
                 _0x97:
00073f 30e9      	CPI  R30,LOW(0x9)
000740 e0a0      	LDI  R26,HIGH(0x9)
000741 07fa      	CPC  R31,R26
000742 f419      	BRNE _0x98
                 ; 0000 0226             stage = STAGE_SET_TIMER;
000743 e0ee      	LDI  R30,LOW(14)
000744 2e5e      	MOV  R5,R30
                 ; 0000 0227             break;
000745 c016      	RJMP _0x90
                 ; 0000 0228         case OPTION_LOGOUT:
                 _0x98:
000746 30e8      	CPI  R30,LOW(0x8)
000747 e0a0      	LDI  R26,HIGH(0x8)
000748 07fa      	CPC  R31,R26
000749 f491      	BRNE _0x9C
                 ; 0000 0229 #asm("cli") // disable interrupts
00074a 94f8      	cli
                 ; 0000 022A             if (logged_in == 1)
00074b e0e1      	LDI  R30,LOW(1)
00074c 15e6      	CP   R30,R6
00074d f471      	BRNE _0x9A
                 ; 0000 022B             {
                 ; 0000 022C                 lcdCommand(0x1);
00074e 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 022D                 lcd_gotoxy(1, 1);
                 ; 0000 022E                 lcd_print("Logout ...");
                +
000750 e3a6     +LDI R26 , LOW ( _0x9B + ( 0 ) )
000751 e0b4     +LDI R27 , HIGH ( _0x9B + ( 0 ) )
                 	__POINTW2MN _0x9B,0
000752 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 022F                 lcd_gotoxy(1, 2);
                 ; 0000 0230                 lcd_print("Going To Admin Page In 2 Sec");
                +
000754 e4a1     +LDI R26 , LOW ( _0x9B + ( 11 ) )
000755 e0b4     +LDI R27 , HIGH ( _0x9B + ( 11 ) )
                 	__POINTW2MN _0x9B,11
000756 940e 1123 	CALL SUBOPT_0x25
                 ; 0000 0231                 delay_ms(2000);
                 ; 0000 0232                 logged_in = 0;
000758 2466      	CLR  R6
                 ; 0000 0233 #asm("sei")
000759 9478      	sei
                 ; 0000 0234                 stage = STAGE_LOGIN_WITH_ADMIN;
00075a e0eb      	LDI  R30,LOW(11)
00075b 2e5e      	MOV  R5,R30
                 ; 0000 0235             }
                 ; 0000 0236             break;
                 _0x9A:
                 ; 0000 0237         default:
                 _0x9C:
                 ; 0000 0238             break;
                 ; 0000 0239         }
                 _0x90:
                 ; 0000 023A 
                 ; 0000 023B         if (keypad[rowloc][cl] == 'L')
00075c 940e 1117 	CALL SUBOPT_0x24
00075e 91ac      	LD   R26,X
00075f 34ac      	CPI  R26,LOW(0x4C)
000760 f451      	BRNE _0x9D
                 ; 0000 023C         {
                 ; 0000 023D             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
000761 e0e0      	LDI  R30,LOW(0)
000762 15e4      	CP   R30,R4
000763 f420      	BRSH _0x9E
000764 2de4      	MOV  R30,R4
000765 e0f0      	LDI  R31,0
000766 9731      	SBIW R30,1
000767 c001      	RJMP _0x9F
                 _0x9E:
000768 e0e4      	LDI  R30,LOW(4)
                 _0x9F:
000769 2e4e      	MOV  R4,R30
                 ; 0000 023E         }
                 ; 0000 023F         else if (keypad[rowloc][cl] == 'R')
00076a c016      	RJMP _0xA1
                 _0x9D:
00076b 940e 1117 	CALL SUBOPT_0x24
00076d 91ac      	LD   R26,X
00076e 35a2      	CPI  R26,LOW(0x52)
00076f f451      	BRNE _0xA2
                 ; 0000 0240         {
                 ; 0000 0241             page_num = (page_num + 1) % MENU_PAGE_COUNT;
000770 2de4      	MOV  R30,R4
000771 e0f0      	LDI  R31,0
000772 9631      	ADIW R30,1
000773 01df      	MOVW R26,R30
000774 e0e5      	LDI  R30,LOW(5)
000775 e0f0      	LDI  R31,HIGH(5)
000776 940e 13ee 	CALL __MODW21
000778 2e4e      	MOV  R4,R30
                 ; 0000 0242         }
                 ; 0000 0243         else if(keypad[rowloc][cl] == 'O')
000779 c007      	RJMP _0xA3
                 _0xA2:
00077a 940e 1117 	CALL SUBOPT_0x24
00077c 91ac      	LD   R26,X
00077d 34af      	CPI  R26,LOW(0x4F)
00077e f411      	BRNE _0xA4
                 ; 0000 0244         {
                 ; 0000 0245             stage = STAGE_SHOW_CLOCK;
00077f e0ed      	LDI  R30,LOW(13)
000780 2e5e      	MOV  R5,R30
                 ; 0000 0246         }
                 ; 0000 0247     }
                 _0xA4:
                 _0xA3:
                 _0xA1:
                 ; 0000 0248     else if (stage == STAGE_ATTENDENC_MENU)
000781 c346      	RJMP _0xA5
                 _0x8D:
000782 e0e1      	LDI  R30,LOW(1)
000783 15e5      	CP   R30,R5
000784 f4e1      	BRNE _0xA6
                 ; 0000 0249     {
                 ; 0000 024A         switch (keypad[rowloc][cl])
000785 940e 1117 	CALL SUBOPT_0x24
000787 91ec      	LD   R30,X
000788 e0f0      	LDI  R31,0
                 ; 0000 024B         {
                 ; 0000 024C         case 'C':
000789 34e3      	CPI  R30,LOW(0x43)
00078a e0a0      	LDI  R26,HIGH(0x43)
00078b 07fa      	CPC  R31,R26
00078c f411      	BRNE _0xAA
                 ; 0000 024D             stage = STAGE_INIT_MENU;
00078d 2455      	CLR  R5
                 ; 0000 024E             break;
00078e c011      	RJMP _0xA9
                 ; 0000 024F         case '1':
                 _0xAA:
00078f 33e1      	CPI  R30,LOW(0x31)
000790 e0a0      	LDI  R26,HIGH(0x31)
000791 07fa      	CPC  R31,R26
000792 f429      	BRNE _0xAB
                 ; 0000 0250             memset(buffer, 0, 32);
000793 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0251             stage = STAGE_SUBMIT_CODE;
000795 e0e2      	LDI  R30,LOW(2)
000796 2e5e      	MOV  R5,R30
                 ; 0000 0252             break;
000797 c008      	RJMP _0xA9
                 ; 0000 0253         case '2':
                 _0xAB:
000798 33e2      	CPI  R30,LOW(0x32)
000799 e0a0      	LDI  R26,HIGH(0x32)
00079a 07fa      	CPC  R31,R26
00079b f421      	BRNE _0xAD
                 ; 0000 0254             memset(buffer, 0, 32);
00079c 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0255             stage = STAGE_SUBMIT_WITH_CARD;
00079e e0e3      	LDI  R30,LOW(3)
00079f 2e5e      	MOV  R5,R30
                 ; 0000 0256             break;
                 ; 0000 0257         default:
                 _0xAD:
                 ; 0000 0258             break;
                 ; 0000 0259         }
                 _0xA9:
                 ; 0000 025A     }
                 ; 0000 025B     else if (stage == STAGE_SUBMIT_CODE)
0007a0 c327      	RJMP _0xAE
                 _0xA6:
0007a1 e0e2      	LDI  R30,LOW(2)
0007a2 15e5      	CP   R30,R5
0007a3 f009      	BREQ PC+2
0007a4 c0f8      	RJMP _0xAF
                 ; 0000 025C     {
                 ; 0000 025D         if (keypad[rowloc][cl] == 'C')
0007a5 940e 1117 	CALL SUBOPT_0x24
0007a7 91ac      	LD   R26,X
0007a8 34a3      	CPI  R26,LOW(0x43)
0007a9 f421      	BRNE _0xB0
                 ; 0000 025E         {
                 ; 0000 025F             memset(buffer, 0, 32);
0007aa 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0260             stage = STAGE_ATTENDENC_MENU;
0007ac e0e1      	LDI  R30,LOW(1)
0007ad 2e5e      	MOV  R5,R30
                 ; 0000 0261         }
                 ; 0000 0262         if ((keypad[rowloc][cl] - '0') < 10)
                 _0xB0:
0007ae 940e 1117 	CALL SUBOPT_0x24
0007b0 91ec      	LD   R30,X
0007b1 e0f0      	LDI  R31,0
0007b2 97fa      	SBIW R30,58
0007b3 f47c      	BRGE _0xB1
                 ; 0000 0263         {
                 ; 0000 0264             if (strlen(buffer) <= 30)
0007b4 940e 104a 	CALL SUBOPT_0x7
0007b6 977f      	SBIW R30,31
0007b7 f450      	BRSH _0xB2
                 ; 0000 0265             {
                 ; 0000 0266                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0007b8 940e 104a 	CALL SUBOPT_0x7
0007ba 940e 1126 	CALL SUBOPT_0x26
0007bc 940e 112a 	CALL SUBOPT_0x27
                 ; 0000 0267                 buffer[strlen(buffer) + 1] = '\0';
0007be 940e 112e 	CALL SUBOPT_0x28
                 ; 0000 0268                 lcdData(keypad[rowloc][cl]);
0007c0 91ac      	LD   R26,X
0007c1 d323      	RCALL _lcdData
                 ; 0000 0269             }
                 ; 0000 026A         }
                 _0xB2:
                 ; 0000 026B         else if (keypad[rowloc][cl] == 'D')
0007c2 c0d9      	RJMP _0xB3
                 _0xB1:
0007c3 940e 1117 	CALL SUBOPT_0x24
0007c5 91ac      	LD   R26,X
0007c6 34a4      	CPI  R26,LOW(0x44)
0007c7 f461      	BRNE _0xB4
                 ; 0000 026C         {
                 ; 0000 026D             buffer_len = strlen(buffer);
0007c8 940e 104a 	CALL SUBOPT_0x7
0007ca 2f5e      	MOV  R21,R30
                 ; 0000 026E             if (buffer_len > 0)
0007cb 3051      	CPI  R21,1
0007cc f030      	BRLO _0xB5
                 ; 0000 026F             {
                 ; 0000 0270                 buffer[buffer_len - 1] = '\0';
0007cd 940e 1133 	CALL SUBOPT_0x29
                 ; 0000 0271                 lcdCommand(0x10);
                 ; 0000 0272                 lcd_print(" ");
                +
0007cf e5ae     +LDI R26 , LOW ( _0x9B + ( 40 ) )
0007d0 e0b4     +LDI R27 , HIGH ( _0x9B + ( 40 ) )
                 	__POINTW2MN _0x9B,40
0007d1 940e 113d 	CALL SUBOPT_0x2A
                 ; 0000 0273                 lcdCommand(0x10);
                 ; 0000 0274             }
                 ; 0000 0275         }
                 _0xB5:
                 ; 0000 0276         else if(keypad[rowloc][cl] == 'O')
0007d3 c0c8      	RJMP _0xB6
                 _0xB4:
0007d4 940e 1117 	CALL SUBOPT_0x24
0007d6 91ac      	LD   R26,X
0007d7 34af      	CPI  R26,LOW(0x4F)
0007d8 f481      	BRNE _0xB7
                 ; 0000 0277         {
                 ; 0000 0278             lcdCommand(0xC0);
0007d9 940e 1142 	CALL SUBOPT_0x2B
                 ; 0000 0279             for(i = 0; i < strlen(buffer); i++)
                 _0xB9:
0007db 940e 104a 	CALL SUBOPT_0x7
0007dd 940e 1149 	CALL SUBOPT_0x2C
0007df f430      	BRSH _0xBA
                 ; 0000 027A                 lcd_print(" ");
                +
0007e0 e6a0     +LDI R26 , LOW ( _0x9B + ( 42 ) )
0007e1 e0b4     +LDI R27 , HIGH ( _0x9B + ( 42 ) )
                 	__POINTW2MN _0x9B,42
0007e2 d33d      	RCALL _lcd_print
0007e3 940e 114e 	CALL SUBOPT_0x2D
0007e5 cff5      	RJMP _0xB9
                 _0xBA:
                 ; 0000 027B lcdCommand(0xC0);
0007e6 940e 1154 	CALL SUBOPT_0x2E
                 ; 0000 027C             memset(buffer, 0, 32);
                 ; 0000 027D         }
                 ; 0000 027E         else if (keypad[rowloc][cl] == 'E')
0007e8 c0b3      	RJMP _0xBB
                 _0xB7:
0007e9 940e 1117 	CALL SUBOPT_0x24
0007eb 91ac      	LD   R26,X
0007ec 34a5      	CPI  R26,LOW(0x45)
0007ed f009      	BREQ PC+2
0007ee c0a6      	RJMP _0xBC
                 ; 0000 027F         {
                 ; 0000 0280 
                 ; 0000 0281 #asm("cli")
0007ef 94f8      	cli
                 ; 0000 0282 
                 ; 0000 0283             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0284                 strlen(buffer) != 8)
0007f0 940e 104e 	CALL SUBOPT_0x8
                +
0007f2 e6e2     +LDI R30 , LOW ( _0x9B + ( 44 ) )
0007f3 e0f4     +LDI R31 , HIGH ( _0x9B + ( 44 ) )
                 	__POINTW1MN _0x9B,44
0007f4 940e 1053 	CALL SUBOPT_0x9
0007f6 f431      	BRNE _0xBE
0007f7 940e 104a 	CALL SUBOPT_0x7
0007f9 30e8      	CPI  R30,LOW(0x8)
0007fa e0a0      	LDI  R26,HIGH(0x8)
0007fb 07fa      	CPC  R31,R26
0007fc f061      	BREQ _0xBD
                 _0xBE:
                 ; 0000 0285             {
                 ; 0000 0286                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
0007fd 9a97      	SBI  0x12,7
                 ; 0000 0287                 lcdCommand(0x01);
0007fe 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0288                 lcd_gotoxy(1, 1);
                 ; 0000 0289                 lcd_print("Incorrect Student Code Format");
                +
000800 e6a5     +LDI R26 , LOW ( _0x9B + ( 47 ) )
000801 e0b4     +LDI R27 , HIGH ( _0x9B + ( 47 ) )
                 	__POINTW2MN _0x9B,47
000802 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 028A                 lcd_gotoxy(1, 2);
                 ; 0000 028B                 lcd_print("You Will Back Menu In 2 Second");
                +
000804 e8a3     +LDI R26 , LOW ( _0x9B + ( 77 ) )
000805 e0b4     +LDI R27 , HIGH ( _0x9B + ( 77 ) )
                 	__POINTW2MN _0x9B,77
000806 940e 1060 	CALL SUBOPT_0xB
                 ; 0000 028C                 delay_ms(2000);
                 ; 0000 028D                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 028E             }
                 ; 0000 028F             else if (search_student_code() > 0)
000808 c088      	RJMP _0xC0
                 _0xBD:
000809 d405      	RCALL _search_student_code
00080a 30e1      	CPI  R30,LOW(0x1)
00080b f060      	BRLO _0xC1
                 ; 0000 0290             {
                 ; 0000 0291                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00080c 9a97      	SBI  0x12,7
                 ; 0000 0292                 lcdCommand(0x01);
00080d 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0293                 lcd_gotoxy(1, 1);
                 ; 0000 0294                 lcd_print("Duplicate Student Code Entered");
                +
00080f eaa2     +LDI R26 , LOW ( _0x9B + ( 108 ) )
000810 e0b4     +LDI R27 , HIGH ( _0x9B + ( 108 ) )
                 	__POINTW2MN _0x9B,108
000811 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0295                 lcd_gotoxy(1, 2);
                 ; 0000 0296                 lcd_print("You Will Back Menu In 2 Second");
                +
000813 eca1     +LDI R26 , LOW ( _0x9B + ( 139 ) )
000814 e0b4     +LDI R27 , HIGH ( _0x9B + ( 139 ) )
                 	__POINTW2MN _0x9B,139
000815 940e 1060 	CALL SUBOPT_0xB
                 ; 0000 0297                 delay_ms(2000);
                 ; 0000 0298                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0299             }
                 ; 0000 029A             else
000817 c079      	RJMP _0xC2
                 _0xC1:
                 ; 0000 029B             {
                 ; 0000 029C                 // save the buffer to EEPROM
                 ; 0000 029D                 st_counts = read_byte_from_eeprom(0x0);
000818 940e 1158 	CALL SUBOPT_0x2F
00081a 2f2e      	MOV  R18,R30
                 ; 0000 029E                 for (i = 0; i < 8; i++)
00081b e0e0      	LDI  R30,LOW(0)
00081c 87ec      	STD  Y+12,R30
00081d 87ed      	STD  Y+12+1,R30
                 _0xC4:
00081e 85ac      	LDD  R26,Y+12
00081f 85bd      	LDD  R27,Y+12+1
000820 9718      	SBIW R26,8
000821 f45c      	BRGE _0xC5
                 ; 0000 029F                 {
                 ; 0000 02A0                     write_byte_to_eeprom(i + ((st_counts + 1) * 16), buffer[i]);
000822 940e 115c 	CALL SUBOPT_0x30
000824 940e 1162 	CALL SUBOPT_0x31
000826 51e2      	SUBI R30,LOW(-_buffer)
000827 4ff8      	SBCI R31,HIGH(-_buffer)
000828 81a0      	LD   R26,Z
000829 d3be      	RCALL _write_byte_to_eeprom
                 ; 0000 02A1                 }
00082a 940e 114e 	CALL SUBOPT_0x2D
00082c cff1      	RJMP _0xC4
                 _0xC5:
                 ; 0000 02A2                 rtc_getTime(&hour, &minute, &second);
00082d 01fe      	MOVW R30,R28
00082e 963a      	ADIW R30,10
00082f 93fa      	ST   -Y,R31
000830 93ea      	ST   -Y,R30
000831 01fe      	MOVW R30,R28
000832 963d      	ADIW R30,13
000833 93fa      	ST   -Y,R31
000834 93ea      	ST   -Y,R30
000835 b7ad      	IN   R26,SPL
000836 b7be      	IN   R27,SPH
000837 934f      	PUSH R20
000838 d57d      	RCALL _rtc_getTime
000839 914f      	POP  R20
                 ; 0000 02A3                 sprintf(time, "%02x%02x", hour, minute);
00083a 940e 116b 	CALL SUBOPT_0x32
00083c 85ee      	LDD  R30,Y+14
00083d 940e 10b0 	CALL SUBOPT_0x14
00083f 89eb      	LDD  R30,Y+19
000840 940e 10b0 	CALL SUBOPT_0x14
000842 940e 1097 	CALL SUBOPT_0x12
                 ; 0000 02A4                 for (i = 0; i < 4; i++)
000844 e0e0      	LDI  R30,LOW(0)
000845 87ec      	STD  Y+12,R30
000846 87ed      	STD  Y+12+1,R30
                 _0xC7:
000847 85ac      	LDD  R26,Y+12
000848 85bd      	LDD  R27,Y+12+1
000849 9714      	SBIW R26,4
00084a f464      	BRGE _0xC8
                 ; 0000 02A5                 {
                 ; 0000 02A6                     write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i]);
00084b 940e 115c 	CALL SUBOPT_0x30
00084d 9638      	ADIW R30,8
00084e 940e 1162 	CALL SUBOPT_0x31
000850 5ee4      	SUBI R30,LOW(-_time)
000851 4ff7      	SBCI R31,HIGH(-_time)
000852 81a0      	LD   R26,Z
000853 d394      	RCALL _write_byte_to_eeprom
                 ; 0000 02A7                 }
000854 940e 114e 	CALL SUBOPT_0x2D
000856 cff0      	RJMP _0xC7
                 _0xC8:
                 ; 0000 02A8                 rtc_getDate(&year, &month, &date, &day);
000857 01fe      	MOVW R30,R28
000858 9636      	ADIW R30,6
000859 93fa      	ST   -Y,R31
00085a 93ea      	ST   -Y,R30
00085b 01fe      	MOVW R30,R28
00085c 9639      	ADIW R30,9
00085d 93fa      	ST   -Y,R31
00085e 93ea      	ST   -Y,R30
00085f 01fe      	MOVW R30,R28
000860 963c      	ADIW R30,12
000861 93fa      	ST   -Y,R31
000862 93ea      	ST   -Y,R30
000863 01de      	MOVW R26,R28
000864 961f      	ADIW R26,15
000865 d561      	RCALL _rtc_getDate
                 ; 0000 02A9                 sprintf(time, "%02x%02x", month, date);
000866 940e 116b 	CALL SUBOPT_0x32
000868 85eb      	LDD  R30,Y+11
000869 940e 10b0 	CALL SUBOPT_0x14
00086b 89e8      	LDD  R30,Y+16
00086c 940e 10b0 	CALL SUBOPT_0x14
00086e 940e 1097 	CALL SUBOPT_0x12
                 ; 0000 02AA                 for (i = 4; i < 8; i++)
000870 e0e4      	LDI  R30,LOW(4)
000871 e0f0      	LDI  R31,HIGH(4)
000872 87ec      	STD  Y+12,R30
000873 87fd      	STD  Y+12+1,R31
                 _0xCA:
000874 85ac      	LDD  R26,Y+12
000875 85bd      	LDD  R27,Y+12+1
000876 9718      	SBIW R26,8
000877 f454      	BRGE _0xCB
                 ; 0000 02AB                 {
                 ; 0000 02AC                     write_byte_to_eeprom(i + ((st_counts + 1) * 16 + 8), time[i - 4]);
000878 940e 115c 	CALL SUBOPT_0x30
00087a 9638      	ADIW R30,8
00087b 940e 1162 	CALL SUBOPT_0x31
00087d 940e 10b6 	CALL SUBOPT_0x15
                 ; 0000 02AD                 }
00087f 940e 114e 	CALL SUBOPT_0x2D
000881 cff2      	RJMP _0xCA
                 _0xCB:
                 ; 0000 02AE                 write_byte_to_eeprom(0x0, st_counts + 1);
000882 940e 10bc 	CALL SUBOPT_0x16
000884 2fa2      	MOV  R26,R18
000885 5faf      	SUBI R26,-LOW(1)
000886 d361      	RCALL _write_byte_to_eeprom
                 ; 0000 02AF 
                 ; 0000 02B0                 lcdCommand(0x01);
000887 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 02B1                 lcd_gotoxy(1, 1);
                 ; 0000 02B2                 lcd_print("Student Code Successfully Added");
                +
000889 eea0     +LDI R26 , LOW ( _0x9B + ( 170 ) )
00088a e0b4     +LDI R27 , HIGH ( _0x9B + ( 170 ) )
                 	__POINTW2MN _0x9B,170
00088b 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 02B3                 lcd_gotoxy(1, 2);
                 ; 0000 02B4                 lcd_print("You Will Back Menu In 2 Second");
                +
00088d e0a0     +LDI R26 , LOW ( _0x9B + ( 202 ) )
00088e e0b5     +LDI R27 , HIGH ( _0x9B + ( 202 ) )
                 	__POINTW2MN _0x9B,202
00088f 940e 1123 	CALL SUBOPT_0x25
                 ; 0000 02B5                 delay_ms(2000);
                 ; 0000 02B6             }
                 _0xC2:
                 _0xC0:
                 ; 0000 02B7             memset(buffer, 0, 32);
000891 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 02B8 #asm("sei")
000893 9478      	sei
                 ; 0000 02B9             stage = STAGE_ATTENDENC_MENU;
000894 c005      	RJMP _0x1B9
                 ; 0000 02BA         }
                 ; 0000 02BB         else if (keypad[rowloc][cl] == 'C')
                 _0xBC:
000895 940e 1117 	CALL SUBOPT_0x24
000897 91ac      	LD   R26,X
000898 34a3      	CPI  R26,LOW(0x43)
000899 f411      	BRNE _0xCD
                 ; 0000 02BC             stage = STAGE_ATTENDENC_MENU;
                 _0x1B9:
00089a e0e1      	LDI  R30,LOW(1)
00089b 2e5e      	MOV  R5,R30
                 ; 0000 02BD     }
                 _0xCD:
                 _0xBB:
                 _0xB6:
                 _0xB3:
                 ; 0000 02BE     else if (stage == STAGE_SUBMIT_WITH_CARD)
00089c c22b      	RJMP _0xCE
                 _0xAF:
00089d e0e3      	LDI  R30,LOW(3)
00089e 15e5      	CP   R30,R5
00089f f451      	BRNE _0xCF
                 ; 0000 02BF     {
                 ; 0000 02C0         if (keypad[rowloc][cl] == 'C')
0008a0 940e 1117 	CALL SUBOPT_0x24
0008a2 91ac      	LD   R26,X
0008a3 34a3      	CPI  R26,LOW(0x43)
0008a4 f421      	BRNE _0xD0
                 ; 0000 02C1         {
                 ; 0000 02C2             memset(buffer, 0, 32);
0008a5 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 02C3             stage = STAGE_ATTENDENC_MENU;
0008a7 e0e1      	LDI  R30,LOW(1)
0008a8 2e5e      	MOV  R5,R30
                 ; 0000 02C4         }
                 ; 0000 02C5     }
                 _0xD0:
                 ; 0000 02C6     else if (stage == STAGE_TEMPERATURE_MONITORING)
0008a9 c21e      	RJMP _0xD1
                 _0xCF:
0008aa e0e4      	LDI  R30,LOW(4)
0008ab 15e5      	CP   R30,R5
0008ac f439      	BRNE _0xD2
                 ; 0000 02C7     {
                 ; 0000 02C8         if (keypad[rowloc][cl] == 'C')
0008ad 940e 1117 	CALL SUBOPT_0x24
0008af 91ac      	LD   R26,X
0008b0 34a3      	CPI  R26,LOW(0x43)
0008b1 f409      	BRNE _0xD3
                 ; 0000 02C9             stage = STAGE_INIT_MENU;
0008b2 2455      	CLR  R5
                 ; 0000 02CA     }
                 _0xD3:
                 ; 0000 02CB     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0008b3 c214      	RJMP _0xD4
                 _0xD2:
0008b4 e0e5      	LDI  R30,LOW(5)
0008b5 15e5      	CP   R30,R5
0008b6 f439      	BRNE _0xD5
                 ; 0000 02CC     {
                 ; 0000 02CD         if (keypad[rowloc][cl] == 'C')
0008b7 940e 1117 	CALL SUBOPT_0x24
0008b9 91ac      	LD   R26,X
0008ba 34a3      	CPI  R26,LOW(0x43)
0008bb f409      	BRNE _0xD6
                 ; 0000 02CE             stage = STAGE_INIT_MENU;
0008bc 2455      	CLR  R5
                 ; 0000 02CF     }
                 _0xD6:
                 ; 0000 02D0     else if (stage == STAGE_STUDENT_MANAGMENT)
0008bd c20a      	RJMP _0xD7
                 _0xD5:
0008be e0e7      	LDI  R30,LOW(7)
0008bf 15e5      	CP   R30,R5
0008c0 f571      	BRNE _0xD8
                 ; 0000 02D1     {
                 ; 0000 02D2         if (keypad[rowloc][cl] == 'C')
0008c1 940e 1117 	CALL SUBOPT_0x24
0008c3 91ac      	LD   R26,X
0008c4 34a3      	CPI  R26,LOW(0x43)
0008c5 f411      	BRNE _0xD9
                 ; 0000 02D3             stage = STAGE_INIT_MENU;
0008c6 2455      	CLR  R5
                 ; 0000 02D4         else if (keypad[rowloc][cl] == '1')
0008c7 c026      	RJMP _0xDA
                 _0xD9:
0008c8 940e 1117 	CALL SUBOPT_0x24
0008ca 91ac      	LD   R26,X
0008cb 33a1      	CPI  R26,LOW(0x31)
0008cc f411      	BRNE _0xDB
                 ; 0000 02D5             stage = STAGE_SEARCH_STUDENT;
0008cd e0e8      	LDI  R30,LOW(8)
0008ce c01e      	RJMP _0x1BA
                 ; 0000 02D6         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xDB:
0008cf 940e 1117 	CALL SUBOPT_0x24
0008d1 91ac      	LD   R26,X
0008d2 33a2      	CPI  R26,LOW(0x32)
0008d3 f419      	BRNE _0xDE
0008d4 e0e1      	LDI  R30,LOW(1)
0008d5 15e6      	CP   R30,R6
0008d6 f009      	BREQ _0xDF
                 _0xDE:
0008d7 c002      	RJMP _0xDD
                 _0xDF:
                 ; 0000 02D7             stage = STAGE_DELETE_STUDENT;
0008d8 e0e9      	LDI  R30,LOW(9)
0008d9 c013      	RJMP _0x1BA
                 ; 0000 02D8         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xDD:
0008da 940e 1117 	CALL SUBOPT_0x24
0008dc 91ac      	LD   R26,X
0008dd 33a2      	CPI  R26,LOW(0x32)
0008de f411      	BRNE _0xE2
0008df 2066      	TST  R6
0008e0 f009      	BREQ _0xE3
                 _0xE2:
0008e1 c00c      	RJMP _0xE1
                 _0xE3:
                 ; 0000 02D9         {
                 ; 0000 02DA             lcdCommand(0x01);
0008e2 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 02DB             lcd_gotoxy(1, 1);
                 ; 0000 02DC             lcd_print("You Must First Login");
                +
0008e4 e1af     +LDI R26 , LOW ( _0x9B + ( 233 ) )
0008e5 e0b5     +LDI R27 , HIGH ( _0x9B + ( 233 ) )
                 	__POINTW2MN _0x9B,233
0008e6 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 02DD             lcd_gotoxy(1, 2);
                 ; 0000 02DE             lcd_print("You Will Go Admin Page 2 Sec");
                +
0008e8 e3a4     +LDI R26 , LOW ( _0x9B + ( 254 ) )
0008e9 e0b5     +LDI R27 , HIGH ( _0x9B + ( 254 ) )
                 	__POINTW2MN _0x9B,254
0008ea 940e 1123 	CALL SUBOPT_0x25
                 ; 0000 02DF             delay_ms(2000);
                 ; 0000 02E0             stage = STAGE_LOGIN_WITH_ADMIN;
0008ec e0eb      	LDI  R30,LOW(11)
                 _0x1BA:
0008ed 2e5e      	MOV  R5,R30
                 ; 0000 02E1         }
                 ; 0000 02E2     }
                 _0xE1:
                 _0xDA:
                 ; 0000 02E3     else if (stage == STAGE_SEARCH_STUDENT)
0008ee c1d9      	RJMP _0xE4
                 _0xD8:
0008ef e0e8      	LDI  R30,LOW(8)
0008f0 15e5      	CP   R30,R5
0008f1 f009      	BREQ PC+2
0008f2 c06d      	RJMP _0xE5
                 ; 0000 02E4     {
                 ; 0000 02E5         if (keypad[rowloc][cl] == 'C')
0008f3 940e 1117 	CALL SUBOPT_0x24
0008f5 91ac      	LD   R26,X
0008f6 34a3      	CPI  R26,LOW(0x43)
0008f7 f419      	BRNE _0xE6
                 ; 0000 02E6         {
                 ; 0000 02E7             memset(buffer, 0, 32);
0008f8 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 02E8             stage = STAGE_STUDENT_MANAGMENT;
0008fa c062      	RJMP _0x1BB
                 ; 0000 02E9         }
                 ; 0000 02EA         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xE6:
0008fb 940e 1117 	CALL SUBOPT_0x24
0008fd 91ec      	LD   R30,X
0008fe e0f0      	LDI  R31,0
0008ff 97fa      	SBIW R30,58
000900 f47c      	BRGE _0xE8
                 ; 0000 02EB         {
                 ; 0000 02EC             if (strlen(buffer) <= 30)
000901 940e 104a 	CALL SUBOPT_0x7
000903 977f      	SBIW R30,31
000904 f450      	BRSH _0xE9
                 ; 0000 02ED             {
                 ; 0000 02EE                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000905 940e 104a 	CALL SUBOPT_0x7
000907 940e 1126 	CALL SUBOPT_0x26
000909 940e 112a 	CALL SUBOPT_0x27
                 ; 0000 02EF                 buffer[strlen(buffer) + 1] = '\0';
00090b 940e 112e 	CALL SUBOPT_0x28
                 ; 0000 02F0                 lcdData(keypad[rowloc][cl]);
00090d 91ac      	LD   R26,X
00090e d1d6      	RCALL _lcdData
                 ; 0000 02F1             }
                 ; 0000 02F2         }
                 _0xE9:
                 ; 0000 02F3         else if (keypad[rowloc][cl] == 'D')
00090f c04f      	RJMP _0xEA
                 _0xE8:
000910 940e 1117 	CALL SUBOPT_0x24
000912 91ac      	LD   R26,X
000913 34a4      	CPI  R26,LOW(0x44)
000914 f461      	BRNE _0xEB
                 ; 0000 02F4         {
                 ; 0000 02F5             buffer_len = strlen(buffer);
000915 940e 104a 	CALL SUBOPT_0x7
000917 2f5e      	MOV  R21,R30
                 ; 0000 02F6             if (buffer_len > 0)
000918 3051      	CPI  R21,1
000919 f030      	BRLO _0xEC
                 ; 0000 02F7             {
                 ; 0000 02F8                 buffer[buffer_len - 1] = '\0';
00091a 940e 1133 	CALL SUBOPT_0x29
                 ; 0000 02F9                 lcdCommand(0x10);
                 ; 0000 02FA                 lcd_print(" ");
                +
00091c e5a1     +LDI R26 , LOW ( _0x9B + ( 283 ) )
00091d e0b5     +LDI R27 , HIGH ( _0x9B + ( 283 ) )
                 	__POINTW2MN _0x9B,283
00091e 940e 113d 	CALL SUBOPT_0x2A
                 ; 0000 02FB                 lcdCommand(0x10);
                 ; 0000 02FC             }
                 ; 0000 02FD         }
                 _0xEC:
                 ; 0000 02FE         else if (keypad[rowloc][cl] == 'O')
000920 c03e      	RJMP _0xED
                 _0xEB:
000921 940e 1117 	CALL SUBOPT_0x24
000923 91ac      	LD   R26,X
000924 34af      	CPI  R26,LOW(0x4F)
000925 f481      	BRNE _0xEE
                 ; 0000 02FF         {
                 ; 0000 0300             lcdCommand(0xC0);
000926 940e 1142 	CALL SUBOPT_0x2B
                 ; 0000 0301             for(i = 0; i < strlen(buffer); i++)
                 _0xF0:
000928 940e 104a 	CALL SUBOPT_0x7
00092a 940e 1149 	CALL SUBOPT_0x2C
00092c f430      	BRSH _0xF1
                 ; 0000 0302                 lcd_print(" ");
                +
00092d e5a3     +LDI R26 , LOW ( _0x9B + ( 285 ) )
00092e e0b5     +LDI R27 , HIGH ( _0x9B + ( 285 ) )
                 	__POINTW2MN _0x9B,285
00092f d1f0      	RCALL _lcd_print
000930 940e 114e 	CALL SUBOPT_0x2D
000932 cff5      	RJMP _0xF0
                 _0xF1:
                 ; 0000 0303 lcdCommand(0xC0);
000933 940e 1154 	CALL SUBOPT_0x2E
                 ; 0000 0304             memset(buffer, 0, 32);
                 ; 0000 0305         }
                 ; 0000 0306         else if (keypad[rowloc][cl] == 'E')
000935 c029      	RJMP _0xF2
                 _0xEE:
000936 940e 1117 	CALL SUBOPT_0x24
000938 91ac      	LD   R26,X
000939 34a5      	CPI  R26,LOW(0x45)
00093a f4e9      	BRNE _0xF3
                 ; 0000 0307         {
                 ; 0000 0308             // search from eeprom data
                 ; 0000 0309             unsigned char result = search_student_code();
                 ; 0000 030A 
                 ; 0000 030B             if (result > 0)
00093b 940e 1170 	CALL SUBOPT_0x33
                 ;	i -> Y+13
                 ;	minute -> Y+12
                 ;	hour -> Y+11
                 ;	day -> Y+10
                 ;	date -> Y+9
                 ;	month -> Y+8
                 ;	year -> Y+7
                 ;	result -> Y+0
00093d f048      	BRLO _0xF4
                 ; 0000 030C             {
                 ; 0000 030D                 lcdCommand(0x01);
00093e 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 030E                 lcd_gotoxy(1, 1);
                 ; 0000 030F                 lcd_print("Student Code Found");
                +
000940 e5a5     +LDI R26 , LOW ( _0x9B + ( 287 ) )
000941 e0b5     +LDI R27 , HIGH ( _0x9B + ( 287 ) )
                 	__POINTW2MN _0x9B,287
000942 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0310                 lcd_gotoxy(1, 2);
                 ; 0000 0311                 lcd_print("You Will Back Menu In 2 Second");
                +
000944 e6a8     +LDI R26 , LOW ( _0x9B + ( 306 ) )
000945 e0b5     +LDI R27 , HIGH ( _0x9B + ( 306 ) )
                 	__POINTW2MN _0x9B,306
000946 c008      	RJMP _0x1BC
                 ; 0000 0312                 delay_ms(2000);
                 ; 0000 0313             }
                 ; 0000 0314             else
                 _0xF4:
                 ; 0000 0315             {
                 ; 0000 0316                 lcdCommand(0x01);
000947 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0317                 lcd_gotoxy(1, 1);
                 ; 0000 0318                 lcd_print("Ops , Student Code Not Found");
                +
000949 e8a7     +LDI R26 , LOW ( _0x9B + ( 337 ) )
00094a e0b5     +LDI R27 , HIGH ( _0x9B + ( 337 ) )
                 	__POINTW2MN _0x9B,337
00094b 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0319                 lcd_gotoxy(1, 2);
                 ; 0000 031A                 lcd_print("You Will Back Menu In 2 Second");
                +
00094d eaa4     +LDI R26 , LOW ( _0x9B + ( 366 ) )
00094e e0b5     +LDI R27 , HIGH ( _0x9B + ( 366 ) )
                 	__POINTW2MN _0x9B,366
                 _0x1BC:
00094f d1d0      	RCALL _lcd_print
                 ; 0000 031B                 delay_ms(2000);
000950 940e 10ff 	CALL SUBOPT_0x20
                 ; 0000 031C             }
                 ; 0000 031D             memset(buffer, 0, 32);
000952 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 031E             stage = STAGE_STUDENT_MANAGMENT;
000954 e0e7      	LDI  R30,LOW(7)
000955 2e5e      	MOV  R5,R30
                 ; 0000 031F         }
000956 9621      	ADIW R28,1
                 ; 0000 0320         else if (keypad[rowloc][cl] == 'C')
000957 c007      	RJMP _0xF6
                 _0xF3:
000958 940e 1117 	CALL SUBOPT_0x24
00095a 91ac      	LD   R26,X
00095b 34a3      	CPI  R26,LOW(0x43)
00095c f411      	BRNE _0xF7
                 ; 0000 0321             stage = STAGE_STUDENT_MANAGMENT;
                 _0x1BB:
00095d e0e7      	LDI  R30,LOW(7)
00095e 2e5e      	MOV  R5,R30
                 ; 0000 0322     }
                 _0xF7:
                 _0xF6:
                 _0xF2:
                 _0xED:
                 _0xEA:
                 ; 0000 0323     else if (stage == STAGE_DELETE_STUDENT)
00095f c168      	RJMP _0xF8
                 _0xE5:
000960 e0e9      	LDI  R30,LOW(9)
000961 15e5      	CP   R30,R5
000962 f009      	BREQ PC+2
000963 c072      	RJMP _0xF9
                 ; 0000 0324     {
                 ; 0000 0325         if (keypad[rowloc][cl] == 'C')
000964 940e 1117 	CALL SUBOPT_0x24
000966 91ac      	LD   R26,X
000967 34a3      	CPI  R26,LOW(0x43)
000968 f429      	BRNE _0xFA
                 ; 0000 0326         {
                 ; 0000 0327             memset(buffer, 0, 32);
000969 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0328             stage = STAGE_STUDENT_MANAGMENT;
00096b e0e7      	LDI  R30,LOW(7)
00096c 2e5e      	MOV  R5,R30
                 ; 0000 0329         }
                 ; 0000 032A         else if ((keypad[rowloc][cl] - '0') < 10)
00096d c067      	RJMP _0xFB
                 _0xFA:
00096e 940e 1117 	CALL SUBOPT_0x24
000970 91ec      	LD   R30,X
000971 e0f0      	LDI  R31,0
000972 97fa      	SBIW R30,58
000973 f47c      	BRGE _0xFC
                 ; 0000 032B         {
                 ; 0000 032C             if (strlen(buffer) <= 30)
000974 940e 104a 	CALL SUBOPT_0x7
000976 977f      	SBIW R30,31
000977 f450      	BRSH _0xFD
                 ; 0000 032D             {
                 ; 0000 032E                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000978 940e 104a 	CALL SUBOPT_0x7
00097a 940e 1126 	CALL SUBOPT_0x26
00097c 940e 112a 	CALL SUBOPT_0x27
                 ; 0000 032F                 buffer[strlen(buffer) + 1] = '\0';
00097e 940e 112e 	CALL SUBOPT_0x28
                 ; 0000 0330                 lcdData(keypad[rowloc][cl]);
000980 91ac      	LD   R26,X
000981 d163      	RCALL _lcdData
                 ; 0000 0331             }
                 ; 0000 0332         }
                 _0xFD:
                 ; 0000 0333         else if (keypad[rowloc][cl] == 'D')
000982 c052      	RJMP _0xFE
                 _0xFC:
000983 940e 1117 	CALL SUBOPT_0x24
000985 91ac      	LD   R26,X
000986 34a4      	CPI  R26,LOW(0x44)
000987 f461      	BRNE _0xFF
                 ; 0000 0334         {
                 ; 0000 0335             buffer_len = strlen(buffer);
000988 940e 104a 	CALL SUBOPT_0x7
00098a 2f5e      	MOV  R21,R30
                 ; 0000 0336             if (buffer_len > 0)
00098b 3051      	CPI  R21,1
00098c f030      	BRLO _0x100
                 ; 0000 0337             {
                 ; 0000 0338                 buffer[buffer_len - 1] = '\0';
00098d 940e 1133 	CALL SUBOPT_0x29
                 ; 0000 0339                 lcdCommand(0x10);
                 ; 0000 033A                 lcd_print(" ");
                +
00098f eca3     +LDI R26 , LOW ( _0x9B + ( 397 ) )
000990 e0b5     +LDI R27 , HIGH ( _0x9B + ( 397 ) )
                 	__POINTW2MN _0x9B,397
000991 940e 113d 	CALL SUBOPT_0x2A
                 ; 0000 033B                 lcdCommand(0x10);
                 ; 0000 033C             }
                 ; 0000 033D         }
                 _0x100:
                 ; 0000 033E         else if (keypad[rowloc][cl] == 'O')
000993 c041      	RJMP _0x101
                 _0xFF:
000994 940e 1117 	CALL SUBOPT_0x24
000996 91ac      	LD   R26,X
000997 34af      	CPI  R26,LOW(0x4F)
000998 f481      	BRNE _0x102
                 ; 0000 033F         {
                 ; 0000 0340             lcdCommand(0xC0);
000999 940e 1142 	CALL SUBOPT_0x2B
                 ; 0000 0341             for(i = 0; i < strlen(buffer); i++)
                 _0x104:
00099b 940e 104a 	CALL SUBOPT_0x7
00099d 940e 1149 	CALL SUBOPT_0x2C
00099f f430      	BRSH _0x105
                 ; 0000 0342                 lcd_print(" ");
                +
0009a0 eca5     +LDI R26 , LOW ( _0x9B + ( 399 ) )
0009a1 e0b5     +LDI R27 , HIGH ( _0x9B + ( 399 ) )
                 	__POINTW2MN _0x9B,399
0009a2 d17d      	RCALL _lcd_print
0009a3 940e 114e 	CALL SUBOPT_0x2D
0009a5 cff5      	RJMP _0x104
                 _0x105:
                 ; 0000 0343 lcdCommand(0xC0);
0009a6 940e 1154 	CALL SUBOPT_0x2E
                 ; 0000 0344             memset(buffer, 0, 32);
                 ; 0000 0345         }
                 ; 0000 0346         else if (keypad[rowloc][cl] == 'E')
0009a8 c02c      	RJMP _0x106
                 _0x102:
0009a9 940e 1117 	CALL SUBOPT_0x24
0009ab 91ac      	LD   R26,X
0009ac 34a5      	CPI  R26,LOW(0x45)
0009ad f539      	BRNE _0x107
                 ; 0000 0347         {
                 ; 0000 0348             // search from eeprom data
                 ; 0000 0349             unsigned char result = search_student_code();
                 ; 0000 034A 
                 ; 0000 034B             if (result > 0)
0009ae 940e 1170 	CALL SUBOPT_0x33
                 ;	i -> Y+13
                 ;	minute -> Y+12
                 ;	hour -> Y+11
                 ;	day -> Y+10
                 ;	date -> Y+9
                 ;	month -> Y+8
                 ;	year -> Y+7
                 ;	result -> Y+0
0009b0 f0a0      	BRLO _0x108
                 ; 0000 034C             {
                 ; 0000 034D                 lcdCommand(0x01);
0009b1 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 034E                 lcd_gotoxy(1, 1);
                 ; 0000 034F                 lcd_print("Student Code Found");
                +
0009b3 eca7     +LDI R26 , LOW ( _0x9B + ( 401 ) )
0009b4 e0b5     +LDI R27 , HIGH ( _0x9B + ( 401 ) )
                 	__POINTW2MN _0x9B,401
0009b5 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0350                 lcd_gotoxy(1, 2);
                 ; 0000 0351                 lcd_print("Wait For Delete...");
                +
0009b7 edaa     +LDI R26 , LOW ( _0x9B + ( 420 ) )
0009b8 e0b5     +LDI R27 , HIGH ( _0x9B + ( 420 ) )
                 	__POINTW2MN _0x9B,420
0009b9 d166      	RCALL _lcd_print
                 ; 0000 0352                 delete_student_code(result);
0009ba 81a8      	LD   R26,Y
0009bb d295      	RCALL _delete_student_code
                 ; 0000 0353                 lcdCommand(0x01);
0009bc 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0354                 lcd_gotoxy(1, 1);
                 ; 0000 0355                 lcd_print("Student Code Was Deleted");
                +
0009be eead     +LDI R26 , LOW ( _0x9B + ( 439 ) )
0009bf e0b5     +LDI R27 , HIGH ( _0x9B + ( 439 ) )
                 	__POINTW2MN _0x9B,439
0009c0 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0356                 lcd_gotoxy(1, 2);
                 ; 0000 0357                 lcd_print("You Will Back Menu In 2 Second");
                +
0009c2 e0a6     +LDI R26 , LOW ( _0x9B + ( 464 ) )
0009c3 e0b6     +LDI R27 , HIGH ( _0x9B + ( 464 ) )
                 	__POINTW2MN _0x9B,464
0009c4 c008      	RJMP _0x1BD
                 ; 0000 0358                 delay_ms(2000);
                 ; 0000 0359             }
                 ; 0000 035A             else
                 _0x108:
                 ; 0000 035B             {
                 ; 0000 035C                 lcdCommand(0x01);
0009c5 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 035D                 lcd_gotoxy(1, 1);
                 ; 0000 035E                 lcd_print("Ops , Student Code Not Found");
                +
0009c7 e2a5     +LDI R26 , LOW ( _0x9B + ( 495 ) )
0009c8 e0b6     +LDI R27 , HIGH ( _0x9B + ( 495 ) )
                 	__POINTW2MN _0x9B,495
0009c9 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 035F                 lcd_gotoxy(1, 2);
                 ; 0000 0360                 lcd_print("You Will Back Menu In 2 Second");
                +
0009cb e4a2     +LDI R26 , LOW ( _0x9B + ( 524 ) )
0009cc e0b6     +LDI R27 , HIGH ( _0x9B + ( 524 ) )
                 	__POINTW2MN _0x9B,524
                 _0x1BD:
0009cd d152      	RCALL _lcd_print
                 ; 0000 0361                 delay_ms(2000);
0009ce 940e 10ff 	CALL SUBOPT_0x20
                 ; 0000 0362             }
                 ; 0000 0363             memset(buffer, 0, 32);
0009d0 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0364             stage = STAGE_STUDENT_MANAGMENT;
0009d2 e0e7      	LDI  R30,LOW(7)
0009d3 2e5e      	MOV  R5,R30
                 ; 0000 0365         }
0009d4 9621      	ADIW R28,1
                 ; 0000 0366     }
                 _0x107:
                 _0x106:
                 _0x101:
                 _0xFE:
                 _0xFB:
                 ; 0000 0367     else if (stage == STAGE_TRAFFIC_MONITORING)
0009d5 c0f2      	RJMP _0x10A
                 _0xF9:
0009d6 e0ea      	LDI  R30,LOW(10)
0009d7 15e5      	CP   R30,R5
0009d8 f439      	BRNE _0x10B
                 ; 0000 0368     {
                 ; 0000 0369         if (keypad[rowloc][cl] == 'C')
0009d9 940e 1117 	CALL SUBOPT_0x24
0009db 91ac      	LD   R26,X
0009dc 34a3      	CPI  R26,LOW(0x43)
0009dd f409      	BRNE _0x10C
                 ; 0000 036A             stage = STAGE_INIT_MENU;
0009de 2455      	CLR  R5
                 ; 0000 036B     }
                 _0x10C:
                 ; 0000 036C     else if (stage == STAGE_SHOW_CLOCK)
0009df c0e8      	RJMP _0x10D
                 _0x10B:
0009e0 e0ed      	LDI  R30,LOW(13)
0009e1 15e5      	CP   R30,R5
0009e2 f439      	BRNE _0x10E
                 ; 0000 036D     {
                 ; 0000 036E         if (keypad[rowloc][cl] == 'C')
0009e3 940e 1117 	CALL SUBOPT_0x24
0009e5 91ac      	LD   R26,X
0009e6 34a3      	CPI  R26,LOW(0x43)
0009e7 f409      	BRNE _0x10F
                 ; 0000 036F             stage = STAGE_INIT_MENU;
0009e8 2455      	CLR  R5
                 ; 0000 0370     }
                 _0x10F:
                 ; 0000 0371     else if (stage == STAGE_SET_TIMER)
0009e9 c0de      	RJMP _0x110
                 _0x10E:
0009ea e0ee      	LDI  R30,LOW(14)
0009eb 15e5      	CP   R30,R5
0009ec f009      	BREQ PC+2
0009ed c043      	RJMP _0x111
                 ; 0000 0372     {
                 ; 0000 0373         if (keypad[rowloc][cl] == 'C')
0009ee 940e 1117 	CALL SUBOPT_0x24
0009f0 91ac      	LD   R26,X
0009f1 34a3      	CPI  R26,LOW(0x43)
0009f2 f419      	BRNE _0x112
                 ; 0000 0374         {
                 ; 0000 0375             memset(buffer, 0, 32);
0009f3 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0376             stage = STAGE_INIT_MENU;
0009f5 c039      	RJMP _0x1BE
                 ; 0000 0377         }
                 ; 0000 0378 
                 ; 0000 0379         else if(keypad[rowloc][cl] == 'R')
                 _0x112:
0009f6 940e 1117 	CALL SUBOPT_0x24
0009f8 91ac      	LD   R26,X
0009f9 35a2      	CPI  R26,LOW(0x52)
0009fa f481      	BRNE _0x114
                 ; 0000 037A         {
                 ; 0000 037B             if(submitTime < 20){
0009fb e1e4      	LDI  R30,LOW(20)
0009fc 169e      	CP   R9,R30
0009fd f460      	BRSH _0x115
                 ; 0000 037C                 submitTime++;
0009fe 9493      	INC  R9
                 ; 0000 037D                 itoa(submitTime, buffer);
0009ff 2de9      	MOV  R30,R9
000a00 940e 10c5 	CALL SUBOPT_0x18
                 ; 0000 037E                 lcd_gotoxy(21,1);
000a02 e1e5      	LDI  R30,LOW(21)
000a03 940e 110d 	CALL SUBOPT_0x22
                 ; 0000 037F                 lcd_print(buffer);
000a05 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 0380                 lcd_print("  ");
                +
000a07 e6a1     +LDI R26 , LOW ( _0x9B + ( 555 ) )
000a08 e0b6     +LDI R27 , HIGH ( _0x9B + ( 555 ) )
                 	__POINTW2MN _0x9B,555
000a09 d116      	RCALL _lcd_print
                 ; 0000 0381             }
                 ; 0000 0382         }
                 _0x115:
                 ; 0000 0383         else if(keypad[rowloc][cl] == 'L')
000a0a c025      	RJMP _0x116
                 _0x114:
000a0b 940e 1117 	CALL SUBOPT_0x24
000a0d 91ac      	LD   R26,X
000a0e 34ac      	CPI  R26,LOW(0x4C)
000a0f f481      	BRNE _0x117
                 ; 0000 0384         {
                 ; 0000 0385             if(submitTime > 1){
000a10 e0e1      	LDI  R30,LOW(1)
000a11 15e9      	CP   R30,R9
000a12 f460      	BRSH _0x118
                 ; 0000 0386                 submitTime--;
000a13 949a      	DEC  R9
                 ; 0000 0387                 itoa(submitTime, buffer);
000a14 2de9      	MOV  R30,R9
000a15 940e 10c5 	CALL SUBOPT_0x18
                 ; 0000 0388                 lcd_gotoxy(21,1);
000a17 e1e5      	LDI  R30,LOW(21)
000a18 940e 110d 	CALL SUBOPT_0x22
                 ; 0000 0389                 lcd_print(buffer);
000a1a 940e 10c1 	CALL SUBOPT_0x17
                 ; 0000 038A                 lcd_print("  ");
                +
000a1c e6a4     +LDI R26 , LOW ( _0x9B + ( 558 ) )
000a1d e0b6     +LDI R27 , HIGH ( _0x9B + ( 558 ) )
                 	__POINTW2MN _0x9B,558
000a1e d101      	RCALL _lcd_print
                 ; 0000 038B             }
                 ; 0000 038C         }
                 _0x118:
                 ; 0000 038D         else if(keypad[rowloc][cl] == 'E')
000a1f c010      	RJMP _0x119
                 _0x117:
000a20 940e 1117 	CALL SUBOPT_0x24
000a22 91ac      	LD   R26,X
000a23 34a5      	CPI  R26,LOW(0x45)
000a24 f459      	BRNE _0x11A
                 ; 0000 038E         {
                 ; 0000 038F             lcdCommand(0x01);
000a25 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0390             lcd_gotoxy(1,1);
                 ; 0000 0391             lcd_print("Timer started");
                +
000a27 e6a7     +LDI R26 , LOW ( _0x9B + ( 561 ) )
000a28 e0b6     +LDI R27 , HIGH ( _0x9B + ( 561 ) )
                 	__POINTW2MN _0x9B,561
000a29 d0f6      	RCALL _lcd_print
                 ; 0000 0392             memset(buffer, 0, 32);
000a2a 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 0393             delay_ms(2000);
000a2c 940e 10ff 	CALL SUBOPT_0x20
                 ; 0000 0394             Timer2_Init();
000a2e d3ae      	RCALL _Timer2_Init
                 ; 0000 0395             stage = STAGE_INIT_MENU;
                 _0x1BE:
000a2f 2455      	CLR  R5
                 ; 0000 0396         }
                 ; 0000 0397 
                 ; 0000 0398     }
                 _0x11A:
                 _0x119:
                 _0x116:
                 ; 0000 0399     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
000a30 c097      	RJMP _0x11B
                 _0x111:
000a31 e0eb      	LDI  R30,LOW(11)
000a32 15e5      	CP   R30,R5
000a33 f419      	BRNE _0x11D
000a34 e0e1      	LDI  R30,LOW(1)
000a35 15e6      	CP   R30,R6
000a36 f409      	BRNE _0x11E
                 _0x11D:
000a37 c071      	RJMP _0x11C
                 _0x11E:
                 ; 0000 039A     {
                 ; 0000 039B         if (keypad[rowloc][cl] == 'C')
000a38 940e 1117 	CALL SUBOPT_0x24
000a3a 91ac      	LD   R26,X
000a3b 34a3      	CPI  R26,LOW(0x43)
000a3c f421      	BRNE _0x11F
                 ; 0000 039C         {
                 ; 0000 039D             memset(buffer, 0, 32);
000a3d 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 039E             stage = STAGE_INIT_MENU;
000a3f 2455      	CLR  R5
                 ; 0000 039F         }
                 ; 0000 03A0 
                 ; 0000 03A1         else if ((keypad[rowloc][cl] - '0') < 10)
000a40 c067      	RJMP _0x120
                 _0x11F:
000a41 940e 1117 	CALL SUBOPT_0x24
000a43 91ec      	LD   R30,X
000a44 e0f0      	LDI  R31,0
000a45 97fa      	SBIW R30,58
000a46 f47c      	BRGE _0x121
                 ; 0000 03A2         {
                 ; 0000 03A3             if (strlen(buffer) <= 30)
000a47 940e 104a 	CALL SUBOPT_0x7
000a49 977f      	SBIW R30,31
000a4a f450      	BRSH _0x122
                 ; 0000 03A4             {
                 ; 0000 03A5                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000a4b 940e 104a 	CALL SUBOPT_0x7
000a4d 940e 1126 	CALL SUBOPT_0x26
000a4f 940e 112a 	CALL SUBOPT_0x27
                 ; 0000 03A6                 buffer[strlen(buffer) + 1] = '\0';
000a51 940e 112e 	CALL SUBOPT_0x28
                 ; 0000 03A7                 lcdData(keypad[rowloc][cl]);
000a53 91ac      	LD   R26,X
000a54 d090      	RCALL _lcdData
                 ; 0000 03A8             }
                 ; 0000 03A9         }
                 _0x122:
                 ; 0000 03AA         else if (keypad[rowloc][cl] == 'D')
000a55 c052      	RJMP _0x123
                 _0x121:
000a56 940e 1117 	CALL SUBOPT_0x24
000a58 91ac      	LD   R26,X
000a59 34a4      	CPI  R26,LOW(0x44)
000a5a f461      	BRNE _0x124
                 ; 0000 03AB         {
                 ; 0000 03AC             buffer_len = strlen(buffer);
000a5b 940e 104a 	CALL SUBOPT_0x7
000a5d 2f5e      	MOV  R21,R30
                 ; 0000 03AD             if (buffer_len > 0)
000a5e 3051      	CPI  R21,1
000a5f f030      	BRLO _0x125
                 ; 0000 03AE             {
                 ; 0000 03AF                 buffer[buffer_len - 1] = '\0';
000a60 940e 1133 	CALL SUBOPT_0x29
                 ; 0000 03B0                 lcdCommand(0x10);
                 ; 0000 03B1                 lcd_print(" ");
                +
000a62 e7a5     +LDI R26 , LOW ( _0x9B + ( 575 ) )
000a63 e0b6     +LDI R27 , HIGH ( _0x9B + ( 575 ) )
                 	__POINTW2MN _0x9B,575
000a64 940e 113d 	CALL SUBOPT_0x2A
                 ; 0000 03B2                 lcdCommand(0x10);
                 ; 0000 03B3             }
                 ; 0000 03B4         }
                 _0x125:
                 ; 0000 03B5         else if (keypad[rowloc][cl] == 'O')
000a66 c041      	RJMP _0x126
                 _0x124:
000a67 940e 1117 	CALL SUBOPT_0x24
000a69 91ac      	LD   R26,X
000a6a 34af      	CPI  R26,LOW(0x4F)
000a6b f481      	BRNE _0x127
                 ; 0000 03B6         {
                 ; 0000 03B7             lcdCommand(0xC0);
000a6c 940e 1142 	CALL SUBOPT_0x2B
                 ; 0000 03B8             for(i = 0; i < strlen(buffer); i++)
                 _0x129:
000a6e 940e 104a 	CALL SUBOPT_0x7
000a70 940e 1149 	CALL SUBOPT_0x2C
000a72 f430      	BRSH _0x12A
                 ; 0000 03B9                 lcd_print(" ");
                +
000a73 e7a7     +LDI R26 , LOW ( _0x9B + ( 577 ) )
000a74 e0b6     +LDI R27 , HIGH ( _0x9B + ( 577 ) )
                 	__POINTW2MN _0x9B,577
000a75 d0aa      	RCALL _lcd_print
000a76 940e 114e 	CALL SUBOPT_0x2D
000a78 cff5      	RJMP _0x129
                 _0x12A:
                 ; 0000 03BA lcdCommand(0xC0);
000a79 940e 1154 	CALL SUBOPT_0x2E
                 ; 0000 03BB             memset(buffer, 0, 32);
                 ; 0000 03BC         }
                 ; 0000 03BD         else if (keypad[rowloc][cl] == 'E')
000a7b c02c      	RJMP _0x12B
                 _0x127:
000a7c 940e 1117 	CALL SUBOPT_0x24
000a7e 91ac      	LD   R26,X
000a7f 34a5      	CPI  R26,LOW(0x45)
000a80 f539      	BRNE _0x12C
                 ; 0000 03BE         {
                 ; 0000 03BF             // search from eeprom data
                 ; 0000 03C0             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 03C1 
                 ; 0000 03C2             if (input_hash == secret)
000a81 9722      	SBIW R28,2
                 ;	i -> Y+14
                 ;	minute -> Y+13
                 ;	hour -> Y+12
                 ;	day -> Y+11
                 ;	date -> Y+10
                 ;	month -> Y+9
                 ;	year -> Y+8
                 ;	input_hash -> Y+0
000a82 eeae      	LDI  R26,LOW(_buffer)
000a83 e0b7      	LDI  R27,HIGH(_buffer)
000a84 d2db      	RCALL _simple_hash
000a85 83e8      	ST   Y,R30
000a86 83f9      	STD  Y+1,R31
000a87 81a8      	LD   R26,Y
000a88 81b9      	LDD  R27,Y+1
000a89 36a4      	CPI  R26,LOW(0xF64)
000a8a e0ef      	LDI  R30,HIGH(0xF64)
000a8b 07be      	CPC  R27,R30
000a8c f469      	BRNE _0x12D
                 ; 0000 03C3             {
                 ; 0000 03C4                 lcdCommand(0x01);
000a8d 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 03C5                 lcd_gotoxy(1, 1);
                 ; 0000 03C6                 lcd_print("Login Successfully");
                +
000a8f e7a9     +LDI R26 , LOW ( _0x9B + ( 579 ) )
000a90 e0b6     +LDI R27 , HIGH ( _0x9B + ( 579 ) )
                 	__POINTW2MN _0x9B,579
000a91 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 03C7                 lcd_gotoxy(1, 2);
                 ; 0000 03C8                 lcd_print("Wait...");
                +
000a93 e8ac     +LDI R26 , LOW ( _0x9B + ( 598 ) )
000a94 e0b6     +LDI R27 , HIGH ( _0x9B + ( 598 ) )
                 	__POINTW2MN _0x9B,598
000a95 940e 1123 	CALL SUBOPT_0x25
                 ; 0000 03C9                 delay_ms(2000);
                 ; 0000 03CA                 logged_in = 1;
000a97 e0e1      	LDI  R30,LOW(1)
000a98 2e6e      	MOV  R6,R30
                 ; 0000 03CB             }
                 ; 0000 03CC             else
000a99 c00a      	RJMP _0x12E
                 _0x12D:
                 ; 0000 03CD             {
                 ; 0000 03CE                 lcdCommand(0x01);
000a9a 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 03CF                 lcd_gotoxy(1, 1);
                 ; 0000 03D0                 lcd_print("Ops , secret is incorrect");
                +
000a9c e9a4     +LDI R26 , LOW ( _0x9B + ( 606 ) )
000a9d e0b6     +LDI R27 , HIGH ( _0x9B + ( 606 ) )
                 	__POINTW2MN _0x9B,606
000a9e 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 03D1                 lcd_gotoxy(1, 2);
                 ; 0000 03D2                 lcd_print("You Will Back Menu In 2 Second");
                +
000aa0 eaae     +LDI R26 , LOW ( _0x9B + ( 632 ) )
000aa1 e0b6     +LDI R27 , HIGH ( _0x9B + ( 632 ) )
                 	__POINTW2MN _0x9B,632
000aa2 940e 1123 	CALL SUBOPT_0x25
                 ; 0000 03D3                 delay_ms(2000);
                 ; 0000 03D4             }
                 _0x12E:
                 ; 0000 03D5             memset(buffer, 0, 32);
000aa4 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 03D6             stage = STAGE_INIT_MENU;
000aa6 2455      	CLR  R5
                 ; 0000 03D7         }
000aa7 9622      	ADIW R28,2
                 ; 0000 03D8     }
                 _0x12C:
                 _0x12B:
                 _0x126:
                 _0x123:
                 _0x120:
                 ; 0000 03D9     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
000aa8 c01f      	RJMP _0x12F
                 _0x11C:
000aa9 e0eb      	LDI  R30,LOW(11)
000aaa 15e5      	CP   R30,R5
000aab f411      	BRNE _0x131
000aac 2066      	TST  R6
000aad f409      	BRNE _0x132
                 _0x131:
000aae c019      	RJMP _0x130
                 _0x132:
                 ; 0000 03DA     {
                 ; 0000 03DB         switch (keypad[rowloc][cl])
000aaf 940e 1117 	CALL SUBOPT_0x24
000ab1 91ec      	LD   R30,X
000ab2 e0f0      	LDI  R31,0
                 ; 0000 03DC         {
                 ; 0000 03DD         case 'C':
000ab3 34e3      	CPI  R30,LOW(0x43)
000ab4 e0a0      	LDI  R26,HIGH(0x43)
000ab5 07fa      	CPC  R31,R26
000ab6 f411      	BRNE _0x136
                 ; 0000 03DE             stage = STAGE_INIT_MENU;
000ab7 2455      	CLR  R5
                 ; 0000 03DF             break;
000ab8 c00c      	RJMP _0x135
                 ; 0000 03E0         case '1':
                 _0x136:
000ab9 33e1      	CPI  R30,LOW(0x31)
000aba e0a0      	LDI  R26,HIGH(0x31)
000abb 07fa      	CPC  R31,R26
000abc f441      	BRNE _0x138
                 ; 0000 03E1 #asm("cli") // disable interrupts
000abd 94f8      	cli
                 ; 0000 03E2             lcdCommand(0x1);
000abe 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 03E3             lcd_gotoxy(1, 1);
                 ; 0000 03E4             lcd_print("Clearing EEPROM ...");
                +
000ac0 ecad     +LDI R26 , LOW ( _0x9B + ( 663 ) )
000ac1 e0b6     +LDI R27 , HIGH ( _0x9B + ( 663 ) )
                 	__POINTW2MN _0x9B,663
000ac2 d05d      	RCALL _lcd_print
                 ; 0000 03E5             clear_eeprom();
000ac3 d0fe      	RCALL _clear_eeprom
                 ; 0000 03E6 #asm("sei") // enable interrupts
000ac4 9478      	sei
                 ; 0000 03E7             break;
                 ; 0000 03E8         default:
                 _0x138:
                 ; 0000 03E9             break;
                 ; 0000 03EA         }
                 _0x135:
                 ; 0000 03EB         memset(buffer, 0, 32);
000ac5 940e 103b 	CALL SUBOPT_0x5
                 ; 0000 03EC         stage = STAGE_INIT_MENU;
000ac7 2455      	CLR  R5
                 ; 0000 03ED     }
                 ; 0000 03EE }
                 _0x130:
                 _0x12F:
                 _0x11B:
                 _0x110:
                 _0x10D:
                 _0x10A:
                 _0xF8:
                 _0xE4:
                 _0xD7:
                 _0xD4:
                 _0xD1:
                 _0xCE:
                 _0xAE:
                 _0xA5:
000ac8 940e 141f 	CALL __LOADLOCR6
000aca 962e      	ADIW R28,14
000acb 91e9      	LD   R30,Y+
000acc bfef      	OUT  SREG,R30
000acd 91f9      	LD   R31,Y+
000ace 91e9      	LD   R30,Y+
000acf 91b9      	LD   R27,Y+
000ad0 91a9      	LD   R26,Y+
000ad1 9199      	LD   R25,Y+
000ad2 9189      	LD   R24,Y+
000ad3 9179      	LD   R23,Y+
000ad4 9169      	LD   R22,Y+
000ad5 90f9      	LD   R15,Y+
000ad6 9019      	LD   R1,Y+
000ad7 9009      	LD   R0,Y+
000ad8 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x9B:
000436           	.BYTE 0x2AB
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 03F1 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 03F2     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000ad9 940e 1177 	CALL SUBOPT_0x34
                 ;	cmnd -> Y+0
                 ; 0000 03F3     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
000adb 98d8      	CBI  0x1B,0
                 ; 0000 03F4     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000adc 940e 1180 	CALL SUBOPT_0x35
                 ; 0000 03F5     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03F6     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03F7     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03F8     delay_us(20 * 16);         // wait
                +
000ade e880     +LDI R24 , LOW ( 640 )
000adf e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
000ae0 9701     +SBIW R24 , 1
000ae1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 03F9     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000ae2 940e 1187 	CALL SUBOPT_0x36
                 ; 0000 03FA     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03FB     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03FC     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03FD }
000ae4 c2c0      	RJMP _0x20C0006
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 03FF {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 0400     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
000ae5 940e 1177 	CALL SUBOPT_0x34
                 ;	data -> Y+0
                 ; 0000 0401     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
000ae7 9ad8      	SBI  0x1B,0
                 ; 0000 0402     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000ae8 940e 1180 	CALL SUBOPT_0x35
                 ; 0000 0403     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0404     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0405     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0406     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
000aea 940e 1187 	CALL SUBOPT_0x36
                 ; 0000 0407     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0408     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0409     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 040A }
000aec c2b8      	RJMP _0x20C0006
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 040C {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 040D     LCD_DDR = 0xFF;            // LCD port is output
000aed efef      	LDI  R30,LOW(255)
000aee bbea      	OUT  0x1A,R30
                 ; 0000 040E     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000aef 98da      	CBI  0x1B,2
                 ; 0000 040F     delay_us(2000 * 16);       // wait for stable power
                +
000af0 e080     +LDI R24 , LOW ( 64000 )
000af1 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000af2 9701     +SBIW R24 , 1
000af3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0410     lcdCommand(0x33);          //$33 for 4-bit mode
000af4 e3a3      	LDI  R26,LOW(51)
000af5 940e 1195 	CALL SUBOPT_0x37
                 ; 0000 0411     delay_us(100 * 16);        // wait
                 ; 0000 0412     lcdCommand(0x32);          //$32 for 4-bit mode
000af7 e3a2      	LDI  R26,LOW(50)
000af8 940e 1195 	CALL SUBOPT_0x37
                 ; 0000 0413     delay_us(100 * 16);        // wait
                 ; 0000 0414     lcdCommand(0x28);          //$28 for 4-bit mode
000afa e2a8      	LDI  R26,LOW(40)
000afb 940e 1195 	CALL SUBOPT_0x37
                 ; 0000 0415     delay_us(100 * 16);        // wait
                 ; 0000 0416     lcdCommand(0x0c);          // display on, cursor off
000afd 940e 1033 	CALL SUBOPT_0x4
                 ; 0000 0417     delay_us(100 * 16);        // wait
                 ; 0000 0418     lcdCommand(0x01);          // clear LCD
000aff e0a1      	LDI  R26,LOW(1)
000b00 dfd8      	RCALL _lcdCommand
                 ; 0000 0419     delay_us(2000 * 16);       // wait
                +
000b01 e080     +LDI R24 , LOW ( 64000 )
000b02 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000b03 9701     +SBIW R24 , 1
000b04 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 041A     lcdCommand(0x06);          // shift cursor right
000b05 e0a6      	LDI  R26,LOW(6)
000b06 940e 1195 	CALL SUBOPT_0x37
                 ; 0000 041B     delay_us(100 * 16);
                 ; 0000 041C }
000b08 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 041E {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 041F     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 0420     lcdCommand(firstCharAdr[y - 1] + x - 1);
000b09 93aa      	ST   -Y,R26
000b0a 9724      	SBIW R28,4
000b0b e8e0      	LDI  R30,LOW(128)
000b0c 83e8      	ST   Y,R30
000b0d ece0      	LDI  R30,LOW(192)
000b0e 83e9      	STD  Y+1,R30
000b0f e9e4      	LDI  R30,LOW(148)
000b10 83ea      	STD  Y+2,R30
000b11 ede4      	LDI  R30,LOW(212)
000b12 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000b13 81ec      	LDD  R30,Y+4
000b14 e0f0      	LDI  R31,0
000b15 9731      	SBIW R30,1
000b16 01de      	MOVW R26,R28
000b17 0fae      	ADD  R26,R30
000b18 1fbf      	ADC  R27,R31
000b19 91ec      	LD   R30,X
000b1a 81ad      	LDD  R26,Y+5
000b1b 0fae      	ADD  R26,R30
000b1c 50a1      	SUBI R26,LOW(1)
000b1d 940e 1195 	CALL SUBOPT_0x37
                 ; 0000 0421     delay_us(100 * 16);
                 ; 0000 0422 }
000b1f c2a5      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0424 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0425     unsigned char i = 0;
                 ; 0000 0426     while (str[i] != 0)
000b20 93ba      	ST   -Y,R27
000b21 93aa      	ST   -Y,R26
000b22 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000b23 e010      	LDI  R17,0
                 _0x139:
000b24 81a9      	LDD  R26,Y+1
000b25 81ba      	LDD  R27,Y+1+1
000b26 27ee      	CLR  R30
000b27 0fa1      	ADD  R26,R17
000b28 1fbe      	ADC  R27,R30
000b29 91ec      	LD   R30,X
000b2a 30e0      	CPI  R30,0
000b2b f049      	BREQ _0x13B
                 ; 0000 0427     {
                 ; 0000 0428         lcdData(str[i]);
000b2c 81a9      	LDD  R26,Y+1
000b2d 81ba      	LDD  R27,Y+1+1
000b2e 27ee      	CLR  R30
000b2f 0fa1      	ADD  R26,R17
000b30 1fbe      	ADC  R27,R30
000b31 91ac      	LD   R26,X
000b32 dfb2      	RCALL _lcdData
                 ; 0000 0429         i++;
000b33 5f1f      	SUBI R17,-1
                 ; 0000 042A     }
000b34 cfef      	RJMP _0x139
                 _0x13B:
                 ; 0000 042B }
000b35 8118      	LDD  R17,Y+0
000b36 c0ba      	RJMP _0x20C0009
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 042E {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 042F     unsigned char temperatureVal = 0;
                 ; 0000 0430     unsigned char temperatureRep[3];
                 ; 0000 0431 
                 ; 0000 0432     DDRA &= ~(1 << 3);
000b37 9723      	SBIW R28,3
000b38 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000b39 e010      	LDI  R17,0
000b3a 98d3      	CBI  0x1A,3
                 ; 0000 0433     ADMUX = 0xE3;
000b3b eee3      	LDI  R30,LOW(227)
000b3c b9e7      	OUT  0x7,R30
                 ; 0000 0434     ADCSRA = 0x87;
000b3d e8e7      	LDI  R30,LOW(135)
000b3e b9e6      	OUT  0x6,R30
                 ; 0000 0435 
                 ; 0000 0436     lcdCommand(0x01);
000b3f 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0437     lcd_gotoxy(1, 1);
                 ; 0000 0438     lcd_print("Temperature(C):");
                +
000b41 eea1     +LDI R26 , LOW ( _0x13C + ( 0 ) )
000b42 e0b6     +LDI R27 , HIGH ( _0x13C + ( 0 ) )
                 	__POINTW2MN _0x13C,0
000b43 dfdc      	RCALL _lcd_print
                 ; 0000 0439 
                 ; 0000 043A     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0x13D:
000b44 e0e4      	LDI  R30,LOW(4)
000b45 15e5      	CP   R30,R5
000b46 f4e9      	BRNE _0x13F
                 ; 0000 043B     {
                 ; 0000 043C         ADCSRA |= (1 << ADSC);
000b47 9a36      	SBI  0x6,6
                 ; 0000 043D         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x140:
000b48 9b34      	SBIS 0x6,4
                 ; 0000 043E             ;
000b49 cffe      	RJMP _0x140
                 ; 0000 043F         if (ADCH != temperatureVal)
000b4a b1e5      	IN   R30,0x5
000b4b 171e      	CP   R17,R30
000b4c f091      	BREQ _0x143
                 ; 0000 0440         {
                 ; 0000 0441             temperatureVal = ADCH;
000b4d b115      	IN   R17,5
                 ; 0000 0442             itoa(temperatureVal, temperatureRep);
000b4e 2fe1      	MOV  R30,R17
000b4f e0f0      	LDI  R31,0
000b50 93fa      	ST   -Y,R31
000b51 93ea      	ST   -Y,R30
000b52 01de      	MOVW R26,R28
000b53 9613      	ADIW R26,3
000b54 940e 0dee 	CALL _itoa
                 ; 0000 0443             lcd_gotoxy(17, 1);
000b56 e1e1      	LDI  R30,LOW(17)
000b57 940e 110d 	CALL SUBOPT_0x22
                 ; 0000 0444             lcd_print(temperatureRep);
000b59 01de      	MOVW R26,R28
000b5a 9611      	ADIW R26,1
000b5b dfc4      	RCALL _lcd_print
                 ; 0000 0445             lcd_print(" ");
                +
000b5c efa1     +LDI R26 , LOW ( _0x13C + ( 16 ) )
000b5d e0b6     +LDI R27 , HIGH ( _0x13C + ( 16 ) )
                 	__POINTW2MN _0x13C,16
000b5e dfc1      	RCALL _lcd_print
                 ; 0000 0446         }
                 ; 0000 0447         delay_ms(500);
                 _0x143:
000b5f efa4      	LDI  R26,LOW(500)
000b60 e0b1      	LDI  R27,HIGH(500)
000b61 940e 1232 	CALL _delay_ms
                 ; 0000 0448     }
000b63 cfe0      	RJMP _0x13D
                 _0x13F:
                 ; 0000 0449 
                 ; 0000 044A     ADCSRA = 0x0;
000b64 e0e0      	LDI  R30,LOW(0)
000b65 b9e6      	OUT  0x6,R30
                 ; 0000 044B }
000b66 8118      	LDD  R17,Y+0
000b67 c219      	RJMP _0x20C0007
                 ; .FEND
                 
                 	.DSEG
                 _0x13C:
0006e1           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 044E {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 044F     while (stage == STAGE_INIT_MENU)
                 _0x144:
000b68 2055      	TST  R5
000b69 f009      	BREQ PC+2
000b6a c056      	RJMP _0x146
                 ; 0000 0450     {
                 ; 0000 0451         lcdCommand(0x01);
000b6b 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0452         lcd_gotoxy(1, 1);
                 ; 0000 0453         if (page_num == 0)
000b6d 2044      	TST  R4
000b6e f471      	BRNE _0x147
                 ; 0000 0454         {
                 ; 0000 0455             lcd_print("1: Attendance Initialization");
                +
000b6f efa3     +LDI R26 , LOW ( _0x148 + ( 0 ) )
000b70 e0b6     +LDI R27 , HIGH ( _0x148 + ( 0 ) )
                 	__POINTW2MN _0x148,0
000b71 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0456             lcd_gotoxy(1, 2);
                 ; 0000 0457             lcd_print("2: Student Management");
                +
000b73 e1a0     +LDI R26 , LOW ( _0x148 + ( 29 ) )
000b74 e0b7     +LDI R27 , HIGH ( _0x148 + ( 29 ) )
                 	__POINTW2MN _0x148,29
000b75 dfaa      	RCALL _lcd_print
                 ; 0000 0458             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0x149:
000b76 2044      	TST  R4
000b77 f411      	BRNE _0x14C
000b78 2055      	TST  R5
000b79 f009      	BREQ _0x14D
                 _0x14C:
000b7a c001      	RJMP _0x14B
                 _0x14D:
                 ; 0000 0459                 ;
000b7b cffa      	RJMP _0x149
                 _0x14B:
                 ; 0000 045A         }
                 ; 0000 045B         else if (page_num == 1)
000b7c c043      	RJMP _0x14E
                 _0x147:
000b7d e0e1      	LDI  R30,LOW(1)
000b7e 15e4      	CP   R30,R4
000b7f f479      	BRNE _0x14F
                 ; 0000 045C         {
                 ; 0000 045D             lcd_print("3: View Present Students ");
                +
000b80 e2a6     +LDI R26 , LOW ( _0x148 + ( 51 ) )
000b81 e0b7     +LDI R27 , HIGH ( _0x148 + ( 51 ) )
                 	__POINTW2MN _0x148,51
000b82 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 045E             lcd_gotoxy(1, 2);
                 ; 0000 045F             lcd_print("4: Temperature Monitoring");
                +
000b84 e4a0     +LDI R26 , LOW ( _0x148 + ( 77 ) )
000b85 e0b7     +LDI R27 , HIGH ( _0x148 + ( 77 ) )
                 	__POINTW2MN _0x148,77
000b86 df99      	RCALL _lcd_print
                 ; 0000 0460             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0x150:
000b87 e0e1      	LDI  R30,LOW(1)
000b88 15e4      	CP   R30,R4
000b89 f411      	BRNE _0x153
000b8a 2055      	TST  R5
000b8b f009      	BREQ _0x154
                 _0x153:
000b8c c001      	RJMP _0x152
                 _0x154:
                 ; 0000 0461                 ;
000b8d cff9      	RJMP _0x150
                 _0x152:
                 ; 0000 0462         }
                 ; 0000 0463         else if (page_num == 2)
000b8e c031      	RJMP _0x155
                 _0x14F:
000b8f e0e2      	LDI  R30,LOW(2)
000b90 15e4      	CP   R30,R4
000b91 f479      	BRNE _0x156
                 ; 0000 0464         {
                 ; 0000 0465             lcd_print("5: Retrieve Student Data");
                +
000b92 e5aa     +LDI R26 , LOW ( _0x148 + ( 103 ) )
000b93 e0b7     +LDI R27 , HIGH ( _0x148 + ( 103 ) )
                 	__POINTW2MN _0x148,103
000b94 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 0466             lcd_gotoxy(1, 2);
                 ; 0000 0467             lcd_print("6: Traffic Monitoring");
                +
000b96 e7a3     +LDI R26 , LOW ( _0x148 + ( 128 ) )
000b97 e0b7     +LDI R27 , HIGH ( _0x148 + ( 128 ) )
                 	__POINTW2MN _0x148,128
000b98 df87      	RCALL _lcd_print
                 ; 0000 0468             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x157:
000b99 e0e2      	LDI  R30,LOW(2)
000b9a 15e4      	CP   R30,R4
000b9b f411      	BRNE _0x15A
000b9c 2055      	TST  R5
000b9d f009      	BREQ _0x15B
                 _0x15A:
000b9e c001      	RJMP _0x159
                 _0x15B:
                 ; 0000 0469                 ;
000b9f cff9      	RJMP _0x157
                 _0x159:
                 ; 0000 046A         }
                 ; 0000 046B         else if (page_num == 3)
000ba0 c01f      	RJMP _0x15C
                 _0x156:
000ba1 e0e3      	LDI  R30,LOW(3)
000ba2 15e4      	CP   R30,R4
000ba3 f479      	BRNE _0x15D
                 ; 0000 046C         {
                 ; 0000 046D             lcd_print("7: Login With Admin");
                +
000ba4 e8a9     +LDI R26 , LOW ( _0x148 + ( 150 ) )
000ba5 e0b7     +LDI R27 , HIGH ( _0x148 + ( 150 ) )
                 	__POINTW2MN _0x148,150
000ba6 940e 101c 	CALL SUBOPT_0x1
                 ; 0000 046E             lcd_gotoxy(1, 2);
                 ; 0000 046F             lcd_print("8: Logout");
                +
000ba8 e9ad     +LDI R26 , LOW ( _0x148 + ( 170 ) )
000ba9 e0b7     +LDI R27 , HIGH ( _0x148 + ( 170 ) )
                 	__POINTW2MN _0x148,170
000baa df75      	RCALL _lcd_print
                 ; 0000 0470             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x15E:
000bab e0e3      	LDI  R30,LOW(3)
000bac 15e4      	CP   R30,R4
000bad f411      	BRNE _0x161
000bae 2055      	TST  R5
000baf f009      	BREQ _0x162
                 _0x161:
000bb0 c001      	RJMP _0x160
                 _0x162:
                 ; 0000 0471                 ;
000bb1 cff9      	RJMP _0x15E
                 _0x160:
                 ; 0000 0472         }
                 ; 0000 0473         else if (page_num == 4)
000bb2 c00d      	RJMP _0x163
                 _0x15D:
000bb3 e0e4      	LDI  R30,LOW(4)
000bb4 15e4      	CP   R30,R4
000bb5 f451      	BRNE _0x164
                 ; 0000 0474         {
                 ; 0000 0475             lcd_print("9: Set Timer");
                +
000bb6 eaa7     +LDI R26 , LOW ( _0x148 + ( 180 ) )
000bb7 e0b7     +LDI R27 , HIGH ( _0x148 + ( 180 ) )
                 	__POINTW2MN _0x148,180
000bb8 df67      	RCALL _lcd_print
                 ; 0000 0476             while (page_num == 4 && stage == STAGE_INIT_MENU)
                 _0x165:
000bb9 e0e4      	LDI  R30,LOW(4)
000bba 15e4      	CP   R30,R4
000bbb f411      	BRNE _0x168
000bbc 2055      	TST  R5
000bbd f009      	BREQ _0x169
                 _0x168:
000bbe c001      	RJMP _0x167
                 _0x169:
                 ; 0000 0477                 ;
000bbf cff9      	RJMP _0x165
                 _0x167:
                 ; 0000 0478         }
                 ; 0000 0479     }
                 _0x164:
                 _0x163:
                 _0x15C:
                 _0x155:
                 _0x14E:
000bc0 cfa7      	RJMP _0x144
                 _0x146:
                 ; 0000 047A }
000bc1 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x148:
0006f3           	.BYTE 0xC1
                 ;
                 ;void clear_eeprom()
                 ; 0000 047D {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 047E     unsigned int i;
                 ; 0000 047F 
                 ; 0000 0480     for (i = 0; i <= 1023; i++)
000bc2 931a      	ST   -Y,R17
000bc3 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000bc4 e000     +LDI R16 , LOW ( 0 )
000bc5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x16B:
                +
000bc6 3000     +CPI R16 , LOW ( 1024 )
000bc7 e0e4     +LDI R30 , HIGH ( 1024 )
000bc8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000bc9 f478      	BRSH _0x16C
                 ; 0000 0481     {
                 ; 0000 0482         // Wait for the previous write to complete
                 ; 0000 0483         while (EECR & (1 << EEWE))
                 _0x16D:
000bca 99e1      	SBIC 0x1C,1
                 ; 0000 0484             ;
000bcb cffe      	RJMP _0x16D
                 ; 0000 0485 
                 ; 0000 0486         // Set up address registers
                 ; 0000 0487         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000bcc 2fe1      	MOV  R30,R17
000bcd 70f0      	ANDI R31,HIGH(0x0)
000bce 70e3      	ANDI R30,LOW(0x3)
000bcf bbef      	OUT  0x1F,R30
                 ; 0000 0488         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000bd0 2fe0      	MOV  R30,R16
000bd1 bbee      	OUT  0x1E,R30
                 ; 0000 0489 
                 ; 0000 048A         // Set up data register
                 ; 0000 048B         EEDR = 0; // Write 0 to EEPROM
000bd2 e0e0      	LDI  R30,LOW(0)
000bd3 bbed      	OUT  0x1D,R30
                 ; 0000 048C 
                 ; 0000 048D         // Enable write
                 ; 0000 048E         EECR |= (1 << EEMWE); // Master write enable
000bd4 9ae2      	SBI  0x1C,2
                 ; 0000 048F         EECR |= (1 << EEWE);  // Start EEPROM write
000bd5 9ae1      	SBI  0x1C,1
                 ; 0000 0490     }
                +
000bd6 5f0f     +SUBI R16 , LOW ( - 1 )
000bd7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000bd8 cfed      	RJMP _0x16B
                 _0x16C:
                 ; 0000 0491 }
000bd9 9109      	LD   R16,Y+
000bda 9119      	LD   R17,Y+
000bdb 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0494 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 0495     unsigned char x;
                 ; 0000 0496     // Wait for the previous write to complete
                 ; 0000 0497     while (EECR & (1 << EEWE))
000bdc 93ba      	ST   -Y,R27
000bdd 93aa      	ST   -Y,R26
000bde 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x170:
000bdf 99e1      	SBIC 0x1C,1
                 ; 0000 0498         ;
000be0 cffe      	RJMP _0x170
                 ; 0000 0499 
                 ; 0000 049A     // Set up address registers
                 ; 0000 049B     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000be1 940e 1198 	CALL SUBOPT_0x38
                 ; 0000 049C     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 049D     EECR |= (1 << EERE);        // Read Enable
000be3 9ae0      	SBI  0x1C,0
                 ; 0000 049E     x = EEDR;
000be4 b31d      	IN   R17,29
                 ; 0000 049F     return x;
000be5 2fe1      	MOV  R30,R17
000be6 8118      	LDD  R17,Y+0
000be7 c009      	RJMP _0x20C0009
                 ; 0000 04A0 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 04A3 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 04A4     // Wait for the previous write to complete
                 ; 0000 04A5     while (EECR & (1 << EEWE))
000be8 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x173:
000be9 99e1      	SBIC 0x1C,1
                 ; 0000 04A6         ;
000bea cffe      	RJMP _0x173
                 ; 0000 04A7 
                 ; 0000 04A8     // Set up address registers
                 ; 0000 04A9     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000beb 940e 1198 	CALL SUBOPT_0x38
                 ; 0000 04AA     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 04AB 
                 ; 0000 04AC     // Set up data register
                 ; 0000 04AD     EEDR = value; // Write 0 to EEPROM
000bed 81e8      	LD   R30,Y
000bee bbed      	OUT  0x1D,R30
                 ; 0000 04AE 
                 ; 0000 04AF     // Enable write
                 ; 0000 04B0     EECR |= (1 << EEMWE); // Master write enable
000bef 9ae2      	SBI  0x1C,2
                 ; 0000 04B1     EECR |= (1 << EEWE);  // Start EEPROM write
000bf0 9ae1      	SBI  0x1C,1
                 ; 0000 04B2 }
                 _0x20C0009:
000bf1 9623      	ADIW R28,3
000bf2 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 04B5 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 04B6     while (!(UCSRA & (1 << UDRE)))
000bf3 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x176:
000bf4 9b5d      	SBIS 0xB,5
                 ; 0000 04B7         ;
000bf5 cffe      	RJMP _0x176
                 ; 0000 04B8     UDR = data;
000bf6 81e8      	LD   R30,Y
000bf7 b9ec      	OUT  0xC,R30
                 ; 0000 04B9 }
000bf8 c1ac      	RJMP _0x20C0006
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 04BC {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 04BD     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x179:
000bf9 995f      	SBIC 0xB,7
000bfa c003      	RJMP _0x17C
000bfb e0e3      	LDI  R30,LOW(3)
000bfc 15e5      	CP   R30,R5
000bfd f009      	BREQ _0x17D
                 _0x17C:
000bfe c001      	RJMP _0x17B
                 _0x17D:
000bff cff9      	RJMP _0x179
                 _0x17B:
                 ; 0000 04BE     return UDR;
000c00 b1ec      	IN   R30,0xC
000c01 9508      	RET
                 ; 0000 04BF }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 04C2 {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 04C3     UBRRL = (unsigned char)ubrr;
000c02 93ba      	ST   -Y,R27
000c03 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000c04 81e8      	LD   R30,Y
000c05 b9e9      	OUT  0x9,R30
                 ; 0000 04C4     UBRRH = (unsigned char)(ubrr >> 8);
000c06 81e9      	LDD  R30,Y+1
000c07 70f0      	ANDI R31,HIGH(0x0)
000c08 bde0      	OUT  0x20,R30
                 ; 0000 04C5     UCSRB = (1 << RXEN) | (1 << TXEN);
000c09 e1e8      	LDI  R30,LOW(24)
000c0a b9ea      	OUT  0xA,R30
                 ; 0000 04C6     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
000c0b e0e6      	LDI  R30,LOW(6)
000c0c bde0      	OUT  0x20,R30
                 ; 0000 04C7 }
000c0d 9622      	ADIW R28,2
000c0e 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 04CA {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 04CB     unsigned char st_counts, i, j;
                 ; 0000 04CC     char temp[10];
                 ; 0000 04CD 
                 ; 0000 04CE     st_counts = read_byte_from_eeprom(0x0);
000c0f 972a      	SBIW R28,10
000c10 940e 141a 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
000c12 940e 1158 	CALL SUBOPT_0x2F
000c14 2f1e      	MOV  R17,R30
                 ; 0000 04CF 
                 ; 0000 04D0     for (i = 0; i < st_counts; i++)
000c15 e000      	LDI  R16,LOW(0)
                 _0x17F:
000c16 1701      	CP   R16,R17
000c17 f5a0      	BRSH _0x180
                 ; 0000 04D1     {
                 ; 0000 04D2         memset(temp, 0, 10);
000c18 01fe      	MOVW R30,R28
000c19 9634      	ADIW R30,4
000c1a 93fa      	ST   -Y,R31
000c1b 93ea      	ST   -Y,R30
000c1c e0e0      	LDI  R30,LOW(0)
000c1d 93ea      	ST   -Y,R30
000c1e e0aa      	LDI  R26,LOW(10)
000c1f e0b0      	LDI  R27,0
000c20 940e 0e1c 	CALL _memset
                 ; 0000 04D3         for (j = 0; j < 8; j++)
000c22 e030      	LDI  R19,LOW(0)
                 _0x182:
000c23 3038      	CPI  R19,8
000c24 f478      	BRSH _0x183
                 ; 0000 04D4         {
                 ; 0000 04D5             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 16));
000c25 2fe3      	MOV  R30,R19
000c26 e0f0      	LDI  R31,0
000c27 01de      	MOVW R26,R28
000c28 9614      	ADIW R26,4
000c29 0fea      	ADD  R30,R26
000c2a 1ffb      	ADC  R31,R27
000c2b 93ff      	PUSH R31
000c2c 93ef      	PUSH R30
000c2d 940e 119f 	CALL SUBOPT_0x39
000c2f 91af      	POP  R26
000c30 91bf      	POP  R27
000c31 93ec      	ST   X,R30
                 ; 0000 04D6         }
000c32 5f3f      	SUBI R19,-1
000c33 cfef      	RJMP _0x182
                 _0x183:
                 ; 0000 04D7         temp[j] = '\0';
000c34 2fe3      	MOV  R30,R19
000c35 e0f0      	LDI  R31,0
000c36 01de      	MOVW R26,R28
000c37 9614      	ADIW R26,4
000c38 0fae      	ADD  R26,R30
000c39 1fbf      	ADC  R27,R31
000c3a e0e0      	LDI  R30,LOW(0)
000c3b 93ec      	ST   X,R30
                 ; 0000 04D8         if (strncmp(temp, buffer, 8) == 0)
000c3c 01fe      	MOVW R30,R28
000c3d 9634      	ADIW R30,4
000c3e 93fa      	ST   -Y,R31
000c3f 93ea      	ST   -Y,R30
000c40 940e 104e 	CALL SUBOPT_0x8
000c42 e0a8      	LDI  R26,LOW(8)
000c43 940e 0e45 	CALL _strncmp
000c45 30e0      	CPI  R30,0
000c46 f419      	BRNE _0x184
                 ; 0000 04D9             return (i + 1);
000c47 2fe0      	MOV  R30,R16
000c48 5fef      	SUBI R30,-LOW(1)
000c49 c003      	RJMP _0x20C0008
                 ; 0000 04DA     }
                 _0x184:
000c4a 5f0f      	SUBI R16,-1
000c4b cfca      	RJMP _0x17F
                 _0x180:
                 ; 0000 04DB 
                 ; 0000 04DC     return 0;
000c4c e0e0      	LDI  R30,LOW(0)
                 _0x20C0008:
000c4d 940e 1421 	CALL __LOADLOCR4
000c4f 962e      	ADIW R28,14
000c50 9508      	RET
                 ; 0000 04DD }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 04E0 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 04E1     unsigned char st_counts, i, j;
                 ; 0000 04E2     unsigned char temp;
                 ; 0000 04E3 
                 ; 0000 04E4     st_counts = read_byte_from_eeprom(0x0);
000c51 93aa      	ST   -Y,R26
000c52 940e 141a 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000c54 940e 1158 	CALL SUBOPT_0x2F
000c56 2f1e      	MOV  R17,R30
                 ; 0000 04E5 
                 ; 0000 04E6     for (i = index; i <= st_counts; i++)
000c57 810c      	LDD  R16,Y+4
                 _0x186:
000c58 1710      	CP   R17,R16
000c59 f130      	BRLO _0x187
                 ; 0000 04E7     {
                 ; 0000 04E8         for (j = 0; j < 8; j++)
000c5a e030      	LDI  R19,LOW(0)
                 _0x189:
000c5b 3038      	CPI  R19,8
000c5c f450      	BRSH _0x18A
                 ; 0000 04E9         {
                 ; 0000 04EA             temp = read_byte_from_eeprom(j + ((i + 1) * 16));
000c5d 940e 119f 	CALL SUBOPT_0x39
000c5f 940e 11aa 	CALL SUBOPT_0x3A
                 ; 0000 04EB             write_byte_to_eeprom(j + (i * 16), temp);
000c61 93fa      	ST   -Y,R31
000c62 93ea      	ST   -Y,R30
000c63 2fa2      	MOV  R26,R18
000c64 df83      	RCALL _write_byte_to_eeprom
                 ; 0000 04EC         }
000c65 5f3f      	SUBI R19,-1
000c66 cff4      	RJMP _0x189
                 _0x18A:
                 ; 0000 04ED         for (j = 0; j < 8; j++)
000c67 e030      	LDI  R19,LOW(0)
                 _0x18C:
000c68 3038      	CPI  R19,8
000c69 f4a0      	BRSH _0x18D
                 ; 0000 04EE         {
                 ; 0000 04EF             temp = read_byte_from_eeprom(j + ((i + 1) * 16) + 8);
000c6a 2fa3      	MOV  R26,R19
000c6b 27bb      	CLR  R27
000c6c 2fe0      	MOV  R30,R16
000c6d e0f0      	LDI  R31,0
000c6e 9631      	ADIW R30,1
000c6f 940e 13c8 	CALL __LSLW4
000c71 0fae      	ADD  R26,R30
000c72 1fbf      	ADC  R27,R31
000c73 9618      	ADIW R26,8
000c74 df67      	RCALL _read_byte_from_eeprom
000c75 940e 11aa 	CALL SUBOPT_0x3A
                 ; 0000 04F0             write_byte_to_eeprom(j + (i * 16) + 8, temp);
000c77 9638      	ADIW R30,8
000c78 93fa      	ST   -Y,R31
000c79 93ea      	ST   -Y,R30
000c7a 2fa2      	MOV  R26,R18
000c7b df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 04F1         }
000c7c 5f3f      	SUBI R19,-1
000c7d cfea      	RJMP _0x18C
                 _0x18D:
                 ; 0000 04F2     }
000c7e 5f0f      	SUBI R16,-1
000c7f cfd8      	RJMP _0x186
                 _0x187:
                 ; 0000 04F3     write_byte_to_eeprom(0x0, st_counts - 1);
000c80 940e 10bc 	CALL SUBOPT_0x16
000c82 2fa1      	MOV  R26,R17
000c83 50a1      	SUBI R26,LOW(1)
000c84 df63      	RCALL _write_byte_to_eeprom
                 ; 0000 04F4 }
000c85 940e 1421 	CALL __LOADLOCR4
000c87 940c 0e9c 	JMP  _0x20C0003
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 04F7 {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 04F8     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000c89 9a8d      	SBI  0x11,5
                 ; 0000 04F9     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000c8a 988e      	CBI  0x11,6
                 ; 0000 04FA }
000c8b 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 04FD {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 04FE     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000c8c 9a95      	SBI  0x12,5
                 ; 0000 04FF     delay_us(15 * 16);              // Wait for 15 microseconds
                +
000c8d ee80     +LDI R24 , LOW ( 480 )
000c8e e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
000c8f 9701     +SBIW R24 , 1
000c90 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0000 0500     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000c91 9895      	CBI  0x12,5
                 ; 0000 0501 }
000c92 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0504 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 0505     uint32_t i, result;
                 ; 0000 0506 
                 ; 0000 0507     // Wait for rising edge on Echo pin
                 ; 0000 0508     for (i = 0; i < 600000; i++)
000c93 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
000c94 e0e0      	LDI  R30,LOW(0)
                +
000c95 83ec     +STD Y + 4 , R30
000c96 83ed     +STD Y + 4 + 1 , R30
000c97 83ee     +STD Y + 4 + 2 , R30
000c98 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x18F:
000c99 940e 11b3 	CALL SUBOPT_0x3B
000c9b f430      	BRSH _0x190
                 ; 0000 0509     {
                 ; 0000 050A         if (!(US_PIN & (1 << US_ECHO_POS)))
000c9c 9b86      	SBIS 0x10,6
                 ; 0000 050B             continue;
000c9d c001      	RJMP _0x18E
                 ; 0000 050C         else
                 ; 0000 050D             break;
000c9e c003      	RJMP _0x190
                 ; 0000 050E     }
                 _0x18E:
000c9f 940e 11bf 	CALL SUBOPT_0x3C
000ca1 cff7      	RJMP _0x18F
                 _0x190:
                 ; 0000 050F 
                 ; 0000 0510     if (i == 600000)
000ca2 940e 11b3 	CALL SUBOPT_0x3B
000ca4 f419      	BRNE _0x193
                 ; 0000 0511         return US_ERROR; // Timeout error if no rising edge detected
000ca5 efef      	LDI  R30,LOW(65535)
000ca6 efff      	LDI  R31,HIGH(65535)
000ca7 c133      	RJMP _0x20C0004
                 ; 0000 0512 
                 ; 0000 0513     // Start timer with prescaler 64
                 ; 0000 0514     TCCR1A = 0x00;
                 _0x193:
000ca8 e0e0      	LDI  R30,LOW(0)
000ca9 bdef      	OUT  0x2F,R30
                 ; 0000 0515     TCCR1B = (1 << CS11) | (1 << CS10);
000caa e0e3      	LDI  R30,LOW(3)
000cab bdee      	OUT  0x2E,R30
                 ; 0000 0516     TCNT1 = 0x00; // Reset timer
000cac e0e0      	LDI  R30,LOW(0)
000cad e0f0      	LDI  R31,HIGH(0)
000cae bdfd      	OUT  0x2C+1,R31
000caf bdec      	OUT  0x2C,R30
                 ; 0000 0517 
                 ; 0000 0518     // Wait for falling edge on Echo pin
                 ; 0000 0519     for (i = 0; i < 600000; i++)
                +
000cb0 83ec     +STD Y + 4 , R30
000cb1 83ed     +STD Y + 4 + 1 , R30
000cb2 83ee     +STD Y + 4 + 2 , R30
000cb3 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x195:
000cb4 940e 11b3 	CALL SUBOPT_0x3B
000cb6 f470      	BRSH _0x196
                 ; 0000 051A     {
                 ; 0000 051B         if (!(US_PIN & (1 << US_ECHO_POS)))
000cb7 9b86      	SBIS 0x10,6
                 ; 0000 051C             break; // Falling edge detected
000cb8 c00c      	RJMP _0x196
                 ; 0000 051D         if (TCNT1 > 60000)
000cb9 b5ec      	IN   R30,0x2C
000cba b5fd      	IN   R31,0x2C+1
000cbb 36e1      	CPI  R30,LOW(0xEA61)
000cbc eeaa      	LDI  R26,HIGH(0xEA61)
000cbd 07fa      	CPC  R31,R26
000cbe f018      	BRLO _0x198
                 ; 0000 051E             return US_NO_OBSTACLE; // No obstacle in range
000cbf efee      	LDI  R30,LOW(65534)
000cc0 efff      	LDI  R31,HIGH(65534)
000cc1 c119      	RJMP _0x20C0004
                 ; 0000 051F     }
                 _0x198:
000cc2 940e 11bf 	CALL SUBOPT_0x3C
000cc4 cfef      	RJMP _0x195
                 _0x196:
                 ; 0000 0520 
                 ; 0000 0521     result = TCNT1; // Capture timer value
000cc5 b5ec      	IN   R30,0x2C
000cc6 b5fd      	IN   R31,0x2C+1
000cc7 2766      	CLR  R22
000cc8 2777      	CLR  R23
000cc9 940e 140e 	CALL __PUTD1S0
                 ; 0000 0522     TCCR1B = 0x00;  // Stop timer
000ccb e0e0      	LDI  R30,LOW(0)
000ccc bdee      	OUT  0x2E,R30
                 ; 0000 0523 
                 ; 0000 0524     if (result > 60000)
000ccd 940e 1409 	CALL __GETD2S0
                +
000ccf 36a1     +CPI R26 , LOW ( 0xEA61 )
000cd0 eeea     +LDI R30 , HIGH ( 0xEA61 )
000cd1 07be     +CPC R27 , R30
000cd2 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000cd3 078e     +CPC R24 , R30
000cd4 e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000cd5 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000cd6 f018      	BRLO _0x199
                 ; 0000 0525         return US_NO_OBSTACLE;
000cd7 efee      	LDI  R30,LOW(65534)
000cd8 efff      	LDI  R31,HIGH(65534)
000cd9 c101      	RJMP _0x20C0004
                 ; 0000 0526     else
                 _0x199:
                 ; 0000 0527         return (result >> 1); // Return the measured pulse width
000cda 940e 1404 	CALL __GETD1S0
000cdc 940e 13d1 	CALL __LSRD1
000cde c0fc      	RJMP _0x20C0004
                 ; 0000 0528 }
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 052B {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 052C     char numberString[16];
                 ; 0000 052D     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 052E     int distance, previous_distance = -1;
                 ; 0000 052F     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 0530 
                 ; 0000 0531     lcdCommand(0x01);
000cdf 9760      	SBIW R28,16
000ce0 940e 1418 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
000ce2 ef4f     +LDI R20 , LOW ( - 1 )
000ce3 ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000ce4 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0532     lcd_gotoxy(1, 1);
                 ; 0000 0533     lcd_print("Distance: ");
                +
000ce6 eba4     +LDI R26 , LOW ( _0x19C + ( 0 ) )
000ce7 e0b7     +LDI R27 , HIGH ( _0x19C + ( 0 ) )
                 	__POINTW2MN _0x19C,0
000ce8 de37      	RCALL _lcd_print
                 ; 0000 0534 
                 ; 0000 0535     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x19D:
000ce9 e0ea      	LDI  R30,LOW(10)
000cea 15e5      	CP   R30,R5
000ceb f009      	BREQ PC+2
000cec c06f      	RJMP _0x19F
                 ; 0000 0536     {
                 ; 0000 0537         HCSR04Trigger();              // Send trigger pulse
000ced df9e      	RCALL _HCSR04Trigger
                 ; 0000 0538         pulseWidth = GetPulseWidth(); // Measure echo pulse
000cee dfa4      	RCALL _GetPulseWidth
000cef 018f      	MOVW R16,R30
                 ; 0000 0539 
                 ; 0000 053A         if (pulseWidth == US_ERROR)
000cf0 efef      	LDI  R30,LOW(65535)
000cf1 efff      	LDI  R31,HIGH(65535)
000cf2 17e0      	CP   R30,R16
000cf3 07f1      	CPC  R31,R17
000cf4 f429      	BRNE _0x1A0
                 ; 0000 053B         {
                 ; 0000 053C             lcdCommand(0x01);
000cf5 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 053D             lcd_gotoxy(1, 1);
                 ; 0000 053E             lcd_print("Error"); // Display error message
                +
000cf7 ebaf     +LDI R26 , LOW ( _0x19C + ( 11 ) )
000cf8 e0b7     +LDI R27 , HIGH ( _0x19C + ( 11 ) )
                 	__POINTW2MN _0x19C,11
000cf9 c05c      	RJMP _0x1BF
                 ; 0000 053F         }
                 ; 0000 0540         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x1A0:
000cfa efee      	LDI  R30,LOW(65534)
000cfb efff      	LDI  R31,HIGH(65534)
000cfc 17e0      	CP   R30,R16
000cfd 07f1      	CPC  R31,R17
000cfe f429      	BRNE _0x1A2
                 ; 0000 0541         {
                 ; 0000 0542             lcdCommand(0x01);
000cff 940e 1014 	CALL SUBOPT_0x0
                 ; 0000 0543             lcd_gotoxy(1, 1);
                 ; 0000 0544             lcd_print("No Obstacle"); // Display no obstacle message
                +
000d01 eca5     +LDI R26 , LOW ( _0x19C + ( 17 ) )
000d02 e0b7     +LDI R27 , HIGH ( _0x19C + ( 17 ) )
                 	__POINTW2MN _0x19C,17
000d03 c052      	RJMP _0x1BF
                 ; 0000 0545         }
                 ; 0000 0546         else
                 _0x1A2:
                 ; 0000 0547         {
                 ; 0000 0548             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
000d04 01f8      	MOVW R30,R16
000d05 2766      	CLR  R22
000d06 2777      	CLR  R23
000d07 940e 12a2 	CALL __CDF1
                +
000d09 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000d0a e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000d0b e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000d0c e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000d0d 940e 1325 	CALL __MULF12
000d0f 01df      	MOVW R26,R30
000d10 01cb      	MOVW R24,R22
                +
000d11 e0e0     +LDI R30 , LOW ( 0x40000000 )
000d12 e0f0     +LDI R31 , HIGH ( 0x40000000 )
000d13 e060     +LDI R22 , BYTE3 ( 0x40000000 )
000d14 e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000d15 940e 1373 	CALL __DIVF21
                +
000d17 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000d18 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000d19 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000d1a e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000d1b 940e 12d5 	CALL __ADDF12
000d1d 940e 126b 	CALL __CFD1
000d1f 019f      	MOVW R18,R30
                 ; 0000 0549 
                 ; 0000 054A             if (distance != previous_distance)
                +
000d20 1742     +CP R20 , R18
000d21 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000d22 f081      	BREQ _0x1A4
                 ; 0000 054B             {
                 ; 0000 054C                 previous_distance = distance;
000d23 01a9      	MOVW R20,R18
                 ; 0000 054D                 // Display distance on LCD
                 ; 0000 054E                 itoa(distance, numberString); // Convert distance to string
000d24 933a      	ST   -Y,R19
000d25 932a      	ST   -Y,R18
000d26 01de      	MOVW R26,R28
000d27 9618      	ADIW R26,8
000d28 940e 0dee 	CALL _itoa
                 ; 0000 054F                 lcd_gotoxy(11, 1);
000d2a e0eb      	LDI  R30,LOW(11)
000d2b 940e 110d 	CALL SUBOPT_0x22
                 ; 0000 0550                 lcd_print(numberString);
000d2d 01de      	MOVW R26,R28
000d2e 9616      	ADIW R26,6
000d2f ddf0      	RCALL _lcd_print
                 ; 0000 0551                 lcd_print(" cm ");
                +
000d30 eda1     +LDI R26 , LOW ( _0x19C + ( 29 ) )
000d31 e0b7     +LDI R27 , HIGH ( _0x19C + ( 29 ) )
                 	__POINTW2MN _0x19C,29
000d32 dded      	RCALL _lcd_print
                 ; 0000 0552             }
                 ; 0000 0553             // Counting logic based on distance
                 ; 0000 0554             if (distance < 6)
                 _0x1A4:
                +
000d33 3026     +CPI R18 , LOW ( 6 )
000d34 e0e0     +LDI R30 , HIGH ( 6 )
000d35 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000d36 f40c      	BRGE _0x1A5
                 ; 0000 0555             {
                 ; 0000 0556                 US_count++; // Increment count if distance is below threshold
000d37 9473      	INC  R7
                 ; 0000 0557             }
                 ; 0000 0558 
                 ; 0000 0559             // Update count on LCD only if it changes
                 ; 0000 055A             if (US_count != previous_count)
                 _0x1A5:
000d38 91e0 0830 	LDS  R30,_previous_count_S0000015000
000d3a 91f0 0831 	LDS  R31,_previous_count_S0000015000+1
000d3c 2da7      	MOV  R26,R7
000d3d e0b0      	LDI  R27,0
000d3e 17ea      	CP   R30,R26
000d3f 07fb      	CPC  R31,R27
000d40 f0b1      	BREQ _0x1A6
                 ; 0000 055B             {
                 ; 0000 055C                 previous_count = US_count;
000d41 2de7      	MOV  R30,R7
000d42 e0f0      	LDI  R31,0
000d43 93e0 0830 	STS  _previous_count_S0000015000,R30
000d45 93f0 0831 	STS  _previous_count_S0000015000+1,R31
                 ; 0000 055D                 lcd_gotoxy(1, 2); // Move to second line
000d47 940e 10de 	CALL SUBOPT_0x1C
                 ; 0000 055E                 itoa(US_count, numberString);
000d49 2de7      	MOV  R30,R7
000d4a e0f0      	LDI  R31,0
000d4b 93fa      	ST   -Y,R31
000d4c 93ea      	ST   -Y,R30
000d4d 01de      	MOVW R26,R28
000d4e 9618      	ADIW R26,8
000d4f 940e 0dee 	CALL _itoa
                 ; 0000 055F                 lcd_print("Count: ");
                +
000d51 eda6     +LDI R26 , LOW ( _0x19C + ( 34 ) )
000d52 e0b7     +LDI R27 , HIGH ( _0x19C + ( 34 ) )
                 	__POINTW2MN _0x19C,34
000d53 ddcc      	RCALL _lcd_print
                 ; 0000 0560                 lcd_print(numberString);
000d54 01de      	MOVW R26,R28
000d55 9616      	ADIW R26,6
                 _0x1BF:
000d56 ddc9      	RCALL _lcd_print
                 ; 0000 0561             }
                 ; 0000 0562         }
                 _0x1A6:
                 ; 0000 0563         delay_ms(500);
000d57 efa4      	LDI  R26,LOW(500)
000d58 e0b1      	LDI  R27,HIGH(500)
000d59 940e 1232 	CALL _delay_ms
                 ; 0000 0564     }
000d5b cf8d      	RJMP _0x19D
                 _0x19F:
                 ; 0000 0565 }
000d5c 940e 141f 	CALL __LOADLOCR6
000d5e 9666      	ADIW R28,22
000d5f 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x19C:
0007b4           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 0568 {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 0569     unsigned int hash = 0;
                 ; 0000 056A     while (*str)
000d60 93ba      	ST   -Y,R27
000d61 93aa      	ST   -Y,R26
000d62 931a      	ST   -Y,R17
000d63 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000d64 e000     +LDI R16 , LOW ( 0 )
000d65 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1A7:
000d66 81aa      	LDD  R26,Y+2
000d67 81bb      	LDD  R27,Y+2+1
000d68 91ec      	LD   R30,X
000d69 30e0      	CPI  R30,0
000d6a f099      	BREQ _0x1A9
                 ; 0000 056B     {
                 ; 0000 056C         hash = (hash * 31) + *str; // A basic hash formula
                +
000d6b e1af     +LDI R26 , 31
000d6c 9fa0     +MUL R26 , R16
000d6d 01f0     +MOVW R30 , R0
000d6e 9fa1     +MUL R26 , R17
000d6f 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000d70 010f      	MOVW R0,R30
000d71 81aa      	LDD  R26,Y+2
000d72 81bb      	LDD  R27,Y+2+1
000d73 91ec      	LD   R30,X
000d74 e0f0      	LDI  R31,0
000d75 0de0      	ADD  R30,R0
000d76 1df1      	ADC  R31,R1
000d77 018f      	MOVW R16,R30
                 ; 0000 056D         str++;
000d78 81ea      	LDD  R30,Y+2
000d79 81fb      	LDD  R31,Y+2+1
000d7a 9631      	ADIW R30,1
000d7b 83ea      	STD  Y+2,R30
000d7c 83fb      	STD  Y+2+1,R31
                 ; 0000 056E     }
000d7d cfe8      	RJMP _0x1A7
                 _0x1A9:
                 ; 0000 056F     return hash;
000d7e 01f8      	MOVW R30,R16
000d7f 8119      	LDD  R17,Y+1
000d80 8108      	LDD  R16,Y+0
                 _0x20C0007:
000d81 9624      	ADIW R28,4
000d82 9508      	RET
                 ; 0000 0570 }
                 ; .FEND
                 ;
                 ;void I2C_init()
                 ; 0000 0573 {
                 _I2C_init:
                 ; .FSTART _I2C_init
                 ; 0000 0574     TWSR = 0x00;
000d83 e0e0      	LDI  R30,LOW(0)
000d84 b9e1      	OUT  0x1,R30
                 ; 0000 0575     TWBR = 0x47;
000d85 e4e7      	LDI  R30,LOW(71)
000d86 b9e0      	OUT  0x0,R30
                 ; 0000 0576     TWCR = 0x04;
000d87 e0e4      	LDI  R30,LOW(4)
000d88 bfe6      	OUT  0x36,R30
                 ; 0000 0577 }
000d89 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_start()
                 ; 0000 057A {
                 _I2C_start:
                 ; .FSTART _I2C_start
                 ; 0000 057B     TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
000d8a eae4      	LDI  R30,LOW(164)
000d8b bfe6      	OUT  0x36,R30
                 ; 0000 057C     while(!(TWCR & (1 << TWINT)));
                 _0x1AA:
000d8c b7e6      	IN   R30,0x36
000d8d 78e0      	ANDI R30,LOW(0x80)
000d8e f3e9      	BREQ _0x1AA
                 ; 0000 057D }
000d8f 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_write(unsigned char data)
                 ; 0000 0580 {
                 _I2C_write:
                 ; .FSTART _I2C_write
                 ; 0000 0581     TWDR = data;
000d90 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000d91 81e8      	LD   R30,Y
000d92 b9e3      	OUT  0x3,R30
                 ; 0000 0582     TWCR = (1 << TWINT) | (1 << TWEN);
000d93 e8e4      	LDI  R30,LOW(132)
000d94 bfe6      	OUT  0x36,R30
                 ; 0000 0583     while(!(TWCR & (1 << TWINT)));
                 _0x1AD:
000d95 b7e6      	IN   R30,0x36
000d96 78e0      	ANDI R30,LOW(0x80)
000d97 f3e9      	BREQ _0x1AD
                 ; 0000 0584 }
000d98 c00c      	RJMP _0x20C0006
                 ; .FEND
                 ;
                 ;unsigned char I2C_read(unsigned char ackVal)
                 ; 0000 0587 {
                 _I2C_read:
                 ; .FSTART _I2C_read
                 ; 0000 0588     TWCR = (1 << TWINT) | (1 << TWEN) | (ackVal << TWEA);
000d99 93aa      	ST   -Y,R26
                 ;	ackVal -> Y+0
000d9a 81e8      	LD   R30,Y
000d9b 95e2      	SWAP R30
000d9c 7fe0      	ANDI R30,0xF0
000d9d 0fee      	LSL  R30
000d9e 0fee      	LSL  R30
000d9f 68e4      	ORI  R30,LOW(0x84)
000da0 bfe6      	OUT  0x36,R30
                 ; 0000 0589     while(!(TWCR & (1 << TWINT)));
                 _0x1B0:
000da1 b7e6      	IN   R30,0x36
000da2 78e0      	ANDI R30,LOW(0x80)
000da3 f3e9      	BREQ _0x1B0
                 ; 0000 058A     return TWDR;
000da4 b1e3      	IN   R30,0x3
                 _0x20C0006:
000da5 9621      	ADIW R28,1
000da6 9508      	RET
                 ; 0000 058B }
                 ; .FEND
                 ;
                 ;void I2C_stop()
                 ; 0000 058E {
                 _I2C_stop:
                 ; .FSTART _I2C_stop
                 ; 0000 058F     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
000da7 e9e4      	LDI  R30,LOW(148)
000da8 bfe6      	OUT  0x36,R30
                 ; 0000 0590     while(TWCR & (1 << TWSTO));
                 _0x1B3:
000da9 b7e6      	IN   R30,0x36
000daa fde4      	SBRC R30,4
000dab cffd      	RJMP _0x1B3
                 ; 0000 0591 }
000dac 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_init()
                 ; 0000 0594 {
                 _rtc_init:
                 ; .FSTART _rtc_init
                 ; 0000 0595     I2C_init();
000dad dfd5      	RCALL _I2C_init
                 ; 0000 0596     I2C_start();
000dae 940e 11cc 	CALL SUBOPT_0x3D
                 ; 0000 0597     I2C_write(0xD0);
                 ; 0000 0598     I2C_write(0x07);
000db0 e0a7      	LDI  R26,LOW(7)
000db1 dfde      	RCALL _I2C_write
                 ; 0000 0599     I2C_write(0x00);
000db2 e0a0      	LDI  R26,LOW(0)
000db3 940e 11d1 	CALL SUBOPT_0x3E
                 ; 0000 059A     I2C_stop();
                 ; 0000 059B }
000db5 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getTime(unsigned char* hour, unsigned char* minute, unsigned char* second)
                 ; 0000 059E {
                 _rtc_getTime:
                 ; .FSTART _rtc_getTime
                 ; 0000 059F     I2C_start();
000db6 93ba      	ST   -Y,R27
000db7 93aa      	ST   -Y,R26
                 ;	*hour -> Y+4
                 ;	*minute -> Y+2
                 ;	*second -> Y+0
000db8 940e 11cc 	CALL SUBOPT_0x3D
                 ; 0000 05A0     I2C_write(0xD0);
                 ; 0000 05A1     I2C_write(0x00);
000dba e0a0      	LDI  R26,LOW(0)
000dbb 940e 11d1 	CALL SUBOPT_0x3E
                 ; 0000 05A2     I2C_stop();
                 ; 0000 05A3 
                 ; 0000 05A4     I2C_start();
000dbd 940e 11d5 	CALL SUBOPT_0x3F
                 ; 0000 05A5     I2C_write(0xD1);
                 ; 0000 05A6     *second = I2C_read(1);
                 ; 0000 05A7     *minute = I2C_read(1);
                 ; 0000 05A8     *hour = I2C_read(0);
000dbf e0a0      	LDI  R26,LOW(0)
000dc0 dfd8      	RCALL _I2C_read
000dc1 81ac      	LDD  R26,Y+4
000dc2 81bd      	LDD  R27,Y+4+1
000dc3 93ec      	ST   X,R30
                 ; 0000 05A9     I2C_stop();
000dc4 dfe2      	RCALL _I2C_stop
                 ; 0000 05AA }
                 _0x20C0005:
000dc5 9626      	ADIW R28,6
000dc6 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getDate(unsigned char* year, unsigned char* month, unsigned char* date, unsigned char* day)
                 ; 0000 05AD {
                 _rtc_getDate:
                 ; .FSTART _rtc_getDate
                 ; 0000 05AE     I2C_start();
000dc7 93ba      	ST   -Y,R27
000dc8 93aa      	ST   -Y,R26
                 ;	*year -> Y+6
                 ;	*month -> Y+4
                 ;	*date -> Y+2
                 ;	*day -> Y+0
000dc9 940e 11cc 	CALL SUBOPT_0x3D
                 ; 0000 05AF     I2C_write(0xD0);
                 ; 0000 05B0     I2C_write(0x03);
000dcb e0a3      	LDI  R26,LOW(3)
000dcc 940e 11d1 	CALL SUBOPT_0x3E
                 ; 0000 05B1     I2C_stop();
                 ; 0000 05B2 
                 ; 0000 05B3     I2C_start();
000dce 940e 11d5 	CALL SUBOPT_0x3F
                 ; 0000 05B4     I2C_write(0xD1);
                 ; 0000 05B5     *day = I2C_read(1);
                 ; 0000 05B6     *date = I2C_read(1);
                 ; 0000 05B7     *month = I2C_read(1);
000dd0 e0a1      	LDI  R26,LOW(1)
000dd1 dfc7      	RCALL _I2C_read
000dd2 81ac      	LDD  R26,Y+4
000dd3 81bd      	LDD  R27,Y+4+1
000dd4 93ec      	ST   X,R30
                 ; 0000 05B8     *year = I2C_read(0);
000dd5 e0a0      	LDI  R26,LOW(0)
000dd6 dfc2      	RCALL _I2C_read
000dd7 81ae      	LDD  R26,Y+6
000dd8 81bf      	LDD  R27,Y+6+1
000dd9 93ec      	ST   X,R30
                 ; 0000 05B9     I2C_stop();
000dda dfcc      	RCALL _I2C_stop
                 ; 0000 05BA }
                 _0x20C0004:
000ddb 9628      	ADIW R28,8
000ddc 9508      	RET
                 ; .FEND
                 ;
                 ;void Timer2_Init()
                 ; 0000 05BD {
                 _Timer2_Init:
                 ; .FSTART _Timer2_Init
                 ; 0000 05BE     //Disable timer2 interrupts
                 ; 0000 05BF     TIMSK = 0;
000ddd e0e0      	LDI  R30,LOW(0)
000dde bfe9      	OUT  0x39,R30
                 ; 0000 05C0     //Enable asynchronous mode
                 ; 0000 05C1     ASSR = (1 << AS2);
000ddf e0e8      	LDI  R30,LOW(8)
000de0 bde2      	OUT  0x22,R30
                 ; 0000 05C2     //set initial counter value
                 ; 0000 05C3     TCNT2 = 0;
000de1 e0e0      	LDI  R30,LOW(0)
000de2 bde4      	OUT  0x24,R30
                 ; 0000 05C4     //set prescaller 128
                 ; 0000 05C5     TCCR2 = 0;
000de3 bde5      	OUT  0x25,R30
                 ; 0000 05C6     TCCR2 |= (1 << CS22) | ( 1 << CS00);
000de4 b5e5      	IN   R30,0x25
000de5 60e5      	ORI  R30,LOW(0x5)
000de6 bde5      	OUT  0x25,R30
                 ; 0000 05C7     //wait for registers update
                 ; 0000 05C8     while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB)));
                 _0x1B6:
000de7 b5e2      	IN   R30,0x22
000de8 70e5      	ANDI R30,LOW(0x5)
000de9 f7e9      	BRNE _0x1B6
                 ; 0000 05C9     //clear interrupt flags
                 ; 0000 05CA     TIFR = (1 << TOV2);
000dea e4e0      	LDI  R30,LOW(64)
000deb bfe8      	OUT  0x38,R30
                 ; 0000 05CB     //enable TOV2 interrupt
                 ; 0000 05CC     TIMSK  = (1 << TOIE2);
000dec bfe9      	OUT  0x39,R30
                 ; 0000 05CD }
000ded 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000dee 93ba      	ST   -Y,R27
000def 93aa      	ST   -Y,R26
000df0 91a9          ld   r26,y+
000df1 91b9          ld   r27,y+
000df2 91e9          ld   r30,y+
000df3 91f9          ld   r31,y+
000df4 9630          adiw r30,0
000df5 f42a          brpl __itoa0
000df6 95e0          com  r30
000df7 95f0          com  r31
000df8 9631          adiw r30,1
000df9 e26d          ldi  r22,'-'
000dfa 936d          st   x+,r22
                 __itoa0:
000dfb 94e8          clt
000dfc e180          ldi  r24,low(10000)
000dfd e297          ldi  r25,high(10000)
000dfe d00d          rcall __itoa1
000dff ee88          ldi  r24,low(1000)
000e00 e093          ldi  r25,high(1000)
000e01 d00a          rcall __itoa1
000e02 e684          ldi  r24,100
000e03 2799          clr  r25
000e04 d007          rcall __itoa1
000e05 e08a          ldi  r24,10
000e06 d005          rcall __itoa1
000e07 2f6e          mov  r22,r30
000e08 d010          rcall __itoa5
000e09 2766          clr  r22
000e0a 936c          st   x,r22
000e0b 9508          ret
                 
                 __itoa1:
000e0c 2766          clr	 r22
                 __itoa2:
000e0d 17e8          cp   r30,r24
000e0e 07f9          cpc  r31,r25
000e0f f020          brlo __itoa3
000e10 9563          inc  r22
000e11 1be8          sub  r30,r24
000e12 0bf9          sbc  r31,r25
000e13 f7c9          brne __itoa2
                 __itoa3:
000e14 2366          tst  r22
000e15 f411          brne __itoa4
000e16 f016          brts __itoa5
000e17 9508          ret
                 __itoa4:
000e18 9468          set
                 __itoa5:
000e19 5d60          subi r22,-0x30
000e1a 936d          st   x+,r22
000e1b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000e1c 93ba      	ST   -Y,R27
000e1d 93aa      	ST   -Y,R26
000e1e 81b9          ldd  r27,y+1
000e1f 81a8          ld   r26,y
000e20 9610          adiw r26,0
000e21 f031          breq memset1
000e22 81fc          ldd  r31,y+4
000e23 81eb          ldd  r30,y+3
000e24 816a          ldd  r22,y+2
                 memset0:
000e25 9361          st   z+,r22
000e26 9711          sbiw r26,1
000e27 f7e9          brne memset0
                 memset1:
000e28 81eb          ldd  r30,y+3
000e29 81fc          ldd  r31,y+4
000e2a 940c 0e9c 	JMP  _0x20C0003
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000e2c 93ba      	ST   -Y,R27
000e2d 93aa      	ST   -Y,R26
000e2e 91a9          ld   r26,y+
000e2f 91b9          ld   r27,y+
000e30 27ee          clr  r30
000e31 27ff          clr  r31
                 strlen0:
000e32 916d          ld   r22,x+
000e33 2366          tst  r22
000e34 f011          breq strlen1
000e35 9631          adiw r30,1
000e36 cffb          rjmp strlen0
                 strlen1:
000e37 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000e38 93ba      	ST   -Y,R27
000e39 93aa      	ST   -Y,R26
000e3a 27aa          clr  r26
000e3b 27bb          clr  r27
000e3c 91e9          ld   r30,y+
000e3d 91f9          ld   r31,y+
                 strlenf0:
000e3e 9005      	lpm  r0,z+
000e3f 2000          tst  r0
000e40 f011          breq strlenf1
000e41 9611          adiw r26,1
000e42 cffb          rjmp strlenf0
                 strlenf1:
000e43 01fd          movw r30,r26
000e44 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000e45 93aa      	ST   -Y,R26
000e46 2766          clr  r22
000e47 2777          clr  r23
000e48 9189          ld   r24,y+
000e49 91e9          ld   r30,y+
000e4a 91f9          ld   r31,y+
000e4b 91a9          ld   r26,y+
000e4c 91b9          ld   r27,y+
                 strncmp0:
000e4d 2388          tst  r24
000e4e f049          breq strncmp1
000e4f 958a          dec  r24
000e50 916d          ld   r22,x+
000e51 9171          ld   r23,z+
000e52 1767          cp   r22,r23
000e53 f421          brne strncmp1
000e54 2366          tst  r22
000e55 f7b9          brne strncmp0
                 strncmp3:
000e56 27ee          clr  r30
000e57 9508          ret
                 strncmp1:
000e58 1b67          sub  r22,r23
000e59 f3e1          breq strncmp3
000e5a e0e1          ldi  r30,1
000e5b f408          brcc strncmp2
000e5c 50e2          subi r30,2
                 strncmp2:
000e5d 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000e5e 93ba      	ST   -Y,R27
000e5f 93aa      	ST   -Y,R26
000e60 931a      	ST   -Y,R17
000e61 930a      	ST   -Y,R16
000e62 81aa      	LDD  R26,Y+2
000e63 81bb      	LDD  R27,Y+2+1
000e64 9612      	ADIW R26,2
000e65 940e 13fc 	CALL __GETW1P
000e67 9730      	SBIW R30,0
000e68 f159      	BREQ _0x2060010
000e69 81aa      	LDD  R26,Y+2
000e6a 81bb      	LDD  R27,Y+2+1
000e6b 9614      	ADIW R26,4
000e6c 940e 13fc 	CALL __GETW1P
000e6e 018f      	MOVW R16,R30
000e6f 9730      	SBIW R30,0
000e70 f061      	BREQ _0x2060012
                +
000e71 3002     +CPI R16 , LOW ( 2 )
000e72 e0e0     +LDI R30 , HIGH ( 2 )
000e73 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000e74 f098      	BRLO _0x2060013
000e75 01f8      	MOVW R30,R16
000e76 9731      	SBIW R30,1
000e77 018f      	MOVW R16,R30
                +
000e78 81aa     +LDD R26 , Y + 2
000e79 81bb     +LDD R27 , Y + 2 + 1
000e7a 9614     +ADIW R26 , 4
000e7b 93ed     +ST X + , R30
000e7c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000e7d 81aa      	LDD  R26,Y+2
000e7e 81bb      	LDD  R27,Y+2+1
000e7f 9612      	ADIW R26,2
000e80 91ed      	LD   R30,X+
000e81 91fd      	LD   R31,X+
000e82 9631      	ADIW R30,1
000e83 93fe      	ST   -X,R31
000e84 93ee      	ST   -X,R30
000e85 9731      	SBIW R30,1
000e86 81ac      	LDD  R26,Y+4
000e87 83a0      	STD  Z+0,R26
                 _0x2060013:
000e88 81aa      	LDD  R26,Y+2
000e89 81bb      	LDD  R27,Y+2+1
000e8a 940e 13fc 	CALL __GETW1P
000e8c 23ff      	TST  R31
000e8d f02a      	BRMI _0x2060014
000e8e 91ed      	LD   R30,X+
000e8f 91fd      	LD   R31,X+
000e90 9631      	ADIW R30,1
000e91 93fe      	ST   -X,R31
000e92 93ee      	ST   -X,R30
                 _0x2060014:
000e93 c006      	RJMP _0x2060015
                 _0x2060010:
000e94 81aa      	LDD  R26,Y+2
000e95 81bb      	LDD  R27,Y+2+1
000e96 efef      	LDI  R30,LOW(65535)
000e97 efff      	LDI  R31,HIGH(65535)
000e98 93ed      	ST   X+,R30
000e99 93fc      	ST   X,R31
                 _0x2060015:
000e9a 8119      	LDD  R17,Y+1
000e9b 8108      	LDD  R16,Y+0
                 _0x20C0003:
000e9c 9625      	ADIW R28,5
000e9d 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000e9e 93ba      	ST   -Y,R27
000e9f 93aa      	ST   -Y,R26
000ea0 9726      	SBIW R28,6
000ea1 940e 1418 	CALL __SAVELOCR6
000ea3 e010      	LDI  R17,0
000ea4 85ac      	LDD  R26,Y+12
000ea5 85bd      	LDD  R27,Y+12+1
000ea6 e0e0      	LDI  R30,LOW(0)
000ea7 e0f0      	LDI  R31,HIGH(0)
000ea8 93ed      	ST   X+,R30
000ea9 93fc      	ST   X,R31
                 _0x2060016:
000eaa 89ea      	LDD  R30,Y+18
000eab 89fb      	LDD  R31,Y+18+1
000eac 9631      	ADIW R30,1
000ead 8bea      	STD  Y+18,R30
000eae 8bfb      	STD  Y+18+1,R31
000eaf 9731      	SBIW R30,1
000eb0 91e4      	LPM  R30,Z
000eb1 2f2e      	MOV  R18,R30
000eb2 30e0      	CPI  R30,0
000eb3 f409      	BRNE PC+2
000eb4 c115      	RJMP _0x2060018
000eb5 2fe1      	MOV  R30,R17
000eb6 30e0      	CPI  R30,0
000eb7 f439      	BRNE _0x206001C
000eb8 3225      	CPI  R18,37
000eb9 f411      	BRNE _0x206001D
000eba e011      	LDI  R17,LOW(1)
000ebb c002      	RJMP _0x206001E
                 _0x206001D:
000ebc 940e 11e7 	CALL SUBOPT_0x40
                 _0x206001E:
000ebe c10a      	RJMP _0x206001B
                 _0x206001C:
000ebf 30e1      	CPI  R30,LOW(0x1)
000ec0 f4a9      	BRNE _0x206001F
000ec1 3225      	CPI  R18,37
000ec2 f419      	BRNE _0x2060020
000ec3 940e 11e7 	CALL SUBOPT_0x40
000ec5 c102      	RJMP _0x20600CC
                 _0x2060020:
000ec6 e012      	LDI  R17,LOW(2)
000ec7 e040      	LDI  R20,LOW(0)
000ec8 e000      	LDI  R16,LOW(0)
000ec9 322d      	CPI  R18,45
000eca f411      	BRNE _0x2060021
000ecb e001      	LDI  R16,LOW(1)
000ecc c0fc      	RJMP _0x206001B
                 _0x2060021:
000ecd 322b      	CPI  R18,43
000ece f411      	BRNE _0x2060022
000ecf e24b      	LDI  R20,LOW(43)
000ed0 c0f8      	RJMP _0x206001B
                 _0x2060022:
000ed1 3220      	CPI  R18,32
000ed2 f411      	BRNE _0x2060023
000ed3 e240      	LDI  R20,LOW(32)
000ed4 c0f4      	RJMP _0x206001B
                 _0x2060023:
000ed5 c002      	RJMP _0x2060024
                 _0x206001F:
000ed6 30e2      	CPI  R30,LOW(0x2)
000ed7 f439      	BRNE _0x2060025
                 _0x2060024:
000ed8 e050      	LDI  R21,LOW(0)
000ed9 e013      	LDI  R17,LOW(3)
000eda 3320      	CPI  R18,48
000edb f411      	BRNE _0x2060026
000edc 6800      	ORI  R16,LOW(128)
000edd c0eb      	RJMP _0x206001B
                 _0x2060026:
000ede c003      	RJMP _0x2060027
                 _0x2060025:
000edf 30e3      	CPI  R30,LOW(0x3)
000ee0 f009      	BREQ PC+2
000ee1 c0e7      	RJMP _0x206001B
                 _0x2060027:
000ee2 3320      	CPI  R18,48
000ee3 f010      	BRLO _0x206002A
000ee4 332a      	CPI  R18,58
000ee5 f008      	BRLO _0x206002B
                 _0x206002A:
000ee6 c007      	RJMP _0x2060029
                 _0x206002B:
000ee7 e0aa      	LDI  R26,LOW(10)
000ee8 9f5a      	MUL  R21,R26
000ee9 2d50      	MOV  R21,R0
000eea 2fe2      	MOV  R30,R18
000eeb 53e0      	SUBI R30,LOW(48)
000eec 0f5e      	ADD  R21,R30
000eed c0db      	RJMP _0x206001B
                 _0x2060029:
000eee 2fe2      	MOV  R30,R18
000eef 36e3      	CPI  R30,LOW(0x63)
000ef0 f449      	BRNE _0x206002F
000ef1 940e 11ee 	CALL SUBOPT_0x41
000ef3 89e8      	LDD  R30,Y+16
000ef4 89f9      	LDD  R31,Y+16+1
000ef5 81a4      	LDD  R26,Z+4
000ef6 93aa      	ST   -Y,R26
000ef7 940e 11f4 	CALL SUBOPT_0x42
000ef9 c0ce      	RJMP _0x2060030
                 _0x206002F:
000efa 37e3      	CPI  R30,LOW(0x73)
000efb f441      	BRNE _0x2060032
000efc 940e 11ee 	CALL SUBOPT_0x41
000efe 940e 11fa 	CALL SUBOPT_0x43
000f00 940e 0e2c 	CALL _strlen
000f02 2f1e      	MOV  R17,R30
000f03 c00a      	RJMP _0x2060033
                 _0x2060032:
000f04 37e0      	CPI  R30,LOW(0x70)
000f05 f461      	BRNE _0x2060035
000f06 940e 11ee 	CALL SUBOPT_0x41
000f08 940e 11fa 	CALL SUBOPT_0x43
000f0a 940e 0e38 	CALL _strlenf
000f0c 2f1e      	MOV  R17,R30
000f0d 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000f0e 6002      	ORI  R16,LOW(2)
000f0f 770f      	ANDI R16,LOW(127)
000f10 e030      	LDI  R19,LOW(0)
000f11 c034      	RJMP _0x2060036
                 _0x2060035:
000f12 36e4      	CPI  R30,LOW(0x64)
000f13 f011      	BREQ _0x2060039
000f14 36e9      	CPI  R30,LOW(0x69)
000f15 f411      	BRNE _0x206003A
                 _0x2060039:
000f16 6004      	ORI  R16,LOW(4)
000f17 c002      	RJMP _0x206003B
                 _0x206003A:
000f18 37e5      	CPI  R30,LOW(0x75)
000f19 f431      	BRNE _0x206003C
                 _0x206003B:
000f1a e5e4      	LDI  R30,LOW(_tbl10_G103*2)
000f1b e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
000f1c 83ee      	STD  Y+6,R30
000f1d 83ff      	STD  Y+6+1,R31
000f1e e015      	LDI  R17,LOW(5)
000f1f c00c      	RJMP _0x206003D
                 _0x206003C:
000f20 35e8      	CPI  R30,LOW(0x58)
000f21 f411      	BRNE _0x206003F
000f22 6008      	ORI  R16,LOW(8)
000f23 c003      	RJMP _0x2060040
                 _0x206003F:
000f24 37e8      	CPI  R30,LOW(0x78)
000f25 f009      	BREQ PC+2
000f26 c0a1      	RJMP _0x2060071
                 _0x2060040:
000f27 e5ee      	LDI  R30,LOW(_tbl16_G103*2)
000f28 e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
000f29 83ee      	STD  Y+6,R30
000f2a 83ff      	STD  Y+6+1,R31
000f2b e014      	LDI  R17,LOW(4)
                 _0x206003D:
000f2c ff02      	SBRS R16,2
000f2d c014      	RJMP _0x2060042
000f2e 940e 11ee 	CALL SUBOPT_0x41
000f30 940e 1204 	CALL SUBOPT_0x44
000f32 85ab      	LDD  R26,Y+11
000f33 23aa      	TST  R26
000f34 f43a      	BRPL _0x2060043
000f35 85ea      	LDD  R30,Y+10
000f36 85fb      	LDD  R31,Y+10+1
000f37 940e 13bc 	CALL __ANEGW1
000f39 87ea      	STD  Y+10,R30
000f3a 87fb      	STD  Y+10+1,R31
000f3b e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000f3c 3040      	CPI  R20,0
000f3d f011      	BREQ _0x2060044
000f3e 5f1f      	SUBI R17,-LOW(1)
000f3f c001      	RJMP _0x2060045
                 _0x2060044:
000f40 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000f41 c004      	RJMP _0x2060046
                 _0x2060042:
000f42 940e 11ee 	CALL SUBOPT_0x41
000f44 940e 1204 	CALL SUBOPT_0x44
                 _0x2060046:
                 _0x2060036:
000f46 fd00      	SBRC R16,0
000f47 c011      	RJMP _0x2060047
                 _0x2060048:
000f48 1715      	CP   R17,R21
000f49 f478      	BRSH _0x206004A
000f4a ff07      	SBRS R16,7
000f4b c008      	RJMP _0x206004B
000f4c ff02      	SBRS R16,2
000f4d c004      	RJMP _0x206004C
000f4e 7f0b      	ANDI R16,LOW(251)
000f4f 2f24      	MOV  R18,R20
000f50 5011      	SUBI R17,LOW(1)
000f51 c001      	RJMP _0x206004D
                 _0x206004C:
000f52 e320      	LDI  R18,LOW(48)
                 _0x206004D:
000f53 c001      	RJMP _0x206004E
                 _0x206004B:
000f54 e220      	LDI  R18,LOW(32)
                 _0x206004E:
000f55 940e 11e7 	CALL SUBOPT_0x40
000f57 5051      	SUBI R21,LOW(1)
000f58 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000f59 2f31      	MOV  R19,R17
000f5a ff01      	SBRS R16,1
000f5b c017      	RJMP _0x206004F
                 _0x2060050:
000f5c 3030      	CPI  R19,0
000f5d f0a1      	BREQ _0x2060052
000f5e ff03      	SBRS R16,3
000f5f c006      	RJMP _0x2060053
000f60 81ee      	LDD  R30,Y+6
000f61 81ff      	LDD  R31,Y+6+1
000f62 9125      	LPM  R18,Z+
000f63 83ee      	STD  Y+6,R30
000f64 83ff      	STD  Y+6+1,R31
000f65 c005      	RJMP _0x2060054
                 _0x2060053:
000f66 81ae      	LDD  R26,Y+6
000f67 81bf      	LDD  R27,Y+6+1
000f68 912d      	LD   R18,X+
000f69 83ae      	STD  Y+6,R26
000f6a 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000f6b 940e 11e7 	CALL SUBOPT_0x40
000f6d 3050      	CPI  R21,0
000f6e f009      	BREQ _0x2060055
000f6f 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000f70 5031      	SUBI R19,LOW(1)
000f71 cfea      	RJMP _0x2060050
                 _0x2060052:
000f72 c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000f73 e320      	LDI  R18,LOW(48)
000f74 81ee      	LDD  R30,Y+6
000f75 81ff      	LDD  R31,Y+6+1
000f76 940e 1400 	CALL __GETW1PF
000f78 87e8      	STD  Y+8,R30
000f79 87f9      	STD  Y+8+1,R31
000f7a 81ee      	LDD  R30,Y+6
000f7b 81ff      	LDD  R31,Y+6+1
000f7c 9632      	ADIW R30,2
000f7d 83ee      	STD  Y+6,R30
000f7e 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000f7f 85e8      	LDD  R30,Y+8
000f80 85f9      	LDD  R31,Y+8+1
000f81 85aa      	LDD  R26,Y+10
000f82 85bb      	LDD  R27,Y+10+1
000f83 17ae      	CP   R26,R30
000f84 07bf      	CPC  R27,R31
000f85 f050      	BRLO _0x206005C
000f86 5f2f      	SUBI R18,-LOW(1)
000f87 85a8      	LDD  R26,Y+8
000f88 85b9      	LDD  R27,Y+8+1
000f89 85ea      	LDD  R30,Y+10
000f8a 85fb      	LDD  R31,Y+10+1
000f8b 1bea      	SUB  R30,R26
000f8c 0bfb      	SBC  R31,R27
000f8d 87ea      	STD  Y+10,R30
000f8e 87fb      	STD  Y+10+1,R31
000f8f cfef      	RJMP _0x206005A
                 _0x206005C:
000f90 332a      	CPI  R18,58
000f91 f028      	BRLO _0x206005D
000f92 ff03      	SBRS R16,3
000f93 c002      	RJMP _0x206005E
000f94 5f29      	SUBI R18,-LOW(7)
000f95 c001      	RJMP _0x206005F
                 _0x206005E:
000f96 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000f97 fd04      	SBRC R16,4
000f98 c01a      	RJMP _0x2060061
000f99 3321      	CPI  R18,49
000f9a f420      	BRSH _0x2060063
000f9b 85a8      	LDD  R26,Y+8
000f9c 85b9      	LDD  R27,Y+8+1
000f9d 9711      	SBIW R26,1
000f9e f409      	BRNE _0x2060062
                 _0x2060063:
000f9f c009      	RJMP _0x20600CD
                 _0x2060062:
000fa0 1753      	CP   R21,R19
000fa1 f010      	BRLO _0x2060067
000fa2 ff00      	SBRS R16,0
000fa3 c001      	RJMP _0x2060068
                 _0x2060067:
000fa4 c013      	RJMP _0x2060066
                 _0x2060068:
000fa5 e220      	LDI  R18,LOW(32)
000fa6 ff07      	SBRS R16,7
000fa7 c00b      	RJMP _0x2060069
000fa8 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000fa9 6100      	ORI  R16,LOW(16)
000faa ff02      	SBRS R16,2
000fab c007      	RJMP _0x206006A
000fac 7f0b      	ANDI R16,LOW(251)
000fad 934a      	ST   -Y,R20
000fae 940e 11f4 	CALL SUBOPT_0x42
000fb0 3050      	CPI  R21,0
000fb1 f009      	BREQ _0x206006B
000fb2 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000fb3 940e 11e7 	CALL SUBOPT_0x40
000fb5 3050      	CPI  R21,0
000fb6 f009      	BREQ _0x206006C
000fb7 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000fb8 5031      	SUBI R19,LOW(1)
000fb9 85a8      	LDD  R26,Y+8
000fba 85b9      	LDD  R27,Y+8+1
000fbb 9712      	SBIW R26,2
000fbc f008      	BRLO _0x2060059
000fbd cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000fbe ff00      	SBRS R16,0
000fbf c008      	RJMP _0x206006D
                 _0x206006E:
000fc0 3050      	CPI  R21,0
000fc1 f031      	BREQ _0x2060070
000fc2 5051      	SUBI R21,LOW(1)
000fc3 e2e0      	LDI  R30,LOW(32)
000fc4 93ea      	ST   -Y,R30
000fc5 940e 11f4 	CALL SUBOPT_0x42
000fc7 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
000fc8 e010      	LDI  R17,LOW(0)
                 _0x206001B:
000fc9 cee0      	RJMP _0x2060016
                 _0x2060018:
000fca 85ac      	LDD  R26,Y+12
000fcb 85bd      	LDD  R27,Y+12+1
000fcc 940e 13fc 	CALL __GETW1P
000fce 940e 141f 	CALL __LOADLOCR6
000fd0 9664      	ADIW R28,20
000fd1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000fd2 92ff      	PUSH R15
000fd3 2ef8      	MOV  R15,R24
000fd4 9726      	SBIW R28,6
000fd5 940e 141a 	CALL __SAVELOCR4
000fd7 940e 120c 	CALL SUBOPT_0x45
000fd9 9730      	SBIW R30,0
000fda f419      	BRNE _0x2060072
000fdb efef      	LDI  R30,LOW(65535)
000fdc efff      	LDI  R31,HIGH(65535)
000fdd c031      	RJMP _0x20C0001
                 _0x2060072:
000fde 01de      	MOVW R26,R28
000fdf 9616      	ADIW R26,6
000fe0 940e 13b8 	CALL __ADDW2R15
000fe2 018d      	MOVW R16,R26
000fe3 940e 120c 	CALL SUBOPT_0x45
000fe5 83ee      	STD  Y+6,R30
000fe6 83ff      	STD  Y+6+1,R31
000fe7 e0e0      	LDI  R30,LOW(0)
000fe8 87e8      	STD  Y+8,R30
000fe9 87e9      	STD  Y+8+1,R30
000fea 940e 1213 	CALL SUBOPT_0x46
000fec c021      	RJMP _0x20C0002
                 ; .FEND
                 _snprintf:
                 ; .FSTART _snprintf
000fed 92ff      	PUSH R15
000fee 2ef8      	MOV  R15,R24
000fef 9726      	SBIW R28,6
000ff0 940e 141a 	CALL __SAVELOCR4
                +
000ff2 e020     +LDI R18 , LOW ( 0 )
000ff3 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000ff4 940e 122b 	CALL SUBOPT_0x47
000ff6 9730      	SBIW R30,0
000ff7 f419      	BRNE _0x2060073
000ff8 efef      	LDI  R30,LOW(65535)
000ff9 efff      	LDI  R31,HIGH(65535)
000ffa c014      	RJMP _0x20C0001
                 _0x2060073:
000ffb 940e 120c 	CALL SUBOPT_0x45
000ffd 9730      	SBIW R30,0
000ffe f079      	BREQ _0x2060074
000fff 01de      	MOVW R26,R28
001000 9616      	ADIW R26,6
001001 940e 13b8 	CALL __ADDW2R15
001003 018d      	MOVW R16,R26
001004 940e 122b 	CALL SUBOPT_0x47
001006 83ee      	STD  Y+6,R30
001007 83ff      	STD  Y+6+1,R31
001008 940e 120c 	CALL SUBOPT_0x45
00100a 87e8      	STD  Y+8,R30
00100b 87f9      	STD  Y+8+1,R31
00100c 940e 1213 	CALL SUBOPT_0x46
                 _0x2060074:
                 _0x20C0002:
00100e 01f9      	MOVW R30,R18
                 _0x20C0001:
00100f 940e 1421 	CALL __LOADLOCR4
001011 962a      	ADIW R28,10
001012 90ff      	POP  R15
001013 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
0007de           	.BYTE 0x10
                 _buffer:
0007ee           	.BYTE 0x20
                 _days:
00080e           	.BYTE 0xE
                 _time:
00081c           	.BYTE 0x14
                 _previous_count_S0000015000:
000830           	.BYTE 0x2
                 __seed_G100:
000832           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:219 WORDS
                 SUBOPT_0x0:
001014 e0a1      	LDI  R26,LOW(1)
001015 940e 0ad9 	CALL _lcdCommand
001017 e0e1      	LDI  R30,LOW(1)
001018 93ea      	ST   -Y,R30
001019 e0a1      	LDI  R26,LOW(1)
00101a 940c 0b09 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x1:
00101c 940e 0b20 	CALL _lcd_print
00101e e0e1      	LDI  R30,LOW(1)
00101f 93ea      	ST   -Y,R30
001020 e0a2      	LDI  R26,LOW(2)
001021 940c 0b09 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
001023 940e 0b20 	CALL _lcd_print
001025 eda0      	LDI  R26,LOW(2000)
001026 e0b7      	LDI  R27,HIGH(2000)
001027 940e 1232 	CALL _delay_ms
001029 2455      	CLR  R5
00102a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
00102b e0af      	LDI  R26,LOW(15)
00102c 940e 0ad9 	CALL _lcdCommand
                +
00102e e880     +LDI R24 , LOW ( 3200 )
00102f e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
001030 9701     +SBIW R24 , 1
001031 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
001032 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
001033 e0ac      	LDI  R26,LOW(12)
001034 940e 0ad9 	CALL _lcdCommand
                +
001036 e880     +LDI R24 , LOW ( 3200 )
001037 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
001038 9701     +SBIW R24 , 1
001039 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
00103a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:181 WORDS
                 SUBOPT_0x5:
00103b eeee      	LDI  R30,LOW(_buffer)
00103c e0f7      	LDI  R31,HIGH(_buffer)
00103d 93fa      	ST   -Y,R31
00103e 93ea      	ST   -Y,R30
00103f e0e0      	LDI  R30,LOW(0)
001040 93ea      	ST   -Y,R30
001041 e2a0      	LDI  R26,LOW(32)
001042 e0b0      	LDI  R27,0
001043 940c 0e1c 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
                +
001045 e880     +LDI R24 , LOW ( 3200 )
001046 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
001047 9701     +SBIW R24 , 1
001048 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
001049 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x7:
00104a eeae      	LDI  R26,LOW(_buffer)
00104b e0b7      	LDI  R27,HIGH(_buffer)
00104c 940c 0e2c 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00104e eeee      	LDI  R30,LOW(_buffer)
00104f e0f7      	LDI  R31,HIGH(_buffer)
001050 93fa      	ST   -Y,R31
001051 93ea      	ST   -Y,R30
001052 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
001053 93fa      	ST   -Y,R31
001054 93ea      	ST   -Y,R30
001055 e0a2      	LDI  R26,LOW(2)
001056 940e 0e45 	CALL _strncmp
001058 30e0      	CPI  R30,0
001059 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
00105a eda0      	LDI  R26,LOW(2000)
00105b e0b7      	LDI  R27,HIGH(2000)
00105c 940e 1232 	CALL _delay_ms
00105e 9897      	CBI  0x12,7
00105f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
001060 940e 0b20 	CALL _lcd_print
001062 cff7      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
001063 e0a0      	LDI  R26,LOW(0)
001064 e0b0      	LDI  R27,0
001065 940e 0bdc 	CALL _read_byte_from_eeprom
001067 2f5e      	MOV  R21,R30
001068 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
001069 2fe5      	MOV  R30,R21
00106a e0f0      	LDI  R31,0
00106b 9631      	ADIW R30,1
00106c 940e 13c8 	CALL __LSLW4
00106e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00106f 0fe0      	ADD  R30,R16
001070 1ff1      	ADC  R31,R17
001071 93fa      	ST   -Y,R31
001072 93ea      	ST   -Y,R30
001073 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xF:
001074 01fe      	MOVW R30,R28
001075 9634      	ADIW R30,4
001076 93fa      	ST   -Y,R31
001077 93ea      	ST   -Y,R30
001078 01fe      	MOVW R30,R28
001079 9637      	ADIW R30,7
00107a 93fa      	ST   -Y,R31
00107b 93ea      	ST   -Y,R30
00107c 01de      	MOVW R26,R28
00107d 961a      	ADIW R26,10
00107e 940e 0db6 	CALL _rtc_getTime
001080 e1ec      	LDI  R30,LOW(_time)
001081 e0f8      	LDI  R31,HIGH(_time)
001082 93fa      	ST   -Y,R31
001083 93ea      	ST   -Y,R30
001084 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
                +
001085 e4ec     +LDI R30 , LOW ( 2 * _0x0 + ( 192 ) )
001086 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 192 ) )
                 	__POINTW1FN _0x0,192
001087 93fa      	ST   -Y,R31
001088 93ea      	ST   -Y,R30
001089 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x11:
00108a 85e8      	LDD  R30,Y+8
00108b 27ff      	CLR  R31
00108c 2766      	CLR  R22
00108d 2777      	CLR  R23
00108e 940e 1413 	CALL __PUTPARD1
001090 85ed      	LDD  R30,Y+13
001091 27ff      	CLR  R31
001092 2766      	CLR  R22
001093 2777      	CLR  R23
001094 940e 1413 	CALL __PUTPARD1
001096 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
001097 e088      	LDI  R24,8
001098 940e 0fd2 	CALL _sprintf
00109a 962c      	ADIW R28,12
00109b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x13:
00109c 01fe      	MOVW R30,R28
00109d 93fa      	ST   -Y,R31
00109e 93ea      	ST   -Y,R30
00109f 01fe      	MOVW R30,R28
0010a0 9633      	ADIW R30,3
0010a1 93fa      	ST   -Y,R31
0010a2 93ea      	ST   -Y,R30
0010a3 01fe      	MOVW R30,R28
0010a4 9636      	ADIW R30,6
0010a5 93fa      	ST   -Y,R31
0010a6 93ea      	ST   -Y,R30
0010a7 01de      	MOVW R26,R28
0010a8 9619      	ADIW R26,9
0010a9 940e 0dc7 	CALL _rtc_getDate
0010ab e1ec      	LDI  R30,LOW(_time)
0010ac e0f8      	LDI  R31,HIGH(_time)
0010ad 93fa      	ST   -Y,R31
0010ae 93ea      	ST   -Y,R30
0010af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x14:
0010b0 27ff      	CLR  R31
0010b1 2766      	CLR  R22
0010b2 2777      	CLR  R23
0010b3 940e 1413 	CALL __PUTPARD1
0010b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0010b6 9734      	SBIW R30,4
0010b7 5ee4      	SUBI R30,LOW(-_time)
0010b8 4ff7      	SBCI R31,HIGH(-_time)
0010b9 81a0      	LD   R26,Z
0010ba 940c 0be8 	JMP  _write_byte_to_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x16:
0010bc e0e0      	LDI  R30,LOW(0)
0010bd e0f0      	LDI  R31,HIGH(0)
0010be 93fa      	ST   -Y,R31
0010bf 93ea      	ST   -Y,R30
0010c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x17:
0010c1 eeae      	LDI  R26,LOW(_buffer)
0010c2 e0b7      	LDI  R27,HIGH(_buffer)
0010c3 940c 0b20 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
0010c5 e0f0      	LDI  R31,0
0010c6 93fa      	ST   -Y,R31
0010c7 93ea      	ST   -Y,R30
0010c8 eeae      	LDI  R26,LOW(_buffer)
0010c9 e0b7      	LDI  R27,HIGH(_buffer)
0010ca 940c 0dee 	JMP  _itoa
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x19:
0010cc 01f8      	MOVW R30,R16
0010cd 9631      	ADIW R30,1
0010ce 940e 13c8 	CALL __LSLW4
0010d0 0fe2      	ADD  R30,R18
0010d1 1ff3      	ADC  R31,R19
0010d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0010d3 eeae      	LDI  R26,LOW(_buffer)
0010d4 e0b7      	LDI  R27,HIGH(_buffer)
0010d5 0fa2      	ADD  R26,R18
0010d6 1fb3      	ADC  R27,R19
0010d7 e0e0      	LDI  R30,LOW(0)
0010d8 93ec      	ST   X,R30
0010d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1B:
0010da 9638      	ADIW R30,8
0010db 01df      	MOVW R26,R30
0010dc 940c 0bdc 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
0010de e0e1      	LDI  R30,LOW(1)
0010df 93ea      	ST   -Y,R30
0010e0 e0a2      	LDI  R26,LOW(2)
0010e1 940c 0b09 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1D:
0010e3 e1ec      	LDI  R30,LOW(_time)
0010e4 e0f8      	LDI  R31,HIGH(_time)
0010e5 93fa      	ST   -Y,R31
0010e6 93ea      	ST   -Y,R30
0010e7 e0e3      	LDI  R30,LOW(3)
0010e8 e0f0      	LDI  R31,HIGH(3)
0010e9 93fa      	ST   -Y,R31
0010ea 93ea      	ST   -Y,R30
                +
0010eb e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 246 ) )
0010ec e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 246 ) )
                 	__POINTW1FN _0x0,246
0010ed 93fa      	ST   -Y,R31
0010ee 93ea      	ST   -Y,R30
0010ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1E:
0010f0 2766      	CLR  R22
0010f1 2777      	CLR  R23
0010f2 940e 1413 	CALL __PUTPARD1
0010f4 e084      	LDI  R24,4
0010f5 940e 0fed 	CALL _snprintf
0010f7 962a      	ADIW R28,10
0010f8 e1ac      	LDI  R26,LOW(_time)
0010f9 e0b8      	LDI  R27,HIGH(_time)
0010fa 940c 0b20 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0010fc 940e 0b20 	CALL _lcd_print
0010fe cfe4      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x20:
0010ff eda0      	LDI  R26,LOW(2000)
001100 e0b7      	LDI  R27,HIGH(2000)
001101 940c 1232 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
001103 e0ad      	LDI  R26,LOW(13)
001104 940e 0bf3 	CALL _USART_Transmit
001106 e0ad      	LDI  R26,LOW(13)
001107 940e 0bf3 	CALL _USART_Transmit
001109 efa4      	LDI  R26,LOW(500)
00110a e0b1      	LDI  R27,HIGH(500)
00110b 940c 1232 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x22:
00110d 93ea      	ST   -Y,R30
00110e e0a1      	LDI  R26,LOW(1)
00110f 940c 0b09 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x23:
001111 bbe8      	OUT  0x18,R30
001112 b3e6      	IN   R30,0x16
001113 70ef      	ANDI R30,LOW(0xF)
001114 2f1e      	MOV  R17,R30
001115 301f      	CPI  R17,15
001116 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 49 TIMES, CODE SIZE REDUCTION:429 WORDS
                 SUBOPT_0x24:
001117 2fe0      	MOV  R30,R16
001118 edae      	LDI  R26,LOW(_keypad)
001119 e0b7      	LDI  R27,HIGH(_keypad)
00111a e0f0      	LDI  R31,0
00111b 940e 13cc 	CALL __LSLW2
00111d 0fae      	ADD  R26,R30
00111e 1fbf      	ADC  R27,R31
00111f 27ee      	CLR  R30
001120 0fa3      	ADD  R26,R19
001121 1fbe      	ADC  R27,R30
001122 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x25:
001123 940e 0b20 	CALL _lcd_print
001125 cfd9      	RJMP SUBOPT_0x20
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x26:
001126 51e2      	SUBI R30,LOW(-_buffer)
001127 4ff8      	SBCI R31,HIGH(-_buffer)
001128 010f      	MOVW R0,R30
001129 cfed      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x27:
00112a 91ec      	LD   R30,X
00112b 01d0      	MOVW R26,R0
00112c 93ec      	ST   X,R30
00112d cf1c      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x28:
                +
00112e 51e1     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
00112f 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
001130 e0a0      	LDI  R26,LOW(0)
001131 83a0      	STD  Z+0,R26
001132 cfe4      	RJMP SUBOPT_0x24
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x29:
001133 2fe5      	MOV  R30,R21
001134 e0f0      	LDI  R31,0
001135 9731      	SBIW R30,1
001136 51e2      	SUBI R30,LOW(-_buffer)
001137 4ff8      	SBCI R31,HIGH(-_buffer)
001138 e0a0      	LDI  R26,LOW(0)
001139 83a0      	STD  Z+0,R26
00113a e1a0      	LDI  R26,LOW(16)
00113b 940c 0ad9 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2A:
00113d 940e 0b20 	CALL _lcd_print
00113f e1a0      	LDI  R26,LOW(16)
001140 940c 0ad9 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2B:
001142 eca0      	LDI  R26,LOW(192)
001143 940e 0ad9 	CALL _lcdCommand
001145 e0e0      	LDI  R30,LOW(0)
001146 87ec      	STD  Y+12,R30
001147 87ed      	STD  Y+12+1,R30
001148 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2C:
001149 85ac      	LDD  R26,Y+12
00114a 85bd      	LDD  R27,Y+12+1
00114b 17ae      	CP   R26,R30
00114c 07bf      	CPC  R27,R31
00114d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2D:
00114e 85ec      	LDD  R30,Y+12
00114f 85fd      	LDD  R31,Y+12+1
001150 9631      	ADIW R30,1
001151 87ec      	STD  Y+12,R30
001152 87fd      	STD  Y+12+1,R31
001153 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2E:
001154 eca0      	LDI  R26,LOW(192)
001155 940e 0ad9 	CALL _lcdCommand
001157 cee3      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
001158 e0a0      	LDI  R26,LOW(0)
001159 e0b0      	LDI  R27,0
00115a 940c 0bdc 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x30:
00115c 2fe2      	MOV  R30,R18
00115d e0f0      	LDI  R31,0
00115e 9631      	ADIW R30,1
00115f 940e 13c8 	CALL __LSLW4
001161 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x31:
001162 85ac      	LDD  R26,Y+12
001163 85bd      	LDD  R27,Y+12+1
001164 0fea      	ADD  R30,R26
001165 1ffb      	ADC  R31,R27
001166 93fa      	ST   -Y,R31
001167 93ea      	ST   -Y,R30
001168 85ee      	LDD  R30,Y+14
001169 85ff      	LDD  R31,Y+14+1
00116a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x32:
00116b e1ec      	LDI  R30,LOW(_time)
00116c e0f8      	LDI  R31,HIGH(_time)
00116d 93fa      	ST   -Y,R31
00116e 93ea      	ST   -Y,R30
00116f cf15      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x33:
001170 9721      	SBIW R28,1
001171 940e 0c0f 	CALL _search_student_code
001173 83e8      	ST   Y,R30
001174 81a8      	LD   R26,Y
001175 30a1      	CPI  R26,LOW(0x1)
001176 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x34:
001177 93aa      	ST   -Y,R26
001178 b3eb      	IN   R30,0x1B
001179 70ef      	ANDI R30,LOW(0xF)
00117a 2fae      	MOV  R26,R30
00117b 81e8      	LD   R30,Y
00117c 7fe0      	ANDI R30,LOW(0xF0)
00117d 2bea      	OR   R30,R26
00117e bbeb      	OUT  0x1B,R30
00117f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
001180 98d9      	CBI  0x1B,1
001181 9ada      	SBI  0x1B,2
                +
001182 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
001183 958a     +DEC R24
001184 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
001185 98da      	CBI  0x1B,2
001186 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x36:
001187 b3eb      	IN   R30,0x1B
001188 70ef      	ANDI R30,LOW(0xF)
001189 2fae      	MOV  R26,R30
00118a 81e8      	LD   R30,Y
00118b 95e2      	SWAP R30
00118c 7fe0      	ANDI R30,0xF0
00118d 2bea      	OR   R30,R26
00118e bbeb      	OUT  0x1B,R30
00118f 9ada      	SBI  0x1B,2
                +
001190 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
001191 958a     +DEC R24
001192 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
001193 98da      	CBI  0x1B,2
001194 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x37:
001195 940e 0ad9 	CALL _lcdCommand
001197 cead      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
001198 81ea      	LDD  R30,Y+2
001199 70f0      	ANDI R31,HIGH(0x0)
00119a 70e3      	ANDI R30,LOW(0x3)
00119b bbef      	OUT  0x1F,R30
00119c 81e9      	LDD  R30,Y+1
00119d bbee      	OUT  0x1E,R30
00119e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x39:
00119f 2fa3      	MOV  R26,R19
0011a0 27bb      	CLR  R27
0011a1 2fe0      	MOV  R30,R16
0011a2 e0f0      	LDI  R31,0
0011a3 9631      	ADIW R30,1
0011a4 940e 13c8 	CALL __LSLW4
0011a6 0fae      	ADD  R26,R30
0011a7 1fbf      	ADC  R27,R31
0011a8 940c 0bdc 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3A:
0011aa 2f2e      	MOV  R18,R30
0011ab 2fa3      	MOV  R26,R19
0011ac 27bb      	CLR  R27
0011ad e1e0      	LDI  R30,LOW(16)
0011ae 9fe0      	MUL  R30,R16
0011af 01f0      	MOVW R30,R0
0011b0 0fea      	ADD  R30,R26
0011b1 1ffb      	ADC  R31,R27
0011b2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x3B:
                +
0011b3 81ac     +LDD R26 , Y + 4
0011b4 81bd     +LDD R27 , Y + 4 + 1
0011b5 818e     +LDD R24 , Y + 4 + 2
0011b6 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
0011b7 3ca0     +CPI R26 , LOW ( 0x927C0 )
0011b8 e2e7     +LDI R30 , HIGH ( 0x927C0 )
0011b9 07be     +CPC R27 , R30
0011ba e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
0011bb 078e     +CPC R24 , R30
0011bc e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
0011bd 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
0011be 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3C:
                +
0011bf 81ec     +LDD R30 , Y + 4
0011c0 81fd     +LDD R31 , Y + 4 + 1
0011c1 816e     +LDD R22 , Y + 4 + 2
0011c2 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
0011c3 5fef     +SUBI R30 , LOW ( - 1 )
0011c4 4fff     +SBCI R31 , HIGH ( - 1 )
0011c5 4f6f     +SBCI R22 , BYTE3 ( - 1 )
0011c6 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
0011c7 83ec     +STD Y + 4 , R30
0011c8 83fd     +STD Y + 4 + 1 , R31
0011c9 836e     +STD Y + 4 + 2 , R22
0011ca 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
0011cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3D:
0011cc 940e 0d8a 	CALL _I2C_start
0011ce eda0      	LDI  R26,LOW(208)
0011cf 940c 0d90 	JMP  _I2C_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3E:
0011d1 940e 0d90 	CALL _I2C_write
0011d3 940c 0da7 	JMP  _I2C_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3F:
0011d5 940e 0d8a 	CALL _I2C_start
0011d7 eda1      	LDI  R26,LOW(209)
0011d8 940e 0d90 	CALL _I2C_write
0011da e0a1      	LDI  R26,LOW(1)
0011db 940e 0d99 	CALL _I2C_read
0011dd 81a8      	LD   R26,Y
0011de 81b9      	LDD  R27,Y+1
0011df 93ec      	ST   X,R30
0011e0 e0a1      	LDI  R26,LOW(1)
0011e1 940e 0d99 	CALL _I2C_read
0011e3 81aa      	LDD  R26,Y+2
0011e4 81bb      	LDD  R27,Y+2+1
0011e5 93ec      	ST   X,R30
0011e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x40:
0011e7 932a      	ST   -Y,R18
0011e8 85ad      	LDD  R26,Y+13
0011e9 85be      	LDD  R27,Y+13+1
0011ea 85ef      	LDD  R30,Y+15
0011eb 89f8      	LDD  R31,Y+15+1
0011ec 9509      	ICALL
0011ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x41:
0011ee 89e8      	LDD  R30,Y+16
0011ef 89f9      	LDD  R31,Y+16+1
0011f0 9734      	SBIW R30,4
0011f1 8be8      	STD  Y+16,R30
0011f2 8bf9      	STD  Y+16+1,R31
0011f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x42:
0011f4 85ad      	LDD  R26,Y+13
0011f5 85be      	LDD  R27,Y+13+1
0011f6 85ef      	LDD  R30,Y+15
0011f7 89f8      	LDD  R31,Y+15+1
0011f8 9509      	ICALL
0011f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x43:
0011fa 89a8      	LDD  R26,Y+16
0011fb 89b9      	LDD  R27,Y+16+1
0011fc 9614      	ADIW R26,4
0011fd 940e 13fc 	CALL __GETW1P
0011ff 83ee      	STD  Y+6,R30
001200 83ff      	STD  Y+6+1,R31
001201 81ae      	LDD  R26,Y+6
001202 81bf      	LDD  R27,Y+6+1
001203 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x44:
001204 89a8      	LDD  R26,Y+16
001205 89b9      	LDD  R27,Y+16+1
001206 9614      	ADIW R26,4
001207 940e 13fc 	CALL __GETW1P
001209 87ea      	STD  Y+10,R30
00120a 87fb      	STD  Y+10+1,R31
00120b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x45:
00120c 01de      	MOVW R26,R28
00120d 961c      	ADIW R26,12
00120e 940e 13b8 	CALL __ADDW2R15
001210 940e 13fc 	CALL __GETW1P
001212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x46:
001213 01de      	MOVW R26,R28
001214 961a      	ADIW R26,10
001215 940e 13b8 	CALL __ADDW2R15
001217 940e 13fc 	CALL __GETW1P
001219 93fa      	ST   -Y,R31
00121a 93ea      	ST   -Y,R30
00121b 931a      	ST   -Y,R17
00121c 930a      	ST   -Y,R16
00121d e5ee      	LDI  R30,LOW(_put_buff_G103)
00121e e0fe      	LDI  R31,HIGH(_put_buff_G103)
00121f 93fa      	ST   -Y,R31
001220 93ea      	ST   -Y,R30
001221 01de      	MOVW R26,R28
001222 961a      	ADIW R26,10
001223 940e 0e9e 	CALL __print_G103
001225 019f      	MOVW R18,R30
001226 81ae      	LDD  R26,Y+6
001227 81bf      	LDD  R27,Y+6+1
001228 e0e0      	LDI  R30,LOW(0)
001229 93ec      	ST   X,R30
00122a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x47:
00122b 01de      	MOVW R26,R28
00122c 961e      	ADIW R26,14
00122d 940e 13b8 	CALL __ADDW2R15
00122f 940e 13fc 	CALL __GETW1P
001231 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001232 9610      	adiw r26,0
001233 f039      	breq __delay_ms1
                 __delay_ms0:
001234 95a8      	wdr
                +
001235 ed80     +LDI R24 , LOW ( 0x7D0 )
001236 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001237 9701     +SBIW R24 , 1
001238 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
001239 9711      	sbiw r26,1
00123a f7c9      	brne __delay_ms0
                 __delay_ms1:
00123b 9508      	ret
                 
                 __ROUND_REPACK:
00123c 2355      	TST  R21
00123d f442      	BRPL __REPACK
00123e 3850      	CPI  R21,0x80
00123f f411      	BRNE __ROUND_REPACK0
001240 ffe0      	SBRS R30,0
001241 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001242 9631      	ADIW R30,1
001243 1f69      	ADC  R22,R25
001244 1f79      	ADC  R23,R25
001245 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001246 e850      	LDI  R21,0x80
001247 2757      	EOR  R21,R23
001248 f411      	BRNE __REPACK0
001249 935f      	PUSH R21
00124a c0c8      	RJMP __ZERORES
                 __REPACK0:
00124b 3f5f      	CPI  R21,0xFF
00124c f031      	BREQ __REPACK1
00124d 0f66      	LSL  R22
00124e 0c00      	LSL  R0
00124f 9557      	ROR  R21
001250 9567      	ROR  R22
001251 2f75      	MOV  R23,R21
001252 9508      	RET
                 __REPACK1:
001253 935f      	PUSH R21
001254 2000      	TST  R0
001255 f00a      	BRMI __REPACK2
001256 c0c8      	RJMP __MAXRES
                 __REPACK2:
001257 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
001258 e850      	LDI  R21,0x80
001259 2e19      	MOV  R1,R25
00125a 2215      	AND  R1,R21
00125b 0f88      	LSL  R24
00125c 1f99      	ROL  R25
00125d 2795      	EOR  R25,R21
00125e 0f55      	LSL  R21
00125f 9587      	ROR  R24
                 
                 __UNPACK1:
001260 e850      	LDI  R21,0x80
001261 2e07      	MOV  R0,R23
001262 2205      	AND  R0,R21
001263 0f66      	LSL  R22
001264 1f77      	ROL  R23
001265 2775      	EOR  R23,R21
001266 0f55      	LSL  R21
001267 9567      	ROR  R22
001268 9508      	RET
                 
                 __CFD1U:
001269 9468      	SET
00126a c001      	RJMP __CFD1U0
                 __CFD1:
00126b 94e8      	CLT
                 __CFD1U0:
00126c 935f      	PUSH R21
00126d dff2      	RCALL __UNPACK1
00126e 3870      	CPI  R23,0x80
00126f f018      	BRLO __CFD10
001270 3f7f      	CPI  R23,0xFF
001271 f408      	BRCC __CFD10
001272 c0a0      	RJMP __ZERORES
                 __CFD10:
001273 e156      	LDI  R21,22
001274 1b57      	SUB  R21,R23
001275 f4aa      	BRPL __CFD11
001276 9551      	NEG  R21
001277 3058      	CPI  R21,8
001278 f40e      	BRTC __CFD19
001279 3059      	CPI  R21,9
                 __CFD19:
00127a f030      	BRLO __CFD17
00127b efef      	SER  R30
00127c efff      	SER  R31
00127d ef6f      	SER  R22
00127e e77f      	LDI  R23,0x7F
00127f f977      	BLD  R23,7
001280 c01a      	RJMP __CFD15
                 __CFD17:
001281 2777      	CLR  R23
001282 2355      	TST  R21
001283 f0b9      	BREQ __CFD15
                 __CFD18:
001284 0fee      	LSL  R30
001285 1fff      	ROL  R31
001286 1f66      	ROL  R22
001287 1f77      	ROL  R23
001288 955a      	DEC  R21
001289 f7d1      	BRNE __CFD18
00128a c010      	RJMP __CFD15
                 __CFD11:
00128b 2777      	CLR  R23
                 __CFD12:
00128c 3058      	CPI  R21,8
00128d f028      	BRLO __CFD13
00128e 2fef      	MOV  R30,R31
00128f 2ff6      	MOV  R31,R22
001290 2f67      	MOV  R22,R23
001291 5058      	SUBI R21,8
001292 cff9      	RJMP __CFD12
                 __CFD13:
001293 2355      	TST  R21
001294 f031      	BREQ __CFD15
                 __CFD14:
001295 9576      	LSR  R23
001296 9567      	ROR  R22
001297 95f7      	ROR  R31
001298 95e7      	ROR  R30
001299 955a      	DEC  R21
00129a f7d1      	BRNE __CFD14
                 __CFD15:
00129b 2000      	TST  R0
00129c f40a      	BRPL __CFD16
00129d d122      	RCALL __ANEGD1
                 __CFD16:
00129e 915f      	POP  R21
00129f 9508      	RET
                 
                 __CDF1U:
0012a0 9468      	SET
0012a1 c001      	RJMP __CDF1U0
                 __CDF1:
0012a2 94e8      	CLT
                 __CDF1U0:
0012a3 9730      	SBIW R30,0
0012a4 4060      	SBCI R22,0
0012a5 4070      	SBCI R23,0
0012a6 f0b1      	BREQ __CDF10
0012a7 2400      	CLR  R0
0012a8 f026      	BRTS __CDF11
0012a9 2377      	TST  R23
0012aa f412      	BRPL __CDF11
0012ab 9400      	COM  R0
0012ac d113      	RCALL __ANEGD1
                 __CDF11:
0012ad 2e17      	MOV  R1,R23
0012ae e17e      	LDI  R23,30
0012af 2011      	TST  R1
                 __CDF12:
0012b0 f032      	BRMI __CDF13
0012b1 957a      	DEC  R23
0012b2 0fee      	LSL  R30
0012b3 1fff      	ROL  R31
0012b4 1f66      	ROL  R22
0012b5 1c11      	ROL  R1
0012b6 cff9      	RJMP __CDF12
                 __CDF13:
0012b7 2fef      	MOV  R30,R31
0012b8 2ff6      	MOV  R31,R22
0012b9 2d61      	MOV  R22,R1
0012ba 935f      	PUSH R21
0012bb df8a      	RCALL __REPACK
0012bc 915f      	POP  R21
                 __CDF10:
0012bd 9508      	RET
                 
                 __SWAPACC:
0012be 934f      	PUSH R20
0012bf 01af      	MOVW R20,R30
0012c0 01fd      	MOVW R30,R26
0012c1 01da      	MOVW R26,R20
0012c2 01ab      	MOVW R20,R22
0012c3 01bc      	MOVW R22,R24
0012c4 01ca      	MOVW R24,R20
0012c5 2d40      	MOV  R20,R0
0012c6 2c01      	MOV  R0,R1
0012c7 2e14      	MOV  R1,R20
0012c8 914f      	POP  R20
0012c9 9508      	RET
                 
                 __UADD12:
0012ca 0fea      	ADD  R30,R26
0012cb 1ffb      	ADC  R31,R27
0012cc 1f68      	ADC  R22,R24
0012cd 9508      	RET
                 
                 __NEGMAN1:
0012ce 95e0      	COM  R30
0012cf 95f0      	COM  R31
0012d0 9560      	COM  R22
0012d1 5fef      	SUBI R30,-1
0012d2 4fff      	SBCI R31,-1
0012d3 4f6f      	SBCI R22,-1
0012d4 9508      	RET
                 
                 __ADDF12:
0012d5 935f      	PUSH R21
0012d6 df81      	RCALL __UNPACK
0012d7 3890      	CPI  R25,0x80
0012d8 f139      	BREQ __ADDF129
                 
                 __ADDF120:
0012d9 3870      	CPI  R23,0x80
0012da f121      	BREQ __ADDF128
                 __ADDF121:
0012db 2f57      	MOV  R21,R23
0012dc 1b59      	SUB  R21,R25
0012dd f12b      	BRVS __ADDF1211
0012de f412      	BRPL __ADDF122
0012df dfde      	RCALL __SWAPACC
0012e0 cffa      	RJMP __ADDF121
                 __ADDF122:
0012e1 3158      	CPI  R21,24
0012e2 f018      	BRLO __ADDF123
0012e3 27aa      	CLR  R26
0012e4 27bb      	CLR  R27
0012e5 2788      	CLR  R24
                 __ADDF123:
0012e6 3058      	CPI  R21,8
0012e7 f028      	BRLO __ADDF124
0012e8 2fab      	MOV  R26,R27
0012e9 2fb8      	MOV  R27,R24
0012ea 2788      	CLR  R24
0012eb 5058      	SUBI R21,8
0012ec cff9      	RJMP __ADDF123
                 __ADDF124:
0012ed 2355      	TST  R21
0012ee f029      	BREQ __ADDF126
                 __ADDF125:
0012ef 9586      	LSR  R24
0012f0 95b7      	ROR  R27
0012f1 95a7      	ROR  R26
0012f2 955a      	DEC  R21
0012f3 f7d9      	BRNE __ADDF125
                 __ADDF126:
0012f4 2d50      	MOV  R21,R0
0012f5 2551      	EOR  R21,R1
0012f6 f072      	BRMI __ADDF127
0012f7 dfd2      	RCALL __UADD12
0012f8 f438      	BRCC __ADDF129
0012f9 9567      	ROR  R22
0012fa 95f7      	ROR  R31
0012fb 95e7      	ROR  R30
0012fc 9573      	INC  R23
0012fd f413      	BRVC __ADDF129
0012fe c020      	RJMP __MAXRES
                 __ADDF128:
0012ff dfbe      	RCALL __SWAPACC
                 __ADDF129:
001300 df45      	RCALL __REPACK
001301 915f      	POP  R21
001302 9508      	RET
                 __ADDF1211:
001303 f7d8      	BRCC __ADDF128
001304 cffb      	RJMP __ADDF129
                 __ADDF127:
001305 1bea      	SUB  R30,R26
001306 0bfb      	SBC  R31,R27
001307 0b68      	SBC  R22,R24
001308 f051      	BREQ __ZERORES
001309 f410      	BRCC __ADDF1210
00130a 9400      	COM  R0
00130b dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00130c 2366      	TST  R22
00130d f392      	BRMI __ADDF129
00130e 0fee      	LSL  R30
00130f 1fff      	ROL  R31
001310 1f66      	ROL  R22
001311 957a      	DEC  R23
001312 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001313 27ee      	CLR  R30
001314 27ff      	CLR  R31
001315 2766      	CLR  R22
001316 2777      	CLR  R23
001317 915f      	POP  R21
001318 9508      	RET
                 
                 __MINRES:
001319 efef      	SER  R30
00131a efff      	SER  R31
00131b e76f      	LDI  R22,0x7F
00131c ef7f      	SER  R23
00131d 915f      	POP  R21
00131e 9508      	RET
                 
                 __MAXRES:
00131f efef      	SER  R30
001320 efff      	SER  R31
001321 e76f      	LDI  R22,0x7F
001322 e77f      	LDI  R23,0x7F
001323 915f      	POP  R21
001324 9508      	RET
                 
                 __MULF12:
001325 935f      	PUSH R21
001326 df31      	RCALL __UNPACK
001327 3870      	CPI  R23,0x80
001328 f351      	BREQ __ZERORES
001329 3890      	CPI  R25,0x80
00132a f341      	BREQ __ZERORES
00132b 2401      	EOR  R0,R1
00132c 9408      	SEC
00132d 1f79      	ADC  R23,R25
00132e f423      	BRVC __MULF124
00132f f31c      	BRLT __ZERORES
                 __MULF125:
001330 2000      	TST  R0
001331 f33a      	BRMI __MINRES
001332 cfec      	RJMP __MAXRES
                 __MULF124:
001333 920f      	PUSH R0
001334 931f      	PUSH R17
001335 932f      	PUSH R18
001336 933f      	PUSH R19
001337 934f      	PUSH R20
001338 2711      	CLR  R17
001339 2722      	CLR  R18
00133a 2799      	CLR  R25
00133b 9f68      	MUL  R22,R24
00133c 01a0      	MOVW R20,R0
00133d 9f8f      	MUL  R24,R31
00133e 2d30      	MOV  R19,R0
00133f 0d41      	ADD  R20,R1
001340 1f59      	ADC  R21,R25
001341 9f6b      	MUL  R22,R27
001342 0d30      	ADD  R19,R0
001343 1d41      	ADC  R20,R1
001344 1f59      	ADC  R21,R25
001345 9f8e      	MUL  R24,R30
001346 d027      	RCALL __MULF126
001347 9fbf      	MUL  R27,R31
001348 d025      	RCALL __MULF126
001349 9f6a      	MUL  R22,R26
00134a d023      	RCALL __MULF126
00134b 9fbe      	MUL  R27,R30
00134c d01d      	RCALL __MULF127
00134d 9faf      	MUL  R26,R31
00134e d01b      	RCALL __MULF127
00134f 9fae      	MUL  R26,R30
001350 0d11      	ADD  R17,R1
001351 1f29      	ADC  R18,R25
001352 1f39      	ADC  R19,R25
001353 1f49      	ADC  R20,R25
001354 1f59      	ADC  R21,R25
001355 2fe3      	MOV  R30,R19
001356 2ff4      	MOV  R31,R20
001357 2f65      	MOV  R22,R21
001358 2f52      	MOV  R21,R18
001359 914f      	POP  R20
00135a 913f      	POP  R19
00135b 912f      	POP  R18
00135c 911f      	POP  R17
00135d 900f      	POP  R0
00135e 2366      	TST  R22
00135f f02a      	BRMI __MULF122
001360 0f55      	LSL  R21
001361 1fee      	ROL  R30
001362 1fff      	ROL  R31
001363 1f66      	ROL  R22
001364 c002      	RJMP __MULF123
                 __MULF122:
001365 9573      	INC  R23
001366 f24b      	BRVS __MULF125
                 __MULF123:
001367 ded4      	RCALL __ROUND_REPACK
001368 915f      	POP  R21
001369 9508      	RET
                 
                 __MULF127:
00136a 0d10      	ADD  R17,R0
00136b 1d21      	ADC  R18,R1
00136c 1f39      	ADC  R19,R25
00136d c002      	RJMP __MULF128
                 __MULF126:
00136e 0d20      	ADD  R18,R0
00136f 1d31      	ADC  R19,R1
                 __MULF128:
001370 1f49      	ADC  R20,R25
001371 1f59      	ADC  R21,R25
001372 9508      	RET
                 
                 __DIVF21:
001373 935f      	PUSH R21
001374 dee3      	RCALL __UNPACK
001375 3870      	CPI  R23,0x80
001376 f421      	BRNE __DIVF210
001377 2011      	TST  R1
                 __DIVF211:
001378 f40a      	BRPL __DIVF219
001379 cf9f      	RJMP __MINRES
                 __DIVF219:
00137a cfa4      	RJMP __MAXRES
                 __DIVF210:
00137b 3890      	CPI  R25,0x80
00137c f409      	BRNE __DIVF218
                 __DIVF217:
00137d cf95      	RJMP __ZERORES
                 __DIVF218:
00137e 2401      	EOR  R0,R1
00137f 9408      	SEC
001380 0b97      	SBC  R25,R23
001381 f41b      	BRVC __DIVF216
001382 f3d4      	BRLT __DIVF217
001383 2000      	TST  R0
001384 cff3      	RJMP __DIVF211
                 __DIVF216:
001385 2f79      	MOV  R23,R25
001386 931f      	PUSH R17
001387 932f      	PUSH R18
001388 933f      	PUSH R19
001389 934f      	PUSH R20
00138a 2411      	CLR  R1
00138b 2711      	CLR  R17
00138c 2722      	CLR  R18
00138d 2733      	CLR  R19
00138e 2744      	CLR  R20
00138f 2755      	CLR  R21
001390 e290      	LDI  R25,32
                 __DIVF212:
001391 17ae      	CP   R26,R30
001392 07bf      	CPC  R27,R31
001393 0786      	CPC  R24,R22
001394 0741      	CPC  R20,R17
001395 f030      	BRLO __DIVF213
001396 1bae      	SUB  R26,R30
001397 0bbf      	SBC  R27,R31
001398 0b86      	SBC  R24,R22
001399 0b41      	SBC  R20,R17
00139a 9408      	SEC
00139b c001      	RJMP __DIVF214
                 __DIVF213:
00139c 9488      	CLC
                 __DIVF214:
00139d 1f55      	ROL  R21
00139e 1f22      	ROL  R18
00139f 1f33      	ROL  R19
0013a0 1c11      	ROL  R1
0013a1 1faa      	ROL  R26
0013a2 1fbb      	ROL  R27
0013a3 1f88      	ROL  R24
0013a4 1f44      	ROL  R20
0013a5 959a      	DEC  R25
0013a6 f751      	BRNE __DIVF212
0013a7 01f9      	MOVW R30,R18
0013a8 2d61      	MOV  R22,R1
0013a9 914f      	POP  R20
0013aa 913f      	POP  R19
0013ab 912f      	POP  R18
0013ac 911f      	POP  R17
0013ad 2366      	TST  R22
0013ae f032      	BRMI __DIVF215
0013af 0f55      	LSL  R21
0013b0 1fee      	ROL  R30
0013b1 1fff      	ROL  R31
0013b2 1f66      	ROL  R22
0013b3 957a      	DEC  R23
0013b4 f243      	BRVS __DIVF217
                 __DIVF215:
0013b5 de86      	RCALL __ROUND_REPACK
0013b6 915f      	POP  R21
0013b7 9508      	RET
                 
                 __ADDW2R15:
0013b8 2400      	CLR  R0
0013b9 0daf      	ADD  R26,R15
0013ba 1db0      	ADC  R27,R0
0013bb 9508      	RET
                 
                 __ANEGW1:
0013bc 95f1      	NEG  R31
0013bd 95e1      	NEG  R30
0013be 40f0      	SBCI R31,0
0013bf 9508      	RET
                 
                 __ANEGD1:
0013c0 95f0      	COM  R31
0013c1 9560      	COM  R22
0013c2 9570      	COM  R23
0013c3 95e1      	NEG  R30
0013c4 4fff      	SBCI R31,-1
0013c5 4f6f      	SBCI R22,-1
0013c6 4f7f      	SBCI R23,-1
0013c7 9508      	RET
                 
                 __LSLW4:
0013c8 0fee      	LSL  R30
0013c9 1fff      	ROL  R31
                 __LSLW3:
0013ca 0fee      	LSL  R30
0013cb 1fff      	ROL  R31
                 __LSLW2:
0013cc 0fee      	LSL  R30
0013cd 1fff      	ROL  R31
0013ce 0fee      	LSL  R30
0013cf 1fff      	ROL  R31
0013d0 9508      	RET
                 
                 __LSRD1:
0013d1 9576      	LSR  R23
0013d2 9567      	ROR  R22
0013d3 95f7      	ROR  R31
0013d4 95e7      	ROR  R30
0013d5 9508      	RET
                 
                 __CWD1:
0013d6 2f6f      	MOV  R22,R31
0013d7 0f66      	ADD  R22,R22
0013d8 0b66      	SBC  R22,R22
0013d9 2f76      	MOV  R23,R22
0013da 9508      	RET
                 
                 __DIVW21U:
0013db 2400      	CLR  R0
0013dc 2411      	CLR  R1
0013dd e190      	LDI  R25,16
                 __DIVW21U1:
0013de 0faa      	LSL  R26
0013df 1fbb      	ROL  R27
0013e0 1c00      	ROL  R0
0013e1 1c11      	ROL  R1
0013e2 1a0e      	SUB  R0,R30
0013e3 0a1f      	SBC  R1,R31
0013e4 f418      	BRCC __DIVW21U2
0013e5 0e0e      	ADD  R0,R30
0013e6 1e1f      	ADC  R1,R31
0013e7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0013e8 60a1      	SBR  R26,1
                 __DIVW21U3:
0013e9 959a      	DEC  R25
0013ea f799      	BRNE __DIVW21U1
0013eb 01fd      	MOVW R30,R26
0013ec 01d0      	MOVW R26,R0
0013ed 9508      	RET
                 
                 __MODW21:
0013ee 94e8      	CLT
0013ef ffb7      	SBRS R27,7
0013f0 c004      	RJMP __MODW211
0013f1 95a0      	COM  R26
0013f2 95b0      	COM  R27
0013f3 9611      	ADIW R26,1
0013f4 9468      	SET
                 __MODW211:
0013f5 fdf7      	SBRC R31,7
0013f6 dfc5      	RCALL __ANEGW1
0013f7 dfe3      	RCALL __DIVW21U
0013f8 01fd      	MOVW R30,R26
0013f9 f40e      	BRTC __MODW212
0013fa dfc1      	RCALL __ANEGW1
                 __MODW212:
0013fb 9508      	RET
                 
                 __GETW1P:
0013fc 91ed      	LD   R30,X+
0013fd 91fc      	LD   R31,X
0013fe 9711      	SBIW R26,1
0013ff 9508      	RET
                 
                 __GETW1PF:
001400 9005      	LPM  R0,Z+
001401 91f4      	LPM  R31,Z
001402 2de0      	MOV  R30,R0
001403 9508      	RET
                 
                 __GETD1S0:
001404 81e8      	LD   R30,Y
001405 81f9      	LDD  R31,Y+1
001406 816a      	LDD  R22,Y+2
001407 817b      	LDD  R23,Y+3
001408 9508      	RET
                 
                 __GETD2S0:
001409 81a8      	LD   R26,Y
00140a 81b9      	LDD  R27,Y+1
00140b 818a      	LDD  R24,Y+2
00140c 819b      	LDD  R25,Y+3
00140d 9508      	RET
                 
                 __PUTD1S0:
00140e 83e8      	ST   Y,R30
00140f 83f9      	STD  Y+1,R31
001410 836a      	STD  Y+2,R22
001411 837b      	STD  Y+3,R23
001412 9508      	RET
                 
                 __PUTPARD1:
001413 937a      	ST   -Y,R23
001414 936a      	ST   -Y,R22
001415 93fa      	ST   -Y,R31
001416 93ea      	ST   -Y,R30
001417 9508      	RET
                 
                 __SAVELOCR6:
001418 935a      	ST   -Y,R21
                 __SAVELOCR5:
001419 934a      	ST   -Y,R20
                 __SAVELOCR4:
00141a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00141b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00141c 931a      	ST   -Y,R17
00141d 930a      	ST   -Y,R16
00141e 9508      	RET
                 
                 __LOADLOCR6:
00141f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
001420 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001421 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001422 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001423 8119      	LDD  R17,Y+1
001424 8108      	LD   R16,Y
001425 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  47 r1 :  28 r2 :   0 r3 :   0 r4 :  15 r5 :  83 r6 :   9 r7 :   4 
r8 :   3 r9 :  11 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   8 
r16:  86 r17:  85 r18:  81 r19:  69 r20:  38 r21:  94 r22:  84 r23:  59 
r24:  67 r25:  49 r26: 477 r27: 210 r28:  62 r29:   1 r30: 840 r31: 256 
x  :  90 y  : 405 z  :  22 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  37 add   :  30 
adiw  :  80 and   :   2 andi  :  22 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  75 
brge  :  19 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   4 brmi  :   8 brne  : 145 brpl  :   8 brsh  :  20 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 489 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  73 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  74 cpc   :  50 cpi   : 131 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  25 inc   :   6 jmp   :  43 ld    : 110 ldd   : 148 ldi   : 647 
lds   :   2 lpm   :  14 lsl   :  19 lsr   :   3 mov   : 113 movw  :  75 
mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   8 out   :  55 pop   :  26 push  :  26 rcall :  88 ret   : 104 
reti  :   2 rjmp  : 268 rol   :  32 ror   :  15 sbc   :  10 sbci  :  34 
sbi   :  16 sbic  :   4 sbis  :   4 sbiw  :  55 sbr   :   1 sbrc  :   4 
sbrs  :  12 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 181 std   :  66 sts   :   2 sub   :   8 subi  :  53 swap  :   2 
tst   :  37 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00284c   8510   1806  10316   32768  31.5%
[.dseg] 0x000060 0x000836      0   1556   1556    2048  76.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
