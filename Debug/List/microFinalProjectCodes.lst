
AVRASM ver. 2.1.30  C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm Fri Dec 13 05:43:00 2024

C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 021a 	JMP  __RESET
000002 940c 033a 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 3837
00002d 4f39
00002e 3534
00002f 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000030 3231
000031 4333
000032 304c
000033 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x0:
000034 2031
000035 203a
000036 7553
000037 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000038 7469
000039 5320
00003a 7574
00003b 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003c 746e
00003d 4320
00003e 646f
00003f 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000040 2020
000041 2020
000042 7270
000043 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000044 2073
000045 6163
000046 636e
000047 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000048 7420
000049 206f
00004a 6162
00004b 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004c 4500
00004d 746e
00004e 7265
00004f 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000050 756f
000051 2072
000052 7473
000053 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000054 6e65
000055 2074
000056 6f63
000057 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
000058 003a
000059 754e
00005a 626d
00005b 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005c 6f20
00005d 2066
00005e 7473
00005f 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
000060 6e65
000061 7374
000062 3a20
000063 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000064 7250
000065 7365
000066 2073
000067 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000068 636e
000069 6c65
00006a 5420
00006b 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006c 6f47
00006d 4220
00006e 6361
00006f 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
000070 7453
000071 7261
000072 2074
000073 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000074 6e61
000075 6673
000076 7265
000077 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000078 676e
000079 2e2e
00007a 002e
00007b 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007c 7261
00007d 2074
00007e 7254
00007f 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
000080 6d73
000081 7469
000082 4620
000083 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
000084 7369
000085 6568
000086 0064
000087 3a31      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x3A
000088 5320
000089 6165
00008a 6372
00008b 2068      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x20
00008c 7453
00008d 6475
00008e 6e65
00008f 0074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x0
000090 3a32
000091 4420
000092 6c65
000093 7465      	.DB  0x32,0x3A,0x20,0x44,0x65,0x6C,0x65,0x74
000094 2065
000095 7453
000096 6475
000097 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000098 0074
000099 6e45
00009a 6574
00009b 2072      	.DB  0x74,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00009c 7453
00009d 6475
00009e 6e65
00009f 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a0 6f43
0000a1 6564
0000a2 4620
0000a3 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a4 5320
0000a5 6165
0000a6 6372
0000a7 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000a8 4500
0000a9 746e
0000aa 7265
0000ab 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
0000ac 7574
0000ad 6564
0000ae 746e
0000af 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000b0 646f
0000b1 2065
0000b2 6f46
0000b3 2072      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x20
0000b4 6544
0000b5 656c
0000b6 6574
0000b7 003a      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x3A,0x0
0000b8 6c43
0000b9 6165
0000ba 6972
0000bb 676e      	.DB  0x43,0x6C,0x65,0x61,0x72,0x69,0x6E,0x67
0000bc 4520
0000bd 5045
0000be 4f52
0000bf 204d      	.DB  0x20,0x45,0x45,0x50,0x52,0x4F,0x4D,0x20
0000c0 2e2e
0000c1 002e
0000c2 3034
0000c3 4900      	.DB  0x2E,0x2E,0x2E,0x0,0x34,0x30,0x0,0x49
0000c4 636e
0000c5 726f
0000c6 6572
0000c7 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
0000c8 5320
0000c9 7575
0000ca 6564
0000cb 746e      	.DB  0x20,0x53,0x75,0x75,0x64,0x65,0x6E,0x74
0000cc 4320
0000cd 646f
0000ce 2065
0000cf 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
0000d0 6d72
0000d1 7461
0000d2 5900
0000d3 756f      	.DB  0x72,0x6D,0x61,0x74,0x0,0x59,0x6F,0x75
0000d4 5720
0000d5 6c69
0000d6 206c
0000d7 6142      	.DB  0x20,0x57,0x69,0x6C,0x6C,0x20,0x42,0x61
0000d8 6b63
0000d9 4d20
0000da 6e65
0000db 2075      	.DB  0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20
0000dc 6e49
0000dd 3220
0000de 5320
0000df 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
0000e0 6e6f
0000e1 0064
0000e2 7544
0000e3 6c70      	.DB  0x6F,0x6E,0x64,0x0,0x44,0x75,0x70,0x6C
0000e4 6369
0000e5 7461
0000e6 2065
0000e7 7553      	.DB  0x69,0x63,0x61,0x74,0x65,0x20,0x53,0x75
0000e8 6475
0000e9 6e65
0000ea 2074
0000eb 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0000ec 6564
0000ed 4520
0000ee 746e
0000ef 7265      	.DB  0x64,0x65,0x20,0x45,0x6E,0x74,0x65,0x72
0000f0 6465
0000f1 5300
0000f2 7574
0000f3 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
0000f4 746e
0000f5 4320
0000f6 646f
0000f7 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
0000f8 7553
0000f9 6363
0000fa 7365
0000fb 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0000fc 6c75
0000fd 796c
0000fe 4120
0000ff 6464      	.DB  0x75,0x6C,0x6C,0x79,0x20,0x41,0x64,0x64
000100 6465
000101 5300
000102 7574
000103 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
000104 746e
000105 4320
000106 646f
000107 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000108 6f46
000109 6e75
00010a 0064
00010b 6f59      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x59,0x6F
00010c 2075
00010d 6957
00010e 6c6c
00010f 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
000110 6361
000111 206b
000112 654d
000113 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
000114 4920
000115 206e
000116 2035
000117 6553      	.DB  0x20,0x49,0x6E,0x20,0x35,0x20,0x53,0x65
000118 6f63
000119 646e
00011a 4f00
00011b 7370      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x4F,0x70,0x73
00011c 2c20
00011d 5320
00011e 7574
00011f 6564      	.DB  0x20,0x2C,0x20,0x53,0x74,0x75,0x64,0x65
000120 746e
000121 4320
000122 646f
000123 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000124 6f4e
000125 2074
000126 6f46
000127 6e75      	.DB  0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75,0x6E
000128 0064
000129 6157
00012a 7469
00012b 4620      	.DB  0x64,0x0,0x57,0x61,0x69,0x74,0x20,0x46
00012c 726f
00012d 4420
00012e 6c65
00012f 7465      	.DB  0x6F,0x72,0x20,0x44,0x65,0x6C,0x65,0x74
000130 2e65
000131 2e2e
000132 5300
000133 7574      	.DB  0x65,0x2E,0x2E,0x2E,0x0,0x53,0x74,0x75
000134 6564
000135 746e
000136 4320
000137 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
000138 2065
000139 6157
00013a 2073
00013b 6544      	.DB  0x65,0x20,0x57,0x61,0x73,0x20,0x44,0x65
00013c 656c
00013d 6574
00013e 0064
00013f 6574      	.DB  0x6C,0x65,0x74,0x65,0x64,0x0,0x74,0x65
000140 706d
000141 7265
000142 7461
000143 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000144 2865
000145 2943
000146 003a
000147 3a31      	.DB  0x65,0x28,0x43,0x29,0x3A,0x0,0x31,0x3A
000148 4120
000149 7474
00014a 6e65
00014b 6164      	.DB  0x20,0x41,0x74,0x74,0x65,0x6E,0x64,0x61
00014c 636e
00014d 2065
00014e 6e49
00014f 7469      	.DB  0x6E,0x63,0x65,0x20,0x49,0x6E,0x69,0x74
000150 6169
000151 696c
000152 617a
000153 6974      	.DB  0x69,0x61,0x6C,0x69,0x7A,0x61,0x74,0x69
000154 6e6f
000155 3200
000156 203a
000157 7453      	.DB  0x6F,0x6E,0x0,0x32,0x3A,0x20,0x53,0x74
000158 6475
000159 6e65
00015a 2074
00015b 614d      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x4D,0x61
00015c 616e
00015d 6567
00015e 656d
00015f 746e      	.DB  0x6E,0x61,0x67,0x65,0x6D,0x65,0x6E,0x74
000160 3300
000161 203a
000162 6956
000163 7765      	.DB  0x0,0x33,0x3A,0x20,0x56,0x69,0x65,0x77
000164 5020
000165 6572
000166 6573
000167 746e      	.DB  0x20,0x50,0x72,0x65,0x73,0x65,0x6E,0x74
000168 5320
000169 7574
00016a 6564
00016b 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00016c 2073
00016d 3400
00016e 203a
00016f 6554      	.DB  0x73,0x20,0x0,0x34,0x3A,0x20,0x54,0x65
000170 706d
000171 7265
000172 7461
000173 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000174 2065
000175 6f4d
000176 696e
000177 6f74      	.DB  0x65,0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F
000178 6972
000179 676e
00017a 3500
00017b 203a      	.DB  0x72,0x69,0x6E,0x67,0x0,0x35,0x3A,0x20
00017c 6552
00017d 7274
00017e 6569
00017f 6576      	.DB  0x52,0x65,0x74,0x72,0x69,0x65,0x76,0x65
000180 5320
000181 7574
000182 6564
000183 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000184 4420
000185 7461
000186 0061
000187 3a36      	.DB  0x20,0x44,0x61,0x74,0x61,0x0,0x36,0x3A
000188 5420
000189 6172
00018a 6666
00018b 6369      	.DB  0x20,0x54,0x72,0x61,0x66,0x66,0x69,0x63
00018c 4d20
00018d 6e6f
00018e 7469
00018f 726f      	.DB  0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72
000190 6e69
000191 0067      	.DB  0x69,0x6E,0x67,0x0
                 _0x2000060:
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1218): warning: .cseg .db misalignment - padding zero byte
000192 0001      	.DB  0x1
                 _0x2000000:
000193 4e2d
000194 4e41
000195 4900
000196 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1221): warning: .cseg .db misalignment - padding zero byte
000197 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000198 0004      	.DW  0x04
000199 0004      	.DW  0x04
00019a 0054      	.DW  __REG_VARS*2
                 
00019b 0010      	.DW  0x10
00019c 05ef      	.DW  _keypad
00019d 0058      	.DW  _0x3*2
                 
00019e 0018      	.DW  0x18
00019f 0260      	.DW  _0xA
0001a0 0068      	.DW  _0x0*2
                 
0001a1 0019      	.DW  0x19
0001a2 0278      	.DW  _0xA+24
0001a3 0080      	.DW  _0x0*2+24
                 
0001a4 0019      	.DW  0x19
0001a5 0291      	.DW  _0xA+49
0001a6 0099      	.DW  _0x0*2+49
                 
0001a7 0016      	.DW  0x16
0001a8 02aa      	.DW  _0xA+74
0001a9 00b2      	.DW  _0x0*2+74
                 
0001aa 0018      	.DW  0x18
0001ab 02c0      	.DW  _0xA+96
0001ac 00c8      	.DW  _0x0*2+96
                 
0001ad 0016      	.DW  0x16
0001ae 02d8      	.DW  _0xA+120
0001af 00e0      	.DW  _0x0*2+120
                 
0001b0 0018      	.DW  0x18
0001b1 02ee      	.DW  _0xA+142
0001b2 00f6      	.DW  _0x0*2+142
                 
0001b3 0012      	.DW  0x12
0001b4 0306      	.DW  _0xA+166
0001b5 010e      	.DW  _0x0*2+166
                 
0001b6 0012      	.DW  0x12
0001b7 0318      	.DW  _0xA+184
0001b8 0120      	.DW  _0x0*2+184
                 
0001b9 001f      	.DW  0x1F
0001ba 032a      	.DW  _0xA+202
0001bb 0132      	.DW  _0x0*2+202
                 
0001bc 001f      	.DW  0x1F
0001bd 0349      	.DW  _0xA+233
0001be 0151      	.DW  _0x0*2+233
                 
0001bf 0014      	.DW  0x14
0001c0 0368      	.DW  _0x4E
0001c1 0170      	.DW  _0x0*2+264
                 
0001c2 0002      	.DW  0x02
0001c3 037c      	.DW  _0x4E+20
0001c4 00c6      	.DW  _0x0*2+94
                 
0001c5 0003      	.DW  0x03
0001c6 037e      	.DW  _0x4E+22
0001c7 0184      	.DW  _0x0*2+284
                 
0001c8 001e      	.DW  0x1E
0001c9 0381      	.DW  _0x4E+25
0001ca 0187      	.DW  _0x0*2+287
                 
0001cb 001f      	.DW  0x1F
0001cc 039f      	.DW  _0x4E+55
0001cd 01a5      	.DW  _0x0*2+317
                 
0001ce 001f      	.DW  0x1F
0001cf 03be      	.DW  _0x4E+86
0001d0 01c4      	.DW  _0x0*2+348
                 
0001d1 001f      	.DW  0x1F
0001d2 03dd      	.DW  _0x4E+117
0001d3 01a5      	.DW  _0x0*2+317
                 
0001d4 0020      	.DW  0x20
0001d5 03fc      	.DW  _0x4E+148
0001d6 01e3      	.DW  _0x0*2+379
                 
0001d7 001f      	.DW  0x1F
0001d8 041c      	.DW  _0x4E+180
0001d9 01a5      	.DW  _0x0*2+317
                 
0001da 0002      	.DW  0x02
0001db 043b      	.DW  _0x4E+211
0001dc 00c6      	.DW  _0x0*2+94
                 
0001dd 0013      	.DW  0x13
0001de 043d      	.DW  _0x4E+213
0001df 0203      	.DW  _0x0*2+411
                 
0001e0 001f      	.DW  0x1F
0001e1 0450      	.DW  _0x4E+232
0001e2 0216      	.DW  _0x0*2+430
                 
0001e3 001d      	.DW  0x1D
0001e4 046f      	.DW  _0x4E+263
0001e5 0235      	.DW  _0x0*2+461
                 
0001e6 001f      	.DW  0x1F
0001e7 048c      	.DW  _0x4E+292
0001e8 0216      	.DW  _0x0*2+430
                 
0001e9 0002      	.DW  0x02
0001ea 04ab      	.DW  _0x4E+323
0001eb 00c6      	.DW  _0x0*2+94
                 
0001ec 0013      	.DW  0x13
0001ed 04ad      	.DW  _0x4E+325
0001ee 0203      	.DW  _0x0*2+411
                 
0001ef 0013      	.DW  0x13
0001f0 04c0      	.DW  _0x4E+344
0001f1 0252      	.DW  _0x0*2+490
                 
0001f2 0019      	.DW  0x19
0001f3 04d3      	.DW  _0x4E+363
0001f4 0265      	.DW  _0x0*2+509
                 
0001f5 001f      	.DW  0x1F
0001f6 04ec      	.DW  _0x4E+388
0001f7 01a5      	.DW  _0x0*2+317
                 
0001f8 001d      	.DW  0x1D
0001f9 050b      	.DW  _0x4E+419
0001fa 0235      	.DW  _0x0*2+461
                 
0001fb 001f      	.DW  0x1F
0001fc 0528      	.DW  _0x4E+448
0001fd 01a5      	.DW  _0x0*2+317
                 
0001fe 0010      	.DW  0x10
0001ff 0547      	.DW  _0x99
000200 027e      	.DW  _0x0*2+534
                 
000201 0002      	.DW  0x02
000202 0557      	.DW  _0x99+16
000203 00c6      	.DW  _0x0*2+94
                 
000204 001d      	.DW  0x1D
000205 0559      	.DW  _0xA5
000206 028e      	.DW  _0x0*2+550
                 
000207 0016      	.DW  0x16
000208 0576      	.DW  _0xA5+29
000209 02ab      	.DW  _0x0*2+579
                 
00020a 001a      	.DW  0x1A
00020b 058c      	.DW  _0xA5+51
00020c 02c1      	.DW  _0x0*2+601
                 
00020d 001a      	.DW  0x1A
00020e 05a6      	.DW  _0xA5+77
00020f 02db      	.DW  _0x0*2+627
                 
000210 0019      	.DW  0x19
000211 05c0      	.DW  _0xA5+103
000212 02f5      	.DW  _0x0*2+653
                 
000213 0016      	.DW  0x16
000214 05d9      	.DW  _0xA5+128
000215 030e      	.DW  _0x0*2+678
                 
000216 0001      	.DW  0x01
000217 061f      	.DW  __seed_G100
000218 0324      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000219 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00021a 94f8      	CLI
00021b 27ee      	CLR  R30
00021c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00021d e0f1      	LDI  R31,1
00021e bffb      	OUT  GICR,R31
00021f bfeb      	OUT  GICR,R30
000220 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000221 e08d      	LDI  R24,(14-2)+1
000222 e0a2      	LDI  R26,2
000223 27bb      	CLR  R27
                 __CLEAR_REG:
000224 93ed      	ST   X+,R30
000225 958a      	DEC  R24
000226 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000227 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000228 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000229 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00022a 93ed      	ST   X+,R30
00022b 9701      	SBIW R24,1
00022c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00022d e3e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00022e e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00022f 9185      	LPM  R24,Z+
000230 9195      	LPM  R25,Z+
000231 9700      	SBIW R24,0
000232 f061      	BREQ __GLOBAL_INI_END
000233 91a5      	LPM  R26,Z+
000234 91b5      	LPM  R27,Z+
000235 9005      	LPM  R0,Z+
000236 9015      	LPM  R1,Z+
000237 01bf      	MOVW R22,R30
000238 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000239 9005      	LPM  R0,Z+
00023a 920d      	ST   X+,R0
00023b 9701      	SBIW R24,1
00023c f7e1      	BRNE __GLOBAL_INI_LOOP
00023d 01fb      	MOVW R30,R22
00023e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00023f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000240 bfed      	OUT  SPL,R30
000241 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000242 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000243 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000244 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000245 940c 0247 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 3
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void LCM35_init();
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 004F     int i, j;
                 ; 0000 0050     unsigned char st_counts;
                 ; 0000 0051     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
000247 efe0      	LDI  R30,LOW(240)
000248 bbe4      	OUT  0x14,R30
                 ; 0000 0052     KEY_PRT = 0xFF;
000249 efef      	LDI  R30,LOW(255)
00024a bbe5      	OUT  0x15,R30
                 ; 0000 0053     KEY_PRT &= 0x0F;                  // ground all rows at once
00024b b3e5      	IN   R30,0x15
00024c 70ef      	ANDI R30,LOW(0xF)
00024d bbe5      	OUT  0x15,R30
                 ; 0000 0054     MCUCR = 0x02;                     // make INT0 falling edge triggered
00024e e0e2      	LDI  R30,LOW(2)
00024f bfe5      	OUT  0x35,R30
                 ; 0000 0055     GICR = (1 << INT0);               // enable external interrupt 0
000250 e4e0      	LDI  R30,LOW(64)
000251 bfeb      	OUT  0x3B,R30
                 ; 0000 0056     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
000252 9a8f      	SBI  0x11,7
                 ; 0000 0057     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
000253 9897      	CBI  0x12,7
                 ; 0000 0058     lcd_init();
000254 d337      	RCALL _lcd_init
                 ; 0000 0059     USART_init(0x33);
000255 e3a3      	LDI  R26,LOW(51)
000256 e0b0      	LDI  R27,0
000257 d429      	RCALL _USART_init
                 ; 0000 005A 
                 ; 0000 005B #asm("sei")           // enable interrupts
000258 9478      	sei
                 ; 0000 005C     lcdCommand(0x01); // clear LCD
000259 e0a1      	LDI  R26,LOW(1)
00025a d31d      	RCALL _lcdCommand
                 ; 0000 005D     LCM35_init();
00025b d37c      	RCALL _LCM35_init
                 ; 0000 005E     while (1)
                 _0x4:
                 ; 0000 005F     {
                 ; 0000 0060         if (stage == STAGE_INIT_MENU)
00025c 2c04      	MOV  R0,R4
00025d 2805      	OR   R0,R5
00025e f411      	BRNE _0x7
                 ; 0000 0061         {
                 ; 0000 0062             show_menu();
00025f d3a9      	RCALL _show_menu
                 ; 0000 0063         }
                 ; 0000 0064         else if (stage == STAGE_ATTENDENC_MENU)
000260 c0d7      	RJMP _0x8
                 _0x7:
000261 940e 077b 	CALL SUBOPT_0x0
000263 f469      	BRNE _0x9
                 ; 0000 0065         {
                 ; 0000 0066             lcdCommand(0x01);
000264 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0067             lcd_gotoxy(1, 1);
                 ; 0000 0068             lcd_print("1 : Submit Student Code");
                +
000266 e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
000267 e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
000268 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0069             lcd_gotoxy(1, 2);
                 ; 0000 006A             lcd_print("    press cancel to back");
                +
00026a e7a8     +LDI R26 , LOW ( _0xA + ( 24 ) )
00026b e0b2     +LDI R27 , HIGH ( _0xA + ( 24 ) )
                 	__POINTW2MN _0xA,24
00026c d354      	RCALL _lcd_print
                 ; 0000 006B             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
00026d 940e 077b 	CALL SUBOPT_0x0
00026f f3e9      	BREQ _0xB
                 ; 0000 006C                 ;
                 ; 0000 006D         }
                 ; 0000 006E         else if (stage == STAGE_SUBMIT_CODE)
000270 c0c7      	RJMP _0xE
                 _0x9:
000271 940e 078f 	CALL SUBOPT_0x3
000273 f461      	BRNE _0xF
                 ; 0000 006F         {
                 ; 0000 0070             lcdCommand(0x01);
000274 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0071             lcd_gotoxy(1, 1);
                 ; 0000 0072             lcd_print("Enter your student code:");
                +
000276 e9a1     +LDI R26 , LOW ( _0xA + ( 49 ) )
000277 e0b2     +LDI R27 , HIGH ( _0xA + ( 49 ) )
                 	__POINTW2MN _0xA,49
000278 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0073             lcd_gotoxy(1, 2);
                 ; 0000 0074             lcdCommand(0x0f);   // display on, cursor blinking
00027a 940e 0794 	CALL SUBOPT_0x4
                 ; 0000 0075             delay_us(100 * 16); // wait
                 ; 0000 0076             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
00027c 940e 078f 	CALL SUBOPT_0x3
00027e f3e9      	BREQ _0x10
                 ; 0000 0077                 ;
                 ; 0000 0078             lcdCommand(0x0c);   // display on, cursor off
00027f c0b5      	RJMP _0xD5
                 ; 0000 0079             delay_us(100 * 16); // wait
                 ; 0000 007A         }
                 ; 0000 007B         else if (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xF:
000280 940e 079c 	CALL SUBOPT_0x5
000282 f411      	BRNE _0x14
                 ; 0000 007C         {
                 ; 0000 007D             show_temperature();
000283 d359      	RCALL _show_temperature
                 ; 0000 007E         }
                 ; 0000 007F         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000284 c0b3      	RJMP _0x15
                 _0x14:
000285 940e 07a1 	CALL SUBOPT_0x6
000287 f009      	BREQ PC+2
000288 c049      	RJMP _0x16
                 ; 0000 0080         {
                 ; 0000 0081             lcdCommand(0x01);
000289 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0082             lcd_gotoxy(1, 1);
                 ; 0000 0083             lcd_print("Number of students : ");
                +
00028b eaaa     +LDI R26 , LOW ( _0xA + ( 74 ) )
00028c e0b2     +LDI R27 , HIGH ( _0xA + ( 74 ) )
                 	__POINTW2MN _0xA,74
00028d 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0084             lcd_gotoxy(1, 2);
                 ; 0000 0085             st_counts = read_byte_from_eeprom(0x0);
00028f e0a0      	LDI  R26,LOW(0)
000290 e0b0      	LDI  R27,0
000291 d3d1      	RCALL _read_byte_from_eeprom
000292 2f5e      	MOV  R21,R30
                 ; 0000 0086             memset(buffer, 0, 32);
000293 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 0087             itoa(st_counts, buffer);
000295 2fe5      	MOV  R30,R21
000296 e0f0      	LDI  R31,0
000297 93fa      	ST   -Y,R31
000298 93ea      	ST   -Y,R30
000299 efaf      	LDI  R26,LOW(_buffer)
00029a e0b5      	LDI  R27,HIGH(_buffer)
00029b 940e 0704 	CALL _itoa
                 ; 0000 0088             lcd_print(buffer);
00029d 940e 07b0 	CALL SUBOPT_0x8
                 ; 0000 0089             delay_ms(1000);
                 ; 0000 008A 
                 ; 0000 008B             for (i = 0; i < st_counts; i++)
                +
00029f e000     +LDI R16 , LOW ( 0 )
0002a0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
0002a1 2fe5      	MOV  R30,R21
0002a2 01d8      	MOVW R26,R16
0002a3 e0f0      	LDI  R31,0
0002a4 17ae      	CP   R26,R30
0002a5 07bf      	CPC  R27,R31
0002a6 f514      	BRGE _0x19
                 ; 0000 008C             {
                 ; 0000 008D                 memset(buffer, 0, 32);
0002a7 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 008E                 for (j = 0; j < 8; j++)
                +
0002a9 e020     +LDI R18 , LOW ( 0 )
0002aa e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1B:
                +
0002ab 3028     +CPI R18 , LOW ( 8 )
0002ac e0e0     +LDI R30 , HIGH ( 8 )
0002ad 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002ae f46c      	BRGE _0x1C
                 ; 0000 008F                 {
                 ; 0000 0090                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0002af 01f9      	MOVW R30,R18
0002b0 50e1      	SUBI R30,LOW(-_buffer)
0002b1 4ffa      	SBCI R31,HIGH(-_buffer)
0002b2 93ff      	PUSH R31
0002b3 93ef      	PUSH R30
0002b4 940e 07b8 	CALL SUBOPT_0x9
0002b6 91af      	POP  R26
0002b7 91bf      	POP  R27
0002b8 93ec      	ST   X,R30
                 ; 0000 0091                 }
                +
0002b9 5f2f     +SUBI R18 , LOW ( - 1 )
0002ba 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002bb cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0092                 buffer[j] = '\0';
0002bc efaf      	LDI  R26,LOW(_buffer)
0002bd e0b5      	LDI  R27,HIGH(_buffer)
0002be 0fa2      	ADD  R26,R18
0002bf 1fb3      	ADC  R27,R19
0002c0 e0e0      	LDI  R30,LOW(0)
0002c1 93ec      	ST   X,R30
                 ; 0000 0093                 lcdCommand(0x01);
0002c2 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0094                 lcd_gotoxy(1, 1);
                 ; 0000 0095                 lcd_print(buffer);
0002c4 940e 07b0 	CALL SUBOPT_0x8
                 ; 0000 0096                 delay_ms(1000);
                 ; 0000 0097             }
                +
0002c6 5f0f     +SUBI R16 , LOW ( - 1 )
0002c7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002c8 cfd8      	RJMP _0x18
                 _0x19:
                 ; 0000 0098 
                 ; 0000 0099             lcdCommand(0x01);
0002c9 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 009A             lcd_gotoxy(1, 1);
                 ; 0000 009B             lcd_print("Press Cancel To Go Back");
                +
0002cb eca0     +LDI R26 , LOW ( _0xA + ( 96 ) )
0002cc e0b2     +LDI R27 , HIGH ( _0xA + ( 96 ) )
                 	__POINTW2MN _0xA,96
0002cd d2f3      	RCALL _lcd_print
                 ; 0000 009C             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1D:
0002ce 940e 07a1 	CALL SUBOPT_0x6
0002d0 f3e9      	BREQ _0x1D
                 ; 0000 009D                 ;
                 ; 0000 009E         }
                 ; 0000 009F         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
0002d1 c066      	RJMP _0x20
                 _0x16:
0002d2 e0e5      	LDI  R30,LOW(5)
0002d3 e0f0      	LDI  R31,HIGH(5)
0002d4 15e4      	CP   R30,R4
0002d5 05f5      	CPC  R31,R5
0002d6 f589      	BRNE _0x21
                 ; 0000 00A0         {
                 ; 0000 00A1             lcdCommand(0x01);
0002d7 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 00A2             lcd_gotoxy(1, 1);
                 ; 0000 00A3             lcd_print("Start Transferring...");
                +
0002d9 eda8     +LDI R26 , LOW ( _0xA + ( 120 ) )
0002da e0b2     +LDI R27 , HIGH ( _0xA + ( 120 ) )
                 	__POINTW2MN _0xA,120
0002db d2e5      	RCALL _lcd_print
                 ; 0000 00A4             st_counts = read_byte_from_eeprom(0x0);
0002dc 940e 07c1 	CALL SUBOPT_0xA
0002de 2f5e      	MOV  R21,R30
                 ; 0000 00A5             for (i = 0; i < st_counts; i++)
                +
0002df e000     +LDI R16 , LOW ( 0 )
0002e0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
0002e1 2fe5      	MOV  R30,R21
0002e2 01d8      	MOVW R26,R16
0002e3 e0f0      	LDI  R31,0
0002e4 17ae      	CP   R26,R30
0002e5 07bf      	CPC  R27,R31
0002e6 f4c4      	BRGE _0x24
                 ; 0000 00A6             {
                 ; 0000 00A7                 for (j = 0; j < 8; j++)
                +
0002e7 e020     +LDI R18 , LOW ( 0 )
0002e8 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
0002e9 3028     +CPI R18 , LOW ( 8 )
0002ea e0e0     +LDI R30 , HIGH ( 8 )
0002eb 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002ec f43c      	BRGE _0x27
                 ; 0000 00A8                 {
                 ; 0000 00A9                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
0002ed 940e 07b8 	CALL SUBOPT_0x9
0002ef 2fae      	MOV  R26,R30
0002f0 d389      	RCALL _USART_Transmit
                 ; 0000 00AA                 }
                +
0002f1 5f2f     +SUBI R18 , LOW ( - 1 )
0002f2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002f3 cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 00AB                 USART_Transmit('\r');
0002f4 e0ad      	LDI  R26,LOW(13)
0002f5 d384      	RCALL _USART_Transmit
                 ; 0000 00AC                 USART_Transmit('\r');
0002f6 e0ad      	LDI  R26,LOW(13)
0002f7 d382      	RCALL _USART_Transmit
                 ; 0000 00AD                 delay_ms(500);
0002f8 efa4      	LDI  R26,LOW(500)
0002f9 e0b1      	LDI  R27,HIGH(500)
0002fa 940e 0844 	CALL _delay_ms
                 ; 0000 00AE             }
                +
0002fc 5f0f     +SUBI R16 , LOW ( - 1 )
0002fd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002fe cfe2      	RJMP _0x23
                 _0x24:
                 ; 0000 00AF             lcdCommand(0x01);
0002ff 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 00B0             lcd_gotoxy(1, 1);
                 ; 0000 00B1             lcd_print("Usart Transmit Finished");
                +
000301 eeae     +LDI R26 , LOW ( _0xA + ( 142 ) )
000302 e0b2     +LDI R27 , HIGH ( _0xA + ( 142 ) )
                 	__POINTW2MN _0xA,142
000303 940e 07c5 	CALL SUBOPT_0xB
                 ; 0000 00B2             delay_ms(2000);
                 ; 0000 00B3             stage = STAGE_INIT_MENU;
000305 2444      	CLR  R4
000306 2455      	CLR  R5
                 ; 0000 00B4         }
                 ; 0000 00B5         else if (stage == STAGE_STUDENT_MANAGMENT)
000307 c030      	RJMP _0x28
                 _0x21:
000308 940e 07cb 	CALL SUBOPT_0xC
00030a f469      	BRNE _0x29
                 ; 0000 00B6         {
                 ; 0000 00B7             lcdCommand(0x01);
00030b 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 00B8             lcd_gotoxy(1, 1);
                 ; 0000 00B9             lcd_print("1: Search Student");
                +
00030d e0a6     +LDI R26 , LOW ( _0xA + ( 166 ) )
00030e e0b3     +LDI R27 , HIGH ( _0xA + ( 166 ) )
                 	__POINTW2MN _0xA,166
00030f 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 00BA             lcd_gotoxy(1, 2);
                 ; 0000 00BB             lcd_print("2: Delete Student");
                +
000311 e1a8     +LDI R26 , LOW ( _0xA + ( 184 ) )
000312 e0b3     +LDI R27 , HIGH ( _0xA + ( 184 ) )
                 	__POINTW2MN _0xA,184
000313 d2ad      	RCALL _lcd_print
                 ; 0000 00BC             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2A:
000314 940e 07cb 	CALL SUBOPT_0xC
000316 f3e9      	BREQ _0x2A
                 ; 0000 00BD                 ;
                 ; 0000 00BE         }
                 ; 0000 00BF         else if (stage == STAGE_SEARCH_STUDENT)
000317 c020      	RJMP _0x2D
                 _0x29:
000318 940e 07d0 	CALL SUBOPT_0xD
00031a f461      	BRNE _0x2E
                 ; 0000 00C0         {
                 ; 0000 00C1             lcdCommand(0x01);
00031b 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 00C2             lcd_gotoxy(1, 1);
                 ; 0000 00C3             lcd_print("Enter Student Code For Search:");
                +
00031d e2aa     +LDI R26 , LOW ( _0xA + ( 202 ) )
00031e e0b3     +LDI R27 , HIGH ( _0xA + ( 202 ) )
                 	__POINTW2MN _0xA,202
00031f 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 00C4             lcd_gotoxy(1, 2);
                 ; 0000 00C5             lcdCommand(0x0f);   // display on, cursor blinking
000321 940e 0794 	CALL SUBOPT_0x4
                 ; 0000 00C6             delay_us(100 * 16); // wait
                 ; 0000 00C7             while (stage == STAGE_SEARCH_STUDENT)
                 _0x2F:
000323 940e 07d0 	CALL SUBOPT_0xD
000325 f3e9      	BREQ _0x2F
                 ; 0000 00C8                 ;
                 ; 0000 00C9             lcdCommand(0x0c);   // display on, cursor off
000326 c00e      	RJMP _0xD5
                 ; 0000 00CA             delay_us(100 * 16); // wait
                 ; 0000 00CB         }
                 ; 0000 00CC         else if (stage == STAGE_DELETE_STUDENT)
                 _0x2E:
000327 940e 07d5 	CALL SUBOPT_0xE
000329 f471      	BRNE _0x33
                 ; 0000 00CD         {
                 ; 0000 00CE             lcdCommand(0x01);
00032a 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 00CF             lcd_gotoxy(1, 1);
                 ; 0000 00D0             lcd_print("Enter Student Code For Delete:");
                +
00032c e4a9     +LDI R26 , LOW ( _0xA + ( 233 ) )
00032d e0b3     +LDI R27 , HIGH ( _0xA + ( 233 ) )
                 	__POINTW2MN _0xA,233
00032e 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 00D1             lcd_gotoxy(1, 2);
                 ; 0000 00D2             lcdCommand(0x0f);   // display on, cursor blinking
000330 940e 0794 	CALL SUBOPT_0x4
                 ; 0000 00D3             delay_us(100 * 16); // wait
                 ; 0000 00D4             while (stage == STAGE_DELETE_STUDENT)
                 _0x34:
000332 940e 07d5 	CALL SUBOPT_0xE
000334 f3e9      	BREQ _0x34
                 ; 0000 00D5                 ;
                 ; 0000 00D6             lcdCommand(0x0c); // display on, cursor off
                 _0xD5:
000335 e0ac      	LDI  R26,LOW(12)
000336 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 00D7             delay_us(100 * 16);
                 ; 0000 00D8         }
                 ; 0000 00D9     }
                 _0x33:
                 _0x2D:
                 _0x28:
                 _0x20:
                 _0x15:
                 _0xE:
                 _0x8:
000338 cf23      	RJMP _0x4
                 ; 0000 00DA }
                 _0x37:
000339 cfff      	RJMP _0x37
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0x108
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 00DE {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
00033a 920a      	ST   -Y,R0
00033b 921a      	ST   -Y,R1
00033c 92fa      	ST   -Y,R15
00033d 936a      	ST   -Y,R22
00033e 937a      	ST   -Y,R23
00033f 938a      	ST   -Y,R24
000340 939a      	ST   -Y,R25
000341 93aa      	ST   -Y,R26
000342 93ba      	ST   -Y,R27
000343 93ea      	ST   -Y,R30
000344 93fa      	ST   -Y,R31
000345 b7ef      	IN   R30,SREG
000346 93ea      	ST   -Y,R30
                 ; 0000 00DF     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 00E0     int i;
                 ; 0000 00E1 
                 ; 0000 00E2     // detect the key
                 ; 0000 00E3     while (1)
000347 9722      	SBIW R28,2
000348 940e 087a 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 00E4     {
                 ; 0000 00E5         KEY_PRT = 0xEF;            // ground row 0
00034a eeef      	LDI  R30,LOW(239)
00034b 940e 07e1 	CALL SUBOPT_0x10
                 ; 0000 00E6         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00E7         if (colloc != 0x0F)        // column detected
00034d f011      	BREQ _0x3B
                 ; 0000 00E8         {
                 ; 0000 00E9             rowloc = 0; // save row location
00034e e000      	LDI  R16,LOW(0)
                 ; 0000 00EA             break;      // exit while loop
00034f c012      	RJMP _0x3A
                 ; 0000 00EB         }
                 ; 0000 00EC         KEY_PRT = 0xDF;            // ground row 1
                 _0x3B:
000350 edef      	LDI  R30,LOW(223)
000351 940e 07e1 	CALL SUBOPT_0x10
                 ; 0000 00ED         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00EE         if (colloc != 0x0F)        // column detected
000353 f011      	BREQ _0x3C
                 ; 0000 00EF         {
                 ; 0000 00F0             rowloc = 1; // save row location
000354 e001      	LDI  R16,LOW(1)
                 ; 0000 00F1             break;      // exit while loop
000355 c00c      	RJMP _0x3A
                 ; 0000 00F2         }
                 ; 0000 00F3         KEY_PRT = 0xBF;            // ground row 2
                 _0x3C:
000356 ebef      	LDI  R30,LOW(191)
000357 940e 07e1 	CALL SUBOPT_0x10
                 ; 0000 00F4         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00F5         if (colloc != 0x0F)        // column detected
000359 f011      	BREQ _0x3D
                 ; 0000 00F6         {
                 ; 0000 00F7             rowloc = 2; // save row location
00035a e002      	LDI  R16,LOW(2)
                 ; 0000 00F8             break;      // exit while loop
00035b c006      	RJMP _0x3A
                 ; 0000 00F9         }
                 ; 0000 00FA         KEY_PRT = 0x7F;            // ground row 3
                 _0x3D:
00035c e7ef      	LDI  R30,LOW(127)
00035d bbe5      	OUT  0x15,R30
                 ; 0000 00FB         colloc = (KEY_PIN & 0x0F); // read the columns
00035e b3e3      	IN   R30,0x13
00035f 70ef      	ANDI R30,LOW(0xF)
000360 2f1e      	MOV  R17,R30
                 ; 0000 00FC         rowloc = 3;                // save row location
000361 e003      	LDI  R16,LOW(3)
                 ; 0000 00FD         break;                     // exit while loop
                 ; 0000 00FE     }
                 _0x3A:
                 ; 0000 00FF     // check column and send result to Port D
                 ; 0000 0100     if (colloc == 0x0E)
000362 301e      	CPI  R17,14
000363 f411      	BRNE _0x3E
                 ; 0000 0101         cl = 0;
000364 e030      	LDI  R19,LOW(0)
                 ; 0000 0102     else if (colloc == 0x0D)
000365 c009      	RJMP _0x3F
                 _0x3E:
000366 301d      	CPI  R17,13
000367 f411      	BRNE _0x40
                 ; 0000 0103         cl = 1;
000368 e031      	LDI  R19,LOW(1)
                 ; 0000 0104     else if (colloc == 0x0B)
000369 c005      	RJMP _0x41
                 _0x40:
00036a 301b      	CPI  R17,11
00036b f411      	BRNE _0x42
                 ; 0000 0105         cl = 2;
00036c e032      	LDI  R19,LOW(2)
                 ; 0000 0106     else
00036d c001      	RJMP _0x43
                 _0x42:
                 ; 0000 0107         cl = 3;
00036e e033      	LDI  R19,LOW(3)
                 ; 0000 0108 
                 ; 0000 0109     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x43:
                 _0x41:
                 _0x3F:
00036f b3e5      	IN   R30,0x15
000370 70ef      	ANDI R30,LOW(0xF)
000371 bbe5      	OUT  0x15,R30
                 ; 0000 010A 
                 ; 0000 010B     // inside menu level 1
                 ; 0000 010C     if (stage == STAGE_INIT_MENU)
000372 2c04      	MOV  R0,R4
000373 2805      	OR   R0,R5
000374 f009      	BREQ PC+2
000375 c058      	RJMP _0x44
                 ; 0000 010D     {
                 ; 0000 010E         switch (keypad[rowloc][cl] - '0')
000376 940e 07e7 	CALL SUBOPT_0x11
000378 91ec      	LD   R30,X
000379 e0f0      	LDI  R31,0
00037a 97f0      	SBIW R30,48
                 ; 0000 010F         {
                 ; 0000 0110         case OPTION_ATTENDENCE:
00037b 30e1      	CPI  R30,LOW(0x1)
00037c e0a0      	LDI  R26,HIGH(0x1)
00037d 07fa      	CPC  R31,R26
00037e f421      	BRNE _0x48
                 ; 0000 0111             stage = STAGE_ATTENDENC_MENU;
00037f e0e1      	LDI  R30,LOW(1)
000380 e0f0      	LDI  R31,HIGH(1)
000381 012f      	MOVW R4,R30
                 ; 0000 0112             break;
000382 c02e      	RJMP _0x47
                 ; 0000 0113 
                 ; 0000 0114         case OPTION_TEMPERATURE_MONITORING:
                 _0x48:
000383 30e4      	CPI  R30,LOW(0x4)
000384 e0a0      	LDI  R26,HIGH(0x4)
000385 07fa      	CPC  R31,R26
000386 f421      	BRNE _0x49
                 ; 0000 0115             stage = STAGE_TEMPERATURE_MONITORING;
000387 e0e3      	LDI  R30,LOW(3)
000388 e0f0      	LDI  R31,HIGH(3)
000389 012f      	MOVW R4,R30
                 ; 0000 0116             break;
00038a c026      	RJMP _0x47
                 ; 0000 0117         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x49:
00038b 30e3      	CPI  R30,LOW(0x3)
00038c e0a0      	LDI  R26,HIGH(0x3)
00038d 07fa      	CPC  R31,R26
00038e f421      	BRNE _0x4A
                 ; 0000 0118             stage = STAGE_VIEW_PRESENT_STUDENTS;
00038f e0e4      	LDI  R30,LOW(4)
000390 e0f0      	LDI  R31,HIGH(4)
000391 012f      	MOVW R4,R30
                 ; 0000 0119             break;
000392 c01e      	RJMP _0x47
                 ; 0000 011A         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x4A:
000393 30e5      	CPI  R30,LOW(0x5)
000394 e0a0      	LDI  R26,HIGH(0x5)
000395 07fa      	CPC  R31,R26
000396 f421      	BRNE _0x4B
                 ; 0000 011B             stage = STAGE_RETRIEVE_STUDENT_DATA;
000397 e0e5      	LDI  R30,LOW(5)
000398 e0f0      	LDI  R31,HIGH(5)
000399 012f      	MOVW R4,R30
                 ; 0000 011C             break;
00039a c016      	RJMP _0x47
                 ; 0000 011D         case OPTION_STUDENT_MANAGEMENT:
                 _0x4B:
00039b 30e2      	CPI  R30,LOW(0x2)
00039c e0a0      	LDI  R26,HIGH(0x2)
00039d 07fa      	CPC  R31,R26
00039e f421      	BRNE _0x4C
                 ; 0000 011E             stage = STAGE_STUDENT_MANAGMENT;
00039f e0e6      	LDI  R30,LOW(6)
0003a0 e0f0      	LDI  R31,HIGH(6)
0003a1 012f      	MOVW R4,R30
                 ; 0000 011F             break;
0003a2 c00e      	RJMP _0x47
                 ; 0000 0120         case 9:
                 _0x4C:
0003a3 30e9      	CPI  R30,LOW(0x9)
0003a4 e0a0      	LDI  R26,HIGH(0x9)
0003a5 07fa      	CPC  R31,R26
0003a6 f451      	BRNE _0x4F
                 ; 0000 0121 #asm("cli") // disable interrupts
0003a7 94f8      	cli
                 ; 0000 0122 
                 ; 0000 0123             lcdCommand(0x1);
0003a8 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0124             lcd_gotoxy(1, 1);
                 ; 0000 0125             lcd_print("Clearing EEPROM ...");
                +
0003aa e6a8     +LDI R26 , LOW ( _0x4E + ( 0 ) )
0003ab e0b3     +LDI R27 , HIGH ( _0x4E + ( 0 ) )
                 	__POINTW2MN _0x4E,0
0003ac d214      	RCALL _lcd_print
                 ; 0000 0126             clear_eeprom();
0003ad d29b      	RCALL _clear_eeprom
                 ; 0000 0127 #asm("sei") // enable interrupts
0003ae 9478      	sei
                 ; 0000 0128             stage = STAGE_INIT_MENU;
0003af 2444      	CLR  R4
0003b0 2455      	CLR  R5
                 ; 0000 0129         default:
                 _0x4F:
                 ; 0000 012A             break;
                 ; 0000 012B         }
                 _0x47:
                 ; 0000 012C 
                 ; 0000 012D         if (keypad[rowloc][cl] == 'L')
0003b1 940e 07e7 	CALL SUBOPT_0x11
0003b3 91ac      	LD   R26,X
0003b4 34ac      	CPI  R26,LOW(0x4C)
0003b5 f449      	BRNE _0x50
                 ; 0000 012E         {
                 ; 0000 012F             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 15e7      	CP   R30,R7
0003b8 f420      	BRSH _0x51
0003b9 2de7      	MOV  R30,R7
0003ba e0f0      	LDI  R31,0
0003bb 9731      	SBIW R30,1
0003bc c001      	RJMP _0x52
                 _0x51:
0003bd e0e2      	LDI  R30,LOW(2)
                 _0x52:
0003be 2e7e      	MOV  R7,R30
                 ; 0000 0130         }
                 ; 0000 0131         if (keypad[rowloc][cl] == 'R')
                 _0x50:
0003bf 940e 07e7 	CALL SUBOPT_0x11
0003c1 91ac      	LD   R26,X
0003c2 35a2      	CPI  R26,LOW(0x52)
0003c3 f449      	BRNE _0x54
                 ; 0000 0132         {
                 ; 0000 0133             page_num = (page_num + 1) % MENU_PAGE_COUNT;
0003c4 2de7      	MOV  R30,R7
0003c5 e0f0      	LDI  R31,0
0003c6 9631      	ADIW R30,1
0003c7 01df      	MOVW R26,R30
0003c8 e0e3      	LDI  R30,LOW(3)
0003c9 e0f0      	LDI  R31,HIGH(3)
0003ca 940e 086c 	CALL __MODW21
0003cc 2e7e      	MOV  R7,R30
                 ; 0000 0134         }
                 ; 0000 0135     }
                 _0x54:
                 ; 0000 0136     else if (stage == STAGE_ATTENDENC_MENU)
0003cd c199      	RJMP _0x55
                 _0x44:
0003ce 940e 077b 	CALL SUBOPT_0x0
0003d0 f4a9      	BRNE _0x56
                 ; 0000 0137     {
                 ; 0000 0138         switch (keypad[rowloc][cl])
0003d1 940e 07e7 	CALL SUBOPT_0x11
0003d3 91ec      	LD   R30,X
0003d4 e0f0      	LDI  R31,0
                 ; 0000 0139         {
                 ; 0000 013A         case 'C':
0003d5 34e3      	CPI  R30,LOW(0x43)
0003d6 e0a0      	LDI  R26,HIGH(0x43)
0003d7 07fa      	CPC  R31,R26
0003d8 f419      	BRNE _0x5A
                 ; 0000 013B             stage = STAGE_INIT_MENU;
0003d9 2444      	CLR  R4
0003da 2455      	CLR  R5
                 ; 0000 013C             break;
0003db c009      	RJMP _0x59
                 ; 0000 013D         case '1':
                 _0x5A:
0003dc 33e1      	CPI  R30,LOW(0x31)
0003dd e0a0      	LDI  R26,HIGH(0x31)
0003de 07fa      	CPC  R31,R26
0003df f429      	BRNE _0x5C
                 ; 0000 013E             memset(buffer, 0, 32);
0003e0 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 013F             stage = STAGE_SUBMIT_CODE;
0003e2 e0e2      	LDI  R30,LOW(2)
0003e3 e0f0      	LDI  R31,HIGH(2)
0003e4 012f      	MOVW R4,R30
                 ; 0000 0140             break;
                 ; 0000 0141         default:
                 _0x5C:
                 ; 0000 0142             break;
                 ; 0000 0143         }
                 _0x59:
                 ; 0000 0144     }
                 ; 0000 0145     else if (stage == STAGE_SUBMIT_CODE)
0003e5 c181      	RJMP _0x5D
                 _0x56:
0003e6 940e 078f 	CALL SUBOPT_0x3
0003e8 f009      	BREQ PC+2
0003e9 c09a      	RJMP _0x5E
                 ; 0000 0146     {
                 ; 0000 0147 
                 ; 0000 0148         if ((keypad[rowloc][cl] - '0') < 10)
0003ea 940e 07e7 	CALL SUBOPT_0x11
0003ec 91ec      	LD   R30,X
0003ed e0f0      	LDI  R31,0
0003ee 97fa      	SBIW R30,58
0003ef f47c      	BRGE _0x5F
                 ; 0000 0149         {
                 ; 0000 014A             if (strlen(buffer) <= 30)
0003f0 940e 07f3 	CALL SUBOPT_0x12
0003f2 977f      	SBIW R30,31
0003f3 f450      	BRSH _0x60
                 ; 0000 014B             {
                 ; 0000 014C                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0003f4 940e 07f3 	CALL SUBOPT_0x12
0003f6 940e 07f7 	CALL SUBOPT_0x13
0003f8 940e 07fb 	CALL SUBOPT_0x14
                 ; 0000 014D                 buffer[strlen(buffer) + 1] = '\0';
0003fa 940e 07ff 	CALL SUBOPT_0x15
                 ; 0000 014E                 lcdData(keypad[rowloc][cl]);
0003fc 91ac      	LD   R26,X
0003fd d186      	RCALL _lcdData
                 ; 0000 014F             }
                 ; 0000 0150         }
                 _0x60:
                 ; 0000 0151         else if (keypad[rowloc][cl] == 'D')
0003fe c084      	RJMP _0x61
                 _0x5F:
0003ff 940e 07e7 	CALL SUBOPT_0x11
000401 91ac      	LD   R26,X
000402 34a4      	CPI  R26,LOW(0x44)
000403 f461      	BRNE _0x62
                 ; 0000 0152         {
                 ; 0000 0153             buffer_len = strlen(buffer);
000404 940e 07f3 	CALL SUBOPT_0x12
000406 2f5e      	MOV  R21,R30
                 ; 0000 0154             if (buffer_len > 0)
000407 3051      	CPI  R21,1
000408 f030      	BRLO _0x63
                 ; 0000 0155             {
                 ; 0000 0156                 buffer[buffer_len - 1] = '\0';
000409 940e 0804 	CALL SUBOPT_0x16
                 ; 0000 0157                 lcdCommand(0x10);
                 ; 0000 0158                 lcd_print(" ");
                +
00040b e7ac     +LDI R26 , LOW ( _0x4E + ( 20 ) )
00040c e0b3     +LDI R27 , HIGH ( _0x4E + ( 20 ) )
                 	__POINTW2MN _0x4E,20
00040d 940e 080e 	CALL SUBOPT_0x17
                 ; 0000 0159                 lcdCommand(0x10);
                 ; 0000 015A             }
                 ; 0000 015B         }
                 _0x63:
                 ; 0000 015C         else if (keypad[rowloc][cl] == 'E')
00040f c073      	RJMP _0x64
                 _0x62:
000410 940e 07e7 	CALL SUBOPT_0x11
000412 91ac      	LD   R26,X
000413 34a5      	CPI  R26,LOW(0x45)
000414 f009      	BREQ PC+2
000415 c065      	RJMP _0x65
                 ; 0000 015D         {
                 ; 0000 015E 
                 ; 0000 015F #asm("cli")
000416 94f8      	cli
                 ; 0000 0160 
                 ; 0000 0161             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0162                 strlen(buffer) != 8)
000417 efef      	LDI  R30,LOW(_buffer)
000418 e0f5      	LDI  R31,HIGH(_buffer)
000419 93fa      	ST   -Y,R31
00041a 93ea      	ST   -Y,R30
                +
00041b e7ee     +LDI R30 , LOW ( _0x4E + ( 22 ) )
00041c e0f3     +LDI R31 , HIGH ( _0x4E + ( 22 ) )
                 	__POINTW1MN _0x4E,22
00041d 93fa      	ST   -Y,R31
00041e 93ea      	ST   -Y,R30
00041f e0a2      	LDI  R26,LOW(2)
000420 940e 0762 	CALL _strncmp
000422 30e0      	CPI  R30,0
000423 f431      	BRNE _0x67
000424 940e 07f3 	CALL SUBOPT_0x12
000426 30e8      	CPI  R30,LOW(0x8)
000427 e0a0      	LDI  R26,HIGH(0x8)
000428 07fa      	CPC  R31,R26
000429 f069      	BREQ _0x66
                 _0x67:
                 ; 0000 0163             {
                 ; 0000 0164 
                 ; 0000 0165                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00042a 9a97      	SBI  0x12,7
                 ; 0000 0166                 lcdCommand(0x01);
00042b 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0167                 lcd_gotoxy(1, 1);
                 ; 0000 0168                 lcd_print("Incorrect Suudent Code Format");
                +
00042d e8a1     +LDI R26 , LOW ( _0x4E + ( 25 ) )
00042e e0b3     +LDI R27 , HIGH ( _0x4E + ( 25 ) )
                 	__POINTW2MN _0x4E,25
00042f 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0169                 lcd_gotoxy(1, 2);
                 ; 0000 016A                 lcd_print("You Will Back Menu In 2 Second");
                +
000431 e9af     +LDI R26 , LOW ( _0x4E + ( 55 ) )
000432 e0b3     +LDI R27 , HIGH ( _0x4E + ( 55 ) )
                 	__POINTW2MN _0x4E,55
000433 940e 07c5 	CALL SUBOPT_0xB
                 ; 0000 016B                 delay_ms(2000);
                 ; 0000 016C                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
000435 9897      	CBI  0x12,7
                 ; 0000 016D             }
                 ; 0000 016E             else if (search_student_code() > 0)
000436 c040      	RJMP _0x69
                 _0x66:
000437 d256      	RCALL _search_student_code
000438 30e1      	CPI  R30,LOW(0x1)
000439 f068      	BRLO _0x6A
                 ; 0000 016F             {
                 ; 0000 0170                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00043a 9a97      	SBI  0x12,7
                 ; 0000 0171                 lcdCommand(0x01);
00043b 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0172                 lcd_gotoxy(1, 1);
                 ; 0000 0173                 lcd_print("Duplicate Suudent Code Entered");
                +
00043d ebae     +LDI R26 , LOW ( _0x4E + ( 86 ) )
00043e e0b3     +LDI R27 , HIGH ( _0x4E + ( 86 ) )
                 	__POINTW2MN _0x4E,86
00043f 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0174                 lcd_gotoxy(1, 2);
                 ; 0000 0175                 lcd_print("You Will Back Menu In 2 Second");
                +
000441 edad     +LDI R26 , LOW ( _0x4E + ( 117 ) )
000442 e0b3     +LDI R27 , HIGH ( _0x4E + ( 117 ) )
                 	__POINTW2MN _0x4E,117
000443 940e 07c5 	CALL SUBOPT_0xB
                 ; 0000 0176                 delay_ms(2000);
                 ; 0000 0177                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
000445 9897      	CBI  0x12,7
                 ; 0000 0178             }
                 ; 0000 0179             else
000446 c030      	RJMP _0x6B
                 _0x6A:
                 ; 0000 017A             {
                 ; 0000 017B                 // save the buffer to EEPROM
                 ; 0000 017C                 st_counts = read_byte_from_eeprom(0x0);
000447 940e 07c1 	CALL SUBOPT_0xA
000449 2f2e      	MOV  R18,R30
                 ; 0000 017D                 for (i = 0; i < 8; i++)
00044a e0e0      	LDI  R30,LOW(0)
00044b 83ee      	STD  Y+6,R30
00044c 83ef      	STD  Y+6+1,R30
                 _0x6D:
00044d 81ae      	LDD  R26,Y+6
00044e 81bf      	LDD  R27,Y+6+1
00044f 9718      	SBIW R26,8
000450 f4ac      	BRGE _0x6E
                 ; 0000 017E                 {
                 ; 0000 017F                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000451 2fe2      	MOV  R30,R18
000452 940e 0813 	CALL SUBOPT_0x18
000454 81ae      	LDD  R26,Y+6
000455 81bf      	LDD  R27,Y+6+1
000456 0fea      	ADD  R30,R26
000457 1ffb      	ADC  R31,R27
000458 93fa      	ST   -Y,R31
000459 93ea      	ST   -Y,R30
00045a 85e8      	LDD  R30,Y+8
00045b 85f9      	LDD  R31,Y+8+1
00045c 50e1      	SUBI R30,LOW(-_buffer)
00045d 4ffa      	SBCI R31,HIGH(-_buffer)
00045e 81a0      	LD   R26,Z
00045f d20f      	RCALL _write_byte_to_eeprom
                 ; 0000 0180                 }
000460 81ee      	LDD  R30,Y+6
000461 81ff      	LDD  R31,Y+6+1
000462 9631      	ADIW R30,1
000463 83ee      	STD  Y+6,R30
000464 83ff      	STD  Y+6+1,R31
000465 cfe7      	RJMP _0x6D
                 _0x6E:
                 ; 0000 0181                 write_byte_to_eeprom(0x0, st_counts + 1);
000466 e0e0      	LDI  R30,LOW(0)
000467 e0f0      	LDI  R31,HIGH(0)
000468 93fa      	ST   -Y,R31
000469 93ea      	ST   -Y,R30
00046a 2fa2      	MOV  R26,R18
00046b 5faf      	SUBI R26,-LOW(1)
00046c d202      	RCALL _write_byte_to_eeprom
                 ; 0000 0182 
                 ; 0000 0183                 lcdCommand(0x01);
00046d 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0184                 lcd_gotoxy(1, 1);
                 ; 0000 0185                 lcd_print("Student Code Successfully Added");
                +
00046f efac     +LDI R26 , LOW ( _0x4E + ( 148 ) )
000470 e0b3     +LDI R27 , HIGH ( _0x4E + ( 148 ) )
                 	__POINTW2MN _0x4E,148
000471 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0186                 lcd_gotoxy(1, 2);
                 ; 0000 0187                 lcd_print("You Will Back Menu In 2 Second");
                +
000473 e1ac     +LDI R26 , LOW ( _0x4E + ( 180 ) )
000474 e0b4     +LDI R27 , HIGH ( _0x4E + ( 180 ) )
                 	__POINTW2MN _0x4E,180
000475 940e 07c5 	CALL SUBOPT_0xB
                 ; 0000 0188                 delay_ms(2000);
                 ; 0000 0189             }
                 _0x6B:
                 _0x69:
                 ; 0000 018A             memset(buffer, 0, 32);
000477 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 018B #asm("sei")
000479 9478      	sei
                 ; 0000 018C             stage = STAGE_ATTENDENC_MENU;
00047a c005      	RJMP _0xD6
                 ; 0000 018D         }
                 ; 0000 018E         else if (keypad[rowloc][cl] == 'C')
                 _0x65:
00047b 940e 07e7 	CALL SUBOPT_0x11
00047d 91ac      	LD   R26,X
00047e 34a3      	CPI  R26,LOW(0x43)
00047f f419      	BRNE _0x70
                 ; 0000 018F             stage = STAGE_ATTENDENC_MENU;
                 _0xD6:
000480 e0e1      	LDI  R30,LOW(1)
000481 e0f0      	LDI  R31,HIGH(1)
000482 012f      	MOVW R4,R30
                 ; 0000 0190     }
                 _0x70:
                 _0x64:
                 _0x61:
                 ; 0000 0191     else if (stage == STAGE_TEMPERATURE_MONITORING)
000483 c0e3      	RJMP _0x71
                 _0x5E:
000484 940e 079c 	CALL SUBOPT_0x5
000486 f441      	BRNE _0x72
                 ; 0000 0192     {
                 ; 0000 0193 
                 ; 0000 0194         if (keypad[rowloc][cl] == 'C')
000487 940e 07e7 	CALL SUBOPT_0x11
000489 91ac      	LD   R26,X
00048a 34a3      	CPI  R26,LOW(0x43)
00048b f411      	BRNE _0x73
                 ; 0000 0195             stage = STAGE_INIT_MENU;
00048c 2444      	CLR  R4
00048d 2455      	CLR  R5
                 ; 0000 0196     }
                 _0x73:
                 ; 0000 0197     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00048e c0d8      	RJMP _0x74
                 _0x72:
00048f 940e 07a1 	CALL SUBOPT_0x6
000491 f441      	BRNE _0x75
                 ; 0000 0198     {
                 ; 0000 0199         if (keypad[rowloc][cl] == 'C')
000492 940e 07e7 	CALL SUBOPT_0x11
000494 91ac      	LD   R26,X
000495 34a3      	CPI  R26,LOW(0x43)
000496 f411      	BRNE _0x76
                 ; 0000 019A             stage = STAGE_INIT_MENU;
000497 2444      	CLR  R4
000498 2455      	CLR  R5
                 ; 0000 019B     }
                 _0x76:
                 ; 0000 019C     else if (stage == STAGE_STUDENT_MANAGMENT)
000499 c0cd      	RJMP _0x77
                 _0x75:
00049a 940e 07cb 	CALL SUBOPT_0xC
00049c f4c9      	BRNE _0x78
                 ; 0000 019D     {
                 ; 0000 019E         if (keypad[rowloc][cl] == 'C')
00049d 940e 07e7 	CALL SUBOPT_0x11
00049f 91ac      	LD   R26,X
0004a0 34a3      	CPI  R26,LOW(0x43)
0004a1 f419      	BRNE _0x79
                 ; 0000 019F             stage = STAGE_INIT_MENU;
0004a2 2444      	CLR  R4
0004a3 2455      	CLR  R5
                 ; 0000 01A0         else if (keypad[rowloc][cl] == '1')
0004a4 c010      	RJMP _0x7A
                 _0x79:
0004a5 940e 07e7 	CALL SUBOPT_0x11
0004a7 91ac      	LD   R26,X
0004a8 33a1      	CPI  R26,LOW(0x31)
0004a9 f419      	BRNE _0x7B
                 ; 0000 01A1             stage = STAGE_SEARCH_STUDENT;
0004aa e0e7      	LDI  R30,LOW(7)
0004ab e0f0      	LDI  R31,HIGH(7)
0004ac c007      	RJMP _0xD7
                 ; 0000 01A2         else if (keypad[rowloc][cl] == '2')
                 _0x7B:
0004ad 940e 07e7 	CALL SUBOPT_0x11
0004af 91ac      	LD   R26,X
0004b0 33a2      	CPI  R26,LOW(0x32)
0004b1 f419      	BRNE _0x7D
                 ; 0000 01A3             stage = STAGE_DELETE_STUDENT;
0004b2 e0e8      	LDI  R30,LOW(8)
0004b3 e0f0      	LDI  R31,HIGH(8)
                 _0xD7:
0004b4 012f      	MOVW R4,R30
                 ; 0000 01A4     }
                 _0x7D:
                 _0x7A:
                 ; 0000 01A5     else if (stage == STAGE_SEARCH_STUDENT)
0004b5 c0b1      	RJMP _0x7E
                 _0x78:
0004b6 940e 07d0 	CALL SUBOPT_0xD
0004b8 f009      	BREQ PC+2
0004b9 c054      	RJMP _0x7F
                 ; 0000 01A6     {
                 ; 0000 01A7         if ((keypad[rowloc][cl] - '0') < 10)
0004ba 940e 07e7 	CALL SUBOPT_0x11
0004bc 91ec      	LD   R30,X
0004bd e0f0      	LDI  R31,0
0004be 97fa      	SBIW R30,58
0004bf f47c      	BRGE _0x80
                 ; 0000 01A8         {
                 ; 0000 01A9             if (strlen(buffer) <= 30)
0004c0 940e 07f3 	CALL SUBOPT_0x12
0004c2 977f      	SBIW R30,31
0004c3 f450      	BRSH _0x81
                 ; 0000 01AA             {
                 ; 0000 01AB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0004c4 940e 07f3 	CALL SUBOPT_0x12
0004c6 940e 07f7 	CALL SUBOPT_0x13
0004c8 940e 07fb 	CALL SUBOPT_0x14
                 ; 0000 01AC                 buffer[strlen(buffer) + 1] = '\0';
0004ca 940e 07ff 	CALL SUBOPT_0x15
                 ; 0000 01AD                 lcdData(keypad[rowloc][cl]);
0004cc 91ac      	LD   R26,X
0004cd d0b6      	RCALL _lcdData
                 ; 0000 01AE             }
                 ; 0000 01AF         }
                 _0x81:
                 ; 0000 01B0         else if (keypad[rowloc][cl] == 'D')
0004ce c03e      	RJMP _0x82
                 _0x80:
0004cf 940e 07e7 	CALL SUBOPT_0x11
0004d1 91ac      	LD   R26,X
0004d2 34a4      	CPI  R26,LOW(0x44)
0004d3 f461      	BRNE _0x83
                 ; 0000 01B1         {
                 ; 0000 01B2             buffer_len = strlen(buffer);
0004d4 940e 07f3 	CALL SUBOPT_0x12
0004d6 2f5e      	MOV  R21,R30
                 ; 0000 01B3             if (buffer_len > 0)
0004d7 3051      	CPI  R21,1
0004d8 f030      	BRLO _0x84
                 ; 0000 01B4             {
                 ; 0000 01B5                 buffer[buffer_len - 1] = '\0';
0004d9 940e 0804 	CALL SUBOPT_0x16
                 ; 0000 01B6                 lcdCommand(0x10);
                 ; 0000 01B7                 lcd_print(" ");
                +
0004db e3ab     +LDI R26 , LOW ( _0x4E + ( 211 ) )
0004dc e0b4     +LDI R27 , HIGH ( _0x4E + ( 211 ) )
                 	__POINTW2MN _0x4E,211
0004dd 940e 080e 	CALL SUBOPT_0x17
                 ; 0000 01B8                 lcdCommand(0x10);
                 ; 0000 01B9             }
                 ; 0000 01BA         }
                 _0x84:
                 ; 0000 01BB         else if (keypad[rowloc][cl] == 'E')
0004df c02d      	RJMP _0x85
                 _0x83:
0004e0 940e 07e7 	CALL SUBOPT_0x11
0004e2 91ac      	LD   R26,X
0004e3 34a5      	CPI  R26,LOW(0x45)
0004e4 f501      	BRNE _0x86
                 ; 0000 01BC         {
                 ; 0000 01BD             // search from eeprom data
                 ; 0000 01BE             unsigned char result = search_student_code();
                 ; 0000 01BF 
                 ; 0000 01C0             if (result > 0)
0004e5 940e 0818 	CALL SUBOPT_0x19
                 ;	i -> Y+7
                 ;	result -> Y+0
0004e7 f048      	BRLO _0x87
                 ; 0000 01C1             {
                 ; 0000 01C2                 lcdCommand(0x01);
0004e8 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 01C3                 lcd_gotoxy(1, 1);
                 ; 0000 01C4                 lcd_print("Student Code Found");
                +
0004ea e3ad     +LDI R26 , LOW ( _0x4E + ( 213 ) )
0004eb e0b4     +LDI R27 , HIGH ( _0x4E + ( 213 ) )
                 	__POINTW2MN _0x4E,213
0004ec 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 01C5                 lcd_gotoxy(1, 2);
                 ; 0000 01C6                 lcd_print("You Will Back Menu In 5 Second");
                +
0004ee e5a0     +LDI R26 , LOW ( _0x4E + ( 232 ) )
0004ef e0b4     +LDI R27 , HIGH ( _0x4E + ( 232 ) )
                 	__POINTW2MN _0x4E,232
0004f0 c008      	RJMP _0xD8
                 ; 0000 01C7                 delay_ms(5000);
                 ; 0000 01C8             }
                 ; 0000 01C9             else
                 _0x87:
                 ; 0000 01CA             {
                 ; 0000 01CB                 lcdCommand(0x01);
0004f1 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 01CC                 lcd_gotoxy(1, 1);
                 ; 0000 01CD                 lcd_print("Ops , Student Code Not Found");
                +
0004f3 e6af     +LDI R26 , LOW ( _0x4E + ( 263 ) )
0004f4 e0b4     +LDI R27 , HIGH ( _0x4E + ( 263 ) )
                 	__POINTW2MN _0x4E,263
0004f5 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 01CE                 lcd_gotoxy(1, 2);
                 ; 0000 01CF                 lcd_print("You Will Back Menu In 5 Second");
                +
0004f7 e8ac     +LDI R26 , LOW ( _0x4E + ( 292 ) )
0004f8 e0b4     +LDI R27 , HIGH ( _0x4E + ( 292 ) )
                 	__POINTW2MN _0x4E,292
                 _0xD8:
0004f9 d0c7      	RCALL _lcd_print
                 ; 0000 01D0                 delay_ms(5000);
0004fa e8a8      	LDI  R26,LOW(5000)
0004fb e1b3      	LDI  R27,HIGH(5000)
0004fc 940e 0844 	CALL _delay_ms
                 ; 0000 01D1             }
                 ; 0000 01D2             memset(buffer, 0, 32);
0004fe 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 01D3             stage = STAGE_STUDENT_MANAGMENT;
000500 e0e6      	LDI  R30,LOW(6)
000501 e0f0      	LDI  R31,HIGH(6)
000502 012f      	MOVW R4,R30
                 ; 0000 01D4         }
000503 9621      	ADIW R28,1
                 ; 0000 01D5         else if (keypad[rowloc][cl] == 'C')
000504 c008      	RJMP _0x89
                 _0x86:
000505 940e 07e7 	CALL SUBOPT_0x11
000507 91ac      	LD   R26,X
000508 34a3      	CPI  R26,LOW(0x43)
000509 f419      	BRNE _0x8A
                 ; 0000 01D6             stage = STAGE_STUDENT_MANAGMENT;
00050a e0e6      	LDI  R30,LOW(6)
00050b e0f0      	LDI  R31,HIGH(6)
00050c 012f      	MOVW R4,R30
                 ; 0000 01D7     }
                 _0x8A:
                 _0x89:
                 _0x85:
                 _0x82:
                 ; 0000 01D8     else if (stage == STAGE_DELETE_STUDENT)
00050d c059      	RJMP _0x8B
                 _0x7F:
00050e 940e 07d5 	CALL SUBOPT_0xE
000510 f009      	BREQ PC+2
000511 c055      	RJMP _0x8C
                 ; 0000 01D9     {
                 ; 0000 01DA         if ((keypad[rowloc][cl] - '0') < 10)
000512 940e 07e7 	CALL SUBOPT_0x11
000514 91ec      	LD   R30,X
000515 e0f0      	LDI  R31,0
000516 97fa      	SBIW R30,58
000517 f47c      	BRGE _0x8D
                 ; 0000 01DB         {
                 ; 0000 01DC             if (strlen(buffer) <= 30)
000518 940e 07f3 	CALL SUBOPT_0x12
00051a 977f      	SBIW R30,31
00051b f450      	BRSH _0x8E
                 ; 0000 01DD             {
                 ; 0000 01DE                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00051c 940e 07f3 	CALL SUBOPT_0x12
00051e 940e 07f7 	CALL SUBOPT_0x13
000520 940e 07fb 	CALL SUBOPT_0x14
                 ; 0000 01DF                 buffer[strlen(buffer) + 1] = '\0';
000522 940e 07ff 	CALL SUBOPT_0x15
                 ; 0000 01E0                 lcdData(keypad[rowloc][cl]);
000524 91ac      	LD   R26,X
000525 d05e      	RCALL _lcdData
                 ; 0000 01E1             }
                 ; 0000 01E2         }
                 _0x8E:
                 ; 0000 01E3         else if (keypad[rowloc][cl] == 'D')
000526 c040      	RJMP _0x8F
                 _0x8D:
000527 940e 07e7 	CALL SUBOPT_0x11
000529 91ac      	LD   R26,X
00052a 34a4      	CPI  R26,LOW(0x44)
00052b f461      	BRNE _0x90
                 ; 0000 01E4         {
                 ; 0000 01E5             buffer_len = strlen(buffer);
00052c 940e 07f3 	CALL SUBOPT_0x12
00052e 2f5e      	MOV  R21,R30
                 ; 0000 01E6             if (buffer_len > 0)
00052f 3051      	CPI  R21,1
000530 f030      	BRLO _0x91
                 ; 0000 01E7             {
                 ; 0000 01E8                 buffer[buffer_len - 1] = '\0';
000531 940e 0804 	CALL SUBOPT_0x16
                 ; 0000 01E9                 lcdCommand(0x10);
                 ; 0000 01EA                 lcd_print(" ");
                +
000533 eaab     +LDI R26 , LOW ( _0x4E + ( 323 ) )
000534 e0b4     +LDI R27 , HIGH ( _0x4E + ( 323 ) )
                 	__POINTW2MN _0x4E,323
000535 940e 080e 	CALL SUBOPT_0x17
                 ; 0000 01EB                 lcdCommand(0x10);
                 ; 0000 01EC             }
                 ; 0000 01ED         }
                 _0x91:
                 ; 0000 01EE         else if (keypad[rowloc][cl] == 'E')
000537 c02f      	RJMP _0x92
                 _0x90:
000538 940e 07e7 	CALL SUBOPT_0x11
00053a 91ac      	LD   R26,X
00053b 34a5      	CPI  R26,LOW(0x45)
00053c f551      	BRNE _0x93
                 ; 0000 01EF         {
                 ; 0000 01F0             // search from eeprom data
                 ; 0000 01F1             unsigned char result = search_student_code();
                 ; 0000 01F2 
                 ; 0000 01F3             if (result > 0)
00053d 940e 0818 	CALL SUBOPT_0x19
                 ;	i -> Y+7
                 ;	result -> Y+0
00053f f0a0      	BRLO _0x94
                 ; 0000 01F4             {
                 ; 0000 01F5                 lcdCommand(0x01);
000540 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 01F6                 lcd_gotoxy(1, 1);
                 ; 0000 01F7                 lcd_print("Student Code Found");
                +
000542 eaad     +LDI R26 , LOW ( _0x4E + ( 325 ) )
000543 e0b4     +LDI R27 , HIGH ( _0x4E + ( 325 ) )
                 	__POINTW2MN _0x4E,325
000544 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 01F8                 lcd_gotoxy(1, 2);
                 ; 0000 01F9                 lcd_print("Wait For Delete...");
                +
000546 eca0     +LDI R26 , LOW ( _0x4E + ( 344 ) )
000547 e0b4     +LDI R27 , HIGH ( _0x4E + ( 344 ) )
                 	__POINTW2MN _0x4E,344
000548 d078      	RCALL _lcd_print
                 ; 0000 01FA                 delete_student_code(result);
000549 81a8      	LD   R26,Y
00054a d18a      	RCALL _delete_student_code
                 ; 0000 01FB                 lcdCommand(0x01);
00054b 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 01FC                 lcd_gotoxy(1, 1);
                 ; 0000 01FD                 lcd_print("Student Code Was Deleted");
                +
00054d eda3     +LDI R26 , LOW ( _0x4E + ( 363 ) )
00054e e0b4     +LDI R27 , HIGH ( _0x4E + ( 363 ) )
                 	__POINTW2MN _0x4E,363
00054f 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 01FE                 lcd_gotoxy(1, 2);
                 ; 0000 01FF                 lcd_print("You Will Back Menu In 2 Second");
                +
000551 eeac     +LDI R26 , LOW ( _0x4E + ( 388 ) )
000552 e0b4     +LDI R27 , HIGH ( _0x4E + ( 388 ) )
                 	__POINTW2MN _0x4E,388
000553 c008      	RJMP _0xD9
                 ; 0000 0200                 delay_ms(2000);
                 ; 0000 0201             }
                 ; 0000 0202             else
                 _0x94:
                 ; 0000 0203             {
                 ; 0000 0204                 lcdCommand(0x01);
000554 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0205                 lcd_gotoxy(1, 1);
                 ; 0000 0206                 lcd_print("Ops , Student Code Not Found");
                +
000556 e0ab     +LDI R26 , LOW ( _0x4E + ( 419 ) )
000557 e0b5     +LDI R27 , HIGH ( _0x4E + ( 419 ) )
                 	__POINTW2MN _0x4E,419
000558 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0207                 lcd_gotoxy(1, 2);
                 ; 0000 0208                 lcd_print("You Will Back Menu In 2 Second");
                +
00055a e2a8     +LDI R26 , LOW ( _0x4E + ( 448 ) )
00055b e0b5     +LDI R27 , HIGH ( _0x4E + ( 448 ) )
                 	__POINTW2MN _0x4E,448
                 _0xD9:
00055c d064      	RCALL _lcd_print
                 ; 0000 0209                 delay_ms(2000);
00055d eda0      	LDI  R26,LOW(2000)
00055e e0b7      	LDI  R27,HIGH(2000)
00055f 940e 0844 	CALL _delay_ms
                 ; 0000 020A             }
                 ; 0000 020B             memset(buffer, 0, 32);
000561 940e 07a6 	CALL SUBOPT_0x7
                 ; 0000 020C             stage = STAGE_STUDENT_MANAGMENT;
000563 e0e6      	LDI  R30,LOW(6)
000564 e0f0      	LDI  R31,HIGH(6)
000565 012f      	MOVW R4,R30
                 ; 0000 020D         }
000566 9621      	ADIW R28,1
                 ; 0000 020E     }
                 _0x93:
                 _0x92:
                 _0x8F:
                 ; 0000 020F }
                 _0x8C:
                 _0x8B:
                 _0x7E:
                 _0x77:
                 _0x74:
                 _0x71:
                 _0x5D:
                 _0x55:
000567 940e 0881 	CALL __LOADLOCR6
000569 9628      	ADIW R28,8
00056a 91e9      	LD   R30,Y+
00056b bfef      	OUT  SREG,R30
00056c 91f9      	LD   R31,Y+
00056d 91e9      	LD   R30,Y+
00056e 91b9      	LD   R27,Y+
00056f 91a9      	LD   R26,Y+
000570 9199      	LD   R25,Y+
000571 9189      	LD   R24,Y+
000572 9179      	LD   R23,Y+
000573 9169      	LD   R22,Y+
000574 90f9      	LD   R15,Y+
000575 9019      	LD   R1,Y+
000576 9009      	LD   R0,Y+
000577 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x4E:
000368           	.BYTE 0x1DF
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 0212 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 0213     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000578 940e 081f 	CALL SUBOPT_0x1A
                 ;	cmnd -> Y+0
                 ; 0000 0214     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
00057a 98c0      	CBI  0x18,0
                 ; 0000 0215     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
00057b 940e 0828 	CALL SUBOPT_0x1B
                 ; 0000 0216     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0217     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0218     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0219     delay_us(20 * 16);         // wait
                +
00057d e880     +LDI R24 , LOW ( 640 )
00057e e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
00057f 9701     +SBIW R24 , 1
000580 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 021A     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000581 940e 082f 	CALL SUBOPT_0x1C
                 ; 0000 021B     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 021C     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 021D     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 021E }
000583 c0fb      	RJMP _0x20A0003
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 0220 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 0221     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
000584 940e 081f 	CALL SUBOPT_0x1A
                 ;	data -> Y+0
                 ; 0000 0222     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
000586 9ac0      	SBI  0x18,0
                 ; 0000 0223     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000587 940e 0828 	CALL SUBOPT_0x1B
                 ; 0000 0224     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0225     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0226     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0227     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
000589 940e 082f 	CALL SUBOPT_0x1C
                 ; 0000 0228     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0229     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 022A     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 022B }
00058b c0f3      	RJMP _0x20A0003
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 022D {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 022E     LCD_DDR = 0xFF;            // LCD port is output
00058c efef      	LDI  R30,LOW(255)
00058d bbe7      	OUT  0x17,R30
                 ; 0000 022F     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
00058e 98c2      	CBI  0x18,2
                 ; 0000 0230     delay_us(2000 * 16);       // wait for stable power
                +
00058f e080     +LDI R24 , LOW ( 64000 )
000590 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000591 9701     +SBIW R24 , 1
000592 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0231     lcdCommand(0x33);          //$33 for 4-bit mode
000593 e3a3      	LDI  R26,LOW(51)
000594 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 0232     delay_us(100 * 16);        // wait
                 ; 0000 0233     lcdCommand(0x32);          //$32 for 4-bit mode
000596 e3a2      	LDI  R26,LOW(50)
000597 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 0234     delay_us(100 * 16);        // wait
                 ; 0000 0235     lcdCommand(0x28);          //$28 for 4-bit mode
000599 e2a8      	LDI  R26,LOW(40)
00059a 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 0236     delay_us(100 * 16);        // wait
                 ; 0000 0237     lcdCommand(0x0c);          // display on, cursor off
00059c e0ac      	LDI  R26,LOW(12)
00059d 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 0238     delay_us(100 * 16);        // wait
                 ; 0000 0239     lcdCommand(0x01);          // clear LCD
00059f e0a1      	LDI  R26,LOW(1)
0005a0 dfd7      	RCALL _lcdCommand
                 ; 0000 023A     delay_us(2000 * 16);       // wait
                +
0005a1 e080     +LDI R24 , LOW ( 64000 )
0005a2 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0005a3 9701     +SBIW R24 , 1
0005a4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 023B     lcdCommand(0x06);          // shift cursor right
0005a5 e0a6      	LDI  R26,LOW(6)
0005a6 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 023C     delay_us(100 * 16);
                 ; 0000 023D }
0005a8 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 023F {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 0240     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 0241     lcdCommand(firstCharAdr[y - 1] + x - 1);
0005a9 93aa      	ST   -Y,R26
0005aa 9724      	SBIW R28,4
0005ab e8e0      	LDI  R30,LOW(128)
0005ac 83e8      	ST   Y,R30
0005ad ece0      	LDI  R30,LOW(192)
0005ae 83e9      	STD  Y+1,R30
0005af e9e4      	LDI  R30,LOW(148)
0005b0 83ea      	STD  Y+2,R30
0005b1 ede4      	LDI  R30,LOW(212)
0005b2 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
0005b3 81ec      	LDD  R30,Y+4
0005b4 e0f0      	LDI  R31,0
0005b5 9731      	SBIW R30,1
0005b6 01de      	MOVW R26,R28
0005b7 0fae      	ADD  R26,R30
0005b8 1fbf      	ADC  R27,R31
0005b9 91ec      	LD   R30,X
0005ba 81ad      	LDD  R26,Y+5
0005bb 0fae      	ADD  R26,R30
0005bc 50a1      	SUBI R26,LOW(1)
0005bd 940e 07da 	CALL SUBOPT_0xF
                 ; 0000 0242     delay_us(100 * 16);
                 ; 0000 0243 }
0005bf 9626      	ADIW R28,6
0005c0 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 0245 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 0246     unsigned char i = 0;
                 ; 0000 0247     while (str[i] != 0)
0005c1 93ba      	ST   -Y,R27
0005c2 93aa      	ST   -Y,R26
0005c3 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0005c4 e010      	LDI  R17,0
                 _0x96:
0005c5 81a9      	LDD  R26,Y+1
0005c6 81ba      	LDD  R27,Y+1+1
0005c7 27ee      	CLR  R30
0005c8 0fa1      	ADD  R26,R17
0005c9 1fbe      	ADC  R27,R30
0005ca 91ec      	LD   R30,X
0005cb 30e0      	CPI  R30,0
0005cc f049      	BREQ _0x98
                 ; 0000 0248     {
                 ; 0000 0249         lcdData(str[i]);
0005cd 81a9      	LDD  R26,Y+1
0005ce 81ba      	LDD  R27,Y+1+1
0005cf 27ee      	CLR  R30
0005d0 0fa1      	ADD  R26,R17
0005d1 1fbe      	ADC  R27,R30
0005d2 91ac      	LD   R26,X
0005d3 dfb0      	RCALL _lcdData
                 ; 0000 024A         i++;
0005d4 5f1f      	SUBI R17,-1
                 ; 0000 024B     }
0005d5 cfef      	RJMP _0x96
                 _0x98:
                 ; 0000 024C }
0005d6 8118      	LDD  R17,Y+0
0005d7 c0a0      	RJMP _0x20A0004
                 ; .FEND
                 ;
                 ;void LCM35_init()
                 ; 0000 024F {
                 _LCM35_init:
                 ; .FSTART _LCM35_init
                 ; 0000 0250     ADMUX = 0xE0;
0005d8 eee0      	LDI  R30,LOW(224)
0005d9 b9e7      	OUT  0x7,R30
                 ; 0000 0251     ADCSRA = 0x87;
0005da e8e7      	LDI  R30,LOW(135)
0005db b9e6      	OUT  0x6,R30
                 ; 0000 0252 }
0005dc 9508      	RET
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 0255 {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 0256     unsigned char temperatureVal = 0;
                 ; 0000 0257     unsigned char temperatureRep[3];
                 ; 0000 0258     lcdCommand(0x01);
0005dd 9723      	SBIW R28,3
0005de 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
0005df e010      	LDI  R17,0
0005e0 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0259     lcd_gotoxy(1, 1);
                 ; 0000 025A     lcd_print("temperature(C):");
                +
0005e2 e4a7     +LDI R26 , LOW ( _0x99 + ( 0 ) )
0005e3 e0b5     +LDI R27 , HIGH ( _0x99 + ( 0 ) )
                 	__POINTW2MN _0x99,0
0005e4 dfdc      	RCALL _lcd_print
                 ; 0000 025B 
                 ; 0000 025C     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0x9A:
0005e5 940e 079c 	CALL SUBOPT_0x5
0005e7 f4f1      	BRNE _0x9C
                 ; 0000 025D     {
                 ; 0000 025E         ADCSRA |= (1 << ADSC);
0005e8 9a36      	SBI  0x6,6
                 ; 0000 025F         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x9D:
0005e9 9b34      	SBIS 0x6,4
                 ; 0000 0260             ;
0005ea cffe      	RJMP _0x9D
                 ; 0000 0261         if (ADCH != temperatureVal)
0005eb b1e5      	IN   R30,0x5
0005ec 171e      	CP   R17,R30
0005ed f099      	BREQ _0xA0
                 ; 0000 0262         {
                 ; 0000 0263             temperatureVal = ADCH;
0005ee b115      	IN   R17,5
                 ; 0000 0264             itoa(temperatureVal, temperatureRep);
0005ef 2fe1      	MOV  R30,R17
0005f0 e0f0      	LDI  R31,0
0005f1 93fa      	ST   -Y,R31
0005f2 93ea      	ST   -Y,R30
0005f3 01de      	MOVW R26,R28
0005f4 9613      	ADIW R26,3
0005f5 940e 0704 	CALL _itoa
                 ; 0000 0265             lcd_gotoxy(17, 1);
0005f7 e1e1      	LDI  R30,LOW(17)
0005f8 93ea      	ST   -Y,R30
0005f9 e0a1      	LDI  R26,LOW(1)
0005fa dfae      	RCALL _lcd_gotoxy
                 ; 0000 0266             lcd_print(temperatureRep);
0005fb 01de      	MOVW R26,R28
0005fc 9611      	ADIW R26,1
0005fd dfc3      	RCALL _lcd_print
                 ; 0000 0267             lcd_print(" ");
                +
0005fe e5a7     +LDI R26 , LOW ( _0x99 + ( 16 ) )
0005ff e0b5     +LDI R27 , HIGH ( _0x99 + ( 16 ) )
                 	__POINTW2MN _0x99,16
000600 dfc0      	RCALL _lcd_print
                 ; 0000 0268         }
                 ; 0000 0269         delay_ms(500);
                 _0xA0:
000601 efa4      	LDI  R26,LOW(500)
000602 e0b1      	LDI  R27,HIGH(500)
000603 940e 0844 	CALL _delay_ms
                 ; 0000 026A     }
000605 cfdf      	RJMP _0x9A
                 _0x9C:
                 ; 0000 026B }
000606 8118      	LDD  R17,Y+0
000607 9624      	ADIW R28,4
000608 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x99:
000547           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 026E {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 026F 
                 ; 0000 0270     while (stage == STAGE_INIT_MENU)
                 _0xA1:
000609 2c04      	MOV  R0,R4
00060a 2805      	OR   R0,R5
00060b f5e1      	BRNE _0xA3
                 ; 0000 0271     {
                 ; 0000 0272         lcdCommand(0x01);
00060c 940e 0780 	CALL SUBOPT_0x1
                 ; 0000 0273         lcd_gotoxy(1, 1);
                 ; 0000 0274         if (page_num == 0)
00060e 2077      	TST  R7
00060f f481      	BRNE _0xA4
                 ; 0000 0275         {
                 ; 0000 0276             lcd_print("1: Attendance Initialization");
                +
000610 e5a9     +LDI R26 , LOW ( _0xA5 + ( 0 ) )
000611 e0b5     +LDI R27 , HIGH ( _0xA5 + ( 0 ) )
                 	__POINTW2MN _0xA5,0
000612 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0277             lcd_gotoxy(1, 2);
                 ; 0000 0278             lcd_print("2: Student Management");
                +
000614 e7a6     +LDI R26 , LOW ( _0xA5 + ( 29 ) )
000615 e0b5     +LDI R27 , HIGH ( _0xA5 + ( 29 ) )
                 	__POINTW2MN _0xA5,29
000616 dfaa      	RCALL _lcd_print
                 ; 0000 0279             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xA6:
000617 2077      	TST  R7
000618 f421      	BRNE _0xA9
000619 2400      	CLR  R0
00061a 1404      	CP   R0,R4
00061b 0405      	CPC  R0,R5
00061c f009      	BREQ _0xAA
                 _0xA9:
00061d c001      	RJMP _0xA8
                 _0xAA:
                 ; 0000 027A                 ;
00061e cff8      	RJMP _0xA6
                 _0xA8:
                 ; 0000 027B         }
                 ; 0000 027C         else if (page_num == 1)
00061f c027      	RJMP _0xAB
                 _0xA4:
000620 e0e1      	LDI  R30,LOW(1)
000621 15e7      	CP   R30,R7
000622 f489      	BRNE _0xAC
                 ; 0000 027D         {
                 ; 0000 027E             lcd_print("3: View Present Students ");
                +
000623 e8ac     +LDI R26 , LOW ( _0xA5 + ( 51 ) )
000624 e0b5     +LDI R27 , HIGH ( _0xA5 + ( 51 ) )
                 	__POINTW2MN _0xA5,51
000625 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 027F             lcd_gotoxy(1, 2);
                 ; 0000 0280             lcd_print("4: Temperature Monitoring");
                +
000627 eaa6     +LDI R26 , LOW ( _0xA5 + ( 77 ) )
000628 e0b5     +LDI R27 , HIGH ( _0xA5 + ( 77 ) )
                 	__POINTW2MN _0xA5,77
000629 df97      	RCALL _lcd_print
                 ; 0000 0281             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0xAD:
00062a e0e1      	LDI  R30,LOW(1)
00062b 15e7      	CP   R30,R7
00062c f421      	BRNE _0xB0
00062d 2400      	CLR  R0
00062e 1404      	CP   R0,R4
00062f 0405      	CPC  R0,R5
000630 f009      	BREQ _0xB1
                 _0xB0:
000631 c001      	RJMP _0xAF
                 _0xB1:
                 ; 0000 0282                 ;
000632 cff7      	RJMP _0xAD
                 _0xAF:
                 ; 0000 0283         }
                 ; 0000 0284         else if (page_num == 2)
000633 c013      	RJMP _0xB2
                 _0xAC:
000634 e0e2      	LDI  R30,LOW(2)
000635 15e7      	CP   R30,R7
000636 f481      	BRNE _0xB3
                 ; 0000 0285         {
                 ; 0000 0286             lcd_print("5: Retrieve Student Data");
                +
000637 eca0     +LDI R26 , LOW ( _0xA5 + ( 103 ) )
000638 e0b5     +LDI R27 , HIGH ( _0xA5 + ( 103 ) )
                 	__POINTW2MN _0xA5,103
000639 940e 0788 	CALL SUBOPT_0x2
                 ; 0000 0287             lcd_gotoxy(1, 2);
                 ; 0000 0288             lcd_print("6: Traffic Monitoring");
                +
00063b eda9     +LDI R26 , LOW ( _0xA5 + ( 128 ) )
00063c e0b5     +LDI R27 , HIGH ( _0xA5 + ( 128 ) )
                 	__POINTW2MN _0xA5,128
00063d df83      	RCALL _lcd_print
                 ; 0000 0289             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0xB4:
00063e e0e2      	LDI  R30,LOW(2)
00063f 15e7      	CP   R30,R7
000640 f421      	BRNE _0xB7
000641 2400      	CLR  R0
000642 1404      	CP   R0,R4
000643 0405      	CPC  R0,R5
000644 f009      	BREQ _0xB8
                 _0xB7:
000645 c001      	RJMP _0xB6
                 _0xB8:
                 ; 0000 028A                 ;
000646 cff7      	RJMP _0xB4
                 _0xB6:
                 ; 0000 028B         }
                 ; 0000 028C     }
                 _0xB3:
                 _0xB2:
                 _0xAB:
000647 cfc1      	RJMP _0xA1
                 _0xA3:
                 ; 0000 028D }
000648 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xA5:
000559           	.BYTE 0x96
                 ;
                 ;void clear_eeprom()
                 ; 0000 0290 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0291     unsigned int i;
                 ; 0000 0292 
                 ; 0000 0293     for (i = 0; i <= 1023; i++)
000649 931a      	ST   -Y,R17
00064a 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00064b e000     +LDI R16 , LOW ( 0 )
00064c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xBA:
                +
00064d 3000     +CPI R16 , LOW ( 1024 )
00064e e0e4     +LDI R30 , HIGH ( 1024 )
00064f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000650 f478      	BRSH _0xBB
                 ; 0000 0294     {
                 ; 0000 0295         // Wait for the previous write to complete
                 ; 0000 0296         while (EECR & (1 << EEWE))
                 _0xBC:
000651 99e1      	SBIC 0x1C,1
                 ; 0000 0297             ;
000652 cffe      	RJMP _0xBC
                 ; 0000 0298 
                 ; 0000 0299         // Set up address registers
                 ; 0000 029A         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000653 2fe1      	MOV  R30,R17
000654 70f0      	ANDI R31,HIGH(0x0)
000655 70e3      	ANDI R30,LOW(0x3)
000656 bbef      	OUT  0x1F,R30
                 ; 0000 029B         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000657 2fe0      	MOV  R30,R16
000658 bbee      	OUT  0x1E,R30
                 ; 0000 029C 
                 ; 0000 029D         // Set up data register
                 ; 0000 029E         EEDR = 0; // Write 0 to EEPROM
000659 e0e0      	LDI  R30,LOW(0)
00065a bbed      	OUT  0x1D,R30
                 ; 0000 029F 
                 ; 0000 02A0         // Enable write
                 ; 0000 02A1         EECR |= (1 << EEMWE); // Master write enable
00065b 9ae2      	SBI  0x1C,2
                 ; 0000 02A2         EECR |= (1 << EEWE);  // Start EEPROM write
00065c 9ae1      	SBI  0x1C,1
                 ; 0000 02A3     }
                +
00065d 5f0f     +SUBI R16 , LOW ( - 1 )
00065e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00065f cfed      	RJMP _0xBA
                 _0xBB:
                 ; 0000 02A4 }
000660 9109      	LD   R16,Y+
000661 9119      	LD   R17,Y+
000662 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 02A7 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 02A8     unsigned char x;
                 ; 0000 02A9     // Wait for the previous write to complete
                 ; 0000 02AA     while (EECR & (1 << EEWE))
000663 93ba      	ST   -Y,R27
000664 93aa      	ST   -Y,R26
000665 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0xBF:
000666 99e1      	SBIC 0x1C,1
                 ; 0000 02AB         ;
000667 cffe      	RJMP _0xBF
                 ; 0000 02AC 
                 ; 0000 02AD     // Set up address registers
                 ; 0000 02AE     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000668 940e 083d 	CALL SUBOPT_0x1D
                 ; 0000 02AF     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02B0     EECR |= (1 << EERE);        // Read Enable
00066a 9ae0      	SBI  0x1C,0
                 ; 0000 02B1     x = EEDR;
00066b b31d      	IN   R17,29
                 ; 0000 02B2     return x;
00066c 2fe1      	MOV  R30,R17
00066d 8118      	LDD  R17,Y+0
00066e c009      	RJMP _0x20A0004
                 ; 0000 02B3 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 02B6 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 02B7     // Wait for the previous write to complete
                 ; 0000 02B8     while (EECR & (1 << EEWE))
00066f 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0xC2:
000670 99e1      	SBIC 0x1C,1
                 ; 0000 02B9         ;
000671 cffe      	RJMP _0xC2
                 ; 0000 02BA 
                 ; 0000 02BB     // Set up address registers
                 ; 0000 02BC     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000672 940e 083d 	CALL SUBOPT_0x1D
                 ; 0000 02BD     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02BE 
                 ; 0000 02BF     // Set up data register
                 ; 0000 02C0     EEDR = value; // Write 0 to EEPROM
000674 81e8      	LD   R30,Y
000675 bbed      	OUT  0x1D,R30
                 ; 0000 02C1 
                 ; 0000 02C2     // Enable write
                 ; 0000 02C3     EECR |= (1 << EEMWE); // Master write enable
000676 9ae2      	SBI  0x1C,2
                 ; 0000 02C4     EECR |= (1 << EEWE);  // Start EEPROM write
000677 9ae1      	SBI  0x1C,1
                 ; 0000 02C5 }
                 _0x20A0004:
000678 9623      	ADIW R28,3
000679 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 02C8 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 02C9     while (!(UCSRA & (1 << UDRE)))
00067a 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0xC5:
00067b 9b5d      	SBIS 0xB,5
                 ; 0000 02CA         ;
00067c cffe      	RJMP _0xC5
                 ; 0000 02CB     UDR = data;
00067d 81e8      	LD   R30,Y
00067e b9ec      	OUT  0xC,R30
                 ; 0000 02CC }
                 _0x20A0003:
00067f 9621      	ADIW R28,1
000680 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 02CF {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 02D0     UBRRL = (unsigned char)ubrr;
000681 93ba      	ST   -Y,R27
000682 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000683 81e8      	LD   R30,Y
000684 b9e9      	OUT  0x9,R30
                 ; 0000 02D1     UBRRH = (unsigned char)(ubrr >> 8);
000685 81e9      	LDD  R30,Y+1
000686 70f0      	ANDI R31,HIGH(0x0)
000687 bde0      	OUT  0x20,R30
                 ; 0000 02D2     UCSRB = (1 << RXEN) | (1 << TXEN);
000688 e1e8      	LDI  R30,LOW(24)
000689 b9ea      	OUT  0xA,R30
                 ; 0000 02D3     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
00068a e0e6      	LDI  R30,LOW(6)
00068b bde0      	OUT  0x20,R30
                 ; 0000 02D4 }
00068c 9622      	ADIW R28,2
00068d 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 02D7 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 02D8     unsigned char st_counts, i, j;
                 ; 0000 02D9     char temp[10];
                 ; 0000 02DA 
                 ; 0000 02DB     st_counts = read_byte_from_eeprom(0x0);
00068e 972a      	SBIW R28,10
00068f 940e 087c 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
000691 940e 07c1 	CALL SUBOPT_0xA
000693 2f1e      	MOV  R17,R30
                 ; 0000 02DC 
                 ; 0000 02DD     for (i = 0; i < st_counts; i++)
000694 e000      	LDI  R16,LOW(0)
                 _0xC9:
000695 1701      	CP   R16,R17
000696 f5c8      	BRSH _0xCA
                 ; 0000 02DE     {
                 ; 0000 02DF         memset(temp, 0, 32);
000697 01fe      	MOVW R30,R28
000698 9634      	ADIW R30,4
000699 93fa      	ST   -Y,R31
00069a 93ea      	ST   -Y,R30
00069b e0e0      	LDI  R30,LOW(0)
00069c 93ea      	ST   -Y,R30
00069d e2a0      	LDI  R26,LOW(32)
00069e e0b0      	LDI  R27,0
00069f 940e 0732 	CALL _memset
                 ; 0000 02E0         for (j = 0; j < 8; j++)
0006a1 e030      	LDI  R19,LOW(0)
                 _0xCC:
0006a2 3038      	CPI  R19,8
0006a3 f4a8      	BRSH _0xCD
                 ; 0000 02E1         {
                 ; 0000 02E2             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0006a4 2fe3      	MOV  R30,R19
0006a5 e0f0      	LDI  R31,0
0006a6 01de      	MOVW R26,R28
0006a7 9614      	ADIW R26,4
0006a8 0fea      	ADD  R30,R26
0006a9 1ffb      	ADC  R31,R27
0006aa 93ff      	PUSH R31
0006ab 93ef      	PUSH R30
0006ac 2fa3      	MOV  R26,R19
0006ad 27bb      	CLR  R27
0006ae 2fe0      	MOV  R30,R16
0006af 940e 0813 	CALL SUBOPT_0x18
0006b1 0fae      	ADD  R26,R30
0006b2 1fbf      	ADC  R27,R31
0006b3 dfaf      	RCALL _read_byte_from_eeprom
0006b4 91af      	POP  R26
0006b5 91bf      	POP  R27
0006b6 93ec      	ST   X,R30
                 ; 0000 02E3         }
0006b7 5f3f      	SUBI R19,-1
0006b8 cfe9      	RJMP _0xCC
                 _0xCD:
                 ; 0000 02E4         temp[j] = '\0';
0006b9 2fe3      	MOV  R30,R19
0006ba e0f0      	LDI  R31,0
0006bb 01de      	MOVW R26,R28
0006bc 9614      	ADIW R26,4
0006bd 0fae      	ADD  R26,R30
0006be 1fbf      	ADC  R27,R31
0006bf e0e0      	LDI  R30,LOW(0)
0006c0 93ec      	ST   X,R30
                 ; 0000 02E5         if (strcmp(temp, buffer) == 0)
0006c1 01fe      	MOVW R30,R28
0006c2 9634      	ADIW R30,4
0006c3 93fa      	ST   -Y,R31
0006c4 93ea      	ST   -Y,R30
0006c5 efaf      	LDI  R26,LOW(_buffer)
0006c6 e0b5      	LDI  R27,HIGH(_buffer)
0006c7 940e 0742 	CALL _strcmp
0006c9 30e0      	CPI  R30,0
0006ca f419      	BRNE _0xCE
                 ; 0000 02E6             return (i + 1);
0006cb 2fe0      	MOV  R30,R16
0006cc 5fef      	SUBI R30,-LOW(1)
0006cd c003      	RJMP _0x20A0002
                 ; 0000 02E7     }
                 _0xCE:
0006ce 5f0f      	SUBI R16,-1
0006cf cfc5      	RJMP _0xC9
                 _0xCA:
                 ; 0000 02E8 
                 ; 0000 02E9     return 0;
0006d0 e0e0      	LDI  R30,LOW(0)
                 _0x20A0002:
0006d1 940e 0883 	CALL __LOADLOCR4
0006d3 962e      	ADIW R28,14
0006d4 9508      	RET
                 ; 0000 02EA }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 02ED {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 02EE     unsigned char st_counts, i, j;
                 ; 0000 02EF     unsigned char temp;
                 ; 0000 02F0 
                 ; 0000 02F1     st_counts = read_byte_from_eeprom(0x0);
0006d5 93aa      	ST   -Y,R26
0006d6 940e 087c 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
0006d8 940e 07c1 	CALL SUBOPT_0xA
0006da 2f1e      	MOV  R17,R30
                 ; 0000 02F2 
                 ; 0000 02F3     for (i = index; i <= st_counts; i++)
0006db 810c      	LDD  R16,Y+4
                 _0xD0:
0006dc 1710      	CP   R17,R16
0006dd f0d8      	BRLO _0xD1
                 ; 0000 02F4     {
                 ; 0000 02F5         for (j = 0; j < 8; j++)
0006de e030      	LDI  R19,LOW(0)
                 _0xD3:
0006df 3038      	CPI  R19,8
0006e0 f4b0      	BRSH _0xD4
                 ; 0000 02F6         {
                 ; 0000 02F7             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
0006e1 2fa3      	MOV  R26,R19
0006e2 27bb      	CLR  R27
0006e3 2fe0      	MOV  R30,R16
0006e4 940e 0813 	CALL SUBOPT_0x18
0006e6 0fae      	ADD  R26,R30
0006e7 1fbf      	ADC  R27,R31
0006e8 df7a      	RCALL _read_byte_from_eeprom
0006e9 2f2e      	MOV  R18,R30
                 ; 0000 02F8             write_byte_to_eeprom(j + ((i) * 8), temp);
0006ea 2fa3      	MOV  R26,R19
0006eb 27bb      	CLR  R27
0006ec e0e8      	LDI  R30,LOW(8)
0006ed 9fe0      	MUL  R30,R16
0006ee 01f0      	MOVW R30,R0
0006ef 0fea      	ADD  R30,R26
0006f0 1ffb      	ADC  R31,R27
0006f1 93fa      	ST   -Y,R31
0006f2 93ea      	ST   -Y,R30
0006f3 2fa2      	MOV  R26,R18
0006f4 df7a      	RCALL _write_byte_to_eeprom
                 ; 0000 02F9         }
0006f5 5f3f      	SUBI R19,-1
0006f6 cfe8      	RJMP _0xD3
                 _0xD4:
                 ; 0000 02FA     }
0006f7 5f0f      	SUBI R16,-1
0006f8 cfe3      	RJMP _0xD0
                 _0xD1:
                 ; 0000 02FB     write_byte_to_eeprom(0x0, st_counts - 1);
0006f9 e0e0      	LDI  R30,LOW(0)
0006fa e0f0      	LDI  R31,HIGH(0)
0006fb 93fa      	ST   -Y,R31
0006fc 93ea      	ST   -Y,R30
0006fd 2fa1      	MOV  R26,R17
0006fe 50a1      	SUBI R26,LOW(1)
0006ff df6f      	RCALL _write_byte_to_eeprom
                 ; 0000 02FC }
000700 940e 0883 	CALL __LOADLOCR4
000702 940c 0740 	JMP  _0x20A0001
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000704 93ba      	ST   -Y,R27
000705 93aa      	ST   -Y,R26
000706 91a9          ld   r26,y+
000707 91b9          ld   r27,y+
000708 91e9          ld   r30,y+
000709 91f9          ld   r31,y+
00070a 9630          adiw r30,0
00070b f42a          brpl __itoa0
00070c 95e0          com  r30
00070d 95f0          com  r31
00070e 9631          adiw r30,1
00070f e26d          ldi  r22,'-'
000710 936d          st   x+,r22
                 __itoa0:
000711 94e8          clt
000712 e180          ldi  r24,low(10000)
000713 e297          ldi  r25,high(10000)
000714 d00d          rcall __itoa1
000715 ee88          ldi  r24,low(1000)
000716 e093          ldi  r25,high(1000)
000717 d00a          rcall __itoa1
000718 e684          ldi  r24,100
000719 2799          clr  r25
00071a d007          rcall __itoa1
00071b e08a          ldi  r24,10
00071c d005          rcall __itoa1
00071d 2f6e          mov  r22,r30
00071e d010          rcall __itoa5
00071f 2766          clr  r22
000720 936c          st   x,r22
000721 9508          ret
                 
                 __itoa1:
000722 2766          clr	 r22
                 __itoa2:
000723 17e8          cp   r30,r24
000724 07f9          cpc  r31,r25
000725 f020          brlo __itoa3
000726 9563          inc  r22
000727 1be8          sub  r30,r24
000728 0bf9          sbc  r31,r25
000729 f7c9          brne __itoa2
                 __itoa3:
00072a 2366          tst  r22
00072b f411          brne __itoa4
00072c f016          brts __itoa5
00072d 9508          ret
                 __itoa4:
00072e 9468          set
                 __itoa5:
00072f 5d60          subi r22,-0x30
000730 936d          st   x+,r22
000731 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000732 93ba      	ST   -Y,R27
000733 93aa      	ST   -Y,R26
000734 81b9          ldd  r27,y+1
000735 81a8          ld   r26,y
000736 9610          adiw r26,0
000737 f031          breq memset1
000738 81fc          ldd  r31,y+4
000739 81eb          ldd  r30,y+3
00073a 816a          ldd  r22,y+2
                 memset0:
00073b 9361          st   z+,r22
00073c 9711          sbiw r26,1
00073d f7e9          brne memset0
                 memset1:
00073e 81eb          ldd  r30,y+3
00073f 81fc          ldd  r31,y+4
                 _0x20A0001:
000740 9625      	ADIW R28,5
000741 9508      	RET
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
000742 93ba      	ST   -Y,R27
000743 93aa      	ST   -Y,R26
000744 91e9          ld   r30,y+
000745 91f9          ld   r31,y+
000746 91a9          ld   r26,y+
000747 91b9          ld   r27,y+
                 strcmp0:
000748 916d          ld   r22,x+
000749 9171          ld   r23,z+
00074a 1767          cp   r22,r23
00074b f421          brne strcmp1
00074c 2366          tst  r22
00074d f7d1          brne strcmp0
                 strcmp3:
00074e 27ee          clr  r30
00074f 9508          ret
                 strcmp1:
000750 1b67          sub  r22,r23
000751 f3e1          breq strcmp3
000752 e0e1          ldi  r30,1
000753 f408          brcc strcmp2
000754 50e2          subi r30,2
                 strcmp2:
000755 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000756 93ba      	ST   -Y,R27
000757 93aa      	ST   -Y,R26
000758 91a9          ld   r26,y+
000759 91b9          ld   r27,y+
00075a 27ee          clr  r30
00075b 27ff          clr  r31
                 strlen0:
00075c 916d          ld   r22,x+
00075d 2366          tst  r22
00075e f011          breq strlen1
00075f 9631          adiw r30,1
000760 cffb          rjmp strlen0
                 strlen1:
000761 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000762 93aa      	ST   -Y,R26
000763 2766          clr  r22
000764 2777          clr  r23
000765 9189          ld   r24,y+
000766 91e9          ld   r30,y+
000767 91f9          ld   r31,y+
000768 91a9          ld   r26,y+
000769 91b9          ld   r27,y+
                 strncmp0:
00076a 2388          tst  r24
00076b f049          breq strncmp1
00076c 958a          dec  r24
00076d 916d          ld   r22,x+
00076e 9171          ld   r23,z+
00076f 1767          cp   r22,r23
000770 f421          brne strncmp1
000771 2366          tst  r22
000772 f7b9          brne strncmp0
                 strncmp3:
000773 27ee          clr  r30
000774 9508          ret
                 strncmp1:
000775 1b67          sub  r22,r23
000776 f3e1          breq strncmp3
000777 e0e1          ldi  r30,1
000778 f408          brcc strncmp2
000779 50e2          subi r30,2
                 strncmp2:
00077a 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
0005ef           	.BYTE 0x10
                 _buffer:
0005ff           	.BYTE 0x20
                 __seed_G100:
00061f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00077b e0e1      	LDI  R30,LOW(1)
00077c e0f0      	LDI  R31,HIGH(1)
00077d 15e4      	CP   R30,R4
00077e 05f5      	CPC  R31,R5
00077f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 21 TIMES, CODE SIZE REDUCTION:117 WORDS
                 SUBOPT_0x1:
000780 e0a1      	LDI  R26,LOW(1)
000781 940e 0578 	CALL _lcdCommand
000783 e0e1      	LDI  R30,LOW(1)
000784 93ea      	ST   -Y,R30
000785 e0a1      	LDI  R26,LOW(1)
000786 940c 05a9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:77 WORDS
                 SUBOPT_0x2:
000788 940e 05c1 	CALL _lcd_print
00078a e0e1      	LDI  R30,LOW(1)
00078b 93ea      	ST   -Y,R30
00078c e0a2      	LDI  R26,LOW(2)
00078d 940c 05a9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00078f e0e2      	LDI  R30,LOW(2)
000790 e0f0      	LDI  R31,HIGH(2)
000791 15e4      	CP   R30,R4
000792 05f5      	CPC  R31,R5
000793 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000794 e0af      	LDI  R26,LOW(15)
000795 940e 0578 	CALL _lcdCommand
                +
000797 e880     +LDI R24 , LOW ( 3200 )
000798 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000799 9701     +SBIW R24 , 1
00079a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
00079b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00079c e0e3      	LDI  R30,LOW(3)
00079d e0f0      	LDI  R31,HIGH(3)
00079e 15e4      	CP   R30,R4
00079f 05f5      	CPC  R31,R5
0007a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0007a1 e0e4      	LDI  R30,LOW(4)
0007a2 e0f0      	LDI  R31,HIGH(4)
0007a3 15e4      	CP   R30,R4
0007a4 05f5      	CPC  R31,R5
0007a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x7:
0007a6 efef      	LDI  R30,LOW(_buffer)
0007a7 e0f5      	LDI  R31,HIGH(_buffer)
0007a8 93fa      	ST   -Y,R31
0007a9 93ea      	ST   -Y,R30
0007aa e0e0      	LDI  R30,LOW(0)
0007ab 93ea      	ST   -Y,R30
0007ac e2a0      	LDI  R26,LOW(32)
0007ad e0b0      	LDI  R27,0
0007ae 940c 0732 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0007b0 efaf      	LDI  R26,LOW(_buffer)
0007b1 e0b5      	LDI  R27,HIGH(_buffer)
0007b2 940e 05c1 	CALL _lcd_print
0007b4 eea8      	LDI  R26,LOW(1000)
0007b5 e0b3      	LDI  R27,HIGH(1000)
0007b6 940c 0844 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
0007b8 01f8      	MOVW R30,R16
0007b9 9631      	ADIW R30,1
0007ba 940e 0852 	CALL __LSLW3
0007bc 0fe2      	ADD  R30,R18
0007bd 1ff3      	ADC  R31,R19
0007be 01df      	MOVW R26,R30
0007bf 940c 0663 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0007c1 e0a0      	LDI  R26,LOW(0)
0007c2 e0b0      	LDI  R27,0
0007c3 940c 0663 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
0007c5 940e 05c1 	CALL _lcd_print
0007c7 eda0      	LDI  R26,LOW(2000)
0007c8 e0b7      	LDI  R27,HIGH(2000)
0007c9 940c 0844 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
0007cb e0e6      	LDI  R30,LOW(6)
0007cc e0f0      	LDI  R31,HIGH(6)
0007cd 15e4      	CP   R30,R4
0007ce 05f5      	CPC  R31,R5
0007cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0007d0 e0e7      	LDI  R30,LOW(7)
0007d1 e0f0      	LDI  R31,HIGH(7)
0007d2 15e4      	CP   R30,R4
0007d3 05f5      	CPC  R31,R5
0007d4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0007d5 e0e8      	LDI  R30,LOW(8)
0007d6 e0f0      	LDI  R31,HIGH(8)
0007d7 15e4      	CP   R30,R4
0007d8 05f5      	CPC  R31,R5
0007d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xF:
0007da 940e 0578 	CALL _lcdCommand
                +
0007dc e880     +LDI R24 , LOW ( 3200 )
0007dd e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0007de 9701     +SBIW R24 , 1
0007df f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0007e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0007e1 bbe5      	OUT  0x15,R30
0007e2 b3e3      	IN   R30,0x13
0007e3 70ef      	ANDI R30,LOW(0xF)
0007e4 2f1e      	MOV  R17,R30
0007e5 301f      	CPI  R17,15
0007e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:222 WORDS
                 SUBOPT_0x11:
0007e7 2fe0      	MOV  R30,R16
0007e8 eeaf      	LDI  R26,LOW(_keypad)
0007e9 e0b5      	LDI  R27,HIGH(_keypad)
0007ea e0f0      	LDI  R31,0
0007eb 940e 0854 	CALL __LSLW2
0007ed 0fae      	ADD  R26,R30
0007ee 1fbf      	ADC  R27,R31
0007ef 27ee      	CLR  R30
0007f0 0fa3      	ADD  R26,R19
0007f1 1fbe      	ADC  R27,R30
0007f2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x12:
0007f3 efaf      	LDI  R26,LOW(_buffer)
0007f4 e0b5      	LDI  R27,HIGH(_buffer)
0007f5 940c 0756 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0007f7 50e1      	SUBI R30,LOW(-_buffer)
0007f8 4ffa      	SBCI R31,HIGH(-_buffer)
0007f9 010f      	MOVW R0,R30
0007fa cfec      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0007fb 91ec      	LD   R30,X
0007fc 01d0      	MOVW R26,R0
0007fd 93ec      	ST   X,R30
0007fe cff4      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x15:
                +
0007ff 50e0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000800 4ffa     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000801 e0a0      	LDI  R26,LOW(0)
000802 83a0      	STD  Z+0,R26
000803 cfe3      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x16:
000804 2fe5      	MOV  R30,R21
000805 e0f0      	LDI  R31,0
000806 9731      	SBIW R30,1
000807 50e1      	SUBI R30,LOW(-_buffer)
000808 4ffa      	SBCI R31,HIGH(-_buffer)
000809 e0a0      	LDI  R26,LOW(0)
00080a 83a0      	STD  Z+0,R26
00080b e1a0      	LDI  R26,LOW(16)
00080c 940c 0578 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
00080e 940e 05c1 	CALL _lcd_print
000810 e1a0      	LDI  R26,LOW(16)
000811 940c 0578 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x18:
000813 e0f0      	LDI  R31,0
000814 9631      	ADIW R30,1
000815 940e 0852 	CALL __LSLW3
000817 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
000818 9721      	SBIW R28,1
000819 940e 068e 	CALL _search_student_code
00081b 83e8      	ST   Y,R30
00081c 81a8      	LD   R26,Y
00081d 30a1      	CPI  R26,LOW(0x1)
00081e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
00081f 93aa      	ST   -Y,R26
000820 b3e8      	IN   R30,0x18
000821 70ef      	ANDI R30,LOW(0xF)
000822 2fae      	MOV  R26,R30
000823 81e8      	LD   R30,Y
000824 7fe0      	ANDI R30,LOW(0xF0)
000825 2bea      	OR   R30,R26
000826 bbe8      	OUT  0x18,R30
000827 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000828 98c1      	CBI  0x18,1
000829 9ac2      	SBI  0x18,2
                +
00082a e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
00082b 958a     +DEC R24
00082c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
00082d 98c2      	CBI  0x18,2
00082e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1C:
00082f b3e8      	IN   R30,0x18
000830 70ef      	ANDI R30,LOW(0xF)
000831 2fae      	MOV  R26,R30
000832 81e8      	LD   R30,Y
000833 95e2      	SWAP R30
000834 7fe0      	ANDI R30,0xF0
000835 2bea      	OR   R30,R26
000836 bbe8      	OUT  0x18,R30
000837 9ac2      	SBI  0x18,2
                +
000838 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000839 958a     +DEC R24
00083a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
00083b 98c2      	CBI  0x18,2
00083c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
00083d 81ea      	LDD  R30,Y+2
00083e 70f0      	ANDI R31,HIGH(0x0)
00083f 70e3      	ANDI R30,LOW(0x3)
000840 bbef      	OUT  0x1F,R30
000841 81e9      	LDD  R30,Y+1
000842 bbee      	OUT  0x1E,R30
000843 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000844 9610      	adiw r26,0
000845 f039      	breq __delay_ms1
                 __delay_ms0:
000846 95a8      	wdr
                +
000847 ed80     +LDI R24 , LOW ( 0x7D0 )
000848 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000849 9701     +SBIW R24 , 1
00084a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00084b 9711      	sbiw r26,1
00084c f7c9      	brne __delay_ms0
                 __delay_ms1:
00084d 9508      	ret
                 
                 __ANEGW1:
00084e 95f1      	NEG  R31
00084f 95e1      	NEG  R30
000850 40f0      	SBCI R31,0
000851 9508      	RET
                 
                 __LSLW3:
000852 0fee      	LSL  R30
000853 1fff      	ROL  R31
                 __LSLW2:
000854 0fee      	LSL  R30
000855 1fff      	ROL  R31
000856 0fee      	LSL  R30
000857 1fff      	ROL  R31
000858 9508      	RET
                 
                 __DIVW21U:
000859 2400      	CLR  R0
00085a 2411      	CLR  R1
00085b e190      	LDI  R25,16
                 __DIVW21U1:
00085c 0faa      	LSL  R26
00085d 1fbb      	ROL  R27
00085e 1c00      	ROL  R0
00085f 1c11      	ROL  R1
000860 1a0e      	SUB  R0,R30
000861 0a1f      	SBC  R1,R31
000862 f418      	BRCC __DIVW21U2
000863 0e0e      	ADD  R0,R30
000864 1e1f      	ADC  R1,R31
000865 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000866 60a1      	SBR  R26,1
                 __DIVW21U3:
000867 959a      	DEC  R25
000868 f799      	BRNE __DIVW21U1
000869 01fd      	MOVW R30,R26
00086a 01d0      	MOVW R26,R0
00086b 9508      	RET
                 
                 __MODW21:
00086c 94e8      	CLT
00086d ffb7      	SBRS R27,7
00086e c004      	RJMP __MODW211
00086f 95a0      	COM  R26
000870 95b0      	COM  R27
000871 9611      	ADIW R26,1
000872 9468      	SET
                 __MODW211:
000873 fdf7      	SBRC R31,7
000874 dfd9      	RCALL __ANEGW1
000875 dfe3      	RCALL __DIVW21U
000876 01fd      	MOVW R30,R26
000877 f40e      	BRTC __MODW212
000878 dfd5      	RCALL __ANEGW1
                 __MODW212:
000879 9508      	RET
                 
                 __SAVELOCR6:
00087a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00087b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00087c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00087d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00087e 931a      	ST   -Y,R17
00087f 930a      	ST   -Y,R16
000880 9508      	RET
                 
                 __LOADLOCR6:
000881 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000882 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000883 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000884 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000885 8119      	LDD  R17,Y+1
000886 8108      	LD   R16,Y
000887 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  29 r1 :   7 r2 :   0 r3 :   0 r4 :  31 r5 :  20 r6 :   0 r7 :  11 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  30 r17:  39 r18:  16 r19:  26 r20:   2 r21:  14 r22:  27 r23:   9 
r24:  34 r25:  17 r26: 219 r27:  98 r28:  23 r29:   1 r30: 327 r31: 117 
x  :  41 y  : 149 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  15 
adiw  :  26 and   :   0 andi  :  13 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  28 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   0 brne  :  67 brpl  :   1 brsh  :   8 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 175 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  34 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  24 cpc   :  26 cpi   :  41 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   1 jmp   :  33 ld    :  71 ldd   :  32 ldi   : 306 
lds   :   0 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  43 movw  :  33 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   0 out   :  31 pop   :   4 push  :   4 rcall :  47 ret   :  43 
reti  :   1 rjmp  :  88 rol   :   6 ror   :   0 sbc   :   2 sbci  :  11 
sbi   :  12 sbic  :   3 sbis  :   2 sbiw  :  27 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  84 std   :   9 sts   :   0 sub   :   4 subi  :  22 swap  :   1 
tst   :   7 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001110   3376    992   4368   32768  13.3%
[.dseg] 0x000060 0x000623      0    963    963    2048  47.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
