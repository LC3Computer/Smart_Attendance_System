
AVRASM ver. 2.1.30  D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm Thu Dec 12 03:50:37 2024

D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _studentCounts=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00f1 	JMP  __RESET
000002 940c 0184 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 3837
00002d 4f39
00002e 3534
00002f 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000030 3231
000031 4333
000032 304c
000033 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x0:
000034 3a31
000035 7573
000036 6d62
000037 7469      	.DB  0x31,0x3A,0x73,0x75,0x62,0x6D,0x69,0x74
000038 7320
000039 7574
00003a 6564
00003b 746e      	.DB  0x20,0x73,0x74,0x75,0x64,0x65,0x6E,0x74
00003c 6320
00003d 646f
00003e 0065
00003f 7270      	.DB  0x20,0x63,0x6F,0x64,0x65,0x0,0x70,0x72
000040 7365
000041 2073
000042 6163
000043 636e      	.DB  0x65,0x73,0x73,0x20,0x63,0x61,0x6E,0x63
000044 6c65
000045 7420
000046 206f
000047 6162      	.DB  0x65,0x6C,0x20,0x74,0x6F,0x20,0x62,0x61
000048 6b63
000049 4500
00004a 746e
00004b 7265      	.DB  0x63,0x6B,0x0,0x45,0x6E,0x74,0x65,0x72
00004c 7920
00004d 756f
00004e 2072
00004f 7473      	.DB  0x20,0x79,0x6F,0x75,0x72,0x20,0x73,0x74
000050 6475
000051 6e65
000052 2074
000053 6f63      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x63,0x6F
000054 6564
000055 003a
000056 754e
000057 626d      	.DB  0x64,0x65,0x3A,0x0,0x4E,0x75,0x6D,0x62
000058 7265
000059 6f20
00005a 2066
00005b 7473      	.DB  0x65,0x72,0x20,0x6F,0x66,0x20,0x73,0x74
00005c 6475
00005d 6e65
00005e 7374
00005f 3a20      	.DB  0x75,0x64,0x65,0x6E,0x74,0x73,0x20,0x3A
000060 0020
000061 7250
000062 7365
000063 2073      	.DB  0x20,0x0,0x50,0x72,0x65,0x73,0x73,0x20
000064 6163
000065 636e
000066 6c65
000067 7420      	.DB  0x63,0x61,0x6E,0x63,0x65,0x6C,0x20,0x74
000068 206f
000069 6f67
00006a 6220
00006b 6361      	.DB  0x6F,0x20,0x67,0x6F,0x20,0x62,0x61,0x63
00006c 006b
00006d 6554
00006e 706d
00006f 4328      	.DB  0x6B,0x0,0x54,0x65,0x6D,0x70,0x28,0x43
000070 3a29
000071 3100
000072 203a
000073 7441      	.DB  0x29,0x3A,0x0,0x31,0x3A,0x20,0x41,0x74
000074 6574
000075 646e
000076 6e61
000077 6563      	.DB  0x74,0x65,0x6E,0x64,0x61,0x6E,0x63,0x65
000078 4920
000079 696e
00007a 6974
00007b 6c61      	.DB  0x20,0x49,0x6E,0x69,0x74,0x69,0x61,0x6C
00007c 7a69
00007d 7461
00007e 6f69
00007f 006e      	.DB  0x69,0x7A,0x61,0x74,0x69,0x6F,0x6E,0x0
000080 3a32
000081 5320
000082 7574
000083 6564      	.DB  0x32,0x3A,0x20,0x53,0x74,0x75,0x64,0x65
000084 746e
000085 4d20
000086 6e61
000087 6761      	.DB  0x6E,0x74,0x20,0x4D,0x61,0x6E,0x61,0x67
000088 6d65
000089 6e65
00008a 0074
00008b 3a33      	.DB  0x65,0x6D,0x65,0x6E,0x74,0x0,0x33,0x3A
00008c 5620
00008d 6569
00008e 2077
00008f 7250      	.DB  0x20,0x56,0x69,0x65,0x77,0x20,0x50,0x72
000090 7365
000091 6e65
000092 2074
000093 7453      	.DB  0x65,0x73,0x65,0x6E,0x74,0x20,0x53,0x74
000094 6475
000095 6e65
000096 7374
000097 0020      	.DB  0x75,0x64,0x65,0x6E,0x74,0x73,0x20,0x0
000098 3a34
000099 5420
00009a 6d65
00009b 6570      	.DB  0x34,0x3A,0x20,0x54,0x65,0x6D,0x70,0x65
00009c 6172
00009d 7574
00009e 6572
00009f 4d20      	.DB  0x72,0x61,0x74,0x75,0x72,0x65,0x20,0x4D
0000a0 6e6f
0000a1 7469
0000a2 726f
0000a3 6e69      	.DB  0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E
0000a4 0067
0000a5 3a35
0000a6 5220
0000a7 7465      	.DB  0x67,0x0,0x35,0x3A,0x20,0x52,0x65,0x74
0000a8 6972
0000a9 7665
0000aa 2065
0000ab 7453      	.DB  0x72,0x69,0x65,0x76,0x65,0x20,0x53,0x74
0000ac 6475
0000ad 6e65
0000ae 2074
0000af 6144      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x44,0x61
0000b0 6174
0000b1 3600
0000b2 203a
0000b3 7254      	.DB  0x74,0x61,0x0,0x36,0x3A,0x20,0x54,0x72
0000b4 6661
0000b5 6966
0000b6 2063
0000b7 6f4d      	.DB  0x61,0x66,0x66,0x69,0x63,0x20,0x4D,0x6F
0000b8 696e
0000b9 6f74
0000ba 6972
0000bb 676e      	.DB  0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E,0x67
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1163): warning: .cseg .db misalignment - padding zero byte
0000bc 0000      	.DB  0x0
                 _0x2000060:
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1165): warning: .cseg .db misalignment - padding zero byte
0000bd 0001      	.DB  0x1
                 _0x2000000:
0000be 4e2d
0000bf 4e41
0000c0 4900
0000c1 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1168): warning: .cseg .db misalignment - padding zero byte
0000c2 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0000c3 0004      	.DW  0x04
0000c4 0004      	.DW  0x04
0000c5 0054      	.DW  __REG_VARS*2
                 
0000c6 0010      	.DW  0x10
0000c7 0371      	.DW  _keypad
0000c8 0058      	.DW  _0x3*2
                 
0000c9 0016      	.DW  0x16
0000ca 0260      	.DW  _0xA
0000cb 0068      	.DW  _0x0*2
                 
0000cc 0015      	.DW  0x15
0000cd 0276      	.DW  _0xA+22
0000ce 007e      	.DW  _0x0*2+22
                 
0000cf 0019      	.DW  0x19
0000d0 028b      	.DW  _0xA+43
0000d1 0093      	.DW  _0x0*2+43
                 
0000d2 0016      	.DW  0x16
0000d3 02a4      	.DW  _0xA+68
0000d4 00ac      	.DW  _0x0*2+68
                 
0000d5 0018      	.DW  0x18
0000d6 02ba      	.DW  _0xA+90
0000d7 00c2      	.DW  _0x0*2+90
                 
0000d8 0009      	.DW  0x09
0000d9 02d2      	.DW  _0x4E
0000da 00da      	.DW  _0x0*2+114
                 
0000db 001d      	.DW  0x1D
0000dc 02db      	.DW  _0x56
0000dd 00e3      	.DW  _0x0*2+123
                 
0000de 0016      	.DW  0x16
0000df 02f8      	.DW  _0x56+29
0000e0 0100      	.DW  _0x0*2+152
                 
0000e1 001a      	.DW  0x1A
0000e2 030e      	.DW  _0x56+51
0000e3 0116      	.DW  _0x0*2+174
                 
0000e4 001a      	.DW  0x1A
0000e5 0328      	.DW  _0x56+77
0000e6 0130      	.DW  _0x0*2+200
                 
0000e7 0019      	.DW  0x19
0000e8 0342      	.DW  _0x56+103
0000e9 014a      	.DW  _0x0*2+226
                 
0000ea 0016      	.DW  0x16
0000eb 035b      	.DW  _0x56+128
0000ec 0163      	.DW  _0x0*2+251
                 
0000ed 0001      	.DW  0x01
0000ee 03a1      	.DW  __seed_G100
0000ef 017a      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0000f0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000f1 94f8      	CLI
0000f2 27ee      	CLR  R30
0000f3 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000f4 e0f1      	LDI  R31,1
0000f5 bffb      	OUT  GICR,R31
0000f6 bfeb      	OUT  GICR,R30
0000f7 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000f8 e08d      	LDI  R24,(14-2)+1
0000f9 e0a2      	LDI  R26,2
0000fa 27bb      	CLR  R27
                 __CLEAR_REG:
0000fb 93ed      	ST   X+,R30
0000fc 958a      	DEC  R24
0000fd f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000fe e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ff e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000100 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000101 93ed      	ST   X+,R30
000102 9701      	SBIW R24,1
000103 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000104 e8e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000105 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000106 9185      	LPM  R24,Z+
000107 9195      	LPM  R25,Z+
000108 9700      	SBIW R24,0
000109 f061      	BREQ __GLOBAL_INI_END
00010a 91a5      	LPM  R26,Z+
00010b 91b5      	LPM  R27,Z+
00010c 9005      	LPM  R0,Z+
00010d 9015      	LPM  R1,Z+
00010e 01bf      	MOVW R22,R30
00010f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000110 9005      	LPM  R0,Z+
000111 920d      	ST   X+,R0
000112 9701      	SBIW R24,1
000113 f7e1      	BRNE __GLOBAL_INI_LOOP
000114 01fb      	MOVW R30,R22
000115 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000116 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000117 bfed      	OUT  SPL,R30
000118 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000119 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00011a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00011b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00011c 940c 011e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void LCM35_init();
                 ;void show_temp();
                 ;void show_menu();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;
                 ;char EEMEM eepromStudentCodes[200] = "";
                 ;unsigned char studentCounts = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;};
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0040 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0041     unsigned char i;
                 ; 0000 0042     KEY_DDR = 0xF0;
                 ;	i -> R17
00011e efe0      	LDI  R30,LOW(240)
00011f bbe4      	OUT  0x14,R30
                 ; 0000 0043     KEY_PRT = 0xFF;
000120 efef      	LDI  R30,LOW(255)
000121 bbe5      	OUT  0x15,R30
                 ; 0000 0044     KEY_PRT &= 0x0F;    // ground all rows at once
000122 b3e5      	IN   R30,0x15
000123 70ef      	ANDI R30,LOW(0xF)
000124 bbe5      	OUT  0x15,R30
                 ; 0000 0045     MCUCR = 0x02;       // make INT0 falling edge triggered
000125 e0e2      	LDI  R30,LOW(2)
000126 bfe5      	OUT  0x35,R30
                 ; 0000 0046     GICR = (1 << INT0); // enable external interrupt 0
000127 e4e0      	LDI  R30,LOW(64)
000128 bfeb      	OUT  0x3B,R30
                 ; 0000 0047     lcd_init();
000129 d144      	RCALL _lcd_init
                 ; 0000 0048 
                 ; 0000 0049 #asm("sei")           // enable interrupts
00012a 9478      	sei
                 ; 0000 004A     lcdCommand(0x01); // clear LCD
00012b e0a1      	LDI  R26,LOW(1)
00012c d124      	RCALL _lcdCommand
                 ; 0000 004B     LCM35_init();
00012d d18d      	RCALL _LCM35_init
                 ; 0000 004C     while (1)
                 _0x4:
                 ; 0000 004D     {
                 ; 0000 004E         if (stage == STAGE_INIT_MENU)
00012e 2c04      	MOV  R0,R4
00012f 2805      	OR   R0,R5
000130 f411      	BRNE _0x7
                 ; 0000 004F         {
                 ; 0000 0050             show_menu();
000131 d1b0      	RCALL _show_menu
                 ; 0000 0051         }
                 ; 0000 0052         else if (stage == STAGE_ATTENDENC_MENU)
000132 c04f      	RJMP _0x8
                 _0x7:
000133 940e 038d 	CALL SUBOPT_0x0
000135 f469      	BRNE _0x9
                 ; 0000 0053         {
                 ; 0000 0054             lcdCommand(0x01);
000136 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0055             lcd_gotoxy(1, 1);
                 ; 0000 0056             lcd_print("1:submit student code");
                +
000138 e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
000139 e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
00013a 940e 039a 	CALL SUBOPT_0x2
                 ; 0000 0057             lcd_gotoxy(1, 2);
                 ; 0000 0058             lcd_print("press cancel to back");
                +
00013c e7a6     +LDI R26 , LOW ( _0xA + ( 22 ) )
00013d e0b2     +LDI R27 , HIGH ( _0xA + ( 22 ) )
                 	__POINTW2MN _0xA,22
00013e d164      	RCALL _lcd_print
                 ; 0000 0059             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
00013f 940e 038d 	CALL SUBOPT_0x0
000141 f3e9      	BREQ _0xB
                 ; 0000 005A                 ;
                 ; 0000 005B         }
                 ; 0000 005C         else if (stage == STAGE_SUBMIT_CODE)
000142 c03f      	RJMP _0xE
                 _0x9:
000143 940e 03a1 	CALL SUBOPT_0x3
000145 f481      	BRNE _0xF
                 ; 0000 005D         {
                 ; 0000 005E             lcdCommand(0x01);
000146 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 005F             lcd_gotoxy(1, 1);
                 ; 0000 0060             lcd_print("Enter your student code:");
                +
000148 e8ab     +LDI R26 , LOW ( _0xA + ( 43 ) )
000149 e0b2     +LDI R27 , HIGH ( _0xA + ( 43 ) )
                 	__POINTW2MN _0xA,43
00014a 940e 039a 	CALL SUBOPT_0x2
                 ; 0000 0061             lcd_gotoxy(1, 2);
                 ; 0000 0062             lcdCommand(0x0f);  // display on, cursor blinking
00014c e0af      	LDI  R26,LOW(15)
00014d 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 0063             delay_us(100 * 8); // wait
                 ; 0000 0064             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
00014f 940e 03a1 	CALL SUBOPT_0x3
000151 f3e9      	BREQ _0x10
                 ; 0000 0065                 ;
                 ; 0000 0066             lcdCommand(0x0c);  // display on, cursor off
000152 e0ac      	LDI  R26,LOW(12)
000153 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 0067             delay_us(100 * 8); // wait
                 ; 0000 0068         }
                 ; 0000 0069         else if (stage == STAGE_TEMPERATURE_MONITORING)
000155 c02c      	RJMP _0x13
                 _0xF:
000156 940e 03ad 	CALL SUBOPT_0x5
000158 f411      	BRNE _0x14
                 ; 0000 006A         {
                 ; 0000 006B             show_temp();
000159 d166      	RCALL _show_temp
                 ; 0000 006C         }
                 ; 0000 006D         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00015a c027      	RJMP _0x15
                 _0x14:
00015b 940e 03b2 	CALL SUBOPT_0x6
00015d f521      	BRNE _0x16
                 ; 0000 006E         {
                 ; 0000 006F             lcdCommand(0x01);
00015e 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0070             lcd_gotoxy(1, 1);
                 ; 0000 0071             lcd_print("Number of students : ");
                +
000160 eaa4     +LDI R26 , LOW ( _0xA + ( 68 ) )
000161 e0b2     +LDI R27 , HIGH ( _0xA + ( 68 ) )
                 	__POINTW2MN _0xA,68
000162 d140      	RCALL _lcd_print
                 ; 0000 0072 
                 ; 0000 0073             for (i = 0; i < studentCounts; i++)
000163 e010      	LDI  R17,LOW(0)
                 _0x18:
000164 1517      	CP   R17,R7
000165 f4b0      	BRSH _0x19
                 ; 0000 0074             {
                 ; 0000 0075                 eeprom_read_block(buffer, (&eepromStudentCodes)+i, 9);
000166 e8e1      	LDI  R30,LOW(_buffer)
000167 e0f3      	LDI  R31,HIGH(_buffer)
000168 93fa      	ST   -Y,R31
000169 93ea      	ST   -Y,R30
00016a eca8      	LDI  R26,LOW(200)
00016b 9f1a      	MUL  R17,R26
00016c 01f0      	MOVW R30,R0
00016d 940e 03b7 	CALL SUBOPT_0x7
00016f 940e 0358 	CALL _eeprom_read_block
                 ; 0000 0076 
                 ; 0000 0077                 lcdCommand(0x01);
000171 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0078                 lcd_gotoxy(1, 1);
                 ; 0000 0079                 lcd_print(buffer);
000173 e8a1      	LDI  R26,LOW(_buffer)
000174 e0b3      	LDI  R27,HIGH(_buffer)
000175 d12d      	RCALL _lcd_print
                 ; 0000 007A                 delay_ms(300);
000176 e2ac      	LDI  R26,LOW(300)
000177 e0b1      	LDI  R27,HIGH(300)
000178 940e 0402 	CALL _delay_ms
                 ; 0000 007B             }
00017a 5f1f      	SUBI R17,-1
00017b cfe8      	RJMP _0x18
                 _0x19:
                 ; 0000 007C             lcd_print("Press cancel to go back");
                +
00017c ebaa     +LDI R26 , LOW ( _0xA + ( 90 ) )
00017d e0b2     +LDI R27 , HIGH ( _0xA + ( 90 ) )
                 	__POINTW2MN _0xA,90
00017e d124      	RCALL _lcd_print
                 ; 0000 007D             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1A:
00017f 940e 03b2 	CALL SUBOPT_0x6
000181 f3e9      	BREQ _0x1A
                 ; 0000 007E                 ;
                 ; 0000 007F         }
                 ; 0000 0080     }
                 _0x16:
                 _0x15:
                 _0x13:
                 _0xE:
                 _0x8:
000182 cfab      	RJMP _0x4
                 ; 0000 0081 }
                 _0x1D:
000183 cfff      	RJMP _0x1D
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0x72
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 0085 {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
000184 920a      	ST   -Y,R0
000185 921a      	ST   -Y,R1
000186 92fa      	ST   -Y,R15
000187 936a      	ST   -Y,R22
000188 937a      	ST   -Y,R23
000189 938a      	ST   -Y,R24
00018a 939a      	ST   -Y,R25
00018b 93aa      	ST   -Y,R26
00018c 93ba      	ST   -Y,R27
00018d 93ea      	ST   -Y,R30
00018e 93fa      	ST   -Y,R31
00018f b7ef      	IN   R30,SREG
000190 93ea      	ST   -Y,R30
                 ; 0000 0086     unsigned char colloc, rowloc, cl , i;
                 ; 0000 0087 
                 ; 0000 0088     // detect the key
                 ; 0000 0089     while (1)
000191 940e 0453 	CALL __SAVELOCR4
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	i -> R18
                 ; 0000 008A     {
                 ; 0000 008B         KEY_PRT = 0xEF;            // ground row 0
000193 eeef      	LDI  R30,LOW(239)
000194 940e 03be 	CALL SUBOPT_0x8
                 ; 0000 008C         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 008D         if (colloc != 0x0F)        // column detected
000196 f011      	BREQ _0x21
                 ; 0000 008E         {
                 ; 0000 008F             rowloc = 0; // save row location
000197 e000      	LDI  R16,LOW(0)
                 ; 0000 0090             break;      // exit while loop
000198 c012      	RJMP _0x20
                 ; 0000 0091         }
                 ; 0000 0092         KEY_PRT = 0xDF;            // ground row 1
                 _0x21:
000199 edef      	LDI  R30,LOW(223)
00019a 940e 03be 	CALL SUBOPT_0x8
                 ; 0000 0093         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0094         if (colloc != 0x0F)        // column detected
00019c f011      	BREQ _0x22
                 ; 0000 0095         {
                 ; 0000 0096             rowloc = 1; // save row location
00019d e001      	LDI  R16,LOW(1)
                 ; 0000 0097             break;      // exit while loop
00019e c00c      	RJMP _0x20
                 ; 0000 0098         }
                 ; 0000 0099         KEY_PRT = 0xBF;            // ground row 2
                 _0x22:
00019f ebef      	LDI  R30,LOW(191)
0001a0 940e 03be 	CALL SUBOPT_0x8
                 ; 0000 009A         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 009B         if (colloc != 0x0F)        // column detected
0001a2 f011      	BREQ _0x23
                 ; 0000 009C         {
                 ; 0000 009D             rowloc = 2; // save row location
0001a3 e002      	LDI  R16,LOW(2)
                 ; 0000 009E             break;      // exit while loop
0001a4 c006      	RJMP _0x20
                 ; 0000 009F         }
                 ; 0000 00A0         KEY_PRT = 0x7F;            // ground row 3
                 _0x23:
0001a5 e7ef      	LDI  R30,LOW(127)
0001a6 bbe5      	OUT  0x15,R30
                 ; 0000 00A1         colloc = (KEY_PIN & 0x0F); // read the columns
0001a7 b3e3      	IN   R30,0x13
0001a8 70ef      	ANDI R30,LOW(0xF)
0001a9 2f1e      	MOV  R17,R30
                 ; 0000 00A2         rowloc = 3;                // save row location
0001aa e003      	LDI  R16,LOW(3)
                 ; 0000 00A3         break;                     // exit while loop
                 ; 0000 00A4     }
                 _0x20:
                 ; 0000 00A5     // check column and send result to Port D
                 ; 0000 00A6     if (colloc == 0x0E)
0001ab 301e      	CPI  R17,14
0001ac f411      	BRNE _0x24
                 ; 0000 00A7         cl = 0;
0001ad e030      	LDI  R19,LOW(0)
                 ; 0000 00A8     else if (colloc == 0x0D)
0001ae c009      	RJMP _0x25
                 _0x24:
0001af 301d      	CPI  R17,13
0001b0 f411      	BRNE _0x26
                 ; 0000 00A9         cl = 1;
0001b1 e031      	LDI  R19,LOW(1)
                 ; 0000 00AA     else if (colloc == 0x0B)
0001b2 c005      	RJMP _0x27
                 _0x26:
0001b3 301b      	CPI  R17,11
0001b4 f411      	BRNE _0x28
                 ; 0000 00AB         cl = 2;
0001b5 e032      	LDI  R19,LOW(2)
                 ; 0000 00AC     else
0001b6 c001      	RJMP _0x29
                 _0x28:
                 ; 0000 00AD         cl = 3;
0001b7 e033      	LDI  R19,LOW(3)
                 ; 0000 00AE 
                 ; 0000 00AF     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x29:
                 _0x27:
                 _0x25:
0001b8 b3e5      	IN   R30,0x15
0001b9 70ef      	ANDI R30,LOW(0xF)
0001ba bbe5      	OUT  0x15,R30
                 ; 0000 00B0 
                 ; 0000 00B1     // inside menu level 1
                 ; 0000 00B2     if (stage == STAGE_INIT_MENU)
0001bb 2c04      	MOV  R0,R4
0001bc 2805      	OR   R0,R5
0001bd f4d9      	BRNE _0x2A
                 ; 0000 00B3     {
                 ; 0000 00B4         switch (keypad[rowloc][cl] - '0')
0001be 940e 03c4 	CALL SUBOPT_0x9
0001c0 97f0      	SBIW R30,48
                 ; 0000 00B5         {
                 ; 0000 00B6         case OPTION_ATTENDENCE:
0001c1 30e1      	CPI  R30,LOW(0x1)
0001c2 e0a0      	LDI  R26,HIGH(0x1)
0001c3 07fa      	CPC  R31,R26
0001c4 f421      	BRNE _0x2E
                 ; 0000 00B7             stage = STAGE_ATTENDENC_MENU;
0001c5 e0e1      	LDI  R30,LOW(1)
0001c6 e0f0      	LDI  R31,HIGH(1)
0001c7 012f      	MOVW R4,R30
                 ; 0000 00B8             break;
0001c8 c00f      	RJMP _0x2D
                 ; 0000 00B9 
                 ; 0000 00BA         case OPTION_TEMPERATURE_MONITORING:
                 _0x2E:
0001c9 30e4      	CPI  R30,LOW(0x4)
0001ca e0a0      	LDI  R26,HIGH(0x4)
0001cb 07fa      	CPC  R31,R26
0001cc f421      	BRNE _0x2F
                 ; 0000 00BB             stage = STAGE_TEMPERATURE_MONITORING;
0001cd e0e3      	LDI  R30,LOW(3)
0001ce e0f0      	LDI  R31,HIGH(3)
0001cf 012f      	MOVW R4,R30
                 ; 0000 00BC             break;
0001d0 c007      	RJMP _0x2D
                 ; 0000 00BD         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x2F:
0001d1 30e3      	CPI  R30,LOW(0x3)
0001d2 e0a0      	LDI  R26,HIGH(0x3)
0001d3 07fa      	CPC  R31,R26
0001d4 f419      	BRNE _0x31
                 ; 0000 00BE             stage = STAGE_VIEW_PRESENT_STUDENTS;
0001d5 e0e4      	LDI  R30,LOW(4)
0001d6 e0f0      	LDI  R31,HIGH(4)
0001d7 012f      	MOVW R4,R30
                 ; 0000 00BF             break;
                 ; 0000 00C0 
                 ; 0000 00C1         default:
                 _0x31:
                 ; 0000 00C2             break;
                 ; 0000 00C3         }
                 _0x2D:
                 ; 0000 00C4     }
                 ; 0000 00C5     else if (stage == STAGE_ATTENDENC_MENU)
0001d8 c067      	RJMP _0x32
                 _0x2A:
0001d9 940e 038d 	CALL SUBOPT_0x0
0001db f489      	BRNE _0x33
                 ; 0000 00C6     {
                 ; 0000 00C7         switch (keypad[rowloc][cl])
0001dc 940e 03c4 	CALL SUBOPT_0x9
                 ; 0000 00C8         {
                 ; 0000 00C9         case 'C':
0001de 34e3      	CPI  R30,LOW(0x43)
0001df e0a0      	LDI  R26,HIGH(0x43)
0001e0 07fa      	CPC  R31,R26
0001e1 f419      	BRNE _0x37
                 ; 0000 00CA             stage = STAGE_INIT_MENU;
0001e2 2444      	CLR  R4
0001e3 2455      	CLR  R5
                 ; 0000 00CB             break;
0001e4 c007      	RJMP _0x36
                 ; 0000 00CC         case '1':
                 _0x37:
0001e5 33e1      	CPI  R30,LOW(0x31)
0001e6 e0a0      	LDI  R26,HIGH(0x31)
0001e7 07fa      	CPC  R31,R26
0001e8 f419      	BRNE _0x39
                 ; 0000 00CD             stage = STAGE_SUBMIT_CODE;
0001e9 e0e2      	LDI  R30,LOW(2)
0001ea e0f0      	LDI  R31,HIGH(2)
0001eb 012f      	MOVW R4,R30
                 ; 0000 00CE             break;
                 ; 0000 00CF         default:
                 _0x39:
                 ; 0000 00D0             break;
                 ; 0000 00D1         }
                 _0x36:
                 ; 0000 00D2     }
                 ; 0000 00D3     else if (stage == STAGE_SUBMIT_CODE)
0001ec c053      	RJMP _0x3A
                 _0x33:
0001ed 940e 03a1 	CALL SUBOPT_0x3
0001ef f5d9      	BRNE _0x3B
                 ; 0000 00D4     {
                 ; 0000 00D5 
                 ; 0000 00D6         if ((keypad[rowloc][cl] - '0') < 10)
0001f0 940e 03c4 	CALL SUBOPT_0x9
0001f2 97fa      	SBIW R30,58
0001f3 f4cc      	BRGE _0x3C
                 ; 0000 00D7         {
                 ; 0000 00D8 
                 ; 0000 00D9             if (strlen(buffer) <= 30)
0001f4 940e 03d2 	CALL SUBOPT_0xA
0001f6 977f      	SBIW R30,31
0001f7 f4a0      	BRSH _0x3D
                 ; 0000 00DA             {
                 ; 0000 00DB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0001f8 940e 03d2 	CALL SUBOPT_0xA
0001fa 57ef      	SUBI R30,LOW(-_buffer)
0001fb 4ffc      	SBCI R31,HIGH(-_buffer)
0001fc 010f      	MOVW R0,R30
0001fd 940e 03d6 	CALL SUBOPT_0xB
0001ff 91ec      	LD   R30,X
000200 01d0      	MOVW R26,R0
000201 93ec      	ST   X,R30
                 ; 0000 00DC                 buffer[strlen(buffer) + 1] = '\0';
000202 940e 03d2 	CALL SUBOPT_0xA
                +
000204 57ee     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000205 4ffc     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000206 e0a0      	LDI  R26,LOW(0)
000207 83a0      	STD  Z+0,R26
                 ; 0000 00DD                 lcdData(keypad[rowloc][cl]);
000208 940e 03d6 	CALL SUBOPT_0xB
00020a 91ac      	LD   R26,X
00020b d04e      	RCALL _lcdData
                 ; 0000 00DE             }
                 ; 0000 00DF         }
                 _0x3D:
                 ; 0000 00E0         else if (keypad[rowloc][cl] == 'E')
00020c c01d      	RJMP _0x3E
                 _0x3C:
00020d 940e 03d6 	CALL SUBOPT_0xB
00020f 91ac      	LD   R26,X
000210 34a5      	CPI  R26,LOW(0x45)
000211 f481      	BRNE _0x3F
                 ; 0000 00E1         {
                 ; 0000 00E2             // save the buffer to EEPROM
                 ; 0000 00E3             eeprom_write_block((const void *)buffer, (eeprom void *)((&eepromStudentCodes)+studentCounts), 9);
000212 e8e1      	LDI  R30,LOW(_buffer)
000213 e0f3      	LDI  R31,HIGH(_buffer)
000214 93fa      	ST   -Y,R31
000215 93ea      	ST   -Y,R30
000216 2de7      	MOV  R30,R7
000217 eca8      	LDI  R26,LOW(200)
000218 9fea      	MUL  R30,R26
000219 01f0      	MOVW R30,R0
00021a 940e 03b7 	CALL SUBOPT_0x7
00021c 940e 0371 	CALL _eeprom_write_block
                 ; 0000 00E4             studentCounts++;
00021e 9473      	INC  R7
                 ; 0000 00E5             stage = STAGE_INIT_MENU;
00021f 2444      	CLR  R4
000220 2455      	CLR  R5
                 ; 0000 00E6         }
                 ; 0000 00E7         else if (keypad[rowloc][cl] == 'C')
000221 c008      	RJMP _0x40
                 _0x3F:
000222 940e 03d6 	CALL SUBOPT_0xB
000224 91ac      	LD   R26,X
000225 34a3      	CPI  R26,LOW(0x43)
000226 f419      	BRNE _0x41
                 ; 0000 00E8             stage = STAGE_ATTENDENC_MENU;
000227 e0e1      	LDI  R30,LOW(1)
000228 e0f0      	LDI  R31,HIGH(1)
000229 012f      	MOVW R4,R30
                 ; 0000 00E9     }
                 _0x41:
                 _0x40:
                 _0x3E:
                 ; 0000 00EA     else if (stage == STAGE_TEMPERATURE_MONITORING)
00022a c015      	RJMP _0x42
                 _0x3B:
00022b 940e 03ad 	CALL SUBOPT_0x5
00022d f441      	BRNE _0x43
                 ; 0000 00EB     {
                 ; 0000 00EC 
                 ; 0000 00ED         if (keypad[rowloc][cl] == 'C')
00022e 940e 03d6 	CALL SUBOPT_0xB
000230 91ac      	LD   R26,X
000231 34a3      	CPI  R26,LOW(0x43)
000232 f411      	BRNE _0x44
                 ; 0000 00EE             stage = STAGE_INIT_MENU;
000233 2444      	CLR  R4
000234 2455      	CLR  R5
                 ; 0000 00EF     }
                 _0x44:
                 ; 0000 00F0     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000235 c00a      	RJMP _0x45
                 _0x43:
000236 940e 03b2 	CALL SUBOPT_0x6
000238 f439      	BRNE _0x46
                 ; 0000 00F1     {
                 ; 0000 00F2         if (keypad[rowloc][cl] == 'C')
000239 940e 03d6 	CALL SUBOPT_0xB
00023b 91ac      	LD   R26,X
00023c 34a3      	CPI  R26,LOW(0x43)
00023d f411      	BRNE _0x47
                 ; 0000 00F3             stage = STAGE_INIT_MENU;
00023e 2444      	CLR  R4
00023f 2455      	CLR  R5
                 ; 0000 00F4     }
                 _0x47:
                 ; 0000 00F5 }
                 _0x46:
                 _0x45:
                 _0x42:
                 _0x3A:
                 _0x32:
000240 940e 0458 	CALL __LOADLOCR4
000242 9624      	ADIW R28,4
000243 91e9      	LD   R30,Y+
000244 bfef      	OUT  SREG,R30
000245 91f9      	LD   R31,Y+
000246 91e9      	LD   R30,Y+
000247 91b9      	LD   R27,Y+
000248 91a9      	LD   R26,Y+
000249 9199      	LD   R25,Y+
00024a 9189      	LD   R24,Y+
00024b 9179      	LD   R23,Y+
00024c 9169      	LD   R22,Y+
00024d 90f9      	LD   R15,Y+
00024e 9019      	LD   R1,Y+
00024f 9009      	LD   R0,Y+
000250 9518      	RETI
                 ; .FEND
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 00F8 {
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 00F9     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000251 940e 03e2 	CALL SUBOPT_0xC
                 ;	cmnd -> Y+0
                 ; 0000 00FA     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
000253 98c0      	CBI  0x18,0
                 ; 0000 00FB     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000254 940e 03eb 	CALL SUBOPT_0xD
                 ; 0000 00FC     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 00FD     delay_us(1);               // wait to make EN wider
                 ; 0000 00FE     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 00FF     delay_us(20);              // wait
                +
000256 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
000257 958a     +DEC R24
000258 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0100     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000259 c005      	RJMP _0x20A0002
                 ; 0000 0101     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0102     delay_us(1);               // wait to make EN wider
                 ; 0000 0103     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0104 }
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 0106 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 0107     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
00025a 940e 03e2 	CALL SUBOPT_0xC
                 ;	data -> Y+0
                 ; 0000 0108     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
00025c 9ac0      	SBI  0x18,0
                 ; 0000 0109     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
00025d 940e 03eb 	CALL SUBOPT_0xD
                 ; 0000 010A     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 010B     delay_us(1);               // wait to make EN wider
                 ; 0000 010C     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 010D     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
                 _0x20A0002:
00025f b3e8      	IN   R30,0x18
000260 70ef      	ANDI R30,LOW(0xF)
000261 2fae      	MOV  R26,R30
000262 81e8      	LD   R30,Y
000263 95e2      	SWAP R30
000264 7fe0      	ANDI R30,0xF0
000265 2bea      	OR   R30,R26
000266 bbe8      	OUT  0x18,R30
                 ; 0000 010E     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
000267 9ac2      	SBI  0x18,2
                 ; 0000 010F     delay_us(1);               // wait to make EN wider
                +
000268 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
000269 958a     +DEC R24
00026a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0110     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
00026b 98c2      	CBI  0x18,2
                 ; 0000 0111 }
00026c 9621      	ADIW R28,1
00026d 9508      	RET
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 0113 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 0114     LCD_DDR = 0xFF;            // LCD port is output
00026e efef      	LDI  R30,LOW(255)
00026f bbe7      	OUT  0x17,R30
                 ; 0000 0115     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000270 98c2      	CBI  0x18,2
                 ; 0000 0116     delay_us(2000);            // wait for stable power
                +
000271 ea80     +LDI R24 , LOW ( 4000 )
000272 e09f     +LDI R25 , HIGH ( 4000 )
                +__DELAY_USW_LOOP :
000273 9701     +SBIW R24 , 1
000274 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 4000
                 ; 0000 0117     lcdCommand(0x33);          //$33 for 4-bit mode
000275 e3a3      	LDI  R26,LOW(51)
000276 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 0118     delay_us(100 * 8);         // wait
                 ; 0000 0119     lcdCommand(0x32);          //$32 for 4-bit mode
000278 e3a2      	LDI  R26,LOW(50)
000279 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 011A     delay_us(100 * 8);         // wait
                 ; 0000 011B     lcdCommand(0x28);          //$28 for 4-bit mode
00027b e2a8      	LDI  R26,LOW(40)
00027c 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 011C     delay_us(100 * 8);         // wait
                 ; 0000 011D     lcdCommand(0x0c);          // display on, cursor off
00027e e0ac      	LDI  R26,LOW(12)
00027f 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 011E     delay_us(100 * 8);         // wait
                 ; 0000 011F     lcdCommand(0x01);          // clear LCD
000281 e0a1      	LDI  R26,LOW(1)
000282 dfce      	RCALL _lcdCommand
                 ; 0000 0120     delay_us(2000);            // wait
                +
000283 ea80     +LDI R24 , LOW ( 4000 )
000284 e09f     +LDI R25 , HIGH ( 4000 )
                +__DELAY_USW_LOOP :
000285 9701     +SBIW R24 , 1
000286 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 4000
                 ; 0000 0121     lcdCommand(0x06);          // shift cursor right
000287 e0a6      	LDI  R26,LOW(6)
000288 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 0122     delay_us(100 * 8);
                 ; 0000 0123 }
00028a 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0125 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 0126     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 0127     lcdCommand(firstCharAdr[y - 1] + x - 1);
00028b 93aa      	ST   -Y,R26
00028c 9724      	SBIW R28,4
00028d e8e0      	LDI  R30,LOW(128)
00028e 83e8      	ST   Y,R30
00028f ece0      	LDI  R30,LOW(192)
000290 83e9      	STD  Y+1,R30
000291 e9e4      	LDI  R30,LOW(148)
000292 83ea      	STD  Y+2,R30
000293 ede4      	LDI  R30,LOW(212)
000294 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000295 81ec      	LDD  R30,Y+4
000296 e0f0      	LDI  R31,0
000297 9731      	SBIW R30,1
000298 01de      	MOVW R26,R28
000299 0fae      	ADD  R26,R30
00029a 1fbf      	ADC  R27,R31
00029b 91ec      	LD   R30,X
00029c 81ad      	LDD  R26,Y+5
00029d 0fae      	ADD  R26,R30
00029e 50a1      	SUBI R26,LOW(1)
00029f 940e 03a6 	CALL SUBOPT_0x4
                 ; 0000 0128     delay_us(100 * 8);
                 ; 0000 0129 }
0002a1 9626      	ADIW R28,6
0002a2 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 012B {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 012C     unsigned char i = 0;
                 ; 0000 012D     while (str[i] != 0)
0002a3 93ba      	ST   -Y,R27
0002a4 93aa      	ST   -Y,R26
0002a5 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0002a6 e010      	LDI  R17,0
                 _0x48:
0002a7 81a9      	LDD  R26,Y+1
0002a8 81ba      	LDD  R27,Y+1+1
0002a9 27ee      	CLR  R30
0002aa 0fa1      	ADD  R26,R17
0002ab 1fbe      	ADC  R27,R30
0002ac 91ec      	LD   R30,X
0002ad 30e0      	CPI  R30,0
0002ae f049      	BREQ _0x4A
                 ; 0000 012E     {
                 ; 0000 012F         lcdData(str[i]);
0002af 81a9      	LDD  R26,Y+1
0002b0 81ba      	LDD  R27,Y+1+1
0002b1 27ee      	CLR  R30
0002b2 0fa1      	ADD  R26,R17
0002b3 1fbe      	ADC  R27,R30
0002b4 91ac      	LD   R26,X
0002b5 dfa4      	RCALL _lcdData
                 ; 0000 0130         i++;
0002b6 5f1f      	SUBI R17,-1
                 ; 0000 0131     }
0002b7 cfef      	RJMP _0x48
                 _0x4A:
                 ; 0000 0132 }
0002b8 8118      	LDD  R17,Y+0
0002b9 9623      	ADIW R28,3
0002ba 9508      	RET
                 ; .FEND
                 ;
                 ;void LCM35_init()
                 ; 0000 0135 {
                 _LCM35_init:
                 ; .FSTART _LCM35_init
                 ; 0000 0136     ADMUX = 0xE0;
0002bb eee0      	LDI  R30,LOW(224)
0002bc b9e7      	OUT  0x7,R30
                 ; 0000 0137     ADCSRA = 0x87;
0002bd e8e7      	LDI  R30,LOW(135)
0002be b9e6      	OUT  0x6,R30
                 ; 0000 0138 }
0002bf 9508      	RET
                 ; .FEND
                 ;
                 ;void show_temp()
                 ; 0000 013B {
                 _show_temp:
                 ; .FSTART _show_temp
                 ; 0000 013C     unsigned char temperatureVal = 0;
                 ; 0000 013D     unsigned char temperatureRep[3];
                 ; 0000 013E 
                 ; 0000 013F     while (stage == STAGE_TEMPERATURE_MONITORING)
0002c0 9723      	SBIW R28,3
0002c1 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
0002c2 e010      	LDI  R17,0
                 _0x4B:
0002c3 940e 03ad 	CALL SUBOPT_0x5
0002c5 f4c9      	BRNE _0x4D
                 ; 0000 0140     {
                 ; 0000 0141         lcdCommand(0x01);
0002c6 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0142         lcd_gotoxy(1, 1);
                 ; 0000 0143         lcd_print("Temp(C):");
                +
0002c8 eda2     +LDI R26 , LOW ( _0x4E + ( 0 ) )
0002c9 e0b2     +LDI R27 , HIGH ( _0x4E + ( 0 ) )
                 	__POINTW2MN _0x4E,0
0002ca dfd8      	RCALL _lcd_print
                 ; 0000 0144         ADCSRA |= (1 << ADSC);
0002cb 9a36      	SBI  0x6,6
                 ; 0000 0145         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x4F:
0002cc 9b34      	SBIS 0x6,4
                 ; 0000 0146             ;
0002cd cffe      	RJMP _0x4F
                 ; 0000 0147         temperatureVal = ADCH;
0002ce b115      	IN   R17,5
                 ; 0000 0148         itoa(temperatureVal, temperatureRep);
0002cf 2fe1      	MOV  R30,R17
0002d0 e0f0      	LDI  R31,0
0002d1 93fa      	ST   -Y,R31
0002d2 93ea      	ST   -Y,R30
0002d3 01de      	MOVW R26,R28
0002d4 9613      	ADIW R26,3
0002d5 940e 031e 	CALL _itoa
                 ; 0000 0149         lcd_print(temperatureRep);
0002d7 01de      	MOVW R26,R28
0002d8 9611      	ADIW R26,1
0002d9 dfc9      	RCALL _lcd_print
                 ; 0000 014A         delay_ms(100);
0002da e6a4      	LDI  R26,LOW(100)
0002db e0b0      	LDI  R27,0
0002dc 940e 0402 	CALL _delay_ms
                 ; 0000 014B     }
0002de cfe4      	RJMP _0x4B
                 _0x4D:
                 ; 0000 014C }
0002df 8118      	LDD  R17,Y+0
0002e0 9624      	ADIW R28,4
0002e1 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x4E:
0002d2           	.BYTE 0x9
                 ;
                 ;void show_menu()
                 ; 0000 014F {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 0150     unsigned char page_num = 0;
                 ; 0000 0151     while (stage == STAGE_INIT_MENU)
0002e2 931a      	ST   -Y,R17
                 ;	page_num -> R17
0002e3 e010      	LDI  R17,0
                 _0x52:
0002e4 2c04      	MOV  R0,R4
0002e5 2805      	OR   R0,R5
0002e6 f5a9      	BRNE _0x54
                 ; 0000 0152     {
                 ; 0000 0153         lcdCommand(0x01);
0002e7 940e 0392 	CALL SUBOPT_0x1
                 ; 0000 0154         lcd_gotoxy(1, 1);
                 ; 0000 0155         if (page_num == 0)
0002e9 3010      	CPI  R17,0
0002ea f461      	BRNE _0x55
                 ; 0000 0156         {
                 ; 0000 0157             lcd_print("1: Attendance Initialization");
                +
0002eb edab     +LDI R26 , LOW ( _0x56 + ( 0 ) )
0002ec e0b2     +LDI R27 , HIGH ( _0x56 + ( 0 ) )
                 	__POINTW2MN _0x56,0
0002ed 940e 039a 	CALL SUBOPT_0x2
                 ; 0000 0158             lcd_gotoxy(1, 2);
                 ; 0000 0159             lcd_print("2: Student Management");
                +
0002ef efa8     +LDI R26 , LOW ( _0x56 + ( 29 ) )
0002f0 e0b2     +LDI R27 , HIGH ( _0x56 + ( 29 ) )
                 	__POINTW2MN _0x56,29
0002f1 940e 03f2 	CALL SUBOPT_0xE
                 ; 0000 015A             if (stage == STAGE_INIT_MENU)
0002f3 f411      	BRNE _0x57
                 ; 0000 015B                 delay_ms(250);
0002f4 940e 03f7 	CALL SUBOPT_0xF
                 ; 0000 015C             page_num = (page_num + 1) % 3;
                 _0x57:
0002f6 c01b      	RJMP _0x5E
                 ; 0000 015D         }
                 ; 0000 015E         else if (page_num == 1)
                 _0x55:
0002f7 3011      	CPI  R17,1
0002f8 f461      	BRNE _0x59
                 ; 0000 015F         {
                 ; 0000 0160             lcd_print("3: View Present Students ");
                +
0002f9 e0ae     +LDI R26 , LOW ( _0x56 + ( 51 ) )
0002fa e0b3     +LDI R27 , HIGH ( _0x56 + ( 51 ) )
                 	__POINTW2MN _0x56,51
0002fb 940e 039a 	CALL SUBOPT_0x2
                 ; 0000 0161             lcd_gotoxy(1, 2);
                 ; 0000 0162             lcd_print("4: Temperature Monitoring");
                +
0002fd e2a8     +LDI R26 , LOW ( _0x56 + ( 77 ) )
0002fe e0b3     +LDI R27 , HIGH ( _0x56 + ( 77 ) )
                 	__POINTW2MN _0x56,77
0002ff 940e 03f2 	CALL SUBOPT_0xE
                 ; 0000 0163             if (stage == STAGE_INIT_MENU)
000301 f411      	BRNE _0x5A
                 ; 0000 0164                 delay_ms(250);
000302 940e 03f7 	CALL SUBOPT_0xF
                 ; 0000 0165             page_num = (page_num + 1) % 3;
                 _0x5A:
000304 c00d      	RJMP _0x5E
                 ; 0000 0166         }
                 ; 0000 0167         else if (page_num == 2)
                 _0x59:
000305 3012      	CPI  R17,2
000306 f4a1      	BRNE _0x5C
                 ; 0000 0168         {
                 ; 0000 0169             lcd_print("5: Retrieve Student Data");
                +
000307 e4a2     +LDI R26 , LOW ( _0x56 + ( 103 ) )
000308 e0b3     +LDI R27 , HIGH ( _0x56 + ( 103 ) )
                 	__POINTW2MN _0x56,103
000309 940e 039a 	CALL SUBOPT_0x2
                 ; 0000 016A             lcd_gotoxy(1, 2);
                 ; 0000 016B             lcd_print("6: Traffic Monitoring");
                +
00030b e5ab     +LDI R26 , LOW ( _0x56 + ( 128 ) )
00030c e0b3     +LDI R27 , HIGH ( _0x56 + ( 128 ) )
                 	__POINTW2MN _0x56,128
00030d 940e 03f2 	CALL SUBOPT_0xE
                 ; 0000 016C             if (stage == STAGE_INIT_MENU)
00030f f411      	BRNE _0x5D
                 ; 0000 016D                 delay_ms(250);
000310 940e 03f7 	CALL SUBOPT_0xF
                 ; 0000 016E             page_num = (page_num + 1) % 3;
                 _0x5D:
                 _0x5E:
000312 2fe1      	MOV  R30,R17
000313 e0f0      	LDI  R31,0
000314 9631      	ADIW R30,1
000315 01df      	MOVW R26,R30
000316 e0e3      	LDI  R30,LOW(3)
000317 e0f0      	LDI  R31,HIGH(3)
000318 940e 0428 	CALL __MODW21
00031a 2f1e      	MOV  R17,R30
                 ; 0000 016F         }
                 ; 0000 0170     }
                 _0x5C:
00031b cfc8      	RJMP _0x52
                 _0x54:
                 ; 0000 0171 }
00031c 9119      	LD   R17,Y+
00031d 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x56:
0002db           	.BYTE 0x96
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00031e 93ba      	ST   -Y,R27
00031f 93aa      	ST   -Y,R26
000320 91a9          ld   r26,y+
000321 91b9          ld   r27,y+
000322 91e9          ld   r30,y+
000323 91f9          ld   r31,y+
000324 9630          adiw r30,0
000325 f42a          brpl __itoa0
000326 95e0          com  r30
000327 95f0          com  r31
000328 9631          adiw r30,1
000329 e26d          ldi  r22,'-'
00032a 936d          st   x+,r22
                 __itoa0:
00032b 94e8          clt
00032c e180          ldi  r24,low(10000)
00032d e297          ldi  r25,high(10000)
00032e d00d          rcall __itoa1
00032f ee88          ldi  r24,low(1000)
000330 e093          ldi  r25,high(1000)
000331 d00a          rcall __itoa1
000332 e684          ldi  r24,100
000333 2799          clr  r25
000334 d007          rcall __itoa1
000335 e08a          ldi  r24,10
000336 d005          rcall __itoa1
000337 2f6e          mov  r22,r30
000338 d010          rcall __itoa5
000339 2766          clr  r22
00033a 936c          st   x,r22
00033b 9508          ret
                 
                 __itoa1:
00033c 2766          clr	 r22
                 __itoa2:
00033d 17e8          cp   r30,r24
00033e 07f9          cpc  r31,r25
00033f f020          brlo __itoa3
000340 9563          inc  r22
000341 1be8          sub  r30,r24
000342 0bf9          sbc  r31,r25
000343 f7c9          brne __itoa2
                 __itoa3:
000344 2366          tst  r22
000345 f411          brne __itoa4
000346 f016          brts __itoa5
000347 9508          ret
                 __itoa4:
000348 9468          set
                 __itoa5:
000349 5d60          subi r22,-0x30
00034a 936d          st   x+,r22
00034b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00034c 93ba      	ST   -Y,R27
00034d 93aa      	ST   -Y,R26
00034e 91a9          ld   r26,y+
00034f 91b9          ld   r27,y+
000350 27ee          clr  r30
000351 27ff          clr  r31
                 strlen0:
000352 916d          ld   r22,x+
000353 2366          tst  r22
000354 f011          breq strlen1
000355 9631          adiw r30,1
000356 cffb          rjmp strlen0
                 strlen1:
000357 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _eeprom_read_block:
                 ; .FSTART _eeprom_read_block
000358 93ba      	ST   -Y,R27
000359 93aa      	ST   -Y,R26
00035a 940e 0453 	CALL __SAVELOCR4
                +
00035c 8508     +LDD R16 , Y + 8
00035d 8519     +LDD R17 , Y + 8 + 1
                 	__GETWRS 16,17,8
                +
00035e 812e     +LDD R18 , Y + 6
00035f 813f     +LDD R19 , Y + 6 + 1
                 	__GETWRS 18,19,6
                 _0x2040003:
000360 940e 03fb 	CALL SUBOPT_0x10
000362 f069      	BREQ _0x2040005
000363 931f      	PUSH R17
000364 930f      	PUSH R16
                +
000365 5f0f     +SUBI R16 , LOW ( - 1 )
000366 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000367 01d9      	MOVW R26,R18
                +
000368 5f2f     +SUBI R18 , LOW ( - 1 )
000369 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00036a 940e 0436 	CALL __EEPROMRDB
00036c 91af      	POP  R26
00036d 91bf      	POP  R27
00036e 93ec      	ST   X,R30
00036f cff0      	RJMP _0x2040003
                 _0x2040005:
000370 c018      	RJMP _0x20A0001
                 ; .FEND
                 _eeprom_write_block:
                 ; .FSTART _eeprom_write_block
000371 93ba      	ST   -Y,R27
000372 93aa      	ST   -Y,R26
000373 940e 0453 	CALL __SAVELOCR4
                +
000375 810e     +LDD R16 , Y + 6
000376 811f     +LDD R17 , Y + 6 + 1
                 	__GETWRS 16,17,6
                +
000377 8528     +LDD R18 , Y + 8
000378 8539     +LDD R19 , Y + 8 + 1
                 	__GETWRS 18,19,8
                 _0x2040006:
000379 940e 03fb 	CALL SUBOPT_0x10
00037b f069      	BREQ _0x2040008
00037c 931f      	PUSH R17
00037d 930f      	PUSH R16
                +
00037e 5f0f     +SUBI R16 , LOW ( - 1 )
00037f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000380 01d9      	MOVW R26,R18
                +
000381 5f2f     +SUBI R18 , LOW ( - 1 )
000382 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000383 91ec      	LD   R30,X
000384 91af      	POP  R26
000385 91bf      	POP  R27
000386 940e 0442 	CALL __EEPROMWRB
000388 cff0      	RJMP _0x2040006
                 _0x2040008:
                 _0x20A0001:
000389 940e 0458 	CALL __LOADLOCR4
00038b 962a      	ADIW R28,10
00038c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000371           	.BYTE 0x10
                 _buffer:
000381           	.BYTE 0x20
                 
                 	.ESEG
                 _eepromStudentCodes:
000000 00
000001 00
000002 00
000003 00        	.DB  0x0,0x0,0x0,0x0
000004 00
000005 00
000006 00
000007 00        	.DB  0x0,0x0,0x0,0x0
000008 00
000009 00
00000a 00
00000b 00        	.DB  0x0,0x0,0x0,0x0
00000c 00
00000d 00
00000e 00
00000f 00        	.DB  0x0,0x0,0x0,0x0
000010 00
000011 00
000012 00
000013 00        	.DB  0x0,0x0,0x0,0x0
000014 00
000015 00
000016 00
000017 00        	.DB  0x0,0x0,0x0,0x0
000018 00
000019 00
00001a 00
00001b 00        	.DB  0x0,0x0,0x0,0x0
00001c 00
00001d 00
00001e 00
00001f 00        	.DB  0x0,0x0,0x0,0x0
000020 00
000021 00
000022 00
000023 00        	.DB  0x0,0x0,0x0,0x0
000024 00
000025 00
000026 00
000027 00        	.DB  0x0,0x0,0x0,0x0
000028 00
000029 00
00002a 00
00002b 00        	.DB  0x0,0x0,0x0,0x0
00002c 00
00002d 00
00002e 00
00002f 00        	.DB  0x0,0x0,0x0,0x0
000030 00
000031 00
000032 00
000033 00        	.DB  0x0,0x0,0x0,0x0
000034 00
000035 00
000036 00
000037 00        	.DB  0x0,0x0,0x0,0x0
000038 00
000039 00
00003a 00
00003b 00        	.DB  0x0,0x0,0x0,0x0
00003c 00
00003d 00
00003e 00
00003f 00        	.DB  0x0,0x0,0x0,0x0
000040 00
000041 00
000042 00
000043 00        	.DB  0x0,0x0,0x0,0x0
000044 00
000045 00
000046 00
000047 00        	.DB  0x0,0x0,0x0,0x0
000048 00
000049 00
00004a 00
00004b 00        	.DB  0x0,0x0,0x0,0x0
00004c 00
00004d 00
00004e 00
00004f 00        	.DB  0x0,0x0,0x0,0x0
000050 00
000051 00
000052 00
000053 00        	.DB  0x0,0x0,0x0,0x0
000054 00
000055 00
000056 00
000057 00        	.DB  0x0,0x0,0x0,0x0
000058 00
000059 00
00005a 00
00005b 00        	.DB  0x0,0x0,0x0,0x0
00005c 00
00005d 00
00005e 00
00005f 00        	.DB  0x0,0x0,0x0,0x0
000060 00
000061 00
000062 00
000063 00        	.DB  0x0,0x0,0x0,0x0
000064 00
000065 00
000066 00
000067 00        	.DB  0x0,0x0,0x0,0x0
000068 00
000069 00
00006a 00
00006b 00        	.DB  0x0,0x0,0x0,0x0
00006c 00
00006d 00
00006e 00
00006f 00        	.DB  0x0,0x0,0x0,0x0
000070 00
000071 00
000072 00
000073 00        	.DB  0x0,0x0,0x0,0x0
000074 00
000075 00
000076 00
000077 00        	.DB  0x0,0x0,0x0,0x0
000078 00
000079 00
00007a 00
00007b 00        	.DB  0x0,0x0,0x0,0x0
00007c 00
00007d 00
00007e 00
00007f 00        	.DB  0x0,0x0,0x0,0x0
000080 00
000081 00
000082 00
000083 00        	.DB  0x0,0x0,0x0,0x0
000084 00
000085 00
000086 00
000087 00        	.DB  0x0,0x0,0x0,0x0
000088 00
000089 00
00008a 00
00008b 00        	.DB  0x0,0x0,0x0,0x0
00008c 00
00008d 00
00008e 00
00008f 00        	.DB  0x0,0x0,0x0,0x0
000090 00
000091 00
000092 00
000093 00        	.DB  0x0,0x0,0x0,0x0
000094 00
000095 00
000096 00
000097 00        	.DB  0x0,0x0,0x0,0x0
000098 00
000099 00
00009a 00
00009b 00        	.DB  0x0,0x0,0x0,0x0
00009c 00
00009d 00
00009e 00
00009f 00        	.DB  0x0,0x0,0x0,0x0
0000a0 00
0000a1 00
0000a2 00
0000a3 00        	.DB  0x0,0x0,0x0,0x0
0000a4 00
0000a5 00
0000a6 00
0000a7 00        	.DB  0x0,0x0,0x0,0x0
0000a8 00
0000a9 00
0000aa 00
0000ab 00        	.DB  0x0,0x0,0x0,0x0
0000ac 00
0000ad 00
0000ae 00
0000af 00        	.DB  0x0,0x0,0x0,0x0
0000b0 00
0000b1 00
0000b2 00
0000b3 00        	.DB  0x0,0x0,0x0,0x0
0000b4 00
0000b5 00
0000b6 00
0000b7 00        	.DB  0x0,0x0,0x0,0x0
0000b8 00
0000b9 00
0000ba 00
0000bb 00        	.DB  0x0,0x0,0x0,0x0
0000bc 00
0000bd 00
0000be 00
0000bf 00        	.DB  0x0,0x0,0x0,0x0
0000c0 00
0000c1 00
0000c2 00
0000c3 00        	.DB  0x0,0x0,0x0,0x0
0000c4 00
0000c5 00
0000c6 00
0000c7 00        	.DB  0x0,0x0,0x0,0x0
                 
                 	.DSEG
                 __seed_G100:
0003a1           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00038d e0e1      	LDI  R30,LOW(1)
00038e e0f0      	LDI  R31,HIGH(1)
00038f 15e4      	CP   R30,R4
000390 05f5      	CPC  R31,R5
000391 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1:
000392 e0a1      	LDI  R26,LOW(1)
000393 940e 0251 	CALL _lcdCommand
000395 e0e1      	LDI  R30,LOW(1)
000396 93ea      	ST   -Y,R30
000397 e0a1      	LDI  R26,LOW(1)
000398 940c 028b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
00039a 940e 02a3 	CALL _lcd_print
00039c e0e1      	LDI  R30,LOW(1)
00039d 93ea      	ST   -Y,R30
00039e e0a2      	LDI  R26,LOW(2)
00039f 940c 028b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0003a1 e0e2      	LDI  R30,LOW(2)
0003a2 e0f0      	LDI  R31,HIGH(2)
0003a3 15e4      	CP   R30,R4
0003a4 05f5      	CPC  R31,R5
0003a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x4:
0003a6 940e 0251 	CALL _lcdCommand
                +
0003a8 e480     +LDI R24 , LOW ( 1600 )
0003a9 e096     +LDI R25 , HIGH ( 1600 )
                +__DELAY_USW_LOOP :
0003aa 9701     +SBIW R24 , 1
0003ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1600
0003ac 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0003ad e0e3      	LDI  R30,LOW(3)
0003ae e0f0      	LDI  R31,HIGH(3)
0003af 15e4      	CP   R30,R4
0003b0 05f5      	CPC  R31,R5
0003b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0003b2 e0e4      	LDI  R30,LOW(4)
0003b3 e0f0      	LDI  R31,HIGH(4)
0003b4 15e4      	CP   R30,R4
0003b5 05f5      	CPC  R31,R5
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003b7 50e0      	SUBI R30,LOW(-_eepromStudentCodes)
0003b8 40f0      	SBCI R31,HIGH(-_eepromStudentCodes)
0003b9 93fa      	ST   -Y,R31
0003ba 93ea      	ST   -Y,R30
0003bb e0a9      	LDI  R26,LOW(9)
0003bc e0b0      	LDI  R27,0
0003bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
0003be bbe5      	OUT  0x15,R30
0003bf b3e3      	IN   R30,0x13
0003c0 70ef      	ANDI R30,LOW(0xF)
0003c1 2f1e      	MOV  R17,R30
0003c2 301f      	CPI  R17,15
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
0003c4 2fe0      	MOV  R30,R16
0003c5 e7a1      	LDI  R26,LOW(_keypad)
0003c6 e0b3      	LDI  R27,HIGH(_keypad)
0003c7 e0f0      	LDI  R31,0
0003c8 940e 0410 	CALL __LSLW2
0003ca 0fae      	ADD  R26,R30
0003cb 1fbf      	ADC  R27,R31
0003cc 27ee      	CLR  R30
0003cd 0fa3      	ADD  R26,R19
0003ce 1fbe      	ADC  R27,R30
0003cf 91ec      	LD   R30,X
0003d0 e0f0      	LDI  R31,0
0003d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003d2 e8a1      	LDI  R26,LOW(_buffer)
0003d3 e0b3      	LDI  R27,HIGH(_buffer)
0003d4 940c 034c 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:42 WORDS
                 SUBOPT_0xB:
0003d6 2fe0      	MOV  R30,R16
0003d7 e7a1      	LDI  R26,LOW(_keypad)
0003d8 e0b3      	LDI  R27,HIGH(_keypad)
0003d9 e0f0      	LDI  R31,0
0003da 940e 0410 	CALL __LSLW2
0003dc 0fae      	ADD  R26,R30
0003dd 1fbf      	ADC  R27,R31
0003de 27ee      	CLR  R30
0003df 0fa3      	ADD  R26,R19
0003e0 1fbe      	ADC  R27,R30
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0003e2 93aa      	ST   -Y,R26
0003e3 b3e8      	IN   R30,0x18
0003e4 70ef      	ANDI R30,LOW(0xF)
0003e5 2fae      	MOV  R26,R30
0003e6 81e8      	LD   R30,Y
0003e7 7fe0      	ANDI R30,LOW(0xF0)
0003e8 2bea      	OR   R30,R26
0003e9 bbe8      	OUT  0x18,R30
0003ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0003eb 98c1      	CBI  0x18,1
0003ec 9ac2      	SBI  0x18,2
                +
0003ed e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0003ee 958a     +DEC R24
0003ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
0003f0 98c2      	CBI  0x18,2
0003f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0003f2 940e 02a3 	CALL _lcd_print
0003f4 2c04      	MOV  R0,R4
0003f5 2805      	OR   R0,R5
0003f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0003f7 efaa      	LDI  R26,LOW(250)
0003f8 e0b0      	LDI  R27,0
0003f9 940c 0402 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0003fb 81ec      	LDD  R30,Y+4
0003fc 81fd      	LDD  R31,Y+4+1
0003fd 9731      	SBIW R30,1
0003fe 83ec      	STD  Y+4,R30
0003ff 83fd      	STD  Y+4+1,R31
000400 9631      	ADIW R30,1
000401 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000402 9610      	adiw r26,0
000403 f039      	breq __delay_ms1
                 __delay_ms0:
000404 95a8      	wdr
                +
000405 ed80     +LDI R24 , LOW ( 0x7D0 )
000406 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000407 9701     +SBIW R24 , 1
000408 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000409 9711      	sbiw r26,1
00040a f7c9      	brne __delay_ms0
                 __delay_ms1:
00040b 9508      	ret
                 
                 __ANEGW1:
00040c 95f1      	NEG  R31
00040d 95e1      	NEG  R30
00040e 40f0      	SBCI R31,0
00040f 9508      	RET
                 
                 __LSLW2:
000410 0fee      	LSL  R30
000411 1fff      	ROL  R31
000412 0fee      	LSL  R30
000413 1fff      	ROL  R31
000414 9508      	RET
                 
                 __DIVW21U:
000415 2400      	CLR  R0
000416 2411      	CLR  R1
000417 e190      	LDI  R25,16
                 __DIVW21U1:
000418 0faa      	LSL  R26
000419 1fbb      	ROL  R27
00041a 1c00      	ROL  R0
00041b 1c11      	ROL  R1
00041c 1a0e      	SUB  R0,R30
00041d 0a1f      	SBC  R1,R31
00041e f418      	BRCC __DIVW21U2
00041f 0e0e      	ADD  R0,R30
000420 1e1f      	ADC  R1,R31
000421 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000422 60a1      	SBR  R26,1
                 __DIVW21U3:
000423 959a      	DEC  R25
000424 f799      	BRNE __DIVW21U1
000425 01fd      	MOVW R30,R26
000426 01d0      	MOVW R26,R0
000427 9508      	RET
                 
                 __MODW21:
000428 94e8      	CLT
000429 ffb7      	SBRS R27,7
00042a c004      	RJMP __MODW211
00042b 95a0      	COM  R26
00042c 95b0      	COM  R27
00042d 9611      	ADIW R26,1
00042e 9468      	SET
                 __MODW211:
00042f fdf7      	SBRC R31,7
000430 dfdb      	RCALL __ANEGW1
000431 dfe3      	RCALL __DIVW21U
000432 01fd      	MOVW R30,R26
000433 f40e      	BRTC __MODW212
000434 dfd7      	RCALL __ANEGW1
                 __MODW212:
000435 9508      	RET
                 
                 __EEPROMRDB:
000436 99e1      	SBIC EECR,EEWE
000437 cffe      	RJMP __EEPROMRDB
000438 93ff      	PUSH R31
000439 b7ff      	IN   R31,SREG
00043a 94f8      	CLI
00043b bbae      	OUT  EEARL,R26
00043c bbbf      	OUT  EEARH,R27
00043d 9ae0      	SBI  EECR,EERE
00043e b3ed      	IN   R30,EEDR
00043f bfff      	OUT  SREG,R31
000440 91ff      	POP  R31
000441 9508      	RET
                 
                 __EEPROMWRB:
000442 9be1      	SBIS EECR,EEWE
000443 c002      	RJMP __EEPROMWRB1
000444 95a8      	WDR
000445 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
000446 b79f      	IN   R25,SREG
000447 94f8      	CLI
000448 bbae      	OUT  EEARL,R26
000449 bbbf      	OUT  EEARH,R27
00044a 9ae0      	SBI  EECR,EERE
00044b b38d      	IN   R24,EEDR
00044c 17e8      	CP   R30,R24
00044d f019      	BREQ __EEPROMWRB0
00044e bbed      	OUT  EEDR,R30
00044f 9ae2      	SBI  EECR,EEMWE
000450 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000451 bf9f      	OUT  SREG,R25
000452 9508      	RET
                 
                 __SAVELOCR4:
000453 933a      	ST   -Y,R19
                 __SAVELOCR3:
000454 932a      	ST   -Y,R18
                 __SAVELOCR2:
000455 931a      	ST   -Y,R17
000456 930a      	ST   -Y,R16
000457 9508      	RET
                 
                 __LOADLOCR4:
000458 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000459 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00045a 8119      	LDD  R17,Y+1
00045b 8108      	LD   R16,Y
00045c 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  23 r1 :   7 r2 :   0 r3 :   0 r4 :  17 r5 :  12 r6 :   0 r7 :   3 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  14 r17:  37 r18:   8 r19:  12 r20:   0 r21:   0 r22:  16 r23:   2 
r24:  31 r25:  17 r26: 110 r27:  47 r28:  12 r29:   1 r30: 172 r31:  60 
x  :  20 y  :  90 z  :   8 
Registers used: 23 out of 35 (65.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :   9 
adiw  :  15 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  44 brpl  :   1 brsh  :   2 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  79 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  21 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   7 cpc   :  10 cpi   :  17 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  12 inc   :   2 jmp   :  26 ld    :  34 ldd   :  21 ldi   : 150 
lds   :   0 lpm   :   7 lsl   :   3 lsr   :   0 mov   :  15 movw  :  21 
mul   :   2 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   6 
ori   :   0 out   :  27 pop   :   5 push  :   5 rcall :  22 ret   :  34 
reti  :   1 rjmp  :  39 rol   :   5 ror   :   0 sbc   :   2 sbci  :   8 
sbi   :   8 sbic  :   1 sbis  :   2 sbiw  :  15 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  50 std   :   6 sts   :   0 sub   :   2 subi  :  11 swap  :   1 
tst   :   2 wdr   :   2 
Instructions used: 62 out of 116 (53.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0008ba   1836    398   2234   32768   6.8%
[.dseg] 0x000060 0x0003a5      0    325    325    2048  15.9%
[.eseg] 0x000000 0x0000c8      0    200    200    1024  19.5%

Assembly complete, 0 errors, 6 warnings
