
AVRASM ver. 2.1.30  D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm Wed Dec 11 21:35:44 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0045 	JMP  __RESET
000002 940c 008a 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 3837
00002b 4f39
00002c 3534
00002d 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00002e 3231
00002f 4333
000030 304c
000031 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x0:
000032 756e
000033 316d
000034 003a      	.DB  0x6E,0x75,0x6D,0x31,0x3A,0x0
                 _0x2000060:
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1122): warning: .cseg .db misalignment - padding zero byte
000035 0001      	.DB  0x1
                 _0x2000000:
000036 4e2d
000037 4e41
000038 4900
000039 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1125): warning: .cseg .db misalignment - padding zero byte
00003a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003b 0010      	.DW  0x10
00003c 0266      	.DW  _keypad
00003d 0054      	.DW  _0x3*2
                 
00003e 0006      	.DW  0x06
00003f 0260      	.DW  _0x4
000040 0064      	.DW  _0x0*2
                 
000041 0001      	.DW  0x01
000042 0276      	.DW  __seed_G100
000043 006a      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000044 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000045 94f8      	CLI
000046 27ee      	CLR  R30
000047 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000048 e0f1      	LDI  R31,1
000049 bffb      	OUT  GICR,R31
00004a bfeb      	OUT  GICR,R30
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004c e08d      	LDI  R24,(14-2)+1
00004d e0a2      	LDI  R26,2
00004e 27bb      	CLR  R27
                 __CLEAR_REG:
00004f 93ed      	ST   X+,R30
000050 958a      	DEC  R24
000051 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000052 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000053 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000054 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000055 93ed      	ST   X+,R30
000056 9701      	SBIW R24,1
000057 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000058 e7e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000059 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005a 9185      	LPM  R24,Z+
00005b 9195      	LPM  R25,Z+
00005c 9700      	SBIW R24,0
00005d f061      	BREQ __GLOBAL_INI_END
00005e 91a5      	LPM  R26,Z+
00005f 91b5      	LPM  R27,Z+
000060 9005      	LPM  R0,Z+
000061 9015      	LPM  R1,Z+
000062 01bf      	MOVW R22,R30
000063 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000064 9005      	LPM  R0,Z+
000065 920d      	ST   X+,R0
000066 9701      	SBIW R24,1
000067 f7e1      	BRNE __GLOBAL_INI_LOOP
000068 01fb      	MOVW R30,R22
000069 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006a e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006b bfed      	OUT  SPL,R30
00006c e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006e e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006f e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000070 940c 0072 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define LCD_PRT PORTB   // LCD DATA PORT
                 ;#define LCD_DDR DDRB    // LCD DATA DDR
                 ;#define LCD_PIN PINB    // LCD DATA PIN
                 ;#define LCD_RS 0        // LCD RS
                 ;#define LCD_RW 1        // LCD RW
                 ;#define LCD_EN 2        // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;
                 ;void lcdCommand( unsigned char cmnd );
                 ;void lcdData( unsigned char data );
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print( char * str );
                 ;
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0025 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0026     KEY_DDR = 0xF0;
000072 efe0      	LDI  R30,LOW(240)
000073 bbe4      	OUT  0x14,R30
                 ; 0000 0027     KEY_PRT = 0xFF;
000074 efef      	LDI  R30,LOW(255)
000075 bbe5      	OUT  0x15,R30
                 ; 0000 0028     KEY_PRT &= 0x0F;// ground all rows at once
000076 b3e5      	IN   R30,0x15
000077 70ef      	ANDI R30,LOW(0xF)
000078 bbe5      	OUT  0x15,R30
                 ; 0000 0029     MCUCR = 0x02; //make INT0 falling edge triggered
000079 e0e2      	LDI  R30,LOW(2)
00007a bfe5      	OUT  0x35,R30
                 ; 0000 002A     GICR = (1<<INT0); //enable external interrupt 0
00007b e4e0      	LDI  R30,LOW(64)
00007c bfeb      	OUT  0x3B,R30
                 ; 0000 002B     lcd_init();
00007d d07e      	RCALL _lcd_init
                 ; 0000 002C 
                 ; 0000 002D 
                 ; 0000 002E     #asm("sei") //enable interrupts
00007e 9478      	sei
                 ; 0000 002F     lcdCommand(0x01); //clear LCD
00007f e0a1      	LDI  R26,LOW(1)
000080 d05e      	RCALL _lcdCommand
                 ; 0000 0030     lcd_gotoxy(1,1);
000081 e0e1      	LDI  R30,LOW(1)
000082 93ea      	ST   -Y,R30
000083 e0a1      	LDI  R26,LOW(1)
000084 d094      	RCALL _lcd_gotoxy
                 ; 0000 0031     lcd_print("num1:");
                +
000085 e6a0     +LDI R26 , LOW ( _0x4 + ( 0 ) )
000086 e0b2     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
000087 d0a9      	RCALL _lcd_print
                 ; 0000 0032     while(1);
                 _0x5:
000088 cfff      	RJMP _0x5
                 ; 0000 0033 
                 ; 0000 0034 
                 ; 0000 0035 }
                 _0x8:
000089 cfff      	RJMP _0x8
                 ; .FEND
                 
                 	.DSEG
                 _0x4:
000260           	.BYTE 0x6
                 ;
                 ;
                 ;
                 ;//int0 (keypad) service routine
                 ;interrupt [EXT_INT0] void int0_routine(void){
                 ; 0000 003A interrupt [2] void int0_routine(void){
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
00008a 920a      	ST   -Y,R0
00008b 921a      	ST   -Y,R1
00008c 92fa      	ST   -Y,R15
00008d 936a      	ST   -Y,R22
00008e 937a      	ST   -Y,R23
00008f 938a      	ST   -Y,R24
000090 939a      	ST   -Y,R25
000091 93aa      	ST   -Y,R26
000092 93ba      	ST   -Y,R27
000093 93ea      	ST   -Y,R30
000094 93fa      	ST   -Y,R31
000095 b7ef      	IN   R30,SREG
000096 93ea      	ST   -Y,R30
                 ; 0000 003B     unsigned char colloc, rowloc , cl;
                 ; 0000 003C 
                 ; 0000 003D     //detect the key
                 ; 0000 003E       while (1)
000097 940e 016b 	CALL __SAVELOCR4
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ; 0000 003F         {
                 ; 0000 0040             KEY_PRT = 0xEF;            // ground row 0
000099 eeef      	LDI  R30,LOW(239)
00009a 940e 0149 	CALL SUBOPT_0x0
                 ; 0000 0041             colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0042             if (colloc != 0x0F)        // column detected
00009c f011      	BREQ _0xC
                 ; 0000 0043             {
                 ; 0000 0044                 rowloc = 0; // save row location
00009d e000      	LDI  R16,LOW(0)
                 ; 0000 0045                 break;      // exit while loop
00009e c012      	RJMP _0xB
                 ; 0000 0046             }
                 ; 0000 0047             KEY_PRT = 0xDF;            // ground row 1
                 _0xC:
00009f edef      	LDI  R30,LOW(223)
0000a0 940e 0149 	CALL SUBOPT_0x0
                 ; 0000 0048             colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0049             if (colloc != 0x0F)        // column detected
0000a2 f011      	BREQ _0xD
                 ; 0000 004A             {
                 ; 0000 004B                 rowloc = 1; // save row location
0000a3 e001      	LDI  R16,LOW(1)
                 ; 0000 004C                 break;      // exit while loop
0000a4 c00c      	RJMP _0xB
                 ; 0000 004D             }
                 ; 0000 004E             KEY_PRT = 0xBF;            // ground row 2
                 _0xD:
0000a5 ebef      	LDI  R30,LOW(191)
0000a6 940e 0149 	CALL SUBOPT_0x0
                 ; 0000 004F             colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0050             if (colloc != 0x0F)        // column detected
0000a8 f011      	BREQ _0xE
                 ; 0000 0051             {
                 ; 0000 0052                 rowloc = 2; // save row location
0000a9 e002      	LDI  R16,LOW(2)
                 ; 0000 0053                 break;      // exit while loop
0000aa c006      	RJMP _0xB
                 ; 0000 0054             }
                 ; 0000 0055             KEY_PRT = 0x7F;            // ground row 3
                 _0xE:
0000ab e7ef      	LDI  R30,LOW(127)
0000ac bbe5      	OUT  0x15,R30
                 ; 0000 0056             colloc = (KEY_PIN & 0x0F); // read the columns
0000ad b3e3      	IN   R30,0x13
0000ae 70ef      	ANDI R30,LOW(0xF)
0000af 2f1e      	MOV  R17,R30
                 ; 0000 0057             rowloc = 3;                // save row location
0000b0 e003      	LDI  R16,LOW(3)
                 ; 0000 0058             break;                     // exit while loop
                 ; 0000 0059         }
                 _0xB:
                 ; 0000 005A         // check column and send result to Port D
                 ; 0000 005B         if (colloc == 0x0E)
0000b1 301e      	CPI  R17,14
0000b2 f411      	BRNE _0xF
                 ; 0000 005C             cl=0;
0000b3 e030      	LDI  R19,LOW(0)
                 ; 0000 005D         else if (colloc == 0x0D)
0000b4 c009      	RJMP _0x10
                 _0xF:
0000b5 301d      	CPI  R17,13
0000b6 f411      	BRNE _0x11
                 ; 0000 005E              cl=1;
0000b7 e031      	LDI  R19,LOW(1)
                 ; 0000 005F         else if (colloc == 0x0B)
0000b8 c005      	RJMP _0x12
                 _0x11:
0000b9 301b      	CPI  R17,11
0000ba f411      	BRNE _0x13
                 ; 0000 0060               cl=2;
0000bb e032      	LDI  R19,LOW(2)
                 ; 0000 0061         else
0000bc c001      	RJMP _0x14
                 _0x13:
                 ; 0000 0062             cl=3;
0000bd e033      	LDI  R19,LOW(3)
                 ; 0000 0063 
                 ; 0000 0064     KEY_PRT &= 0x0F;// ground all rows at once
                 _0x14:
                 _0x12:
                 _0x10:
0000be b3e5      	IN   R30,0x15
0000bf 70ef      	ANDI R30,LOW(0xF)
0000c0 bbe5      	OUT  0x15,R30
                 ; 0000 0065 
                 ; 0000 0066    lcdData(keypad[rowloc][cl]); //send the character to lcd
0000c1 2fe0      	MOV  R30,R16
0000c2 e6a6      	LDI  R26,LOW(_keypad)
0000c3 e0b2      	LDI  R27,HIGH(_keypad)
0000c4 e0f0      	LDI  R31,0
0000c5 940e 0166 	CALL __LSLW2
0000c7 0fae      	ADD  R26,R30
0000c8 1fbf      	ADC  R27,R31
0000c9 27ee      	CLR  R30
0000ca 0fa3      	ADD  R26,R19
0000cb 1fbe      	ADC  R27,R30
0000cc 91ac      	LD   R26,X
0000cd d01a      	RCALL _lcdData
                 ; 0000 0067 
                 ; 0000 0068 }
0000ce 940e 0170 	CALL __LOADLOCR4
0000d0 9624      	ADIW R28,4
0000d1 91e9      	LD   R30,Y+
0000d2 bfef      	OUT  SREG,R30
0000d3 91f9      	LD   R31,Y+
0000d4 91e9      	LD   R30,Y+
0000d5 91b9      	LD   R27,Y+
0000d6 91a9      	LD   R26,Y+
0000d7 9199      	LD   R25,Y+
0000d8 9189      	LD   R24,Y+
0000d9 9179      	LD   R23,Y+
0000da 9169      	LD   R22,Y+
0000db 90f9      	LD   R15,Y+
0000dc 9019      	LD   R1,Y+
0000dd 9009      	LD   R0,Y+
0000de 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 006C {
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 006D     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0000df 940e 014f 	CALL SUBOPT_0x1
                 ;	cmnd -> Y+0
                 ; 0000 006E     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0000e1 98c0      	CBI  0x18,0
                 ; 0000 006F     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0000e2 940e 0158 	CALL SUBOPT_0x2
                 ; 0000 0070     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0071     delay_us(1);               // wait to make EN wider
                 ; 0000 0072     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0073     delay_us(20);              // wait
                +
0000e4 e385     +LDI R24 , LOW ( 53 )
                +__DELAY_USB_LOOP :
0000e5 958a     +DEC R24
0000e6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 53
                 ; 0000 0074     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0000e7 c005      	RJMP _0x2080001
                 ; 0000 0075     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0076     delay_us(1);               // wait to make EN wider
                 ; 0000 0077     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0078 }
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 007A {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 007B     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0000e8 940e 014f 	CALL SUBOPT_0x1
                 ;	data -> Y+0
                 ; 0000 007C     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0000ea 9ac0      	SBI  0x18,0
                 ; 0000 007D     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0000eb 940e 0158 	CALL SUBOPT_0x2
                 ; 0000 007E     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 007F     delay_us(1);               // wait to make EN wider
                 ; 0000 0080     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0081     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
                 _0x2080001:
0000ed b3e8      	IN   R30,0x18
0000ee 70ef      	ANDI R30,LOW(0xF)
0000ef 2fae      	MOV  R26,R30
0000f0 81e8      	LD   R30,Y
0000f1 95e2      	SWAP R30
0000f2 7fe0      	ANDI R30,0xF0
0000f3 2bea      	OR   R30,R26
0000f4 bbe8      	OUT  0x18,R30
                 ; 0000 0082     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
0000f5 9ac2      	SBI  0x18,2
                 ; 0000 0083     delay_us(1);               // wait to make EN wider
                +
0000f6 e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
                 ; 0000 0084     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
0000f9 98c2      	CBI  0x18,2
                 ; 0000 0085 }
0000fa 9621      	ADIW R28,1
0000fb 9508      	RET
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 0087 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 0088     LCD_DDR = 0xFF;            // LCD port is output
0000fc efef      	LDI  R30,LOW(255)
0000fd bbe7      	OUT  0x17,R30
                 ; 0000 0089     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0000fe 98c2      	CBI  0x18,2
                 ; 0000 008A     delay_us(2000);            // wait for stable power
                +
0000ff ea80     +LDI R24 , LOW ( 4000 )
000100 e09f     +LDI R25 , HIGH ( 4000 )
                +__DELAY_USW_LOOP :
000101 9701     +SBIW R24 , 1
000102 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 4000
                 ; 0000 008B     lcdCommand(0x33);          //$33 for 4-bit mode
000103 e3a3      	LDI  R26,LOW(51)
000104 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 008C     delay_us(100 * 8);             // wait
                 ; 0000 008D     lcdCommand(0x32);          //$32 for 4-bit mode
000106 e3a2      	LDI  R26,LOW(50)
000107 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 008E     delay_us(100 * 8);             // wait
                 ; 0000 008F     lcdCommand(0x28);          //$28 for 4-bit mode
000109 e2a8      	LDI  R26,LOW(40)
00010a 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 0090     delay_us(100 * 8);             // wait
                 ; 0000 0091     lcdCommand(0x0e);          // display on, cursor on
00010c e0ae      	LDI  R26,LOW(14)
00010d 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 0092     delay_us(100 * 8);             // wait
                 ; 0000 0093     lcdCommand(0x01);          // clear LCD
00010f e0a1      	LDI  R26,LOW(1)
000110 dfce      	RCALL _lcdCommand
                 ; 0000 0094     delay_us(2000);            // wait
                +
000111 ea80     +LDI R24 , LOW ( 4000 )
000112 e09f     +LDI R25 , HIGH ( 4000 )
                +__DELAY_USW_LOOP :
000113 9701     +SBIW R24 , 1
000114 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 4000
                 ; 0000 0095     lcdCommand(0x06);          // shift cursor right
000115 e0a6      	LDI  R26,LOW(6)
000116 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 0096     delay_us(100 * 8);
                 ; 0000 0097 }
000118 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0099 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 009A     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 009B     lcdCommand(firstCharAdr[y - 1] + x - 1);
000119 93aa      	ST   -Y,R26
00011a 9724      	SBIW R28,4
00011b e8e0      	LDI  R30,LOW(128)
00011c 83e8      	ST   Y,R30
00011d ece0      	LDI  R30,LOW(192)
00011e 83e9      	STD  Y+1,R30
00011f e9e4      	LDI  R30,LOW(148)
000120 83ea      	STD  Y+2,R30
000121 ede4      	LDI  R30,LOW(212)
000122 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000123 81ec      	LDD  R30,Y+4
000124 e0f0      	LDI  R31,0
000125 9731      	SBIW R30,1
000126 01de      	MOVW R26,R28
000127 0fae      	ADD  R26,R30
000128 1fbf      	ADC  R27,R31
000129 91ec      	LD   R30,X
00012a 81ad      	LDD  R26,Y+5
00012b 0fae      	ADD  R26,R30
00012c 50a1      	SUBI R26,LOW(1)
00012d 940e 015f 	CALL SUBOPT_0x3
                 ; 0000 009C     delay_us(100 * 8);
                 ; 0000 009D }
00012f 9626      	ADIW R28,6
000130 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 009F {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 00A0     unsigned char i = 0;
                 ; 0000 00A1     while (str[i] != 0)
000131 93ba      	ST   -Y,R27
000132 93aa      	ST   -Y,R26
000133 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000134 e010      	LDI  R17,0
                 _0x15:
000135 81a9      	LDD  R26,Y+1
000136 81ba      	LDD  R27,Y+1+1
000137 27ee      	CLR  R30
000138 0fa1      	ADD  R26,R17
000139 1fbe      	ADC  R27,R30
00013a 91ec      	LD   R30,X
00013b 30e0      	CPI  R30,0
00013c f049      	BREQ _0x17
                 ; 0000 00A2     {
                 ; 0000 00A3         lcdData(str[i]);
00013d 81a9      	LDD  R26,Y+1
00013e 81ba      	LDD  R27,Y+1+1
00013f 27ee      	CLR  R30
000140 0fa1      	ADD  R26,R17
000141 1fbe      	ADC  R27,R30
000142 91ac      	LD   R26,X
000143 dfa4      	RCALL _lcdData
                 ; 0000 00A4         i++;
000144 5f1f      	SUBI R17,-1
                 ; 0000 00A5     }
000145 cfef      	RJMP _0x15
                 _0x17:
                 ; 0000 00A6 }
000146 8118      	LDD  R17,Y+0
000147 9623      	ADIW R28,3
000148 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000266           	.BYTE 0x10
                 __seed_G100:
000276           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000149 bbe5      	OUT  0x15,R30
00014a b3e3      	IN   R30,0x13
00014b 70ef      	ANDI R30,LOW(0xF)
00014c 2f1e      	MOV  R17,R30
00014d 301f      	CPI  R17,15
00014e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
00014f 93aa      	ST   -Y,R26
000150 b3e8      	IN   R30,0x18
000151 70ef      	ANDI R30,LOW(0xF)
000152 2fae      	MOV  R26,R30
000153 81e8      	LD   R30,Y
000154 7fe0      	ANDI R30,LOW(0xF0)
000155 2bea      	OR   R30,R26
000156 bbe8      	OUT  0x18,R30
000157 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000158 98c1      	CBI  0x18,1
000159 9ac2      	SBI  0x18,2
                +
00015a e083     +LDI R24 , LOW ( 3 )
                +__DELAY_USB_LOOP :
00015b 958a     +DEC R24
00015c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 3
00015d 98c2      	CBI  0x18,2
00015e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3:
00015f 940e 00df 	CALL _lcdCommand
                +
000161 e480     +LDI R24 , LOW ( 1600 )
000162 e096     +LDI R25 , HIGH ( 1600 )
                +__DELAY_USW_LOOP :
000163 9701     +SBIW R24 , 1
000164 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 1600
000165 9508      	RET
                 
                 
                 	.CSEG
                 __LSLW2:
000166 0fee      	LSL  R30
000167 1fff      	ROL  R31
000168 0fee      	LSL  R30
000169 1fff      	ROL  R31
00016a 9508      	RET
                 
                 __SAVELOCR4:
00016b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00016c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00016d 931a      	ST   -Y,R17
00016e 930a      	ST   -Y,R16
00016f 9508      	RET
                 
                 __LOADLOCR4:
000170 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000171 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000172 8119      	LDD  R17,Y+1
000173 8108      	LD   R16,Y
000174 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:   7 r17:  14 r18:   2 r19:   7 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  21 r25:   7 r26:  35 r27:  14 r28:   7 r29:   1 r30:  90 r31:  11 
x  :   7 y  :  51 z  :   7 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   6 
adiw  :   4 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  12 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  17 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   0 cpc   :   0 cpi   :   5 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   0 jmp   :  22 ld    :  19 ldd   :  10 ldi   :  58 
lds   :   0 lpm   :   7 lsl   :   2 lsr   :   0 mov   :   5 movw  :   4 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   0 out   :  18 pop   :   0 push  :   0 rcall :   7 ret   :  11 
reti  :   1 rjmp  :  11 rol   :   2 ror   :   0 sbc   :   0 sbci  :   0 
sbi   :   3 sbic  :   0 sbis  :   0 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   3 sts   :   0 sub   :   0 subi  :   2 swap  :   1 
tst   :   0 wdr   :   0 
Instructions used: 35 out of 116 (30.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002ea    692     54    746   32768   2.3%
[.dseg] 0x000060 0x00027a      0     26     26    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
