
AVRASM ver. 2.1.30  C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm Sat Dec 14 07:56:04 2024

C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 	.DEF _logged_in=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 02cd 	JMP  __RESET
000002 940c 0422 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002d 3837
00002e 4f39
00002f 3534
000030 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000031 3231
000032 4333
000033 304c
000034 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x4:
000035 0f64      	.DB  0x64,0xF
                 _0x125:
000036 ffff      	.DB  0xFF,0xFF
                 _0x0:
000037 2031
000038 203a
000039 7553
00003a 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
00003b 7469
00003c 5320
00003d 7574
00003e 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003f 746e
000040 4320
000041 646f
000042 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000043 2020
000044 2020
000045 7270
000046 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000047 2073
000048 6163
000049 636e
00004a 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
00004b 7420
00004c 206f
00004d 6162
00004e 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004f 4500
000050 746e
000051 7265
000052 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000053 756f
000054 2072
000055 7473
000056 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000057 6e65
000058 2074
000059 6f63
00005a 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
00005b 003a
00005c 754e
00005d 626d
00005e 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005f 6f20
000060 2066
000061 7473
000062 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
000063 6e65
000064 7374
000065 3a20
000066 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000067 7250
000068 7365
000069 2073
00006a 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
00006b 636e
00006c 6c65
00006d 5420
00006e 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006f 6f47
000070 4220
000071 6361
000072 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
000073 7453
000074 7261
000075 2074
000076 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000077 6e61
000078 6673
000079 7265
00007a 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
00007b 676e
00007c 2e2e
00007d 002e
00007e 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007f 7261
000080 2074
000081 7254
000082 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
000083 6d73
000084 7469
000085 4620
000086 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
000087 7369
000088 6568
000089 0064
00008a 3a31      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x3A
00008b 5320
00008c 6165
00008d 6372
00008e 2068      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x20
00008f 7453
000090 6475
000091 6e65
000092 0074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x0
000093 3a32
000094 4420
000095 6c65
000096 7465      	.DB  0x32,0x3A,0x20,0x44,0x65,0x6C,0x65,0x74
000097 2065
000098 7453
000099 6475
00009a 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
00009b 0074
00009c 6e45
00009d 6574
00009e 2072      	.DB  0x74,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00009f 7453
0000a0 6475
0000a1 6e65
0000a2 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a3 6f43
0000a4 6564
0000a5 4620
0000a6 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a7 5320
0000a8 6165
0000a9 6372
0000aa 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000ab 4500
0000ac 746e
0000ad 7265
0000ae 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
0000af 7574
0000b0 6564
0000b1 746e
0000b2 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000b3 646f
0000b4 2065
0000b5 6f46
0000b6 2072      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x20
0000b7 6544
0000b8 656c
0000b9 6574
0000ba 003a      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x3A,0x0
0000bb 6e45
0000bc 6574
0000bd 2072
0000be 6553      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x53,0x65
0000bf 7263
0000c0 7465
0000c1 4320
0000c2 646f      	.DB  0x63,0x72,0x65,0x74,0x20,0x43,0x6F,0x64
0000c3 2065
0000c4 6f28
0000c5 2072
0000c6 6163      	.DB  0x65,0x20,0x28,0x6F,0x72,0x20,0x63,0x61
0000c7 636e
0000c8 6c65
0000c9 0029
0000ca 2031      	.DB  0x6E,0x63,0x65,0x6C,0x29,0x0,0x31,0x20
0000cb 203a
0000cc 6c43
0000cd 6165
0000ce 2072      	.DB  0x3A,0x20,0x43,0x6C,0x65,0x61,0x72,0x20
0000cf 4545
0000d0 5250
0000d1 4d4f
0000d2 4c00      	.DB  0x45,0x45,0x50,0x52,0x4F,0x4D,0x0,0x4C
0000d3 676f
0000d4 756f
0000d5 2074
0000d6 2e2e      	.DB  0x6F,0x67,0x6F,0x75,0x74,0x20,0x2E,0x2E
0000d7 002e
0000d8 6f47
0000d9 6e69
0000da 2067      	.DB  0x2E,0x0,0x47,0x6F,0x69,0x6E,0x67,0x20
0000db 6f54
0000dc 4120
0000dd 6d64
0000de 6e69      	.DB  0x54,0x6F,0x20,0x41,0x64,0x6D,0x69,0x6E
0000df 5020
0000e0 6761
0000e1 2065
0000e2 6e49      	.DB  0x20,0x50,0x61,0x67,0x65,0x20,0x49,0x6E
0000e3 3220
0000e4 5320
0000e5 6365
0000e6 3400      	.DB  0x20,0x32,0x20,0x53,0x65,0x63,0x0,0x34
0000e7 0030
0000e8 6e49
0000e9 6f63
0000ea 7272      	.DB  0x30,0x0,0x49,0x6E,0x63,0x6F,0x72,0x72
0000eb 6365
0000ec 2074
0000ed 7453
0000ee 6475      	.DB  0x65,0x63,0x74,0x20,0x53,0x74,0x75,0x64
0000ef 6e65
0000f0 2074
0000f1 6f43
0000f2 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
0000f3 4620
0000f4 726f
0000f5 616d
0000f6 0074      	.DB  0x20,0x46,0x6F,0x72,0x6D,0x61,0x74,0x0
0000f7 6f59
0000f8 2075
0000f9 6957
0000fa 6c6c      	.DB  0x59,0x6F,0x75,0x20,0x57,0x69,0x6C,0x6C
0000fb 4220
0000fc 6361
0000fd 206b
0000fe 654d      	.DB  0x20,0x42,0x61,0x63,0x6B,0x20,0x4D,0x65
0000ff 756e
000100 4920
000101 206e
000102 2032      	.DB  0x6E,0x75,0x20,0x49,0x6E,0x20,0x32,0x20
000103 6553
000104 6f63
000105 646e
000106 4400      	.DB  0x53,0x65,0x63,0x6F,0x6E,0x64,0x0,0x44
000107 7075
000108 696c
000109 6163
00010a 6574      	.DB  0x75,0x70,0x6C,0x69,0x63,0x61,0x74,0x65
00010b 5320
00010c 7574
00010d 6564
00010e 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00010f 4320
000110 646f
000111 2065
000112 6e45      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x45,0x6E
000113 6574
000114 6572
000115 0064
000116 7453      	.DB  0x74,0x65,0x72,0x65,0x64,0x0,0x53,0x74
000117 6475
000118 6e65
000119 2074
00011a 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
00011b 6564
00011c 5320
00011d 6375
00011e 6563      	.DB  0x64,0x65,0x20,0x53,0x75,0x63,0x63,0x65
00011f 7373
000120 7566
000121 6c6c
000122 2079      	.DB  0x73,0x73,0x66,0x75,0x6C,0x6C,0x79,0x20
000123 6441
000124 6564
000125 0064
000126 6f59      	.DB  0x41,0x64,0x64,0x65,0x64,0x0,0x59,0x6F
000127 2075
000128 754d
000129 7473
00012a 4620      	.DB  0x75,0x20,0x4D,0x75,0x73,0x74,0x20,0x46
00012b 7269
00012c 7473
00012d 4c20
00012e 676f      	.DB  0x69,0x72,0x73,0x74,0x20,0x4C,0x6F,0x67
00012f 6e69
000130 5900
000131 756f
000132 5720      	.DB  0x69,0x6E,0x0,0x59,0x6F,0x75,0x20,0x57
000133 6c69
000134 206c
000135 6f47
000136 4120      	.DB  0x69,0x6C,0x6C,0x20,0x47,0x6F,0x20,0x41
000137 6d64
000138 6e69
000139 5020
00013a 6761      	.DB  0x64,0x6D,0x69,0x6E,0x20,0x50,0x61,0x67
00013b 2065
00013c 2032
00013d 6553
00013e 0063      	.DB  0x65,0x20,0x32,0x20,0x53,0x65,0x63,0x0
00013f 7453
000140 6475
000141 6e65
000142 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
000143 6f43
000144 6564
000145 4620
000146 756f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x75
000147 646e
000148 4f00
000149 7370
00014a 2c20      	.DB  0x6E,0x64,0x0,0x4F,0x70,0x73,0x20,0x2C
00014b 5320
00014c 7574
00014d 6564
00014e 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00014f 4320
000150 646f
000151 2065
000152 6f4e      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x4E,0x6F
000153 2074
000154 6f46
000155 6e75
000156 0064      	.DB  0x74,0x20,0x46,0x6F,0x75,0x6E,0x64,0x0
000157 6157
000158 7469
000159 4620
00015a 726f      	.DB  0x57,0x61,0x69,0x74,0x20,0x46,0x6F,0x72
00015b 4420
00015c 6c65
00015d 7465
00015e 2e65      	.DB  0x20,0x44,0x65,0x6C,0x65,0x74,0x65,0x2E
00015f 2e2e
000160 5300
000161 7574
000162 6564      	.DB  0x2E,0x2E,0x0,0x53,0x74,0x75,0x64,0x65
000163 746e
000164 4320
000165 646f
000166 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000167 6157
000168 2073
000169 6544
00016a 656c      	.DB  0x57,0x61,0x73,0x20,0x44,0x65,0x6C,0x65
00016b 6574
00016c 0064
00016d 6f4c
00016e 6967      	.DB  0x74,0x65,0x64,0x0,0x4C,0x6F,0x67,0x69
00016f 206e
000170 7553
000171 6363
000172 7365      	.DB  0x6E,0x20,0x53,0x75,0x63,0x63,0x65,0x73
000173 6673
000174 6c75
000175 796c
000176 5700      	.DB  0x73,0x66,0x75,0x6C,0x6C,0x79,0x0,0x57
000177 6961
000178 2e74
000179 2e2e
00017a 4f00      	.DB  0x61,0x69,0x74,0x2E,0x2E,0x2E,0x0,0x4F
00017b 7370
00017c 2c20
00017d 7320
00017e 6365      	.DB  0x70,0x73,0x20,0x2C,0x20,0x73,0x65,0x63
00017f 6572
000180 2074
000181 7369
000182 6920      	.DB  0x72,0x65,0x74,0x20,0x69,0x73,0x20,0x69
000183 636e
000184 726f
000185 6572
000186 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
000187 4300
000188 656c
000189 7261
00018a 6e69      	.DB  0x0,0x43,0x6C,0x65,0x61,0x72,0x69,0x6E
00018b 2067
00018c 4545
00018d 5250
00018e 4d4f      	.DB  0x67,0x20,0x45,0x45,0x50,0x52,0x4F,0x4D
00018f 2e20
000190 2e2e
000191 7400
000192 6d65      	.DB  0x20,0x2E,0x2E,0x2E,0x0,0x74,0x65,0x6D
000193 6570
000194 6172
000195 7574
000196 6572      	.DB  0x70,0x65,0x72,0x61,0x74,0x75,0x72,0x65
000197 4328
000198 3a29
000199 3100
00019a 203a      	.DB  0x28,0x43,0x29,0x3A,0x0,0x31,0x3A,0x20
00019b 7441
00019c 6574
00019d 646e
00019e 6e61      	.DB  0x41,0x74,0x74,0x65,0x6E,0x64,0x61,0x6E
00019f 6563
0001a0 4920
0001a1 696e
0001a2 6974      	.DB  0x63,0x65,0x20,0x49,0x6E,0x69,0x74,0x69
0001a3 6c61
0001a4 7a69
0001a5 7461
0001a6 6f69      	.DB  0x61,0x6C,0x69,0x7A,0x61,0x74,0x69,0x6F
0001a7 006e
0001a8 3a32
0001a9 5320
0001aa 7574      	.DB  0x6E,0x0,0x32,0x3A,0x20,0x53,0x74,0x75
0001ab 6564
0001ac 746e
0001ad 4d20
0001ae 6e61      	.DB  0x64,0x65,0x6E,0x74,0x20,0x4D,0x61,0x6E
0001af 6761
0001b0 6d65
0001b1 6e65
0001b2 0074      	.DB  0x61,0x67,0x65,0x6D,0x65,0x6E,0x74,0x0
0001b3 3a33
0001b4 5620
0001b5 6569
0001b6 2077      	.DB  0x33,0x3A,0x20,0x56,0x69,0x65,0x77,0x20
0001b7 7250
0001b8 7365
0001b9 6e65
0001ba 2074      	.DB  0x50,0x72,0x65,0x73,0x65,0x6E,0x74,0x20
0001bb 7453
0001bc 6475
0001bd 6e65
0001be 7374      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x73
0001bf 0020
0001c0 3a34
0001c1 5420
0001c2 6d65      	.DB  0x20,0x0,0x34,0x3A,0x20,0x54,0x65,0x6D
0001c3 6570
0001c4 6172
0001c5 7574
0001c6 6572      	.DB  0x70,0x65,0x72,0x61,0x74,0x75,0x72,0x65
0001c7 4d20
0001c8 6e6f
0001c9 7469
0001ca 726f      	.DB  0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72
0001cb 6e69
0001cc 0067
0001cd 3a35
0001ce 5220      	.DB  0x69,0x6E,0x67,0x0,0x35,0x3A,0x20,0x52
0001cf 7465
0001d0 6972
0001d1 7665
0001d2 2065      	.DB  0x65,0x74,0x72,0x69,0x65,0x76,0x65,0x20
0001d3 7453
0001d4 6475
0001d5 6e65
0001d6 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0001d7 6144
0001d8 6174
0001d9 3600
0001da 203a      	.DB  0x44,0x61,0x74,0x61,0x0,0x36,0x3A,0x20
0001db 7254
0001dc 6661
0001dd 6966
0001de 2063      	.DB  0x54,0x72,0x61,0x66,0x66,0x69,0x63,0x20
0001df 6f4d
0001e0 696e
0001e1 6f74
0001e2 6972      	.DB  0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69
0001e3 676e
0001e4 3700
0001e5 203a
0001e6 6f4c      	.DB  0x6E,0x67,0x0,0x37,0x3A,0x20,0x4C,0x6F
0001e7 6967
0001e8 206e
0001e9 6957
0001ea 6874      	.DB  0x67,0x69,0x6E,0x20,0x57,0x69,0x74,0x68
0001eb 4120
0001ec 6d64
0001ed 6e69
0001ee 3800      	.DB  0x20,0x41,0x64,0x6D,0x69,0x6E,0x0,0x38
0001ef 203a
0001f0 6f4c
0001f1 6f67
0001f2 7475      	.DB  0x3A,0x20,0x4C,0x6F,0x67,0x6F,0x75,0x74
0001f3 4400
0001f4 7369
0001f5 6174
0001f6 636e      	.DB  0x0,0x44,0x69,0x73,0x74,0x61,0x6E,0x63
0001f7 3a65
0001f8 0020
0001f9 7245
0001fa 6f72      	.DB  0x65,0x3A,0x20,0x0,0x45,0x72,0x72,0x6F
0001fb 0072
0001fc 6f4e
0001fd 4f20
0001fe 7362      	.DB  0x72,0x0,0x4E,0x6F,0x20,0x4F,0x62,0x73
0001ff 6174
000200 6c63
000201 0065
000202 6320      	.DB  0x74,0x61,0x63,0x6C,0x65,0x0,0x20,0x63
000203 206d
000204 4300
000205 756f
000206 746e      	.DB  0x6D,0x20,0x0,0x43,0x6F,0x75,0x6E,0x74
000207 203a
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1252): warning: .cseg .db misalignment - padding zero byte
000208 0000      	.DB  0x3A,0x20,0x0
                 _0x2000060:
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1254): warning: .cseg .db misalignment - padding zero byte
000209 0001      	.DB  0x1
                 _0x2000000:
00020a 4e2d
00020b 4e41
00020c 4900
00020d 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1257): warning: .cseg .db misalignment - padding zero byte
00020e 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00020f 0006      	.DW  0x06
000210 0004      	.DW  0x04
000211 0054      	.DW  __REG_VARS*2
                 
000212 0010      	.DW  0x10
000213 072f      	.DW  _keypad
000214 005a      	.DW  _0x3*2
                 
000215 0018      	.DW  0x18
000216 0260      	.DW  _0xB
000217 006e      	.DW  _0x0*2
                 
000218 0019      	.DW  0x19
000219 0278      	.DW  _0xB+24
00021a 0086      	.DW  _0x0*2+24
                 
00021b 0019      	.DW  0x19
00021c 0291      	.DW  _0xB+49
00021d 009f      	.DW  _0x0*2+49
                 
00021e 0016      	.DW  0x16
00021f 02aa      	.DW  _0xB+74
000220 00b8      	.DW  _0x0*2+74
                 
000221 0018      	.DW  0x18
000222 02c0      	.DW  _0xB+96
000223 00ce      	.DW  _0x0*2+96
                 
000224 0016      	.DW  0x16
000225 02d8      	.DW  _0xB+120
000226 00e6      	.DW  _0x0*2+120
                 
000227 0018      	.DW  0x18
000228 02ee      	.DW  _0xB+142
000229 00fc      	.DW  _0x0*2+142
                 
00022a 0012      	.DW  0x12
00022b 0306      	.DW  _0xB+166
00022c 0114      	.DW  _0x0*2+166
                 
00022d 0012      	.DW  0x12
00022e 0318      	.DW  _0xB+184
00022f 0126      	.DW  _0x0*2+184
                 
000230 001f      	.DW  0x1F
000231 032a      	.DW  _0xB+202
000232 0138      	.DW  _0x0*2+202
                 
000233 001f      	.DW  0x1F
000234 0349      	.DW  _0xB+233
000235 0157      	.DW  _0x0*2+233
                 
000236 001e      	.DW  0x1E
000237 0368      	.DW  _0xB+264
000238 0176      	.DW  _0x0*2+264
                 
000239 0011      	.DW  0x11
00023a 0386      	.DW  _0xB+294
00023b 0194      	.DW  _0x0*2+294
                 
00023c 0019      	.DW  0x19
00023d 0397      	.DW  _0xB+311
00023e 0086      	.DW  _0x0*2+24
                 
00023f 000b      	.DW  0x0B
000240 03b0      	.DW  _0x63
000241 01a5      	.DW  _0x0*2+311
                 
000242 001d      	.DW  0x1D
000243 03bb      	.DW  _0x63+11
000244 01b0      	.DW  _0x0*2+322
                 
000245 0002      	.DW  0x02
000246 03d8      	.DW  _0x63+40
000247 00cc      	.DW  _0x0*2+94
                 
000248 0003      	.DW  0x03
000249 03da      	.DW  _0x63+42
00024a 01cd      	.DW  _0x0*2+351
                 
00024b 001e      	.DW  0x1E
00024c 03dd      	.DW  _0x63+45
00024d 01d0      	.DW  _0x0*2+354
                 
00024e 001f      	.DW  0x1F
00024f 03fb      	.DW  _0x63+75
000250 01ee      	.DW  _0x0*2+384
                 
000251 001f      	.DW  0x1F
000252 041a      	.DW  _0x63+106
000253 020d      	.DW  _0x0*2+415
                 
000254 001f      	.DW  0x1F
000255 0439      	.DW  _0x63+137
000256 01ee      	.DW  _0x0*2+384
                 
000257 0020      	.DW  0x20
000258 0458      	.DW  _0x63+168
000259 022c      	.DW  _0x0*2+446
                 
00025a 001f      	.DW  0x1F
00025b 0478      	.DW  _0x63+200
00025c 01ee      	.DW  _0x0*2+384
                 
00025d 0015      	.DW  0x15
00025e 0497      	.DW  _0x63+231
00025f 024c      	.DW  _0x0*2+478
                 
000260 001d      	.DW  0x1D
000261 04ac      	.DW  _0x63+252
000262 0261      	.DW  _0x0*2+499
                 
000263 0002      	.DW  0x02
000264 04c9      	.DW  _0x63+281
000265 00cc      	.DW  _0x0*2+94
                 
000266 0013      	.DW  0x13
000267 04cb      	.DW  _0x63+283
000268 027e      	.DW  _0x0*2+528
                 
000269 001f      	.DW  0x1F
00026a 04de      	.DW  _0x63+302
00026b 01ee      	.DW  _0x0*2+384
                 
00026c 001d      	.DW  0x1D
00026d 04fd      	.DW  _0x63+333
00026e 0291      	.DW  _0x0*2+547
                 
00026f 001f      	.DW  0x1F
000270 051a      	.DW  _0x63+362
000271 01ee      	.DW  _0x0*2+384
                 
000272 0002      	.DW  0x02
000273 0539      	.DW  _0x63+393
000274 00cc      	.DW  _0x0*2+94
                 
000275 0013      	.DW  0x13
000276 053b      	.DW  _0x63+395
000277 027e      	.DW  _0x0*2+528
                 
000278 0013      	.DW  0x13
000279 054e      	.DW  _0x63+414
00027a 02ae      	.DW  _0x0*2+576
                 
00027b 0019      	.DW  0x19
00027c 0561      	.DW  _0x63+433
00027d 02c1      	.DW  _0x0*2+595
                 
00027e 001f      	.DW  0x1F
00027f 057a      	.DW  _0x63+458
000280 01ee      	.DW  _0x0*2+384
                 
000281 001d      	.DW  0x1D
000282 0599      	.DW  _0x63+489
000283 0291      	.DW  _0x0*2+547
                 
000284 001f      	.DW  0x1F
000285 05b6      	.DW  _0x63+518
000286 01ee      	.DW  _0x0*2+384
                 
000287 0002      	.DW  0x02
000288 05d5      	.DW  _0x63+549
000289 00cc      	.DW  _0x0*2+94
                 
00028a 0013      	.DW  0x13
00028b 05d7      	.DW  _0x63+551
00028c 02da      	.DW  _0x0*2+620
                 
00028d 0008      	.DW  0x08
00028e 05ea      	.DW  _0x63+570
00028f 02ed      	.DW  _0x0*2+639
                 
000290 001a      	.DW  0x1A
000291 05f2      	.DW  _0x63+578
000292 02f5      	.DW  _0x0*2+647
                 
000293 001f      	.DW  0x1F
000294 060c      	.DW  _0x63+604
000295 01ee      	.DW  _0x0*2+384
                 
000296 0014      	.DW  0x14
000297 062b      	.DW  _0x63+635
000298 030f      	.DW  _0x0*2+673
                 
000299 0010      	.DW  0x10
00029a 063f      	.DW  _0xD5
00029b 0323      	.DW  _0x0*2+693
                 
00029c 0002      	.DW  0x02
00029d 064f      	.DW  _0xD5+16
00029e 00cc      	.DW  _0x0*2+94
                 
00029f 001d      	.DW  0x1D
0002a0 0651      	.DW  _0xE1
0002a1 0333      	.DW  _0x0*2+709
                 
0002a2 0016      	.DW  0x16
0002a3 066e      	.DW  _0xE1+29
0002a4 0350      	.DW  _0x0*2+738
                 
0002a5 001a      	.DW  0x1A
0002a6 0684      	.DW  _0xE1+51
0002a7 0366      	.DW  _0x0*2+760
                 
0002a8 001a      	.DW  0x1A
0002a9 069e      	.DW  _0xE1+77
0002aa 0380      	.DW  _0x0*2+786
                 
0002ab 0019      	.DW  0x19
0002ac 06b8      	.DW  _0xE1+103
0002ad 039a      	.DW  _0x0*2+812
                 
0002ae 0016      	.DW  0x16
0002af 06d1      	.DW  _0xE1+128
0002b0 03b3      	.DW  _0x0*2+837
                 
0002b1 0014      	.DW  0x14
0002b2 06e7      	.DW  _0xE1+150
0002b3 03c9      	.DW  _0x0*2+859
                 
0002b4 000a      	.DW  0x0A
0002b5 06fb      	.DW  _0xE1+170
0002b6 03dd      	.DW  _0x0*2+879
                 
0002b7 0002      	.DW  0x02
0002b8 075f      	.DW  _previous_count_S0000013000
0002b9 006c      	.DW  _0x125*2
                 
0002ba 000b      	.DW  0x0B
0002bb 0705      	.DW  _0x126
0002bc 03e7      	.DW  _0x0*2+889
                 
0002bd 0006      	.DW  0x06
0002be 0710      	.DW  _0x126+11
0002bf 03f2      	.DW  _0x0*2+900
                 
0002c0 000c      	.DW  0x0C
0002c1 0716      	.DW  _0x126+17
0002c2 03f8      	.DW  _0x0*2+906
                 
0002c3 0005      	.DW  0x05
0002c4 0722      	.DW  _0x126+29
0002c5 0404      	.DW  _0x0*2+918
                 
0002c6 0008      	.DW  0x08
0002c7 0727      	.DW  _0x126+34
0002c8 0409      	.DW  _0x0*2+923
                 
0002c9 0001      	.DW  0x01
0002ca 0761      	.DW  __seed_G100
0002cb 0412      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0002cc 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0002cd 94f8      	CLI
0002ce 27ee      	CLR  R30
0002cf bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0002d0 e0f1      	LDI  R31,1
0002d1 bffb      	OUT  GICR,R31
0002d2 bfeb      	OUT  GICR,R30
0002d3 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0002d4 e08d      	LDI  R24,(14-2)+1
0002d5 e0a2      	LDI  R26,2
0002d6 27bb      	CLR  R27
                 __CLEAR_REG:
0002d7 93ed      	ST   X+,R30
0002d8 958a      	DEC  R24
0002d9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0002da e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0002db e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0002dc e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0002dd 93ed      	ST   X+,R30
0002de 9701      	SBIW R24,1
0002df f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0002e0 e1ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0002e1 e0f4      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0002e2 9185      	LPM  R24,Z+
0002e3 9195      	LPM  R25,Z+
0002e4 9700      	SBIW R24,0
0002e5 f061      	BREQ __GLOBAL_INI_END
0002e6 91a5      	LPM  R26,Z+
0002e7 91b5      	LPM  R27,Z+
0002e8 9005      	LPM  R0,Z+
0002e9 9015      	LPM  R1,Z+
0002ea 01bf      	MOVW R22,R30
0002eb 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0002ec 9005      	LPM  R0,Z+
0002ed 920d      	ST   X+,R0
0002ee 9701      	SBIW R24,1
0002ef f7e1      	BRNE __GLOBAL_INI_LOOP
0002f0 01fb      	MOVW R30,R22
0002f1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0002f2 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0002f3 bfed      	OUT  SPL,R30
0002f4 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0002f5 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0002f6 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0002f7 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0002f8 940c 02fa 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 4
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0062 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0063     int i, j;
                 ; 0000 0064     unsigned char st_counts;
                 ; 0000 0065     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
0002fa efe0      	LDI  R30,LOW(240)
0002fb bbe4      	OUT  0x14,R30
                 ; 0000 0066     KEY_PRT = 0xFF;
0002fc efef      	LDI  R30,LOW(255)
0002fd bbe5      	OUT  0x15,R30
                 ; 0000 0067     KEY_PRT &= 0x0F;                  // ground all rows at once
0002fe b3e5      	IN   R30,0x15
0002ff 70ef      	ANDI R30,LOW(0xF)
000300 bbe5      	OUT  0x15,R30
                 ; 0000 0068     MCUCR = 0x02;                     // make INT0 falling edge triggered
000301 e0e2      	LDI  R30,LOW(2)
000302 bfe5      	OUT  0x35,R30
                 ; 0000 0069     GICR = (1 << INT0);               // enable external interrupt 0
000303 e4e0      	LDI  R30,LOW(64)
000304 bfeb      	OUT  0x3B,R30
                 ; 0000 006A     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
000305 9a8f      	SBI  0x11,7
                 ; 0000 006B     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
000306 9897      	CBI  0x12,7
                 ; 0000 006C     USART_init(0x33);
000307 e3a3      	LDI  R26,LOW(51)
000308 e0b0      	LDI  R27,0
000309 940e 085d 	CALL _USART_init
                 ; 0000 006D     HCSR04Init(); // Initialize ultrasonic sensor
00030b 940e 08e3 	CALL _HCSR04Init
                 ; 0000 006E     lcd_init();
00030d d446      	RCALL _lcd_init
                 ; 0000 006F 
                 ; 0000 0070 #asm("sei")           // enable interrupts
00030e 9478      	sei
                 ; 0000 0071     lcdCommand(0x01); // clear LCD
00030f e0a1      	LDI  R26,LOW(1)
000310 d42f      	RCALL _lcdCommand
                 ; 0000 0072     while (1)
                 _0x5:
                 ; 0000 0073     {
                 ; 0000 0074         if (stage == STAGE_INIT_MENU)
000311 2c04      	MOV  R0,R4
000312 2805      	OR   R0,R5
000313 f411      	BRNE _0x8
                 ; 0000 0075         {
                 ; 0000 0076             show_menu();
000314 d4bb      	RCALL _show_menu
                 ; 0000 0077         }
                 ; 0000 0078         else if (stage == STAGE_ATTENDENC_MENU)
000315 c10a      	RJMP _0x9
                 _0x8:
000316 940e 0a43 	CALL SUBOPT_0x0
000318 f469      	BRNE _0xA
                 ; 0000 0079         {
                 ; 0000 007A             lcdCommand(0x01);
000319 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 007B             lcd_gotoxy(1, 1);
                 ; 0000 007C             lcd_print("1 : Submit Student Code");
                +
00031b e6a0     +LDI R26 , LOW ( _0xB + ( 0 ) )
00031c e0b2     +LDI R27 , HIGH ( _0xB + ( 0 ) )
                 	__POINTW2MN _0xB,0
00031d 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 007D             lcd_gotoxy(1, 2);
                 ; 0000 007E             lcd_print("    press cancel to back");
                +
00031f e7a8     +LDI R26 , LOW ( _0xB + ( 24 ) )
000320 e0b2     +LDI R27 , HIGH ( _0xB + ( 24 ) )
                 	__POINTW2MN _0xB,24
000321 d466      	RCALL _lcd_print
                 ; 0000 007F             while (stage == STAGE_ATTENDENC_MENU)
                 _0xC:
000322 940e 0a43 	CALL SUBOPT_0x0
000324 f3e9      	BREQ _0xC
                 ; 0000 0080                 ;
                 ; 0000 0081         }
                 ; 0000 0082         else if (stage == STAGE_SUBMIT_CODE)
000325 c0fa      	RJMP _0xF
                 _0xA:
000326 940e 0a57 	CALL SUBOPT_0x3
000328 f461      	BRNE _0x10
                 ; 0000 0083         {
                 ; 0000 0084             lcdCommand(0x01);
000329 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0085             lcd_gotoxy(1, 1);
                 ; 0000 0086             lcd_print("Enter your student code:");
                +
00032b e9a1     +LDI R26 , LOW ( _0xB + ( 49 ) )
00032c e0b2     +LDI R27 , HIGH ( _0xB + ( 49 ) )
                 	__POINTW2MN _0xB,49
00032d 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0087             lcd_gotoxy(1, 2);
                 ; 0000 0088             lcdCommand(0x0f);   // display on, cursor blinking
00032f 940e 0a5c 	CALL SUBOPT_0x4
                 ; 0000 0089             delay_us(100 * 16); // wait
                 ; 0000 008A             while (stage == STAGE_SUBMIT_CODE)
                 _0x11:
000331 940e 0a57 	CALL SUBOPT_0x3
000333 f3e9      	BREQ _0x11
                 ; 0000 008B                 ;
                 ; 0000 008C             lcdCommand(0x0c);   // display on, cursor off
000334 c0e8      	RJMP _0x134
                 ; 0000 008D             delay_us(100 * 16); // wait
                 ; 0000 008E         }
                 ; 0000 008F         else if (stage == STAGE_TEMPERATURE_MONITORING)
                 _0x10:
000335 940e 0a64 	CALL SUBOPT_0x5
000337 f411      	BRNE _0x15
                 ; 0000 0090         {
                 ; 0000 0091             show_temperature();
000338 d466      	RCALL _show_temperature
                 ; 0000 0092         }
                 ; 0000 0093         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000339 c0e6      	RJMP _0x16
                 _0x15:
00033a 940e 0a69 	CALL SUBOPT_0x6
00033c f009      	BREQ PC+2
00033d c049      	RJMP _0x17
                 ; 0000 0094         {
                 ; 0000 0095             lcdCommand(0x01);
00033e 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0096             lcd_gotoxy(1, 1);
                 ; 0000 0097             lcd_print("Number of students : ");
                +
000340 eaaa     +LDI R26 , LOW ( _0xB + ( 74 ) )
000341 e0b2     +LDI R27 , HIGH ( _0xB + ( 74 ) )
                 	__POINTW2MN _0xB,74
000342 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0098             lcd_gotoxy(1, 2);
                 ; 0000 0099             st_counts = read_byte_from_eeprom(0x0);
000344 e0a0      	LDI  R26,LOW(0)
000345 e0b0      	LDI  R27,0
000346 d4f8      	RCALL _read_byte_from_eeprom
000347 2f5e      	MOV  R21,R30
                 ; 0000 009A             memset(buffer, 0, 32);
000348 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 009B             itoa(st_counts, buffer);
00034a 2fe5      	MOV  R30,R21
00034b e0f0      	LDI  R31,0
00034c 93fa      	ST   -Y,R31
00034d 93ea      	ST   -Y,R30
00034e e3af      	LDI  R26,LOW(_buffer)
00034f e0b7      	LDI  R27,HIGH(_buffer)
000350 940e 09e0 	CALL _itoa
                 ; 0000 009C             lcd_print(buffer);
000352 940e 0a78 	CALL SUBOPT_0x8
                 ; 0000 009D             delay_ms(1000);
                 ; 0000 009E 
                 ; 0000 009F             for (i = 0; i < st_counts; i++)
                +
000354 e000     +LDI R16 , LOW ( 0 )
000355 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x19:
000356 2fe5      	MOV  R30,R21
000357 01d8      	MOVW R26,R16
000358 e0f0      	LDI  R31,0
000359 17ae      	CP   R26,R30
00035a 07bf      	CPC  R27,R31
00035b f514      	BRGE _0x1A
                 ; 0000 00A0             {
                 ; 0000 00A1                 memset(buffer, 0, 32);
00035c 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 00A2                 for (j = 0; j < 8; j++)
                +
00035e e020     +LDI R18 , LOW ( 0 )
00035f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1C:
                +
000360 3028     +CPI R18 , LOW ( 8 )
000361 e0e0     +LDI R30 , HIGH ( 8 )
000362 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000363 f46c      	BRGE _0x1D
                 ; 0000 00A3                 {
                 ; 0000 00A4                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000364 01f9      	MOVW R30,R18
000365 5ce1      	SUBI R30,LOW(-_buffer)
000366 4ff8      	SBCI R31,HIGH(-_buffer)
000367 93ff      	PUSH R31
000368 93ef      	PUSH R30
000369 940e 0a80 	CALL SUBOPT_0x9
00036b 91af      	POP  R26
00036c 91bf      	POP  R27
00036d 93ec      	ST   X,R30
                 ; 0000 00A5                 }
                +
00036e 5f2f     +SUBI R18 , LOW ( - 1 )
00036f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000370 cfef      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00A6                 buffer[j] = '\0';
000371 e3af      	LDI  R26,LOW(_buffer)
000372 e0b7      	LDI  R27,HIGH(_buffer)
000373 0fa2      	ADD  R26,R18
000374 1fb3      	ADC  R27,R19
000375 e0e0      	LDI  R30,LOW(0)
000376 93ec      	ST   X,R30
                 ; 0000 00A7                 lcdCommand(0x01);
000377 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00A8                 lcd_gotoxy(1, 1);
                 ; 0000 00A9                 lcd_print(buffer);
000379 940e 0a78 	CALL SUBOPT_0x8
                 ; 0000 00AA                 delay_ms(1000);
                 ; 0000 00AB             }
                +
00037b 5f0f     +SUBI R16 , LOW ( - 1 )
00037c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00037d cfd8      	RJMP _0x19
                 _0x1A:
                 ; 0000 00AC 
                 ; 0000 00AD             lcdCommand(0x01);
00037e 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00AE             lcd_gotoxy(1, 1);
                 ; 0000 00AF             lcd_print("Press Cancel To Go Back");
                +
000380 eca0     +LDI R26 , LOW ( _0xB + ( 96 ) )
000381 e0b2     +LDI R27 , HIGH ( _0xB + ( 96 ) )
                 	__POINTW2MN _0xB,96
000382 d405      	RCALL _lcd_print
                 ; 0000 00B0             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1E:
000383 940e 0a69 	CALL SUBOPT_0x6
000385 f3e9      	BREQ _0x1E
                 ; 0000 00B1                 ;
                 ; 0000 00B2         }
                 ; 0000 00B3         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
000386 c099      	RJMP _0x21
                 _0x17:
000387 e0e5      	LDI  R30,LOW(5)
000388 e0f0      	LDI  R31,HIGH(5)
000389 15e4      	CP   R30,R4
00038a 05f5      	CPC  R31,R5
00038b f5c1      	BRNE _0x22
                 ; 0000 00B4         {
                 ; 0000 00B5             lcdCommand(0x01);
00038c 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00B6             lcd_gotoxy(1, 1);
                 ; 0000 00B7             lcd_print("Start Transferring...");
                +
00038e eda8     +LDI R26 , LOW ( _0xB + ( 120 ) )
00038f e0b2     +LDI R27 , HIGH ( _0xB + ( 120 ) )
                 	__POINTW2MN _0xB,120
000390 d3f7      	RCALL _lcd_print
                 ; 0000 00B8             st_counts = read_byte_from_eeprom(0x0);
000391 940e 0a89 	CALL SUBOPT_0xA
000393 2f5e      	MOV  R21,R30
                 ; 0000 00B9             for (i = 0; i < st_counts; i++)
                +
000394 e000     +LDI R16 , LOW ( 0 )
000395 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x24:
000396 2fe5      	MOV  R30,R21
000397 01d8      	MOVW R26,R16
000398 e0f0      	LDI  R31,0
000399 17ae      	CP   R26,R30
00039a 07bf      	CPC  R27,R31
00039b f494      	BRGE _0x25
                 ; 0000 00BA             {
                 ; 0000 00BB                 for (j = 0; j < 8; j++)
                +
00039c e020     +LDI R18 , LOW ( 0 )
00039d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x27:
                +
00039e 3028     +CPI R18 , LOW ( 8 )
00039f e0e0     +LDI R30 , HIGH ( 8 )
0003a0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0003a1 f43c      	BRGE _0x28
                 ; 0000 00BC                 {
                 ; 0000 00BD                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
0003a2 940e 0a80 	CALL SUBOPT_0x9
0003a4 2fae      	MOV  R26,R30
0003a5 d4b0      	RCALL _USART_Transmit
                 ; 0000 00BE                 }
                +
0003a6 5f2f     +SUBI R18 , LOW ( - 1 )
0003a7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003a8 cff5      	RJMP _0x27
                 _0x28:
                 ; 0000 00BF 
                 ; 0000 00C0                 USART_Transmit('\r');
0003a9 940e 0a8d 	CALL SUBOPT_0xB
                 ; 0000 00C1                 USART_Transmit('\r');
                 ; 0000 00C2 
                 ; 0000 00C3                 delay_ms(500);
                 ; 0000 00C4             }
                +
0003ab 5f0f     +SUBI R16 , LOW ( - 1 )
0003ac 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0003ad cfe8      	RJMP _0x24
                 _0x25:
                 ; 0000 00C5             for (j = 0; j < 8; j++)
                +
0003ae e020     +LDI R18 , LOW ( 0 )
0003af e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x2A:
                +
0003b0 3028     +CPI R18 , LOW ( 8 )
0003b1 e0e0     +LDI R30 , HIGH ( 8 )
0003b2 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0003b3 f42c      	BRGE _0x2B
                 ; 0000 00C6             {
                 ; 0000 00C7                 USART_Transmit('=');
0003b4 e3ad      	LDI  R26,LOW(61)
0003b5 d4a0      	RCALL _USART_Transmit
                 ; 0000 00C8             }
                +
0003b6 5f2f     +SUBI R18 , LOW ( - 1 )
0003b7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003b8 cff7      	RJMP _0x2A
                 _0x2B:
                 ; 0000 00C9 
                 ; 0000 00CA             USART_Transmit('\r');
0003b9 940e 0a8d 	CALL SUBOPT_0xB
                 ; 0000 00CB             USART_Transmit('\r');
                 ; 0000 00CC             delay_ms(500);
                 ; 0000 00CD 
                 ; 0000 00CE             lcdCommand(0x01);
0003bb 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00CF             lcd_gotoxy(1, 1);
                 ; 0000 00D0             lcd_print("Usart Transmit Finished");
                +
0003bd eeae     +LDI R26 , LOW ( _0xB + ( 142 ) )
0003be e0b2     +LDI R27 , HIGH ( _0xB + ( 142 ) )
                 	__POINTW2MN _0xB,142
0003bf 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 00D1             delay_ms(2000);
                 ; 0000 00D2             stage = STAGE_INIT_MENU;
0003c1 2444      	CLR  R4
0003c2 2455      	CLR  R5
                 ; 0000 00D3         }
                 ; 0000 00D4         else if (stage == STAGE_STUDENT_MANAGMENT)
0003c3 c05c      	RJMP _0x2C
                 _0x22:
0003c4 940e 0a9d 	CALL SUBOPT_0xD
0003c6 f469      	BRNE _0x2D
                 ; 0000 00D5         {
                 ; 0000 00D6             lcdCommand(0x01);
0003c7 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00D7             lcd_gotoxy(1, 1);
                 ; 0000 00D8             lcd_print("1: Search Student");
                +
0003c9 e0a6     +LDI R26 , LOW ( _0xB + ( 166 ) )
0003ca e0b3     +LDI R27 , HIGH ( _0xB + ( 166 ) )
                 	__POINTW2MN _0xB,166
0003cb 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 00D9             lcd_gotoxy(1, 2);
                 ; 0000 00DA             lcd_print("2: Delete Student");
                +
0003cd e1a8     +LDI R26 , LOW ( _0xB + ( 184 ) )
0003ce e0b3     +LDI R27 , HIGH ( _0xB + ( 184 ) )
                 	__POINTW2MN _0xB,184
0003cf d3b8      	RCALL _lcd_print
                 ; 0000 00DB             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2E:
0003d0 940e 0a9d 	CALL SUBOPT_0xD
0003d2 f3e9      	BREQ _0x2E
                 ; 0000 00DC                 ;
                 ; 0000 00DD         }
                 ; 0000 00DE         else if (stage == STAGE_SEARCH_STUDENT)
0003d3 c04c      	RJMP _0x31
                 _0x2D:
0003d4 940e 0aa2 	CALL SUBOPT_0xE
0003d6 f461      	BRNE _0x32
                 ; 0000 00DF         {
                 ; 0000 00E0             lcdCommand(0x01);
0003d7 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00E1             lcd_gotoxy(1, 1);
                 ; 0000 00E2             lcd_print("Enter Student Code For Search:");
                +
0003d9 e2aa     +LDI R26 , LOW ( _0xB + ( 202 ) )
0003da e0b3     +LDI R27 , HIGH ( _0xB + ( 202 ) )
                 	__POINTW2MN _0xB,202
0003db 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 00E3             lcd_gotoxy(1, 2);
                 ; 0000 00E4             lcdCommand(0x0f);   // display on, cursor blinking
0003dd 940e 0a5c 	CALL SUBOPT_0x4
                 ; 0000 00E5             delay_us(100 * 16); // wait
                 ; 0000 00E6             while (stage == STAGE_SEARCH_STUDENT)
                 _0x33:
0003df 940e 0aa2 	CALL SUBOPT_0xE
0003e1 f3e9      	BREQ _0x33
                 ; 0000 00E7                 ;
                 ; 0000 00E8             lcdCommand(0x0c);   // display on, cursor off
0003e2 c03a      	RJMP _0x134
                 ; 0000 00E9             delay_us(100 * 16); // wait
                 ; 0000 00EA         }
                 ; 0000 00EB         else if (stage == STAGE_DELETE_STUDENT)
                 _0x32:
0003e3 940e 0aa7 	CALL SUBOPT_0xF
0003e5 f461      	BRNE _0x37
                 ; 0000 00EC         {
                 ; 0000 00ED             lcdCommand(0x01);
0003e6 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 00EE             lcd_gotoxy(1, 1);
                 ; 0000 00EF             lcd_print("Enter Student Code For Delete:");
                +
0003e8 e4a9     +LDI R26 , LOW ( _0xB + ( 233 ) )
0003e9 e0b3     +LDI R27 , HIGH ( _0xB + ( 233 ) )
                 	__POINTW2MN _0xB,233
0003ea 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 00F0             lcd_gotoxy(1, 2);
                 ; 0000 00F1             lcdCommand(0x0f);   // display on, cursor blinking
0003ec 940e 0a5c 	CALL SUBOPT_0x4
                 ; 0000 00F2             delay_us(100 * 16); // wait
                 ; 0000 00F3             while (stage == STAGE_DELETE_STUDENT)
                 _0x38:
0003ee 940e 0aa7 	CALL SUBOPT_0xF
0003f0 f3e9      	BREQ _0x38
                 ; 0000 00F4                 ;
                 ; 0000 00F5             lcdCommand(0x0c); // display on, cursor off
0003f1 c02b      	RJMP _0x134
                 ; 0000 00F6             delay_us(100 * 16);
                 ; 0000 00F7         }
                 ; 0000 00F8         else if (stage == STAGE_TRAFFIC_MONITORING)
                 _0x37:
0003f2 940e 0aac 	CALL SUBOPT_0x10
0003f4 f421      	BRNE _0x3C
                 ; 0000 00F9         {
                 ; 0000 00FA             startSonar();
0003f5 d543      	RCALL _startSonar
                 ; 0000 00FB             stage = STAGE_INIT_MENU;
0003f6 2444      	CLR  R4
0003f7 2455      	CLR  R5
                 ; 0000 00FC         }
                 ; 0000 00FD         else if (stage == STAGE_LOGIN_WITH_ADMIN)
0003f8 c027      	RJMP _0x3D
                 _0x3C:
0003f9 940e 0ab1 	CALL SUBOPT_0x11
0003fb f521      	BRNE _0x3E
                 ; 0000 00FE         {
                 ; 0000 00FF             lcdCommand(0x01);
0003fc 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0100             lcd_gotoxy(1, 1);
                 ; 0000 0101             lcd_print("Enter Secret Code (or cancel)");
                +
0003fe e6a8     +LDI R26 , LOW ( _0xB + ( 264 ) )
0003ff e0b3     +LDI R27 , HIGH ( _0xB + ( 264 ) )
                 	__POINTW2MN _0xB,264
000400 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0102             lcd_gotoxy(1, 2);
                 ; 0000 0103             lcdCommand(0x0f);   // display on, cursor blinking
000402 940e 0a5c 	CALL SUBOPT_0x4
                 ; 0000 0104             delay_us(100 * 16); // wait
                 ; 0000 0105             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x3F:
000404 940e 0ab1 	CALL SUBOPT_0x11
000406 f411      	BRNE _0x42
000407 2099      	TST  R9
000408 f009      	BREQ _0x43
                 _0x42:
000409 c001      	RJMP _0x41
                 _0x43:
                 ; 0000 0106                 ;
00040a cff9      	RJMP _0x3F
                 _0x41:
                 ; 0000 0107             if (logged_in == 1)
00040b e0e1      	LDI  R30,LOW(1)
00040c 15e9      	CP   R30,R9
00040d f479      	BRNE _0x44
                 ; 0000 0108             {
                 ; 0000 0109                 lcdCommand(0x0c); // display on, cursor off
00040e 940e 0ab6 	CALL SUBOPT_0x12
                 ; 0000 010A                 delay_us(100 * 16);
                 ; 0000 010B                 lcdCommand(0x01);
000410 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 010C                 lcd_gotoxy(1, 1);
                 ; 0000 010D                 lcd_print("1 : Clear EEPROM");
                +
000412 e8a6     +LDI R26 , LOW ( _0xB + ( 294 ) )
000413 e0b3     +LDI R27 , HIGH ( _0xB + ( 294 ) )
                 	__POINTW2MN _0xB,294
000414 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 010E                 lcd_gotoxy(1, 2);
                 ; 0000 010F                 lcd_print("    press cancel to back");
                +
000416 e9a7     +LDI R26 , LOW ( _0xB + ( 311 ) )
000417 e0b3     +LDI R27 , HIGH ( _0xB + ( 311 ) )
                 	__POINTW2MN _0xB,311
000418 d36f      	RCALL _lcd_print
                 ; 0000 0110                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x45:
000419 940e 0ab1 	CALL SUBOPT_0x11
00041b f3e9      	BREQ _0x45
                 ; 0000 0111                     ;
                 ; 0000 0112             }
                 ; 0000 0113             else
00041c c003      	RJMP _0x48
                 _0x44:
                 ; 0000 0114             {
                 ; 0000 0115                 lcdCommand(0x0c); // display on, cursor off
                 _0x134:
00041d e0ac      	LDI  R26,LOW(12)
00041e 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 0116                 delay_us(100 * 16);
                 ; 0000 0117             }
                 _0x48:
                 ; 0000 0118         }
                 ; 0000 0119     }
                 _0x3E:
                 _0x3D:
                 _0x31:
                 _0x2C:
                 _0x21:
                 _0x16:
                 _0xF:
                 _0x9:
000420 cef0      	RJMP _0x5
                 ; 0000 011A }
                 _0x49:
000421 cfff      	RJMP _0x49
                 ; .FEND
                 
                 	.DSEG
                 _0xB:
000260           	.BYTE 0x150
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 011E {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
000422 920a      	ST   -Y,R0
000423 921a      	ST   -Y,R1
000424 92fa      	ST   -Y,R15
000425 936a      	ST   -Y,R22
000426 937a      	ST   -Y,R23
000427 938a      	ST   -Y,R24
000428 939a      	ST   -Y,R25
000429 93aa      	ST   -Y,R26
00042a 93ba      	ST   -Y,R27
00042b 93ea      	ST   -Y,R30
00042c 93fa      	ST   -Y,R31
00042d b7ef      	IN   R30,SREG
00042e 93ea      	ST   -Y,R30
                 ; 0000 011F     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 0120     int i;
                 ; 0000 0121 
                 ; 0000 0122     // detect the key
                 ; 0000 0123     while (1)
00042f 9722      	SBIW R28,2
000430 940e 0cfd 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 0124     {
                 ; 0000 0125         KEY_PRT = 0xEF;            // ground row 0
000432 eeef      	LDI  R30,LOW(239)
000433 940e 0ac5 	CALL SUBOPT_0x14
                 ; 0000 0126         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0127         if (colloc != 0x0F)        // column detected
000435 f011      	BREQ _0x4D
                 ; 0000 0128         {
                 ; 0000 0129             rowloc = 0; // save row location
000436 e000      	LDI  R16,LOW(0)
                 ; 0000 012A             break;      // exit while loop
000437 c012      	RJMP _0x4C
                 ; 0000 012B         }
                 ; 0000 012C         KEY_PRT = 0xDF;            // ground row 1
                 _0x4D:
000438 edef      	LDI  R30,LOW(223)
000439 940e 0ac5 	CALL SUBOPT_0x14
                 ; 0000 012D         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 012E         if (colloc != 0x0F)        // column detected
00043b f011      	BREQ _0x4E
                 ; 0000 012F         {
                 ; 0000 0130             rowloc = 1; // save row location
00043c e001      	LDI  R16,LOW(1)
                 ; 0000 0131             break;      // exit while loop
00043d c00c      	RJMP _0x4C
                 ; 0000 0132         }
                 ; 0000 0133         KEY_PRT = 0xBF;            // ground row 2
                 _0x4E:
00043e ebef      	LDI  R30,LOW(191)
00043f 940e 0ac5 	CALL SUBOPT_0x14
                 ; 0000 0134         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0135         if (colloc != 0x0F)        // column detected
000441 f011      	BREQ _0x4F
                 ; 0000 0136         {
                 ; 0000 0137             rowloc = 2; // save row location
000442 e002      	LDI  R16,LOW(2)
                 ; 0000 0138             break;      // exit while loop
000443 c006      	RJMP _0x4C
                 ; 0000 0139         }
                 ; 0000 013A         KEY_PRT = 0x7F;            // ground row 3
                 _0x4F:
000444 e7ef      	LDI  R30,LOW(127)
000445 bbe5      	OUT  0x15,R30
                 ; 0000 013B         colloc = (KEY_PIN & 0x0F); // read the columns
000446 b3e3      	IN   R30,0x13
000447 70ef      	ANDI R30,LOW(0xF)
000448 2f1e      	MOV  R17,R30
                 ; 0000 013C         rowloc = 3;                // save row location
000449 e003      	LDI  R16,LOW(3)
                 ; 0000 013D         break;                     // exit while loop
                 ; 0000 013E     }
                 _0x4C:
                 ; 0000 013F     // check column and send result to Port D
                 ; 0000 0140     if (colloc == 0x0E)
00044a 301e      	CPI  R17,14
00044b f411      	BRNE _0x50
                 ; 0000 0141         cl = 0;
00044c e030      	LDI  R19,LOW(0)
                 ; 0000 0142     else if (colloc == 0x0D)
00044d c009      	RJMP _0x51
                 _0x50:
00044e 301d      	CPI  R17,13
00044f f411      	BRNE _0x52
                 ; 0000 0143         cl = 1;
000450 e031      	LDI  R19,LOW(1)
                 ; 0000 0144     else if (colloc == 0x0B)
000451 c005      	RJMP _0x53
                 _0x52:
000452 301b      	CPI  R17,11
000453 f411      	BRNE _0x54
                 ; 0000 0145         cl = 2;
000454 e032      	LDI  R19,LOW(2)
                 ; 0000 0146     else
000455 c001      	RJMP _0x55
                 _0x54:
                 ; 0000 0147         cl = 3;
000456 e033      	LDI  R19,LOW(3)
                 ; 0000 0148 
                 ; 0000 0149     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x55:
                 _0x53:
                 _0x51:
000457 b3e5      	IN   R30,0x15
000458 70ef      	ANDI R30,LOW(0xF)
000459 bbe5      	OUT  0x15,R30
                 ; 0000 014A 
                 ; 0000 014B     // inside menu level 1
                 ; 0000 014C     if (stage == STAGE_INIT_MENU)
00045a 2c04      	MOV  R0,R4
00045b 2805      	OR   R0,R5
00045c f009      	BREQ PC+2
00045d c070      	RJMP _0x56
                 ; 0000 014D     {
                 ; 0000 014E         switch (keypad[rowloc][cl] - '0')
00045e 940e 0acb 	CALL SUBOPT_0x15
000460 91ec      	LD   R30,X
000461 e0f0      	LDI  R31,0
000462 97f0      	SBIW R30,48
                 ; 0000 014F         {
                 ; 0000 0150         case OPTION_ATTENDENCE:
000463 30e1      	CPI  R30,LOW(0x1)
000464 e0a0      	LDI  R26,HIGH(0x1)
000465 07fa      	CPC  R31,R26
000466 f421      	BRNE _0x5A
                 ; 0000 0151             stage = STAGE_ATTENDENC_MENU;
000467 e0e1      	LDI  R30,LOW(1)
000468 e0f0      	LDI  R31,HIGH(1)
000469 012f      	MOVW R4,R30
                 ; 0000 0152             break;
00046a c047      	RJMP _0x59
                 ; 0000 0153 
                 ; 0000 0154         case OPTION_TEMPERATURE_MONITORING:
                 _0x5A:
00046b 30e4      	CPI  R30,LOW(0x4)
00046c e0a0      	LDI  R26,HIGH(0x4)
00046d 07fa      	CPC  R31,R26
00046e f421      	BRNE _0x5B
                 ; 0000 0155             stage = STAGE_TEMPERATURE_MONITORING;
00046f e0e3      	LDI  R30,LOW(3)
000470 e0f0      	LDI  R31,HIGH(3)
000471 012f      	MOVW R4,R30
                 ; 0000 0156             break;
000472 c03f      	RJMP _0x59
                 ; 0000 0157         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x5B:
000473 30e3      	CPI  R30,LOW(0x3)
000474 e0a0      	LDI  R26,HIGH(0x3)
000475 07fa      	CPC  R31,R26
000476 f421      	BRNE _0x5C
                 ; 0000 0158             stage = STAGE_VIEW_PRESENT_STUDENTS;
000477 e0e4      	LDI  R30,LOW(4)
000478 e0f0      	LDI  R31,HIGH(4)
000479 012f      	MOVW R4,R30
                 ; 0000 0159             break;
00047a c037      	RJMP _0x59
                 ; 0000 015A         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x5C:
00047b 30e5      	CPI  R30,LOW(0x5)
00047c e0a0      	LDI  R26,HIGH(0x5)
00047d 07fa      	CPC  R31,R26
00047e f421      	BRNE _0x5D
                 ; 0000 015B             stage = STAGE_RETRIEVE_STUDENT_DATA;
00047f e0e5      	LDI  R30,LOW(5)
000480 e0f0      	LDI  R31,HIGH(5)
000481 012f      	MOVW R4,R30
                 ; 0000 015C             break;
000482 c02f      	RJMP _0x59
                 ; 0000 015D         case OPTION_STUDENT_MANAGEMENT:
                 _0x5D:
000483 30e2      	CPI  R30,LOW(0x2)
000484 e0a0      	LDI  R26,HIGH(0x2)
000485 07fa      	CPC  R31,R26
000486 f421      	BRNE _0x5E
                 ; 0000 015E             stage = STAGE_STUDENT_MANAGMENT;
000487 e0e6      	LDI  R30,LOW(6)
000488 e0f0      	LDI  R31,HIGH(6)
000489 012f      	MOVW R4,R30
                 ; 0000 015F             break;
00048a c027      	RJMP _0x59
                 ; 0000 0160         case OPTION_TRAFFIC_MONITORING:
                 _0x5E:
00048b 30e6      	CPI  R30,LOW(0x6)
00048c e0a0      	LDI  R26,HIGH(0x6)
00048d 07fa      	CPC  R31,R26
00048e f421      	BRNE _0x5F
                 ; 0000 0161             stage = STAGE_TRAFFIC_MONITORING;
00048f e0e9      	LDI  R30,LOW(9)
000490 e0f0      	LDI  R31,HIGH(9)
000491 012f      	MOVW R4,R30
                 ; 0000 0162             break;
000492 c01f      	RJMP _0x59
                 ; 0000 0163         case OPTION_LOGIN_WITH_ADMIN:
                 _0x5F:
000493 30e7      	CPI  R30,LOW(0x7)
000494 e0a0      	LDI  R26,HIGH(0x7)
000495 07fa      	CPC  R31,R26
000496 f421      	BRNE _0x60
                 ; 0000 0164             stage = STAGE_LOGIN_WITH_ADMIN;
000497 e0ea      	LDI  R30,LOW(10)
000498 e0f0      	LDI  R31,HIGH(10)
000499 012f      	MOVW R4,R30
                 ; 0000 0165             break;
00049a c017      	RJMP _0x59
                 ; 0000 0166         case OPTION_LOGOUT:
                 _0x60:
00049b 30e8      	CPI  R30,LOW(0x8)
00049c e0a0      	LDI  R26,HIGH(0x8)
00049d 07fa      	CPC  R31,R26
00049e f499      	BRNE _0x64
                 ; 0000 0167 #asm("cli") // disable interrupts
00049f 94f8      	cli
                 ; 0000 0168             if (logged_in == 1)
0004a0 e0e1      	LDI  R30,LOW(1)
0004a1 15e9      	CP   R30,R9
0004a2 f479      	BRNE _0x62
                 ; 0000 0169             {
                 ; 0000 016A                 lcdCommand(0x1);
0004a3 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 016B                 lcd_gotoxy(1, 1);
                 ; 0000 016C                 lcd_print("Logout ...");
                +
0004a5 eba0     +LDI R26 , LOW ( _0x63 + ( 0 ) )
0004a6 e0b3     +LDI R27 , HIGH ( _0x63 + ( 0 ) )
                 	__POINTW2MN _0x63,0
0004a7 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 016D                 lcd_gotoxy(1, 2);
                 ; 0000 016E                 lcd_print("Going To Admin Page In 2 Sec");
                +
0004a9 ebab     +LDI R26 , LOW ( _0x63 + ( 11 ) )
0004aa e0b3     +LDI R27 , HIGH ( _0x63 + ( 11 ) )
                 	__POINTW2MN _0x63,11
0004ab 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 016F                 delay_ms(2000);
                 ; 0000 0170                 logged_in = 0;
0004ad 2499      	CLR  R9
                 ; 0000 0171 #asm("sei")
0004ae 9478      	sei
                 ; 0000 0172                 stage = STAGE_LOGIN_WITH_ADMIN;
0004af e0ea      	LDI  R30,LOW(10)
0004b0 e0f0      	LDI  R31,HIGH(10)
0004b1 012f      	MOVW R4,R30
                 ; 0000 0173             }
                 ; 0000 0174             break;
                 _0x62:
                 ; 0000 0175         default:
                 _0x64:
                 ; 0000 0176             break;
                 ; 0000 0177         }
                 _0x59:
                 ; 0000 0178 
                 ; 0000 0179         if (keypad[rowloc][cl] == 'L')
0004b2 940e 0acb 	CALL SUBOPT_0x15
0004b4 91ac      	LD   R26,X
0004b5 34ac      	CPI  R26,LOW(0x4C)
0004b6 f449      	BRNE _0x65
                 ; 0000 017A         {
                 ; 0000 017B             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0004b7 e0e0      	LDI  R30,LOW(0)
0004b8 15e7      	CP   R30,R7
0004b9 f420      	BRSH _0x66
0004ba 2de7      	MOV  R30,R7
0004bb e0f0      	LDI  R31,0
0004bc 9731      	SBIW R30,1
0004bd c001      	RJMP _0x67
                 _0x66:
0004be e0e3      	LDI  R30,LOW(3)
                 _0x67:
0004bf 2e7e      	MOV  R7,R30
                 ; 0000 017C         }
                 ; 0000 017D         if (keypad[rowloc][cl] == 'R')
                 _0x65:
0004c0 940e 0acb 	CALL SUBOPT_0x15
0004c2 91ac      	LD   R26,X
0004c3 35a2      	CPI  R26,LOW(0x52)
0004c4 f441      	BRNE _0x69
                 ; 0000 017E         {
                 ; 0000 017F             page_num = (page_num + 1) % MENU_PAGE_COUNT;
0004c5 2de7      	MOV  R30,R7
0004c6 e0f0      	LDI  R31,0
0004c7 9631      	ADIW R30,1
0004c8 e0a3      	LDI  R26,LOW(3)
0004c9 e0b0      	LDI  R27,HIGH(3)
0004ca 940e 0ce4 	CALL __MANDW12
0004cc 2e7e      	MOV  R7,R30
                 ; 0000 0180         }
                 ; 0000 0181     }
                 _0x69:
                 ; 0000 0182     else if (stage == STAGE_ATTENDENC_MENU)
0004cd c261      	RJMP _0x6A
                 _0x56:
0004ce 940e 0a43 	CALL SUBOPT_0x0
0004d0 f4a9      	BRNE _0x6B
                 ; 0000 0183     {
                 ; 0000 0184         switch (keypad[rowloc][cl])
0004d1 940e 0acb 	CALL SUBOPT_0x15
0004d3 91ec      	LD   R30,X
0004d4 e0f0      	LDI  R31,0
                 ; 0000 0185         {
                 ; 0000 0186         case 'C':
0004d5 34e3      	CPI  R30,LOW(0x43)
0004d6 e0a0      	LDI  R26,HIGH(0x43)
0004d7 07fa      	CPC  R31,R26
0004d8 f419      	BRNE _0x6F
                 ; 0000 0187             stage = STAGE_INIT_MENU;
0004d9 2444      	CLR  R4
0004da 2455      	CLR  R5
                 ; 0000 0188             break;
0004db c009      	RJMP _0x6E
                 ; 0000 0189         case '1':
                 _0x6F:
0004dc 33e1      	CPI  R30,LOW(0x31)
0004dd e0a0      	LDI  R26,HIGH(0x31)
0004de 07fa      	CPC  R31,R26
0004df f429      	BRNE _0x71
                 ; 0000 018A             memset(buffer, 0, 32);
0004e0 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 018B             stage = STAGE_SUBMIT_CODE;
0004e2 e0e2      	LDI  R30,LOW(2)
0004e3 e0f0      	LDI  R31,HIGH(2)
0004e4 012f      	MOVW R4,R30
                 ; 0000 018C             break;
                 ; 0000 018D         default:
                 _0x71:
                 ; 0000 018E             break;
                 ; 0000 018F         }
                 _0x6E:
                 ; 0000 0190     }
                 ; 0000 0191     else if (stage == STAGE_SUBMIT_CODE)
0004e5 c249      	RJMP _0x72
                 _0x6B:
0004e6 940e 0a57 	CALL SUBOPT_0x3
0004e8 f009      	BREQ PC+2
0004e9 c0a4      	RJMP _0x73
                 ; 0000 0192     {
                 ; 0000 0193 
                 ; 0000 0194         if (keypad[rowloc][cl] == 'C')
0004ea 940e 0acb 	CALL SUBOPT_0x15
0004ec 91ac      	LD   R26,X
0004ed 34a3      	CPI  R26,LOW(0x43)
0004ee f429      	BRNE _0x74
                 ; 0000 0195         {
                 ; 0000 0196             memset(buffer, 0, 32);
0004ef 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 0197             stage = STAGE_ATTENDENC_MENU;
0004f1 e0e1      	LDI  R30,LOW(1)
0004f2 e0f0      	LDI  R31,HIGH(1)
0004f3 012f      	MOVW R4,R30
                 ; 0000 0198         }
                 ; 0000 0199         if ((keypad[rowloc][cl] - '0') < 10)
                 _0x74:
0004f4 940e 0acb 	CALL SUBOPT_0x15
0004f6 91ec      	LD   R30,X
0004f7 e0f0      	LDI  R31,0
0004f8 97fa      	SBIW R30,58
0004f9 f47c      	BRGE _0x75
                 ; 0000 019A         {
                 ; 0000 019B             if (strlen(buffer) <= 30)
0004fa 940e 0ad7 	CALL SUBOPT_0x16
0004fc 977f      	SBIW R30,31
0004fd f450      	BRSH _0x76
                 ; 0000 019C             {
                 ; 0000 019D                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0004fe 940e 0ad7 	CALL SUBOPT_0x16
000500 940e 0adb 	CALL SUBOPT_0x17
000502 940e 0adf 	CALL SUBOPT_0x18
                 ; 0000 019E                 buffer[strlen(buffer) + 1] = '\0';
000504 940e 0ae3 	CALL SUBOPT_0x19
                 ; 0000 019F                 lcdData(keypad[rowloc][cl]);
000506 91ac      	LD   R26,X
000507 d244      	RCALL _lcdData
                 ; 0000 01A0             }
                 ; 0000 01A1         }
                 _0x76:
                 ; 0000 01A2         else if (keypad[rowloc][cl] == 'D')
000508 c084      	RJMP _0x77
                 _0x75:
000509 940e 0acb 	CALL SUBOPT_0x15
00050b 91ac      	LD   R26,X
00050c 34a4      	CPI  R26,LOW(0x44)
00050d f461      	BRNE _0x78
                 ; 0000 01A3         {
                 ; 0000 01A4             buffer_len = strlen(buffer);
00050e 940e 0ad7 	CALL SUBOPT_0x16
000510 2f5e      	MOV  R21,R30
                 ; 0000 01A5             if (buffer_len > 0)
000511 3051      	CPI  R21,1
000512 f030      	BRLO _0x79
                 ; 0000 01A6             {
                 ; 0000 01A7                 buffer[buffer_len - 1] = '\0';
000513 940e 0ae8 	CALL SUBOPT_0x1A
                 ; 0000 01A8                 lcdCommand(0x10);
                 ; 0000 01A9                 lcd_print(" ");
                +
000515 eda8     +LDI R26 , LOW ( _0x63 + ( 40 ) )
000516 e0b3     +LDI R27 , HIGH ( _0x63 + ( 40 ) )
                 	__POINTW2MN _0x63,40
000517 940e 0af2 	CALL SUBOPT_0x1B
                 ; 0000 01AA                 lcdCommand(0x10);
                 ; 0000 01AB             }
                 ; 0000 01AC         }
                 _0x79:
                 ; 0000 01AD         else if (keypad[rowloc][cl] == 'E')
000519 c073      	RJMP _0x7A
                 _0x78:
00051a 940e 0acb 	CALL SUBOPT_0x15
00051c 91ac      	LD   R26,X
00051d 34a5      	CPI  R26,LOW(0x45)
00051e f009      	BREQ PC+2
00051f c065      	RJMP _0x7B
                 ; 0000 01AE         {
                 ; 0000 01AF 
                 ; 0000 01B0 #asm("cli")
000520 94f8      	cli
                 ; 0000 01B1 
                 ; 0000 01B2             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 01B3                 strlen(buffer) != 8)
000521 e3ef      	LDI  R30,LOW(_buffer)
000522 e0f7      	LDI  R31,HIGH(_buffer)
000523 93fa      	ST   -Y,R31
000524 93ea      	ST   -Y,R30
                +
000525 edea     +LDI R30 , LOW ( _0x63 + ( 42 ) )
000526 e0f3     +LDI R31 , HIGH ( _0x63 + ( 42 ) )
                 	__POINTW1MN _0x63,42
000527 93fa      	ST   -Y,R31
000528 93ea      	ST   -Y,R30
000529 e0a2      	LDI  R26,LOW(2)
00052a 940e 0a2a 	CALL _strncmp
00052c 30e0      	CPI  R30,0
00052d f431      	BRNE _0x7D
00052e 940e 0ad7 	CALL SUBOPT_0x16
000530 30e8      	CPI  R30,LOW(0x8)
000531 e0a0      	LDI  R26,HIGH(0x8)
000532 07fa      	CPC  R31,R26
000533 f069      	BREQ _0x7C
                 _0x7D:
                 ; 0000 01B4             {
                 ; 0000 01B5 
                 ; 0000 01B6                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000534 9a97      	SBI  0x12,7
                 ; 0000 01B7                 lcdCommand(0x01);
000535 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 01B8                 lcd_gotoxy(1, 1);
                 ; 0000 01B9                 lcd_print("Incorrect Student Code Format");
                +
000537 edad     +LDI R26 , LOW ( _0x63 + ( 45 ) )
000538 e0b3     +LDI R27 , HIGH ( _0x63 + ( 45 ) )
                 	__POINTW2MN _0x63,45
000539 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 01BA                 lcd_gotoxy(1, 2);
                 ; 0000 01BB                 lcd_print("You Will Back Menu In 2 Second");
                +
00053b efab     +LDI R26 , LOW ( _0x63 + ( 75 ) )
00053c e0b3     +LDI R27 , HIGH ( _0x63 + ( 75 ) )
                 	__POINTW2MN _0x63,75
00053d 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 01BC                 delay_ms(2000);
                 ; 0000 01BD                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
00053f 9897      	CBI  0x12,7
                 ; 0000 01BE             }
                 ; 0000 01BF             else if (search_student_code() > 0)
000540 c040      	RJMP _0x7F
                 _0x7C:
000541 d328      	RCALL _search_student_code
000542 30e1      	CPI  R30,LOW(0x1)
000543 f068      	BRLO _0x80
                 ; 0000 01C0             {
                 ; 0000 01C1                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000544 9a97      	SBI  0x12,7
                 ; 0000 01C2                 lcdCommand(0x01);
000545 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 01C3                 lcd_gotoxy(1, 1);
                 ; 0000 01C4                 lcd_print("Duplicate Student Code Entered");
                +
000547 e1aa     +LDI R26 , LOW ( _0x63 + ( 106 ) )
000548 e0b4     +LDI R27 , HIGH ( _0x63 + ( 106 ) )
                 	__POINTW2MN _0x63,106
000549 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 01C5                 lcd_gotoxy(1, 2);
                 ; 0000 01C6                 lcd_print("You Will Back Menu In 2 Second");
                +
00054b e3a9     +LDI R26 , LOW ( _0x63 + ( 137 ) )
00054c e0b4     +LDI R27 , HIGH ( _0x63 + ( 137 ) )
                 	__POINTW2MN _0x63,137
00054d 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 01C7                 delay_ms(2000);
                 ; 0000 01C8                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
00054f 9897      	CBI  0x12,7
                 ; 0000 01C9             }
                 ; 0000 01CA             else
000550 c030      	RJMP _0x81
                 _0x80:
                 ; 0000 01CB             {
                 ; 0000 01CC                 // save the buffer to EEPROM
                 ; 0000 01CD                 st_counts = read_byte_from_eeprom(0x0);
000551 940e 0a89 	CALL SUBOPT_0xA
000553 2f2e      	MOV  R18,R30
                 ; 0000 01CE                 for (i = 0; i < 8; i++)
000554 e0e0      	LDI  R30,LOW(0)
000555 83ee      	STD  Y+6,R30
000556 83ef      	STD  Y+6+1,R30
                 _0x83:
000557 81ae      	LDD  R26,Y+6
000558 81bf      	LDD  R27,Y+6+1
000559 9718      	SBIW R26,8
00055a f4ac      	BRGE _0x84
                 ; 0000 01CF                 {
                 ; 0000 01D0                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
00055b 2fe2      	MOV  R30,R18
00055c 940e 0af7 	CALL SUBOPT_0x1C
00055e 81ae      	LDD  R26,Y+6
00055f 81bf      	LDD  R27,Y+6+1
000560 0fea      	ADD  R30,R26
000561 1ffb      	ADC  R31,R27
000562 93fa      	ST   -Y,R31
000563 93ea      	ST   -Y,R30
000564 85e8      	LDD  R30,Y+8
000565 85f9      	LDD  R31,Y+8+1
000566 5ce1      	SUBI R30,LOW(-_buffer)
000567 4ff8      	SBCI R31,HIGH(-_buffer)
000568 81a0      	LD   R26,Z
000569 d2e1      	RCALL _write_byte_to_eeprom
                 ; 0000 01D1                 }
00056a 81ee      	LDD  R30,Y+6
00056b 81ff      	LDD  R31,Y+6+1
00056c 9631      	ADIW R30,1
00056d 83ee      	STD  Y+6,R30
00056e 83ff      	STD  Y+6+1,R31
00056f cfe7      	RJMP _0x83
                 _0x84:
                 ; 0000 01D2                 write_byte_to_eeprom(0x0, st_counts + 1);
000570 e0e0      	LDI  R30,LOW(0)
000571 e0f0      	LDI  R31,HIGH(0)
000572 93fa      	ST   -Y,R31
000573 93ea      	ST   -Y,R30
000574 2fa2      	MOV  R26,R18
000575 5faf      	SUBI R26,-LOW(1)
000576 d2d4      	RCALL _write_byte_to_eeprom
                 ; 0000 01D3 
                 ; 0000 01D4                 lcdCommand(0x01);
000577 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 01D5                 lcd_gotoxy(1, 1);
                 ; 0000 01D6                 lcd_print("Student Code Successfully Added");
                +
000579 e5a8     +LDI R26 , LOW ( _0x63 + ( 168 ) )
00057a e0b4     +LDI R27 , HIGH ( _0x63 + ( 168 ) )
                 	__POINTW2MN _0x63,168
00057b 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 01D7                 lcd_gotoxy(1, 2);
                 ; 0000 01D8                 lcd_print("You Will Back Menu In 2 Second");
                +
00057d e7a8     +LDI R26 , LOW ( _0x63 + ( 200 ) )
00057e e0b4     +LDI R27 , HIGH ( _0x63 + ( 200 ) )
                 	__POINTW2MN _0x63,200
00057f 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 01D9                 delay_ms(2000);
                 ; 0000 01DA             }
                 _0x81:
                 _0x7F:
                 ; 0000 01DB             memset(buffer, 0, 32);
000581 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 01DC #asm("sei")
000583 9478      	sei
                 ; 0000 01DD             stage = STAGE_ATTENDENC_MENU;
000584 c005      	RJMP _0x135
                 ; 0000 01DE         }
                 ; 0000 01DF         else if (keypad[rowloc][cl] == 'C')
                 _0x7B:
000585 940e 0acb 	CALL SUBOPT_0x15
000587 91ac      	LD   R26,X
000588 34a3      	CPI  R26,LOW(0x43)
000589 f419      	BRNE _0x86
                 ; 0000 01E0             stage = STAGE_ATTENDENC_MENU;
                 _0x135:
00058a e0e1      	LDI  R30,LOW(1)
00058b e0f0      	LDI  R31,HIGH(1)
00058c 012f      	MOVW R4,R30
                 ; 0000 01E1     }
                 _0x86:
                 _0x7A:
                 _0x77:
                 ; 0000 01E2     else if (stage == STAGE_TEMPERATURE_MONITORING)
00058d c1a1      	RJMP _0x87
                 _0x73:
00058e 940e 0a64 	CALL SUBOPT_0x5
000590 f441      	BRNE _0x88
                 ; 0000 01E3     {
                 ; 0000 01E4 
                 ; 0000 01E5         if (keypad[rowloc][cl] == 'C')
000591 940e 0acb 	CALL SUBOPT_0x15
000593 91ac      	LD   R26,X
000594 34a3      	CPI  R26,LOW(0x43)
000595 f411      	BRNE _0x89
                 ; 0000 01E6             stage = STAGE_INIT_MENU;
000596 2444      	CLR  R4
000597 2455      	CLR  R5
                 ; 0000 01E7     }
                 _0x89:
                 ; 0000 01E8     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000598 c196      	RJMP _0x8A
                 _0x88:
000599 940e 0a69 	CALL SUBOPT_0x6
00059b f441      	BRNE _0x8B
                 ; 0000 01E9     {
                 ; 0000 01EA         if (keypad[rowloc][cl] == 'C')
00059c 940e 0acb 	CALL SUBOPT_0x15
00059e 91ac      	LD   R26,X
00059f 34a3      	CPI  R26,LOW(0x43)
0005a0 f411      	BRNE _0x8C
                 ; 0000 01EB             stage = STAGE_INIT_MENU;
0005a1 2444      	CLR  R4
0005a2 2455      	CLR  R5
                 ; 0000 01EC     }
                 _0x8C:
                 ; 0000 01ED     else if (stage == STAGE_STUDENT_MANAGMENT)
0005a3 c18b      	RJMP _0x8D
                 _0x8B:
0005a4 940e 0a9d 	CALL SUBOPT_0xD
0005a6 f591      	BRNE _0x8E
                 ; 0000 01EE     {
                 ; 0000 01EF         if (keypad[rowloc][cl] == 'C')
0005a7 940e 0acb 	CALL SUBOPT_0x15
0005a9 91ac      	LD   R26,X
0005aa 34a3      	CPI  R26,LOW(0x43)
0005ab f419      	BRNE _0x8F
                 ; 0000 01F0             stage = STAGE_INIT_MENU;
0005ac 2444      	CLR  R4
0005ad 2455      	CLR  R5
                 ; 0000 01F1         else if (keypad[rowloc][cl] == '1')
0005ae c029      	RJMP _0x90
                 _0x8F:
0005af 940e 0acb 	CALL SUBOPT_0x15
0005b1 91ac      	LD   R26,X
0005b2 33a1      	CPI  R26,LOW(0x31)
0005b3 f419      	BRNE _0x91
                 ; 0000 01F2             stage = STAGE_SEARCH_STUDENT;
0005b4 e0e7      	LDI  R30,LOW(7)
0005b5 e0f0      	LDI  R31,HIGH(7)
0005b6 c020      	RJMP _0x136
                 ; 0000 01F3         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0x91:
0005b7 940e 0acb 	CALL SUBOPT_0x15
0005b9 91ac      	LD   R26,X
0005ba 33a2      	CPI  R26,LOW(0x32)
0005bb f419      	BRNE _0x94
0005bc e0e1      	LDI  R30,LOW(1)
0005bd 15e9      	CP   R30,R9
0005be f009      	BREQ _0x95
                 _0x94:
0005bf c003      	RJMP _0x93
                 _0x95:
                 ; 0000 01F4             stage = STAGE_DELETE_STUDENT;
0005c0 e0e8      	LDI  R30,LOW(8)
0005c1 e0f0      	LDI  R31,HIGH(8)
0005c2 c014      	RJMP _0x136
                 ; 0000 01F5         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0x93:
0005c3 940e 0acb 	CALL SUBOPT_0x15
0005c5 91ac      	LD   R26,X
0005c6 33a2      	CPI  R26,LOW(0x32)
0005c7 f411      	BRNE _0x98
0005c8 2099      	TST  R9
0005c9 f009      	BREQ _0x99
                 _0x98:
0005ca c00d      	RJMP _0x97
                 _0x99:
                 ; 0000 01F6         {
                 ; 0000 01F7             lcdCommand(0x01);
0005cb 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 01F8             lcd_gotoxy(1, 1);
                 ; 0000 01F9             lcd_print("You Must First Login");
                +
0005cd e9a7     +LDI R26 , LOW ( _0x63 + ( 231 ) )
0005ce e0b4     +LDI R27 , HIGH ( _0x63 + ( 231 ) )
                 	__POINTW2MN _0x63,231
0005cf 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 01FA             lcd_gotoxy(1, 2);
                 ; 0000 01FB             lcd_print("You Will Go Admin Page 2 Sec");
                +
0005d1 eaac     +LDI R26 , LOW ( _0x63 + ( 252 ) )
0005d2 e0b4     +LDI R27 , HIGH ( _0x63 + ( 252 ) )
                 	__POINTW2MN _0x63,252
0005d3 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 01FC             delay_ms(2000);
                 ; 0000 01FD             stage = STAGE_LOGIN_WITH_ADMIN;
0005d5 e0ea      	LDI  R30,LOW(10)
0005d6 e0f0      	LDI  R31,HIGH(10)
                 _0x136:
0005d7 012f      	MOVW R4,R30
                 ; 0000 01FE         }
                 ; 0000 01FF     }
                 _0x97:
                 _0x90:
                 ; 0000 0200     else if (stage == STAGE_SEARCH_STUDENT)
0005d8 c156      	RJMP _0x9A
                 _0x8E:
0005d9 940e 0aa2 	CALL SUBOPT_0xE
0005db f009      	BREQ PC+2
0005dc c05c      	RJMP _0x9B
                 ; 0000 0201     {
                 ; 0000 0202         if (keypad[rowloc][cl] == 'C')
0005dd 940e 0acb 	CALL SUBOPT_0x15
0005df 91ac      	LD   R26,X
0005e0 34a3      	CPI  R26,LOW(0x43)
0005e1 f419      	BRNE _0x9C
                 ; 0000 0203         {
                 ; 0000 0204             memset(buffer, 0, 32);
0005e2 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 0205             stage = STAGE_STUDENT_MANAGMENT;
0005e4 c050      	RJMP _0x137
                 ; 0000 0206         }
                 ; 0000 0207         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0x9C:
0005e5 940e 0acb 	CALL SUBOPT_0x15
0005e7 91ec      	LD   R30,X
0005e8 e0f0      	LDI  R31,0
0005e9 97fa      	SBIW R30,58
0005ea f47c      	BRGE _0x9E
                 ; 0000 0208         {
                 ; 0000 0209             if (strlen(buffer) <= 30)
0005eb 940e 0ad7 	CALL SUBOPT_0x16
0005ed 977f      	SBIW R30,31
0005ee f450      	BRSH _0x9F
                 ; 0000 020A             {
                 ; 0000 020B                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0005ef 940e 0ad7 	CALL SUBOPT_0x16
0005f1 940e 0adb 	CALL SUBOPT_0x17
0005f3 940e 0adf 	CALL SUBOPT_0x18
                 ; 0000 020C                 buffer[strlen(buffer) + 1] = '\0';
0005f5 940e 0ae3 	CALL SUBOPT_0x19
                 ; 0000 020D                 lcdData(keypad[rowloc][cl]);
0005f7 91ac      	LD   R26,X
0005f8 d153      	RCALL _lcdData
                 ; 0000 020E             }
                 ; 0000 020F         }
                 _0x9F:
                 ; 0000 0210         else if (keypad[rowloc][cl] == 'D')
0005f9 c03e      	RJMP _0xA0
                 _0x9E:
0005fa 940e 0acb 	CALL SUBOPT_0x15
0005fc 91ac      	LD   R26,X
0005fd 34a4      	CPI  R26,LOW(0x44)
0005fe f461      	BRNE _0xA1
                 ; 0000 0211         {
                 ; 0000 0212             buffer_len = strlen(buffer);
0005ff 940e 0ad7 	CALL SUBOPT_0x16
000601 2f5e      	MOV  R21,R30
                 ; 0000 0213             if (buffer_len > 0)
000602 3051      	CPI  R21,1
000603 f030      	BRLO _0xA2
                 ; 0000 0214             {
                 ; 0000 0215                 buffer[buffer_len - 1] = '\0';
000604 940e 0ae8 	CALL SUBOPT_0x1A
                 ; 0000 0216                 lcdCommand(0x10);
                 ; 0000 0217                 lcd_print(" ");
                +
000606 eca9     +LDI R26 , LOW ( _0x63 + ( 281 ) )
000607 e0b4     +LDI R27 , HIGH ( _0x63 + ( 281 ) )
                 	__POINTW2MN _0x63,281
000608 940e 0af2 	CALL SUBOPT_0x1B
                 ; 0000 0218                 lcdCommand(0x10);
                 ; 0000 0219             }
                 ; 0000 021A         }
                 _0xA2:
                 ; 0000 021B         else if (keypad[rowloc][cl] == 'E')
00060a c02d      	RJMP _0xA3
                 _0xA1:
00060b 940e 0acb 	CALL SUBOPT_0x15
00060d 91ac      	LD   R26,X
00060e 34a5      	CPI  R26,LOW(0x45)
00060f f501      	BRNE _0xA4
                 ; 0000 021C         {
                 ; 0000 021D             // search from eeprom data
                 ; 0000 021E             unsigned char result = search_student_code();
                 ; 0000 021F 
                 ; 0000 0220             if (result > 0)
000610 940e 0afc 	CALL SUBOPT_0x1D
                 ;	i -> Y+7
                 ;	result -> Y+0
000612 f048      	BRLO _0xA5
                 ; 0000 0221             {
                 ; 0000 0222                 lcdCommand(0x01);
000613 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0223                 lcd_gotoxy(1, 1);
                 ; 0000 0224                 lcd_print("Student Code Found");
                +
000615 ecab     +LDI R26 , LOW ( _0x63 + ( 283 ) )
000616 e0b4     +LDI R27 , HIGH ( _0x63 + ( 283 ) )
                 	__POINTW2MN _0x63,283
000617 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0225                 lcd_gotoxy(1, 2);
                 ; 0000 0226                 lcd_print("You Will Back Menu In 2 Second");
                +
000619 edae     +LDI R26 , LOW ( _0x63 + ( 302 ) )
00061a e0b4     +LDI R27 , HIGH ( _0x63 + ( 302 ) )
                 	__POINTW2MN _0x63,302
00061b c008      	RJMP _0x138
                 ; 0000 0227                 delay_ms(2000);
                 ; 0000 0228             }
                 ; 0000 0229             else
                 _0xA5:
                 ; 0000 022A             {
                 ; 0000 022B                 lcdCommand(0x01);
00061c 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 022C                 lcd_gotoxy(1, 1);
                 ; 0000 022D                 lcd_print("Ops , Student Code Not Found");
                +
00061e efad     +LDI R26 , LOW ( _0x63 + ( 333 ) )
00061f e0b4     +LDI R27 , HIGH ( _0x63 + ( 333 ) )
                 	__POINTW2MN _0x63,333
000620 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 022E                 lcd_gotoxy(1, 2);
                 ; 0000 022F                 lcd_print("You Will Back Menu In 2 Second");
                +
000622 e1aa     +LDI R26 , LOW ( _0x63 + ( 362 ) )
000623 e0b5     +LDI R27 , HIGH ( _0x63 + ( 362 ) )
                 	__POINTW2MN _0x63,362
                 _0x138:
000624 d163      	RCALL _lcd_print
                 ; 0000 0230                 delay_ms(2000);
000625 eda0      	LDI  R26,LOW(2000)
000626 e0b7      	LDI  R27,HIGH(2000)
000627 940e 0b41 	CALL _delay_ms
                 ; 0000 0231             }
                 ; 0000 0232             memset(buffer, 0, 32);
000629 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 0233             stage = STAGE_STUDENT_MANAGMENT;
00062b e0e6      	LDI  R30,LOW(6)
00062c e0f0      	LDI  R31,HIGH(6)
00062d 012f      	MOVW R4,R30
                 ; 0000 0234         }
00062e 9621      	ADIW R28,1
                 ; 0000 0235         else if (keypad[rowloc][cl] == 'C')
00062f c008      	RJMP _0xA7
                 _0xA4:
000630 940e 0acb 	CALL SUBOPT_0x15
000632 91ac      	LD   R26,X
000633 34a3      	CPI  R26,LOW(0x43)
000634 f419      	BRNE _0xA8
                 ; 0000 0236             stage = STAGE_STUDENT_MANAGMENT;
                 _0x137:
000635 e0e6      	LDI  R30,LOW(6)
000636 e0f0      	LDI  R31,HIGH(6)
000637 012f      	MOVW R4,R30
                 ; 0000 0237     }
                 _0xA8:
                 _0xA7:
                 _0xA3:
                 _0xA0:
                 ; 0000 0238     else if (stage == STAGE_DELETE_STUDENT)
000638 c0f6      	RJMP _0xA9
                 _0x9B:
000639 940e 0aa7 	CALL SUBOPT_0xF
00063b f009      	BREQ PC+2
00063c c061      	RJMP _0xAA
                 ; 0000 0239     {
                 ; 0000 023A         if (keypad[rowloc][cl] == 'C')
00063d 940e 0acb 	CALL SUBOPT_0x15
00063f 91ac      	LD   R26,X
000640 34a3      	CPI  R26,LOW(0x43)
000641 f431      	BRNE _0xAB
                 ; 0000 023B         {
                 ; 0000 023C             memset(buffer, 0, 32);
000642 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 023D             stage = STAGE_STUDENT_MANAGMENT;
000644 e0e6      	LDI  R30,LOW(6)
000645 e0f0      	LDI  R31,HIGH(6)
000646 012f      	MOVW R4,R30
                 ; 0000 023E         }
                 ; 0000 023F         else if ((keypad[rowloc][cl] - '0') < 10)
000647 c055      	RJMP _0xAC
                 _0xAB:
000648 940e 0acb 	CALL SUBOPT_0x15
00064a 91ec      	LD   R30,X
00064b e0f0      	LDI  R31,0
00064c 97fa      	SBIW R30,58
00064d f47c      	BRGE _0xAD
                 ; 0000 0240         {
                 ; 0000 0241             if (strlen(buffer) <= 30)
00064e 940e 0ad7 	CALL SUBOPT_0x16
000650 977f      	SBIW R30,31
000651 f450      	BRSH _0xAE
                 ; 0000 0242             {
                 ; 0000 0243                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000652 940e 0ad7 	CALL SUBOPT_0x16
000654 940e 0adb 	CALL SUBOPT_0x17
000656 940e 0adf 	CALL SUBOPT_0x18
                 ; 0000 0244                 buffer[strlen(buffer) + 1] = '\0';
000658 940e 0ae3 	CALL SUBOPT_0x19
                 ; 0000 0245                 lcdData(keypad[rowloc][cl]);
00065a 91ac      	LD   R26,X
00065b d0f0      	RCALL _lcdData
                 ; 0000 0246             }
                 ; 0000 0247         }
                 _0xAE:
                 ; 0000 0248         else if (keypad[rowloc][cl] == 'D')
00065c c040      	RJMP _0xAF
                 _0xAD:
00065d 940e 0acb 	CALL SUBOPT_0x15
00065f 91ac      	LD   R26,X
000660 34a4      	CPI  R26,LOW(0x44)
000661 f461      	BRNE _0xB0
                 ; 0000 0249         {
                 ; 0000 024A             buffer_len = strlen(buffer);
000662 940e 0ad7 	CALL SUBOPT_0x16
000664 2f5e      	MOV  R21,R30
                 ; 0000 024B             if (buffer_len > 0)
000665 3051      	CPI  R21,1
000666 f030      	BRLO _0xB1
                 ; 0000 024C             {
                 ; 0000 024D                 buffer[buffer_len - 1] = '\0';
000667 940e 0ae8 	CALL SUBOPT_0x1A
                 ; 0000 024E                 lcdCommand(0x10);
                 ; 0000 024F                 lcd_print(" ");
                +
000669 e3a9     +LDI R26 , LOW ( _0x63 + ( 393 ) )
00066a e0b5     +LDI R27 , HIGH ( _0x63 + ( 393 ) )
                 	__POINTW2MN _0x63,393
00066b 940e 0af2 	CALL SUBOPT_0x1B
                 ; 0000 0250                 lcdCommand(0x10);
                 ; 0000 0251             }
                 ; 0000 0252         }
                 _0xB1:
                 ; 0000 0253         else if (keypad[rowloc][cl] == 'E')
00066d c02f      	RJMP _0xB2
                 _0xB0:
00066e 940e 0acb 	CALL SUBOPT_0x15
000670 91ac      	LD   R26,X
000671 34a5      	CPI  R26,LOW(0x45)
000672 f551      	BRNE _0xB3
                 ; 0000 0254         {
                 ; 0000 0255             // search from eeprom data
                 ; 0000 0256             unsigned char result = search_student_code();
                 ; 0000 0257 
                 ; 0000 0258             if (result > 0)
000673 940e 0afc 	CALL SUBOPT_0x1D
                 ;	i -> Y+7
                 ;	result -> Y+0
000675 f0a0      	BRLO _0xB4
                 ; 0000 0259             {
                 ; 0000 025A                 lcdCommand(0x01);
000676 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 025B                 lcd_gotoxy(1, 1);
                 ; 0000 025C                 lcd_print("Student Code Found");
                +
000678 e3ab     +LDI R26 , LOW ( _0x63 + ( 395 ) )
000679 e0b5     +LDI R27 , HIGH ( _0x63 + ( 395 ) )
                 	__POINTW2MN _0x63,395
00067a 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 025D                 lcd_gotoxy(1, 2);
                 ; 0000 025E                 lcd_print("Wait For Delete...");
                +
00067c e4ae     +LDI R26 , LOW ( _0x63 + ( 414 ) )
00067d e0b5     +LDI R27 , HIGH ( _0x63 + ( 414 ) )
                 	__POINTW2MN _0x63,414
00067e d109      	RCALL _lcd_print
                 ; 0000 025F                 delete_student_code(result);
00067f 81a8      	LD   R26,Y
000680 d233      	RCALL _delete_student_code
                 ; 0000 0260                 lcdCommand(0x01);
000681 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0261                 lcd_gotoxy(1, 1);
                 ; 0000 0262                 lcd_print("Student Code Was Deleted");
                +
000683 e6a1     +LDI R26 , LOW ( _0x63 + ( 433 ) )
000684 e0b5     +LDI R27 , HIGH ( _0x63 + ( 433 ) )
                 	__POINTW2MN _0x63,433
000685 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0263                 lcd_gotoxy(1, 2);
                 ; 0000 0264                 lcd_print("You Will Back Menu In 2 Second");
                +
000687 e7aa     +LDI R26 , LOW ( _0x63 + ( 458 ) )
000688 e0b5     +LDI R27 , HIGH ( _0x63 + ( 458 ) )
                 	__POINTW2MN _0x63,458
000689 c008      	RJMP _0x139
                 ; 0000 0265                 delay_ms(2000);
                 ; 0000 0266             }
                 ; 0000 0267             else
                 _0xB4:
                 ; 0000 0268             {
                 ; 0000 0269                 lcdCommand(0x01);
00068a 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 026A                 lcd_gotoxy(1, 1);
                 ; 0000 026B                 lcd_print("Ops , Student Code Not Found");
                +
00068c e9a9     +LDI R26 , LOW ( _0x63 + ( 489 ) )
00068d e0b5     +LDI R27 , HIGH ( _0x63 + ( 489 ) )
                 	__POINTW2MN _0x63,489
00068e 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 026C                 lcd_gotoxy(1, 2);
                 ; 0000 026D                 lcd_print("You Will Back Menu In 2 Second");
                +
000690 eba6     +LDI R26 , LOW ( _0x63 + ( 518 ) )
000691 e0b5     +LDI R27 , HIGH ( _0x63 + ( 518 ) )
                 	__POINTW2MN _0x63,518
                 _0x139:
000692 d0f5      	RCALL _lcd_print
                 ; 0000 026E                 delay_ms(2000);
000693 eda0      	LDI  R26,LOW(2000)
000694 e0b7      	LDI  R27,HIGH(2000)
000695 940e 0b41 	CALL _delay_ms
                 ; 0000 026F             }
                 ; 0000 0270             memset(buffer, 0, 32);
000697 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 0271             stage = STAGE_STUDENT_MANAGMENT;
000699 e0e6      	LDI  R30,LOW(6)
00069a e0f0      	LDI  R31,HIGH(6)
00069b 012f      	MOVW R4,R30
                 ; 0000 0272         }
00069c 9621      	ADIW R28,1
                 ; 0000 0273     }
                 _0xB3:
                 _0xB2:
                 _0xAF:
                 _0xAC:
                 ; 0000 0274     else if (stage == STAGE_TRAFFIC_MONITORING)
00069d c091      	RJMP _0xB6
                 _0xAA:
00069e 940e 0aac 	CALL SUBOPT_0x10
0006a0 f441      	BRNE _0xB7
                 ; 0000 0275     {
                 ; 0000 0276         if (keypad[rowloc][cl] == 'C')
0006a1 940e 0acb 	CALL SUBOPT_0x15
0006a3 91ac      	LD   R26,X
0006a4 34a3      	CPI  R26,LOW(0x43)
0006a5 f411      	BRNE _0xB8
                 ; 0000 0277             stage = STAGE_INIT_MENU;
0006a6 2444      	CLR  R4
0006a7 2455      	CLR  R5
                 ; 0000 0278     }
                 _0xB8:
                 ; 0000 0279     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
0006a8 c086      	RJMP _0xB9
                 _0xB7:
0006a9 940e 0ab1 	CALL SUBOPT_0x11
0006ab f419      	BRNE _0xBB
0006ac e0e1      	LDI  R30,LOW(1)
0006ad 15e9      	CP   R30,R9
0006ae f409      	BRNE _0xBC
                 _0xBB:
0006af c05e      	RJMP _0xBA
                 _0xBC:
                 ; 0000 027A     {
                 ; 0000 027B         if (keypad[rowloc][cl] == 'C')
0006b0 940e 0acb 	CALL SUBOPT_0x15
0006b2 91ac      	LD   R26,X
0006b3 34a3      	CPI  R26,LOW(0x43)
0006b4 f429      	BRNE _0xBD
                 ; 0000 027C         {
                 ; 0000 027D             memset(buffer, 0, 32);
0006b5 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 027E             stage = STAGE_INIT_MENU;
0006b7 2444      	CLR  R4
0006b8 2455      	CLR  R5
                 ; 0000 027F         }
                 ; 0000 0280 
                 ; 0000 0281         else if ((keypad[rowloc][cl] - '0') < 10)
0006b9 c053      	RJMP _0xBE
                 _0xBD:
0006ba 940e 0acb 	CALL SUBOPT_0x15
0006bc 91ec      	LD   R30,X
0006bd e0f0      	LDI  R31,0
0006be 97fa      	SBIW R30,58
0006bf f47c      	BRGE _0xBF
                 ; 0000 0282         {
                 ; 0000 0283             if (strlen(buffer) <= 30)
0006c0 940e 0ad7 	CALL SUBOPT_0x16
0006c2 977f      	SBIW R30,31
0006c3 f450      	BRSH _0xC0
                 ; 0000 0284             {
                 ; 0000 0285                 buffer[strlen(buffer)] = keypad[rowloc][cl];
0006c4 940e 0ad7 	CALL SUBOPT_0x16
0006c6 940e 0adb 	CALL SUBOPT_0x17
0006c8 940e 0adf 	CALL SUBOPT_0x18
                 ; 0000 0286                 buffer[strlen(buffer) + 1] = '\0';
0006ca 940e 0ae3 	CALL SUBOPT_0x19
                 ; 0000 0287                 lcdData(keypad[rowloc][cl]);
0006cc 91ac      	LD   R26,X
0006cd d07e      	RCALL _lcdData
                 ; 0000 0288             }
                 ; 0000 0289         }
                 _0xC0:
                 ; 0000 028A         else if (keypad[rowloc][cl] == 'D')
0006ce c03e      	RJMP _0xC1
                 _0xBF:
0006cf 940e 0acb 	CALL SUBOPT_0x15
0006d1 91ac      	LD   R26,X
0006d2 34a4      	CPI  R26,LOW(0x44)
0006d3 f461      	BRNE _0xC2
                 ; 0000 028B         {
                 ; 0000 028C             buffer_len = strlen(buffer);
0006d4 940e 0ad7 	CALL SUBOPT_0x16
0006d6 2f5e      	MOV  R21,R30
                 ; 0000 028D             if (buffer_len > 0)
0006d7 3051      	CPI  R21,1
0006d8 f030      	BRLO _0xC3
                 ; 0000 028E             {
                 ; 0000 028F                 buffer[buffer_len - 1] = '\0';
0006d9 940e 0ae8 	CALL SUBOPT_0x1A
                 ; 0000 0290                 lcdCommand(0x10);
                 ; 0000 0291                 lcd_print(" ");
                +
0006db eda5     +LDI R26 , LOW ( _0x63 + ( 549 ) )
0006dc e0b5     +LDI R27 , HIGH ( _0x63 + ( 549 ) )
                 	__POINTW2MN _0x63,549
0006dd 940e 0af2 	CALL SUBOPT_0x1B
                 ; 0000 0292                 lcdCommand(0x10);
                 ; 0000 0293             }
                 ; 0000 0294         }
                 _0xC3:
                 ; 0000 0295         else if (keypad[rowloc][cl] == 'E')
0006df c02d      	RJMP _0xC4
                 _0xC2:
0006e0 940e 0acb 	CALL SUBOPT_0x15
0006e2 91ac      	LD   R26,X
0006e3 34a5      	CPI  R26,LOW(0x45)
0006e4 f541      	BRNE _0xC5
                 ; 0000 0296         {
                 ; 0000 0297             // search from eeprom data
                 ; 0000 0298             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 0299 
                 ; 0000 029A             if (input_hash == secret)
0006e5 9722      	SBIW R28,2
                 ;	i -> Y+8
                 ;	input_hash -> Y+0
0006e6 e3af      	LDI  R26,LOW(_buffer)
0006e7 e0b7      	LDI  R27,HIGH(_buffer)
0006e8 d2d4      	RCALL _simple_hash
0006e9 83e8      	ST   Y,R30
0006ea 83f9      	STD  Y+1,R31
0006eb 81a8      	LD   R26,Y
0006ec 81b9      	LDD  R27,Y+1
0006ed 36a4      	CPI  R26,LOW(0xF64)
0006ee e0ef      	LDI  R30,HIGH(0xF64)
0006ef 07be      	CPC  R27,R30
0006f0 f469      	BRNE _0xC6
                 ; 0000 029B             {
                 ; 0000 029C                 lcdCommand(0x01);
0006f1 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 029D                 lcd_gotoxy(1, 1);
                 ; 0000 029E                 lcd_print("Login Successfully");
                +
0006f3 eda7     +LDI R26 , LOW ( _0x63 + ( 551 ) )
0006f4 e0b5     +LDI R27 , HIGH ( _0x63 + ( 551 ) )
                 	__POINTW2MN _0x63,551
0006f5 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 029F                 lcd_gotoxy(1, 2);
                 ; 0000 02A0                 lcd_print("Wait...");
                +
0006f7 eeaa     +LDI R26 , LOW ( _0x63 + ( 570 ) )
0006f8 e0b5     +LDI R27 , HIGH ( _0x63 + ( 570 ) )
                 	__POINTW2MN _0x63,570
0006f9 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 02A1                 delay_ms(2000);
                 ; 0000 02A2                 logged_in = 1;
0006fb e0e1      	LDI  R30,LOW(1)
0006fc 2e9e      	MOV  R9,R30
                 ; 0000 02A3             }
                 ; 0000 02A4             else
0006fd c00a      	RJMP _0xC7
                 _0xC6:
                 ; 0000 02A5             {
                 ; 0000 02A6                 lcdCommand(0x01);
0006fe 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 02A7                 lcd_gotoxy(1, 1);
                 ; 0000 02A8                 lcd_print("Ops , secret is incorrect");
                +
000700 efa2     +LDI R26 , LOW ( _0x63 + ( 578 ) )
000701 e0b5     +LDI R27 , HIGH ( _0x63 + ( 578 ) )
                 	__POINTW2MN _0x63,578
000702 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 02A9                 lcd_gotoxy(1, 2);
                 ; 0000 02AA                 lcd_print("You Will Back Menu In 2 Second");
                +
000704 e0ac     +LDI R26 , LOW ( _0x63 + ( 604 ) )
000705 e0b6     +LDI R27 , HIGH ( _0x63 + ( 604 ) )
                 	__POINTW2MN _0x63,604
000706 940e 0a97 	CALL SUBOPT_0xC
                 ; 0000 02AB                 delay_ms(2000);
                 ; 0000 02AC             }
                 _0xC7:
                 ; 0000 02AD             memset(buffer, 0, 32);
000708 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 02AE             stage = STAGE_INIT_MENU;
00070a 2444      	CLR  R4
00070b 2455      	CLR  R5
                 ; 0000 02AF         }
00070c 9622      	ADIW R28,2
                 ; 0000 02B0     }
                 _0xC5:
                 _0xC4:
                 _0xC1:
                 _0xBE:
                 ; 0000 02B1     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
00070d c021      	RJMP _0xC8
                 _0xBA:
00070e 940e 0ab1 	CALL SUBOPT_0x11
000710 f411      	BRNE _0xCA
000711 2099      	TST  R9
000712 f409      	BRNE _0xCB
                 _0xCA:
000713 c01b      	RJMP _0xC9
                 _0xCB:
                 ; 0000 02B2     {
                 ; 0000 02B3         switch (keypad[rowloc][cl])
000714 940e 0acb 	CALL SUBOPT_0x15
000716 91ec      	LD   R30,X
000717 e0f0      	LDI  R31,0
                 ; 0000 02B4         {
                 ; 0000 02B5         case 'C':
000718 34e3      	CPI  R30,LOW(0x43)
000719 e0a0      	LDI  R26,HIGH(0x43)
00071a 07fa      	CPC  R31,R26
00071b f419      	BRNE _0xCF
                 ; 0000 02B6             stage = STAGE_INIT_MENU;
00071c 2444      	CLR  R4
00071d 2455      	CLR  R5
                 ; 0000 02B7             break;
00071e c00c      	RJMP _0xCE
                 ; 0000 02B8         case '1':
                 _0xCF:
00071f 33e1      	CPI  R30,LOW(0x31)
000720 e0a0      	LDI  R26,HIGH(0x31)
000721 07fa      	CPC  R31,R26
000722 f441      	BRNE _0xD1
                 ; 0000 02B9 #asm("cli") // disable interrupts
000723 94f8      	cli
                 ; 0000 02BA             lcdCommand(0x1);
000724 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 02BB             lcd_gotoxy(1, 1);
                 ; 0000 02BC             lcd_print("Clearing EEPROM ...");
                +
000726 e2ab     +LDI R26 , LOW ( _0x63 + ( 635 ) )
000727 e0b6     +LDI R27 , HIGH ( _0x63 + ( 635 ) )
                 	__POINTW2MN _0x63,635
000728 d05f      	RCALL _lcd_print
                 ; 0000 02BD             clear_eeprom();
000729 d0fb      	RCALL _clear_eeprom
                 ; 0000 02BE #asm("sei") // enable interrupts
00072a 9478      	sei
                 ; 0000 02BF             break;
                 ; 0000 02C0         default:
                 _0xD1:
                 ; 0000 02C1             break;
                 ; 0000 02C2         }
                 _0xCE:
                 ; 0000 02C3         memset(buffer, 0, 32);
00072b 940e 0a6e 	CALL SUBOPT_0x7
                 ; 0000 02C4         stage = STAGE_INIT_MENU;
00072d 2444      	CLR  R4
00072e 2455      	CLR  R5
                 ; 0000 02C5     }
                 ; 0000 02C6 }
                 _0xC9:
                 _0xC8:
                 _0xB9:
                 _0xB6:
                 _0xA9:
                 _0x9A:
                 _0x8D:
                 _0x8A:
                 _0x87:
                 _0x72:
                 _0x6A:
00072f 940e 0d04 	CALL __LOADLOCR6
000731 9628      	ADIW R28,8
000732 91e9      	LD   R30,Y+
000733 bfef      	OUT  SREG,R30
000734 91f9      	LD   R31,Y+
000735 91e9      	LD   R30,Y+
000736 91b9      	LD   R27,Y+
000737 91a9      	LD   R26,Y+
000738 9199      	LD   R25,Y+
000739 9189      	LD   R24,Y+
00073a 9179      	LD   R23,Y+
00073b 9169      	LD   R22,Y+
00073c 90f9      	LD   R15,Y+
00073d 9019      	LD   R1,Y+
00073e 9009      	LD   R0,Y+
00073f 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x63:
0003b0           	.BYTE 0x28F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 02C9 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 02CA     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000740 940e 0b03 	CALL SUBOPT_0x1E
                 ;	cmnd -> Y+0
                 ; 0000 02CB     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
000742 98c0      	CBI  0x18,0
                 ; 0000 02CC     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000743 940e 0b0c 	CALL SUBOPT_0x1F
                 ; 0000 02CD     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02CE     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02CF     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02D0     delay_us(20 * 16);         // wait
                +
000745 e880     +LDI R24 , LOW ( 640 )
000746 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
000747 9701     +SBIW R24 , 1
000748 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 02D1     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
000749 940e 0b13 	CALL SUBOPT_0x20
                 ; 0000 02D2     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02D3     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02D4     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02D5 }
00074b c10f      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 02D7 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 02D8     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
00074c 940e 0b03 	CALL SUBOPT_0x1E
                 ;	data -> Y+0
                 ; 0000 02D9     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
00074e 9ac0      	SBI  0x18,0
                 ; 0000 02DA     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
00074f 940e 0b0c 	CALL SUBOPT_0x1F
                 ; 0000 02DB     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02DC     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02DD     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02DE     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
000751 940e 0b13 	CALL SUBOPT_0x20
                 ; 0000 02DF     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 02E0     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 02E1     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 02E2 }
000753 c107      	RJMP _0x20A0005
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 02E4 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 02E5     LCD_DDR = 0xFF;            // LCD port is output
000754 efef      	LDI  R30,LOW(255)
000755 bbe7      	OUT  0x17,R30
                 ; 0000 02E6     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000756 98c2      	CBI  0x18,2
                 ; 0000 02E7     delay_us(2000 * 16);       // wait for stable power
                +
000757 e080     +LDI R24 , LOW ( 64000 )
000758 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000759 9701     +SBIW R24 , 1
00075a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 02E8     lcdCommand(0x33);          //$33 for 4-bit mode
00075b e3a3      	LDI  R26,LOW(51)
00075c 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 02E9     delay_us(100 * 16);        // wait
                 ; 0000 02EA     lcdCommand(0x32);          //$32 for 4-bit mode
00075e e3a2      	LDI  R26,LOW(50)
00075f 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 02EB     delay_us(100 * 16);        // wait
                 ; 0000 02EC     lcdCommand(0x28);          //$28 for 4-bit mode
000761 e2a8      	LDI  R26,LOW(40)
000762 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 02ED     delay_us(100 * 16);        // wait
                 ; 0000 02EE     lcdCommand(0x0c);          // display on, cursor off
000764 940e 0ab6 	CALL SUBOPT_0x12
                 ; 0000 02EF     delay_us(100 * 16);        // wait
                 ; 0000 02F0     lcdCommand(0x01);          // clear LCD
000766 e0a1      	LDI  R26,LOW(1)
000767 dfd8      	RCALL _lcdCommand
                 ; 0000 02F1     delay_us(2000 * 16);       // wait
                +
000768 e080     +LDI R24 , LOW ( 64000 )
000769 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
00076a 9701     +SBIW R24 , 1
00076b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 02F2     lcdCommand(0x06);          // shift cursor right
00076c e0a6      	LDI  R26,LOW(6)
00076d 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 02F3     delay_us(100 * 16);
                 ; 0000 02F4 }
00076f 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 02F6 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 02F7     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 02F8     lcdCommand(firstCharAdr[y - 1] + x - 1);
000770 93aa      	ST   -Y,R26
000771 9724      	SBIW R28,4
000772 e8e0      	LDI  R30,LOW(128)
000773 83e8      	ST   Y,R30
000774 ece0      	LDI  R30,LOW(192)
000775 83e9      	STD  Y+1,R30
000776 e9e4      	LDI  R30,LOW(148)
000777 83ea      	STD  Y+2,R30
000778 ede4      	LDI  R30,LOW(212)
000779 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
00077a 81ec      	LDD  R30,Y+4
00077b e0f0      	LDI  R31,0
00077c 9731      	SBIW R30,1
00077d 01de      	MOVW R26,R28
00077e 0fae      	ADD  R26,R30
00077f 1fbf      	ADC  R27,R31
000780 91ec      	LD   R30,X
000781 81ad      	LDD  R26,Y+5
000782 0fae      	ADD  R26,R30
000783 50a1      	SUBI R26,LOW(1)
000784 940e 0abe 	CALL SUBOPT_0x13
                 ; 0000 02F9     delay_us(100 * 16);
                 ; 0000 02FA }
000786 9626      	ADIW R28,6
000787 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 02FC {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 02FD     unsigned char i = 0;
                 ; 0000 02FE     while (str[i] != 0)
000788 93ba      	ST   -Y,R27
000789 93aa      	ST   -Y,R26
00078a 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
00078b e010      	LDI  R17,0
                 _0xD2:
00078c 81a9      	LDD  R26,Y+1
00078d 81ba      	LDD  R27,Y+1+1
00078e 27ee      	CLR  R30
00078f 0fa1      	ADD  R26,R17
000790 1fbe      	ADC  R27,R30
000791 91ec      	LD   R30,X
000792 30e0      	CPI  R30,0
000793 f049      	BREQ _0xD4
                 ; 0000 02FF     {
                 ; 0000 0300         lcdData(str[i]);
000794 81a9      	LDD  R26,Y+1
000795 81ba      	LDD  R27,Y+1+1
000796 27ee      	CLR  R30
000797 0fa1      	ADD  R26,R17
000798 1fbe      	ADC  R27,R30
000799 91ac      	LD   R26,X
00079a dfb1      	RCALL _lcdData
                 ; 0000 0301         i++;
00079b 5f1f      	SUBI R17,-1
                 ; 0000 0302     }
00079c cfef      	RJMP _0xD2
                 _0xD4:
                 ; 0000 0303 }
00079d 8118      	LDD  R17,Y+0
00079e c0b5      	RJMP _0x20A0006
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 0306 {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 0307     unsigned char temperatureVal = 0;
                 ; 0000 0308     unsigned char temperatureRep[3];
                 ; 0000 0309 
                 ; 0000 030A     ADMUX = 0xE0;
00079f 9723      	SBIW R28,3
0007a0 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
0007a1 e010      	LDI  R17,0
0007a2 eee0      	LDI  R30,LOW(224)
0007a3 b9e7      	OUT  0x7,R30
                 ; 0000 030B     ADCSRA = 0x87;
0007a4 e8e7      	LDI  R30,LOW(135)
0007a5 b9e6      	OUT  0x6,R30
                 ; 0000 030C 
                 ; 0000 030D     lcdCommand(0x01);
0007a6 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 030E     lcd_gotoxy(1, 1);
                 ; 0000 030F     lcd_print("temperature(C):");
                +
0007a8 e3af     +LDI R26 , LOW ( _0xD5 + ( 0 ) )
0007a9 e0b6     +LDI R27 , HIGH ( _0xD5 + ( 0 ) )
                 	__POINTW2MN _0xD5,0
0007aa dfdd      	RCALL _lcd_print
                 ; 0000 0310 
                 ; 0000 0311     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xD6:
0007ab 940e 0a64 	CALL SUBOPT_0x5
0007ad f4f1      	BRNE _0xD8
                 ; 0000 0312     {
                 ; 0000 0313         ADCSRA |= (1 << ADSC);
0007ae 9a36      	SBI  0x6,6
                 ; 0000 0314         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xD9:
0007af 9b34      	SBIS 0x6,4
                 ; 0000 0315             ;
0007b0 cffe      	RJMP _0xD9
                 ; 0000 0316         if (ADCH != temperatureVal)
0007b1 b1e5      	IN   R30,0x5
0007b2 171e      	CP   R17,R30
0007b3 f099      	BREQ _0xDC
                 ; 0000 0317         {
                 ; 0000 0318             temperatureVal = ADCH;
0007b4 b115      	IN   R17,5
                 ; 0000 0319             itoa(temperatureVal, temperatureRep);
0007b5 2fe1      	MOV  R30,R17
0007b6 e0f0      	LDI  R31,0
0007b7 93fa      	ST   -Y,R31
0007b8 93ea      	ST   -Y,R30
0007b9 01de      	MOVW R26,R28
0007ba 9613      	ADIW R26,3
0007bb 940e 09e0 	CALL _itoa
                 ; 0000 031A             lcd_gotoxy(17, 1);
0007bd e1e1      	LDI  R30,LOW(17)
0007be 93ea      	ST   -Y,R30
0007bf e0a1      	LDI  R26,LOW(1)
0007c0 dfaf      	RCALL _lcd_gotoxy
                 ; 0000 031B             lcd_print(temperatureRep);
0007c1 01de      	MOVW R26,R28
0007c2 9611      	ADIW R26,1
0007c3 dfc4      	RCALL _lcd_print
                 ; 0000 031C             lcd_print(" ");
                +
0007c4 e4af     +LDI R26 , LOW ( _0xD5 + ( 16 ) )
0007c5 e0b6     +LDI R27 , HIGH ( _0xD5 + ( 16 ) )
                 	__POINTW2MN _0xD5,16
0007c6 dfc1      	RCALL _lcd_print
                 ; 0000 031D         }
                 ; 0000 031E         delay_ms(500);
                 _0xDC:
0007c7 efa4      	LDI  R26,LOW(500)
0007c8 e0b1      	LDI  R27,HIGH(500)
0007c9 940e 0b41 	CALL _delay_ms
                 ; 0000 031F     }
0007cb cfdf      	RJMP _0xD6
                 _0xD8:
                 ; 0000 0320 
                 ; 0000 0321     ADCSRA = 0x0;
0007cc e0e0      	LDI  R30,LOW(0)
0007cd b9e6      	OUT  0x6,R30
                 ; 0000 0322 }
0007ce 8118      	LDD  R17,Y+0
0007cf c20e      	RJMP _0x20A0002
                 ; .FEND
                 
                 	.DSEG
                 _0xD5:
00063f           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 0325 {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 0326 
                 ; 0000 0327     while (stage == STAGE_INIT_MENU)
                 _0xDD:
0007d0 2c04      	MOV  R0,R4
0007d1 2805      	OR   R0,R5
0007d2 f009      	BREQ PC+2
0007d3 c050      	RJMP _0xDF
                 ; 0000 0328     {
                 ; 0000 0329         lcdCommand(0x01);
0007d4 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 032A         lcd_gotoxy(1, 1);
                 ; 0000 032B         if (page_num == 0)
0007d6 2077      	TST  R7
0007d7 f481      	BRNE _0xE0
                 ; 0000 032C         {
                 ; 0000 032D             lcd_print("1: Attendance Initialization");
                +
0007d8 e5a1     +LDI R26 , LOW ( _0xE1 + ( 0 ) )
0007d9 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 0 ) )
                 	__POINTW2MN _0xE1,0
0007da 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 032E             lcd_gotoxy(1, 2);
                 ; 0000 032F             lcd_print("2: Student Management");
                +
0007dc e6ae     +LDI R26 , LOW ( _0xE1 + ( 29 ) )
0007dd e0b6     +LDI R27 , HIGH ( _0xE1 + ( 29 ) )
                 	__POINTW2MN _0xE1,29
0007de dfa9      	RCALL _lcd_print
                 ; 0000 0330             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xE2:
0007df 2077      	TST  R7
0007e0 f421      	BRNE _0xE5
0007e1 2400      	CLR  R0
0007e2 1404      	CP   R0,R4
0007e3 0405      	CPC  R0,R5
0007e4 f009      	BREQ _0xE6
                 _0xE5:
0007e5 c001      	RJMP _0xE4
                 _0xE6:
                 ; 0000 0331                 ;
0007e6 cff8      	RJMP _0xE2
                 _0xE4:
                 ; 0000 0332         }
                 ; 0000 0333         else if (page_num == 1)
0007e7 c03b      	RJMP _0xE7
                 _0xE0:
0007e8 e0e1      	LDI  R30,LOW(1)
0007e9 15e7      	CP   R30,R7
0007ea f489      	BRNE _0xE8
                 ; 0000 0334         {
                 ; 0000 0335             lcd_print("3: View Present Students ");
                +
0007eb e8a4     +LDI R26 , LOW ( _0xE1 + ( 51 ) )
0007ec e0b6     +LDI R27 , HIGH ( _0xE1 + ( 51 ) )
                 	__POINTW2MN _0xE1,51
0007ed 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0336             lcd_gotoxy(1, 2);
                 ; 0000 0337             lcd_print("4: Temperature Monitoring");
                +
0007ef e9ae     +LDI R26 , LOW ( _0xE1 + ( 77 ) )
0007f0 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 77 ) )
                 	__POINTW2MN _0xE1,77
0007f1 df96      	RCALL _lcd_print
                 ; 0000 0338             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0xE9:
0007f2 e0e1      	LDI  R30,LOW(1)
0007f3 15e7      	CP   R30,R7
0007f4 f421      	BRNE _0xEC
0007f5 2400      	CLR  R0
0007f6 1404      	CP   R0,R4
0007f7 0405      	CPC  R0,R5
0007f8 f009      	BREQ _0xED
                 _0xEC:
0007f9 c001      	RJMP _0xEB
                 _0xED:
                 ; 0000 0339                 ;
0007fa cff7      	RJMP _0xE9
                 _0xEB:
                 ; 0000 033A         }
                 ; 0000 033B         else if (page_num == 2)
0007fb c027      	RJMP _0xEE
                 _0xE8:
0007fc e0e2      	LDI  R30,LOW(2)
0007fd 15e7      	CP   R30,R7
0007fe f489      	BRNE _0xEF
                 ; 0000 033C         {
                 ; 0000 033D             lcd_print("5: Retrieve Student Data");
                +
0007ff eba8     +LDI R26 , LOW ( _0xE1 + ( 103 ) )
000800 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 103 ) )
                 	__POINTW2MN _0xE1,103
000801 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 033E             lcd_gotoxy(1, 2);
                 ; 0000 033F             lcd_print("6: Traffic Monitoring");
                +
000803 eda1     +LDI R26 , LOW ( _0xE1 + ( 128 ) )
000804 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 128 ) )
                 	__POINTW2MN _0xE1,128
000805 df82      	RCALL _lcd_print
                 ; 0000 0340             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0xF0:
000806 e0e2      	LDI  R30,LOW(2)
000807 15e7      	CP   R30,R7
000808 f421      	BRNE _0xF3
000809 2400      	CLR  R0
00080a 1404      	CP   R0,R4
00080b 0405      	CPC  R0,R5
00080c f009      	BREQ _0xF4
                 _0xF3:
00080d c001      	RJMP _0xF2
                 _0xF4:
                 ; 0000 0341                 ;
00080e cff7      	RJMP _0xF0
                 _0xF2:
                 ; 0000 0342         }
                 ; 0000 0343         else if (page_num == 3)
00080f c013      	RJMP _0xF5
                 _0xEF:
000810 e0e3      	LDI  R30,LOW(3)
000811 15e7      	CP   R30,R7
000812 f481      	BRNE _0xF6
                 ; 0000 0344         {
                 ; 0000 0345             lcd_print("7: Login With Admin");
                +
000813 eea7     +LDI R26 , LOW ( _0xE1 + ( 150 ) )
000814 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 150 ) )
                 	__POINTW2MN _0xE1,150
000815 940e 0a50 	CALL SUBOPT_0x2
                 ; 0000 0346             lcd_gotoxy(1, 2);
                 ; 0000 0347             lcd_print("8: Logout");
                +
000817 efab     +LDI R26 , LOW ( _0xE1 + ( 170 ) )
000818 e0b6     +LDI R27 , HIGH ( _0xE1 + ( 170 ) )
                 	__POINTW2MN _0xE1,170
000819 df6e      	RCALL _lcd_print
                 ; 0000 0348             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0xF7:
00081a e0e3      	LDI  R30,LOW(3)
00081b 15e7      	CP   R30,R7
00081c f421      	BRNE _0xFA
00081d 2400      	CLR  R0
00081e 1404      	CP   R0,R4
00081f 0405      	CPC  R0,R5
000820 f009      	BREQ _0xFB
                 _0xFA:
000821 c001      	RJMP _0xF9
                 _0xFB:
                 ; 0000 0349                 ;
000822 cff7      	RJMP _0xF7
                 _0xF9:
                 ; 0000 034A         }
                 ; 0000 034B     }
                 _0xF6:
                 _0xF5:
                 _0xEE:
                 _0xE7:
000823 cfac      	RJMP _0xDD
                 _0xDF:
                 ; 0000 034C }
000824 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xE1:
000651           	.BYTE 0xB4
                 ;
                 ;void clear_eeprom()
                 ; 0000 034F {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0350     unsigned int i;
                 ; 0000 0351 
                 ; 0000 0352     for (i = 0; i <= 1023; i++)
000825 931a      	ST   -Y,R17
000826 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000827 e000     +LDI R16 , LOW ( 0 )
000828 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xFD:
                +
000829 3000     +CPI R16 , LOW ( 1024 )
00082a e0e4     +LDI R30 , HIGH ( 1024 )
00082b 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
00082c f478      	BRSH _0xFE
                 ; 0000 0353     {
                 ; 0000 0354         // Wait for the previous write to complete
                 ; 0000 0355         while (EECR & (1 << EEWE))
                 _0xFF:
00082d 99e1      	SBIC 0x1C,1
                 ; 0000 0356             ;
00082e cffe      	RJMP _0xFF
                 ; 0000 0357 
                 ; 0000 0358         // Set up address registers
                 ; 0000 0359         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
00082f 2fe1      	MOV  R30,R17
000830 70f0      	ANDI R31,HIGH(0x0)
000831 70e3      	ANDI R30,LOW(0x3)
000832 bbef      	OUT  0x1F,R30
                 ; 0000 035A         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000833 2fe0      	MOV  R30,R16
000834 bbee      	OUT  0x1E,R30
                 ; 0000 035B 
                 ; 0000 035C         // Set up data register
                 ; 0000 035D         EEDR = 0; // Write 0 to EEPROM
000835 e0e0      	LDI  R30,LOW(0)
000836 bbed      	OUT  0x1D,R30
                 ; 0000 035E 
                 ; 0000 035F         // Enable write
                 ; 0000 0360         EECR |= (1 << EEMWE); // Master write enable
000837 9ae2      	SBI  0x1C,2
                 ; 0000 0361         EECR |= (1 << EEWE);  // Start EEPROM write
000838 9ae1      	SBI  0x1C,1
                 ; 0000 0362     }
                +
000839 5f0f     +SUBI R16 , LOW ( - 1 )
00083a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00083b cfed      	RJMP _0xFD
                 _0xFE:
                 ; 0000 0363 }
00083c 9109      	LD   R16,Y+
00083d 9119      	LD   R17,Y+
00083e 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0366 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 0367     unsigned char x;
                 ; 0000 0368     // Wait for the previous write to complete
                 ; 0000 0369     while (EECR & (1 << EEWE))
00083f 93ba      	ST   -Y,R27
000840 93aa      	ST   -Y,R26
000841 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x102:
000842 99e1      	SBIC 0x1C,1
                 ; 0000 036A         ;
000843 cffe      	RJMP _0x102
                 ; 0000 036B 
                 ; 0000 036C     // Set up address registers
                 ; 0000 036D     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000844 940e 0b21 	CALL SUBOPT_0x21
                 ; 0000 036E     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 036F     EECR |= (1 << EERE);        // Read Enable
000846 9ae0      	SBI  0x1C,0
                 ; 0000 0370     x = EEDR;
000847 b31d      	IN   R17,29
                 ; 0000 0371     return x;
000848 2fe1      	MOV  R30,R17
000849 8118      	LDD  R17,Y+0
00084a c009      	RJMP _0x20A0006
                 ; 0000 0372 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 0375 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 0376     // Wait for the previous write to complete
                 ; 0000 0377     while (EECR & (1 << EEWE))
00084b 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x105:
00084c 99e1      	SBIC 0x1C,1
                 ; 0000 0378         ;
00084d cffe      	RJMP _0x105
                 ; 0000 0379 
                 ; 0000 037A     // Set up address registers
                 ; 0000 037B     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
00084e 940e 0b21 	CALL SUBOPT_0x21
                 ; 0000 037C     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 037D 
                 ; 0000 037E     // Set up data register
                 ; 0000 037F     EEDR = value; // Write 0 to EEPROM
000850 81e8      	LD   R30,Y
000851 bbed      	OUT  0x1D,R30
                 ; 0000 0380 
                 ; 0000 0381     // Enable write
                 ; 0000 0382     EECR |= (1 << EEMWE); // Master write enable
000852 9ae2      	SBI  0x1C,2
                 ; 0000 0383     EECR |= (1 << EEWE);  // Start EEPROM write
000853 9ae1      	SBI  0x1C,1
                 ; 0000 0384 }
                 _0x20A0006:
000854 9623      	ADIW R28,3
000855 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 0387 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0388     while (!(UCSRA & (1 << UDRE)))
000856 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x108:
000857 9b5d      	SBIS 0xB,5
                 ; 0000 0389         ;
000858 cffe      	RJMP _0x108
                 ; 0000 038A     UDR = data;
000859 81e8      	LD   R30,Y
00085a b9ec      	OUT  0xC,R30
                 ; 0000 038B }
                 _0x20A0005:
00085b 9621      	ADIW R28,1
00085c 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 038E {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 038F     UBRRL = (unsigned char)ubrr;
00085d 93ba      	ST   -Y,R27
00085e 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
00085f 81e8      	LD   R30,Y
000860 b9e9      	OUT  0x9,R30
                 ; 0000 0390     UBRRH = (unsigned char)(ubrr >> 8);
000861 81e9      	LDD  R30,Y+1
000862 70f0      	ANDI R31,HIGH(0x0)
000863 bde0      	OUT  0x20,R30
                 ; 0000 0391     UCSRB = (1 << RXEN) | (1 << TXEN);
000864 e1e8      	LDI  R30,LOW(24)
000865 b9ea      	OUT  0xA,R30
                 ; 0000 0392     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
000866 e0e6      	LDI  R30,LOW(6)
000867 bde0      	OUT  0x20,R30
                 ; 0000 0393 }
000868 9622      	ADIW R28,2
000869 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 0396 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 0397     unsigned char st_counts, i, j;
                 ; 0000 0398     char temp[10];
                 ; 0000 0399 
                 ; 0000 039A     st_counts = read_byte_from_eeprom(0x0);
00086a 972a      	SBIW R28,10
00086b 940e 0cff 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
00086d 940e 0a89 	CALL SUBOPT_0xA
00086f 2f1e      	MOV  R17,R30
                 ; 0000 039B 
                 ; 0000 039C     for (i = 0; i < st_counts; i++)
000870 e000      	LDI  R16,LOW(0)
                 _0x10C:
000871 1701      	CP   R16,R17
000872 f5e0      	BRSH _0x10D
                 ; 0000 039D     {
                 ; 0000 039E         memset(temp, 0, 10);
000873 01fe      	MOVW R30,R28
000874 9634      	ADIW R30,4
000875 93fa      	ST   -Y,R31
000876 93ea      	ST   -Y,R30
000877 e0e0      	LDI  R30,LOW(0)
000878 93ea      	ST   -Y,R30
000879 e0aa      	LDI  R26,LOW(10)
00087a e0b0      	LDI  R27,0
00087b 940e 0a0e 	CALL _memset
                 ; 0000 039F         for (j = 0; j < 8; j++)
00087d e030      	LDI  R19,LOW(0)
                 _0x10F:
00087e 3038      	CPI  R19,8
00087f f4a8      	BRSH _0x110
                 ; 0000 03A0         {
                 ; 0000 03A1             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000880 2fe3      	MOV  R30,R19
000881 e0f0      	LDI  R31,0
000882 01de      	MOVW R26,R28
000883 9614      	ADIW R26,4
000884 0fea      	ADD  R30,R26
000885 1ffb      	ADC  R31,R27
000886 93ff      	PUSH R31
000887 93ef      	PUSH R30
000888 2fa3      	MOV  R26,R19
000889 27bb      	CLR  R27
00088a 2fe0      	MOV  R30,R16
00088b 940e 0af7 	CALL SUBOPT_0x1C
00088d 0fae      	ADD  R26,R30
00088e 1fbf      	ADC  R27,R31
00088f dfaf      	RCALL _read_byte_from_eeprom
000890 91af      	POP  R26
000891 91bf      	POP  R27
000892 93ec      	ST   X,R30
                 ; 0000 03A2         }
000893 5f3f      	SUBI R19,-1
000894 cfe9      	RJMP _0x10F
                 _0x110:
                 ; 0000 03A3         temp[j] = '\0';
000895 2fe3      	MOV  R30,R19
000896 e0f0      	LDI  R31,0
000897 01de      	MOVW R26,R28
000898 9614      	ADIW R26,4
000899 0fae      	ADD  R26,R30
00089a 1fbf      	ADC  R27,R31
00089b e0e0      	LDI  R30,LOW(0)
00089c 93ec      	ST   X,R30
                 ; 0000 03A4         if (strncmp(temp, buffer, 8) == 0)
00089d 01fe      	MOVW R30,R28
00089e 9634      	ADIW R30,4
00089f 93fa      	ST   -Y,R31
0008a0 93ea      	ST   -Y,R30
0008a1 e3ef      	LDI  R30,LOW(_buffer)
0008a2 e0f7      	LDI  R31,HIGH(_buffer)
0008a3 93fa      	ST   -Y,R31
0008a4 93ea      	ST   -Y,R30
0008a5 e0a8      	LDI  R26,LOW(8)
0008a6 940e 0a2a 	CALL _strncmp
0008a8 30e0      	CPI  R30,0
0008a9 f419      	BRNE _0x111
                 ; 0000 03A5             return (i + 1);
0008aa 2fe0      	MOV  R30,R16
0008ab 5fef      	SUBI R30,-LOW(1)
0008ac c003      	RJMP _0x20A0004
                 ; 0000 03A6     }
                 _0x111:
0008ad 5f0f      	SUBI R16,-1
0008ae cfc2      	RJMP _0x10C
                 _0x10D:
                 ; 0000 03A7 
                 ; 0000 03A8     return 0;
0008af e0e0      	LDI  R30,LOW(0)
                 _0x20A0004:
0008b0 940e 0d06 	CALL __LOADLOCR4
0008b2 962e      	ADIW R28,14
0008b3 9508      	RET
                 ; 0000 03A9 }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 03AC {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 03AD     unsigned char st_counts, i, j;
                 ; 0000 03AE     unsigned char temp;
                 ; 0000 03AF 
                 ; 0000 03B0     st_counts = read_byte_from_eeprom(0x0);
0008b4 93aa      	ST   -Y,R26
0008b5 940e 0cff 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
0008b7 940e 0a89 	CALL SUBOPT_0xA
0008b9 2f1e      	MOV  R17,R30
                 ; 0000 03B1 
                 ; 0000 03B2     for (i = index; i <= st_counts; i++)
0008ba 810c      	LDD  R16,Y+4
                 _0x113:
0008bb 1710      	CP   R17,R16
0008bc f0d8      	BRLO _0x114
                 ; 0000 03B3     {
                 ; 0000 03B4         for (j = 0; j < 8; j++)
0008bd e030      	LDI  R19,LOW(0)
                 _0x116:
0008be 3038      	CPI  R19,8
0008bf f4b0      	BRSH _0x117
                 ; 0000 03B5         {
                 ; 0000 03B6             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
0008c0 2fa3      	MOV  R26,R19
0008c1 27bb      	CLR  R27
0008c2 2fe0      	MOV  R30,R16
0008c3 940e 0af7 	CALL SUBOPT_0x1C
0008c5 0fae      	ADD  R26,R30
0008c6 1fbf      	ADC  R27,R31
0008c7 df77      	RCALL _read_byte_from_eeprom
0008c8 2f2e      	MOV  R18,R30
                 ; 0000 03B7             write_byte_to_eeprom(j + ((i) * 8), temp);
0008c9 2fa3      	MOV  R26,R19
0008ca 27bb      	CLR  R27
0008cb e0e8      	LDI  R30,LOW(8)
0008cc 9fe0      	MUL  R30,R16
0008cd 01f0      	MOVW R30,R0
0008ce 0fea      	ADD  R30,R26
0008cf 1ffb      	ADC  R31,R27
0008d0 93fa      	ST   -Y,R31
0008d1 93ea      	ST   -Y,R30
0008d2 2fa2      	MOV  R26,R18
0008d3 df77      	RCALL _write_byte_to_eeprom
                 ; 0000 03B8         }
0008d4 5f3f      	SUBI R19,-1
0008d5 cfe8      	RJMP _0x116
                 _0x117:
                 ; 0000 03B9     }
0008d6 5f0f      	SUBI R16,-1
0008d7 cfe3      	RJMP _0x113
                 _0x114:
                 ; 0000 03BA     write_byte_to_eeprom(0x0, st_counts - 1);
0008d8 e0e0      	LDI  R30,LOW(0)
0008d9 e0f0      	LDI  R31,HIGH(0)
0008da 93fa      	ST   -Y,R31
0008db 93ea      	ST   -Y,R30
0008dc 2fa1      	MOV  R26,R17
0008dd 50a1      	SUBI R26,LOW(1)
0008de df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 03BB }
0008df 940e 0d06 	CALL __LOADLOCR4
0008e1 940c 0a1c 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 03BE {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 03BF     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
0008e3 9a8d      	SBI  0x11,5
                 ; 0000 03C0     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
0008e4 988e      	CBI  0x11,6
                 ; 0000 03C1 }
0008e5 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 03C4 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 03C5     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
0008e6 9a95      	SBI  0x12,5
                 ; 0000 03C6     delay_us(15);                   // Wait for 15 microseconds
                +
0008e7 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
0008e8 958a     +DEC R24
0008e9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 03C7     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
0008ea 9895      	CBI  0x12,5
                 ; 0000 03C8 }
0008eb 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 03CB {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 03CC     uint32_t i, result;
                 ; 0000 03CD 
                 ; 0000 03CE     // Wait for rising edge on Echo pin
                 ; 0000 03CF     for (i = 0; i < 600000; i++)
0008ec 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
0008ed e0e0      	LDI  R30,LOW(0)
                +
0008ee 83ec     +STD Y + 4 , R30
0008ef 83ed     +STD Y + 4 + 1 , R30
0008f0 83ee     +STD Y + 4 + 2 , R30
0008f1 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x119:
0008f2 940e 0b28 	CALL SUBOPT_0x22
0008f4 f430      	BRSH _0x11A
                 ; 0000 03D0     {
                 ; 0000 03D1         if (!(US_PIN & (1 << US_ECHO_POS)))
0008f5 9b86      	SBIS 0x10,6
                 ; 0000 03D2             continue;
0008f6 c001      	RJMP _0x118
                 ; 0000 03D3         else
                 ; 0000 03D4             break;
0008f7 c003      	RJMP _0x11A
                 ; 0000 03D5     }
                 _0x118:
0008f8 940e 0b34 	CALL SUBOPT_0x23
0008fa cff7      	RJMP _0x119
                 _0x11A:
                 ; 0000 03D6 
                 ; 0000 03D7     if (i == 600000)
0008fb 940e 0b28 	CALL SUBOPT_0x22
0008fd f419      	BRNE _0x11D
                 ; 0000 03D8         return US_ERROR; // Timeout error if no rising edge detected
0008fe efef      	LDI  R30,LOW(65535)
0008ff efff      	LDI  R31,HIGH(65535)
000900 c036      	RJMP _0x20A0003
                 ; 0000 03D9 
                 ; 0000 03DA     // Start timer with prescaler 8
                 ; 0000 03DB     TCCR1A = 0x00;
                 _0x11D:
000901 e0e0      	LDI  R30,LOW(0)
000902 bdef      	OUT  0x2F,R30
                 ; 0000 03DC     TCCR1B = (1 << CS11) | (1 << CS10);
000903 e0e3      	LDI  R30,LOW(3)
000904 bdee      	OUT  0x2E,R30
                 ; 0000 03DD     TCNT1 = 0x00; // Reset timer
000905 e0e0      	LDI  R30,LOW(0)
000906 e0f0      	LDI  R31,HIGH(0)
000907 bdfd      	OUT  0x2C+1,R31
000908 bdec      	OUT  0x2C,R30
                 ; 0000 03DE 
                 ; 0000 03DF     // Wait for falling edge on Echo pin
                 ; 0000 03E0     for (i = 0; i < 600000; i++)
                +
000909 83ec     +STD Y + 4 , R30
00090a 83ed     +STD Y + 4 + 1 , R30
00090b 83ee     +STD Y + 4 + 2 , R30
00090c 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x11F:
00090d 940e 0b28 	CALL SUBOPT_0x22
00090f f470      	BRSH _0x120
                 ; 0000 03E1     {
                 ; 0000 03E2         if (!(US_PIN & (1 << US_ECHO_POS)))
000910 9b86      	SBIS 0x10,6
                 ; 0000 03E3             break; // Falling edge detected
000911 c00c      	RJMP _0x120
                 ; 0000 03E4         if (TCNT1 > 60000)
000912 b5ec      	IN   R30,0x2C
000913 b5fd      	IN   R31,0x2C+1
000914 36e1      	CPI  R30,LOW(0xEA61)
000915 eeaa      	LDI  R26,HIGH(0xEA61)
000916 07fa      	CPC  R31,R26
000917 f018      	BRLO _0x122
                 ; 0000 03E5             return US_NO_OBSTACLE; // No obstacle in range
000918 efee      	LDI  R30,LOW(65534)
000919 efff      	LDI  R31,HIGH(65534)
00091a c01c      	RJMP _0x20A0003
                 ; 0000 03E6     }
                 _0x122:
00091b 940e 0b34 	CALL SUBOPT_0x23
00091d cfef      	RJMP _0x11F
                 _0x120:
                 ; 0000 03E7 
                 ; 0000 03E8     result = TCNT1; // Capture timer value
00091e b5ec      	IN   R30,0x2C
00091f b5fd      	IN   R31,0x2C+1
000920 2766      	CLR  R22
000921 2777      	CLR  R23
000922 940e 0cf8 	CALL __PUTD1S0
                 ; 0000 03E9     TCCR1B = 0x00;  // Stop timer
000924 e0e0      	LDI  R30,LOW(0)
000925 bdee      	OUT  0x2E,R30
                 ; 0000 03EA 
                 ; 0000 03EB     if (result > 60000)
000926 940e 0cf3 	CALL __GETD2S0
                +
000928 36a1     +CPI R26 , LOW ( 0xEA61 )
000929 eeea     +LDI R30 , HIGH ( 0xEA61 )
00092a 07be     +CPC R27 , R30
00092b e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
00092c 078e     +CPC R24 , R30
00092d e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
00092e 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
00092f f018      	BRLO _0x123
                 ; 0000 03EC         return US_NO_OBSTACLE;
000930 efee      	LDI  R30,LOW(65534)
000931 efff      	LDI  R31,HIGH(65534)
000932 c004      	RJMP _0x20A0003
                 ; 0000 03ED     else
                 _0x123:
                 ; 0000 03EE         return (result >> 1); // Return the measured pulse width
000933 940e 0cee 	CALL __GETD1S0
000935 940e 0cda 	CALL __LSRD1
                 ; 0000 03EF }
                 _0x20A0003:
000937 9628      	ADIW R28,8
000938 9508      	RET
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 03F2 {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 03F3     char numberString[16];
                 ; 0000 03F4     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 03F5     int distance, previous_distance = -1;
                 ; 0000 03F6     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 03F7 
                 ; 0000 03F8     lcdCommand(0x01);
000939 9760      	SBIW R28,16
00093a 940e 0cfd 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
00093c ef4f     +LDI R20 , LOW ( - 1 )
00093d ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
00093e 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 03F9     lcd_gotoxy(1, 1);
                 ; 0000 03FA     lcd_print("Distance: ");
                +
000940 e0a5     +LDI R26 , LOW ( _0x126 + ( 0 ) )
000941 e0b7     +LDI R27 , HIGH ( _0x126 + ( 0 ) )
                 	__POINTW2MN _0x126,0
000942 de45      	RCALL _lcd_print
                 ; 0000 03FB 
                 ; 0000 03FC     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x127:
000943 940e 0aac 	CALL SUBOPT_0x10
000945 f009      	BREQ PC+2
000946 c072      	RJMP _0x129
                 ; 0000 03FD     {
                 ; 0000 03FE         HCSR04Trigger();              // Send trigger pulse
000947 df9e      	RCALL _HCSR04Trigger
                 ; 0000 03FF         pulseWidth = GetPulseWidth(); // Measure echo pulse
000948 dfa3      	RCALL _GetPulseWidth
000949 018f      	MOVW R16,R30
                 ; 0000 0400 
                 ; 0000 0401         if (pulseWidth == US_ERROR)
00094a efef      	LDI  R30,LOW(65535)
00094b efff      	LDI  R31,HIGH(65535)
00094c 17e0      	CP   R30,R16
00094d 07f1      	CPC  R31,R17
00094e f429      	BRNE _0x12A
                 ; 0000 0402         {
                 ; 0000 0403             lcdCommand(0x01);
00094f 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 0404             lcd_gotoxy(1, 1);
                 ; 0000 0405             lcd_print("Error"); // Display error message
                +
000951 e1a0     +LDI R26 , LOW ( _0x126 + ( 11 ) )
000952 e0b7     +LDI R27 , HIGH ( _0x126 + ( 11 ) )
                 	__POINTW2MN _0x126,11
000953 c05f      	RJMP _0x13A
                 ; 0000 0406         }
                 ; 0000 0407         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x12A:
000954 efee      	LDI  R30,LOW(65534)
000955 efff      	LDI  R31,HIGH(65534)
000956 17e0      	CP   R30,R16
000957 07f1      	CPC  R31,R17
000958 f429      	BRNE _0x12C
                 ; 0000 0408         {
                 ; 0000 0409             lcdCommand(0x01);
000959 940e 0a48 	CALL SUBOPT_0x1
                 ; 0000 040A             lcd_gotoxy(1, 1);
                 ; 0000 040B             lcd_print("No Obstacle"); // Display no obstacle message
                +
00095b e1a6     +LDI R26 , LOW ( _0x126 + ( 17 ) )
00095c e0b7     +LDI R27 , HIGH ( _0x126 + ( 17 ) )
                 	__POINTW2MN _0x126,17
00095d c055      	RJMP _0x13A
                 ; 0000 040C         }
                 ; 0000 040D         else
                 _0x12C:
                 ; 0000 040E         {
                 ; 0000 040F             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
00095e 01f8      	MOVW R30,R16
00095f 2766      	CLR  R22
000960 2777      	CLR  R23
000961 940e 0bb1 	CALL __CDF1
                +
000963 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000964 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000965 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000966 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000967 940e 0c34 	CALL __MULF12
000969 01df      	MOVW R26,R30
00096a 01cb      	MOVW R24,R22
                +
00096b e0e0     +LDI R30 , LOW ( 0x40000000 )
00096c e0f0     +LDI R31 , HIGH ( 0x40000000 )
00096d e060     +LDI R22 , BYTE3 ( 0x40000000 )
00096e e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
00096f 940e 0c82 	CALL __DIVF21
                +
000971 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000972 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000973 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000974 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000975 940e 0be4 	CALL __ADDF12
000977 940e 0b7a 	CALL __CFD1
000979 019f      	MOVW R18,R30
                 ; 0000 0410 
                 ; 0000 0411             if (distance != previous_distance)
                +
00097a 1742     +CP R20 , R18
00097b 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
00097c f089      	BREQ _0x12E
                 ; 0000 0412             {
                 ; 0000 0413                 previous_distance = distance;
00097d 01a9      	MOVW R20,R18
                 ; 0000 0414                 // Display distance on LCD
                 ; 0000 0415                 itoa(distance, numberString); // Convert distance to string
00097e 933a      	ST   -Y,R19
00097f 932a      	ST   -Y,R18
000980 01de      	MOVW R26,R28
000981 9618      	ADIW R26,8
000982 940e 09e0 	CALL _itoa
                 ; 0000 0416                 lcd_gotoxy(11, 1);
000984 e0eb      	LDI  R30,LOW(11)
000985 93ea      	ST   -Y,R30
000986 e0a1      	LDI  R26,LOW(1)
000987 dde8      	RCALL _lcd_gotoxy
                 ; 0000 0417                 lcd_print(numberString);
000988 01de      	MOVW R26,R28
000989 9616      	ADIW R26,6
00098a ddfd      	RCALL _lcd_print
                 ; 0000 0418                 lcd_print(" cm ");
                +
00098b e2a2     +LDI R26 , LOW ( _0x126 + ( 29 ) )
00098c e0b7     +LDI R27 , HIGH ( _0x126 + ( 29 ) )
                 	__POINTW2MN _0x126,29
00098d ddfa      	RCALL _lcd_print
                 ; 0000 0419             }
                 ; 0000 041A             // Counting logic based on distance
                 ; 0000 041B             if (distance < 6)
                 _0x12E:
                +
00098e 3026     +CPI R18 , LOW ( 6 )
00098f e0e0     +LDI R30 , HIGH ( 6 )
000990 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000991 f40c      	BRGE _0x12F
                 ; 0000 041C             {
                 ; 0000 041D                 US_count++; // Increment count if distance is below threshold
000992 9463      	INC  R6
                 ; 0000 041E             }
                 ; 0000 041F 
                 ; 0000 0420             // Update count on LCD only if it changes
                 ; 0000 0421             if (US_count != previous_count)
                 _0x12F:
000993 91e0 075f 	LDS  R30,_previous_count_S0000013000
000995 91f0 0760 	LDS  R31,_previous_count_S0000013000+1
000997 2da6      	MOV  R26,R6
000998 e0b0      	LDI  R27,0
000999 17ea      	CP   R30,R26
00099a 07fb      	CPC  R31,R27
00099b f0c1      	BREQ _0x130
                 ; 0000 0422             {
                 ; 0000 0423                 previous_count = US_count;
00099c 2de6      	MOV  R30,R6
00099d e0f0      	LDI  R31,0
00099e 93e0 075f 	STS  _previous_count_S0000013000,R30
0009a0 93f0 0760 	STS  _previous_count_S0000013000+1,R31
                 ; 0000 0424                 lcd_gotoxy(1, 2); // Move to second line
0009a2 e0e1      	LDI  R30,LOW(1)
0009a3 93ea      	ST   -Y,R30
0009a4 e0a2      	LDI  R26,LOW(2)
0009a5 ddca      	RCALL _lcd_gotoxy
                 ; 0000 0425                 itoa(US_count, numberString);
0009a6 2de6      	MOV  R30,R6
0009a7 e0f0      	LDI  R31,0
0009a8 93fa      	ST   -Y,R31
0009a9 93ea      	ST   -Y,R30
0009aa 01de      	MOVW R26,R28
0009ab 9618      	ADIW R26,8
0009ac 940e 09e0 	CALL _itoa
                 ; 0000 0426                 lcd_print("Count: ");
                +
0009ae e2a7     +LDI R26 , LOW ( _0x126 + ( 34 ) )
0009af e0b7     +LDI R27 , HIGH ( _0x126 + ( 34 ) )
                 	__POINTW2MN _0x126,34
0009b0 ddd7      	RCALL _lcd_print
                 ; 0000 0427                 lcd_print(numberString);
0009b1 01de      	MOVW R26,R28
0009b2 9616      	ADIW R26,6
                 _0x13A:
0009b3 ddd4      	RCALL _lcd_print
                 ; 0000 0428             }
                 ; 0000 0429         }
                 _0x130:
                 ; 0000 042A         delay_ms(100);
0009b4 e6a4      	LDI  R26,LOW(100)
0009b5 e0b0      	LDI  R27,0
0009b6 940e 0b41 	CALL _delay_ms
                 ; 0000 042B     }
0009b8 cf8a      	RJMP _0x127
                 _0x129:
                 ; 0000 042C }
0009b9 940e 0d04 	CALL __LOADLOCR6
0009bb 9666      	ADIW R28,22
0009bc 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x126:
000705           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 042F {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 0430     unsigned int hash = 0;
                 ; 0000 0431     while (*str)
0009bd 93ba      	ST   -Y,R27
0009be 93aa      	ST   -Y,R26
0009bf 931a      	ST   -Y,R17
0009c0 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
0009c1 e000     +LDI R16 , LOW ( 0 )
0009c2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x131:
0009c3 81aa      	LDD  R26,Y+2
0009c4 81bb      	LDD  R27,Y+2+1
0009c5 91ec      	LD   R30,X
0009c6 30e0      	CPI  R30,0
0009c7 f099      	BREQ _0x133
                 ; 0000 0432     {
                 ; 0000 0433         hash = (hash * 31) + *str; // A basic hash formula
                +
0009c8 e1af     +LDI R26 , 31
0009c9 9fa0     +MUL R26 , R16
0009ca 01f0     +MOVW R30 , R0
0009cb 9fa1     +MUL R26 , R17
0009cc 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
0009cd 010f      	MOVW R0,R30
0009ce 81aa      	LDD  R26,Y+2
0009cf 81bb      	LDD  R27,Y+2+1
0009d0 91ec      	LD   R30,X
0009d1 e0f0      	LDI  R31,0
0009d2 0de0      	ADD  R30,R0
0009d3 1df1      	ADC  R31,R1
0009d4 018f      	MOVW R16,R30
                 ; 0000 0434         str++;
0009d5 81ea      	LDD  R30,Y+2
0009d6 81fb      	LDD  R31,Y+2+1
0009d7 9631      	ADIW R30,1
0009d8 83ea      	STD  Y+2,R30
0009d9 83fb      	STD  Y+2+1,R31
                 ; 0000 0435     }
0009da cfe8      	RJMP _0x131
                 _0x133:
                 ; 0000 0436     return hash;
0009db 01f8      	MOVW R30,R16
0009dc 8119      	LDD  R17,Y+1
0009dd 8108      	LDD  R16,Y+0
                 _0x20A0002:
0009de 9624      	ADIW R28,4
0009df 9508      	RET
                 ; 0000 0437 }
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0009e0 93ba      	ST   -Y,R27
0009e1 93aa      	ST   -Y,R26
0009e2 91a9          ld   r26,y+
0009e3 91b9          ld   r27,y+
0009e4 91e9          ld   r30,y+
0009e5 91f9          ld   r31,y+
0009e6 9630          adiw r30,0
0009e7 f42a          brpl __itoa0
0009e8 95e0          com  r30
0009e9 95f0          com  r31
0009ea 9631          adiw r30,1
0009eb e26d          ldi  r22,'-'
0009ec 936d          st   x+,r22
                 __itoa0:
0009ed 94e8          clt
0009ee e180          ldi  r24,low(10000)
0009ef e297          ldi  r25,high(10000)
0009f0 d00d          rcall __itoa1
0009f1 ee88          ldi  r24,low(1000)
0009f2 e093          ldi  r25,high(1000)
0009f3 d00a          rcall __itoa1
0009f4 e684          ldi  r24,100
0009f5 2799          clr  r25
0009f6 d007          rcall __itoa1
0009f7 e08a          ldi  r24,10
0009f8 d005          rcall __itoa1
0009f9 2f6e          mov  r22,r30
0009fa d010          rcall __itoa5
0009fb 2766          clr  r22
0009fc 936c          st   x,r22
0009fd 9508          ret
                 
                 __itoa1:
0009fe 2766          clr	 r22
                 __itoa2:
0009ff 17e8          cp   r30,r24
000a00 07f9          cpc  r31,r25
000a01 f020          brlo __itoa3
000a02 9563          inc  r22
000a03 1be8          sub  r30,r24
000a04 0bf9          sbc  r31,r25
000a05 f7c9          brne __itoa2
                 __itoa3:
000a06 2366          tst  r22
000a07 f411          brne __itoa4
000a08 f016          brts __itoa5
000a09 9508          ret
                 __itoa4:
000a0a 9468          set
                 __itoa5:
000a0b 5d60          subi r22,-0x30
000a0c 936d          st   x+,r22
000a0d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000a0e 93ba      	ST   -Y,R27
000a0f 93aa      	ST   -Y,R26
000a10 81b9          ldd  r27,y+1
000a11 81a8          ld   r26,y
000a12 9610          adiw r26,0
000a13 f031          breq memset1
000a14 81fc          ldd  r31,y+4
000a15 81eb          ldd  r30,y+3
000a16 816a          ldd  r22,y+2
                 memset0:
000a17 9361          st   z+,r22
000a18 9711          sbiw r26,1
000a19 f7e9          brne memset0
                 memset1:
000a1a 81eb          ldd  r30,y+3
000a1b 81fc          ldd  r31,y+4
                 _0x20A0001:
000a1c 9625      	ADIW R28,5
000a1d 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000a1e 93ba      	ST   -Y,R27
000a1f 93aa      	ST   -Y,R26
000a20 91a9          ld   r26,y+
000a21 91b9          ld   r27,y+
000a22 27ee          clr  r30
000a23 27ff          clr  r31
                 strlen0:
000a24 916d          ld   r22,x+
000a25 2366          tst  r22
000a26 f011          breq strlen1
000a27 9631          adiw r30,1
000a28 cffb          rjmp strlen0
                 strlen1:
000a29 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000a2a 93aa      	ST   -Y,R26
000a2b 2766          clr  r22
000a2c 2777          clr  r23
000a2d 9189          ld   r24,y+
000a2e 91e9          ld   r30,y+
000a2f 91f9          ld   r31,y+
000a30 91a9          ld   r26,y+
000a31 91b9          ld   r27,y+
                 strncmp0:
000a32 2388          tst  r24
000a33 f049          breq strncmp1
000a34 958a          dec  r24
000a35 916d          ld   r22,x+
000a36 9171          ld   r23,z+
000a37 1767          cp   r22,r23
000a38 f421          brne strncmp1
000a39 2366          tst  r22
000a3a f7b9          brne strncmp0
                 strncmp3:
000a3b 27ee          clr  r30
000a3c 9508          ret
                 strncmp1:
000a3d 1b67          sub  r22,r23
000a3e f3e1          breq strncmp3
000a3f e0e1          ldi  r30,1
000a40 f408          brcc strncmp2
000a41 50e2          subi r30,2
                 strncmp2:
000a42 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
00072f           	.BYTE 0x10
                 _buffer:
00073f           	.BYTE 0x20
                 _previous_count_S0000013000:
00075f           	.BYTE 0x2
                 __seed_G100:
000761           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000a43 e0e1      	LDI  R30,LOW(1)
000a44 e0f0      	LDI  R31,HIGH(1)
000a45 15e4      	CP   R30,R4
000a46 05f5      	CPC  R31,R5
000a47 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 30 TIMES, CODE SIZE REDUCTION:171 WORDS
                 SUBOPT_0x1:
000a48 e0a1      	LDI  R26,LOW(1)
000a49 940e 0740 	CALL _lcdCommand
000a4b e0e1      	LDI  R30,LOW(1)
000a4c 93ea      	ST   -Y,R30
000a4d e0a1      	LDI  R26,LOW(1)
000a4e 940c 0770 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:112 WORDS
                 SUBOPT_0x2:
000a50 940e 0788 	CALL _lcd_print
000a52 e0e1      	LDI  R30,LOW(1)
000a53 93ea      	ST   -Y,R30
000a54 e0a2      	LDI  R26,LOW(2)
000a55 940c 0770 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000a57 e0e2      	LDI  R30,LOW(2)
000a58 e0f0      	LDI  R31,HIGH(2)
000a59 15e4      	CP   R30,R4
000a5a 05f5      	CPC  R31,R5
000a5b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
000a5c e0af      	LDI  R26,LOW(15)
000a5d 940e 0740 	CALL _lcdCommand
                +
000a5f e880     +LDI R24 , LOW ( 3200 )
000a60 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000a61 9701     +SBIW R24 , 1
000a62 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000a63 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000a64 e0e3      	LDI  R30,LOW(3)
000a65 e0f0      	LDI  R31,HIGH(3)
000a66 15e4      	CP   R30,R4
000a67 05f5      	CPC  R31,R5
000a68 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000a69 e0e4      	LDI  R30,LOW(4)
000a6a e0f0      	LDI  R31,HIGH(4)
000a6b 15e4      	CP   R30,R4
000a6c 05f5      	CPC  R31,R5
000a6d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:85 WORDS
                 SUBOPT_0x7:
000a6e e3ef      	LDI  R30,LOW(_buffer)
000a6f e0f7      	LDI  R31,HIGH(_buffer)
000a70 93fa      	ST   -Y,R31
000a71 93ea      	ST   -Y,R30
000a72 e0e0      	LDI  R30,LOW(0)
000a73 93ea      	ST   -Y,R30
000a74 e2a0      	LDI  R26,LOW(32)
000a75 e0b0      	LDI  R27,0
000a76 940c 0a0e 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000a78 e3af      	LDI  R26,LOW(_buffer)
000a79 e0b7      	LDI  R27,HIGH(_buffer)
000a7a 940e 0788 	CALL _lcd_print
000a7c eea8      	LDI  R26,LOW(1000)
000a7d e0b3      	LDI  R27,HIGH(1000)
000a7e 940c 0b41 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000a80 01f8      	MOVW R30,R16
000a81 9631      	ADIW R30,1
000a82 940e 0cd3 	CALL __LSLW3
000a84 0fe2      	ADD  R30,R18
000a85 1ff3      	ADC  R31,R19
000a86 01df      	MOVW R26,R30
000a87 940c 083f 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
000a89 e0a0      	LDI  R26,LOW(0)
000a8a e0b0      	LDI  R27,0
000a8b 940c 083f 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
000a8d e0ad      	LDI  R26,LOW(13)
000a8e 940e 0856 	CALL _USART_Transmit
000a90 e0ad      	LDI  R26,LOW(13)
000a91 940e 0856 	CALL _USART_Transmit
000a93 efa4      	LDI  R26,LOW(500)
000a94 e0b1      	LDI  R27,HIGH(500)
000a95 940c 0b41 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xC:
000a97 940e 0788 	CALL _lcd_print
000a99 eda0      	LDI  R26,LOW(2000)
000a9a e0b7      	LDI  R27,HIGH(2000)
000a9b 940c 0b41 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
000a9d e0e6      	LDI  R30,LOW(6)
000a9e e0f0      	LDI  R31,HIGH(6)
000a9f 15e4      	CP   R30,R4
000aa0 05f5      	CPC  R31,R5
000aa1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000aa2 e0e7      	LDI  R30,LOW(7)
000aa3 e0f0      	LDI  R31,HIGH(7)
000aa4 15e4      	CP   R30,R4
000aa5 05f5      	CPC  R31,R5
000aa6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000aa7 e0e8      	LDI  R30,LOW(8)
000aa8 e0f0      	LDI  R31,HIGH(8)
000aa9 15e4      	CP   R30,R4
000aaa 05f5      	CPC  R31,R5
000aab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000aac e0e9      	LDI  R30,LOW(9)
000aad e0f0      	LDI  R31,HIGH(9)
000aae 15e4      	CP   R30,R4
000aaf 05f5      	CPC  R31,R5
000ab0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
000ab1 e0ea      	LDI  R30,LOW(10)
000ab2 e0f0      	LDI  R31,HIGH(10)
000ab3 15e4      	CP   R30,R4
000ab4 05f5      	CPC  R31,R5
000ab5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
000ab6 e0ac      	LDI  R26,LOW(12)
000ab7 940e 0740 	CALL _lcdCommand
                +
000ab9 e880     +LDI R24 , LOW ( 3200 )
000aba e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000abb 9701     +SBIW R24 , 1
000abc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000abd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x13:
000abe 940e 0740 	CALL _lcdCommand
                +
000ac0 e880     +LDI R24 , LOW ( 3200 )
000ac1 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000ac2 9701     +SBIW R24 , 1
000ac3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000ac4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
000ac5 bbe5      	OUT  0x15,R30
000ac6 b3e3      	IN   R30,0x13
000ac7 70ef      	ANDI R30,LOW(0xF)
000ac8 2f1e      	MOV  R17,R30
000ac9 301f      	CPI  R17,15
000aca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:330 WORDS
                 SUBOPT_0x15:
000acb 2fe0      	MOV  R30,R16
000acc e2af      	LDI  R26,LOW(_keypad)
000acd e0b7      	LDI  R27,HIGH(_keypad)
000ace e0f0      	LDI  R31,0
000acf 940e 0cd5 	CALL __LSLW2
000ad1 0fae      	ADD  R26,R30
000ad2 1fbf      	ADC  R27,R31
000ad3 27ee      	CLR  R30
000ad4 0fa3      	ADD  R26,R19
000ad5 1fbe      	ADC  R27,R30
000ad6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x16:
000ad7 e3af      	LDI  R26,LOW(_buffer)
000ad8 e0b7      	LDI  R27,HIGH(_buffer)
000ad9 940c 0a1e 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
000adb 5ce1      	SUBI R30,LOW(-_buffer)
000adc 4ff8      	SBCI R31,HIGH(-_buffer)
000add 010f      	MOVW R0,R30
000ade cfec      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
000adf 91ec      	LD   R30,X
000ae0 01d0      	MOVW R26,R0
000ae1 93ec      	ST   X,R30
000ae2 cff4      	RJMP SUBOPT_0x16
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x19:
                +
000ae3 5ce0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000ae4 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000ae5 e0a0      	LDI  R26,LOW(0)
000ae6 83a0      	STD  Z+0,R26
000ae7 cfe3      	RJMP SUBOPT_0x15
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1A:
000ae8 2fe5      	MOV  R30,R21
000ae9 e0f0      	LDI  R31,0
000aea 9731      	SBIW R30,1
000aeb 5ce1      	SUBI R30,LOW(-_buffer)
000aec 4ff8      	SBCI R31,HIGH(-_buffer)
000aed e0a0      	LDI  R26,LOW(0)
000aee 83a0      	STD  Z+0,R26
000aef e1a0      	LDI  R26,LOW(16)
000af0 940c 0740 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1B:
000af2 940e 0788 	CALL _lcd_print
000af4 e1a0      	LDI  R26,LOW(16)
000af5 940c 0740 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
000af7 e0f0      	LDI  R31,0
000af8 9631      	ADIW R30,1
000af9 940e 0cd3 	CALL __LSLW3
000afb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
000afc 9721      	SBIW R28,1
000afd 940e 086a 	CALL _search_student_code
000aff 83e8      	ST   Y,R30
000b00 81a8      	LD   R26,Y
000b01 30a1      	CPI  R26,LOW(0x1)
000b02 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
000b03 93aa      	ST   -Y,R26
000b04 b3e8      	IN   R30,0x18
000b05 70ef      	ANDI R30,LOW(0xF)
000b06 2fae      	MOV  R26,R30
000b07 81e8      	LD   R30,Y
000b08 7fe0      	ANDI R30,LOW(0xF0)
000b09 2bea      	OR   R30,R26
000b0a bbe8      	OUT  0x18,R30
000b0b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000b0c 98c1      	CBI  0x18,1
000b0d 9ac2      	SBI  0x18,2
                +
000b0e e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000b0f 958a     +DEC R24
000b10 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000b11 98c2      	CBI  0x18,2
000b12 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x20:
000b13 b3e8      	IN   R30,0x18
000b14 70ef      	ANDI R30,LOW(0xF)
000b15 2fae      	MOV  R26,R30
000b16 81e8      	LD   R30,Y
000b17 95e2      	SWAP R30
000b18 7fe0      	ANDI R30,0xF0
000b19 2bea      	OR   R30,R26
000b1a bbe8      	OUT  0x18,R30
000b1b 9ac2      	SBI  0x18,2
                +
000b1c e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000b1d 958a     +DEC R24
000b1e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000b1f 98c2      	CBI  0x18,2
000b20 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x21:
000b21 81ea      	LDD  R30,Y+2
000b22 70f0      	ANDI R31,HIGH(0x0)
000b23 70e3      	ANDI R30,LOW(0x3)
000b24 bbef      	OUT  0x1F,R30
000b25 81e9      	LDD  R30,Y+1
000b26 bbee      	OUT  0x1E,R30
000b27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x22:
                +
000b28 81ac     +LDD R26 , Y + 4
000b29 81bd     +LDD R27 , Y + 4 + 1
000b2a 818e     +LDD R24 , Y + 4 + 2
000b2b 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000b2c 3ca0     +CPI R26 , LOW ( 0x927C0 )
000b2d e2e7     +LDI R30 , HIGH ( 0x927C0 )
000b2e 07be     +CPC R27 , R30
000b2f e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000b30 078e     +CPC R24 , R30
000b31 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000b32 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000b33 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x23:
                +
000b34 81ec     +LDD R30 , Y + 4
000b35 81fd     +LDD R31 , Y + 4 + 1
000b36 816e     +LDD R22 , Y + 4 + 2
000b37 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
000b38 5fef     +SUBI R30 , LOW ( - 1 )
000b39 4fff     +SBCI R31 , HIGH ( - 1 )
000b3a 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000b3b 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000b3c 83ec     +STD Y + 4 , R30
000b3d 83fd     +STD Y + 4 + 1 , R31
000b3e 836e     +STD Y + 4 + 2 , R22
000b3f 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000b40 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000b41 9610      	adiw r26,0
000b42 f039      	breq __delay_ms1
                 __delay_ms0:
000b43 95a8      	wdr
                +
000b44 ed80     +LDI R24 , LOW ( 0x7D0 )
000b45 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000b46 9701     +SBIW R24 , 1
000b47 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000b48 9711      	sbiw r26,1
000b49 f7c9      	brne __delay_ms0
                 __delay_ms1:
000b4a 9508      	ret
                 
                 __ROUND_REPACK:
000b4b 2355      	TST  R21
000b4c f442      	BRPL __REPACK
000b4d 3850      	CPI  R21,0x80
000b4e f411      	BRNE __ROUND_REPACK0
000b4f ffe0      	SBRS R30,0
000b50 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000b51 9631      	ADIW R30,1
000b52 1f69      	ADC  R22,R25
000b53 1f79      	ADC  R23,R25
000b54 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000b55 e850      	LDI  R21,0x80
000b56 2757      	EOR  R21,R23
000b57 f411      	BRNE __REPACK0
000b58 935f      	PUSH R21
000b59 c0c8      	RJMP __ZERORES
                 __REPACK0:
000b5a 3f5f      	CPI  R21,0xFF
000b5b f031      	BREQ __REPACK1
000b5c 0f66      	LSL  R22
000b5d 0c00      	LSL  R0
000b5e 9557      	ROR  R21
000b5f 9567      	ROR  R22
000b60 2f75      	MOV  R23,R21
000b61 9508      	RET
                 __REPACK1:
000b62 935f      	PUSH R21
000b63 2000      	TST  R0
000b64 f00a      	BRMI __REPACK2
000b65 c0c8      	RJMP __MAXRES
                 __REPACK2:
000b66 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
000b67 e850      	LDI  R21,0x80
000b68 2e19      	MOV  R1,R25
000b69 2215      	AND  R1,R21
000b6a 0f88      	LSL  R24
000b6b 1f99      	ROL  R25
000b6c 2795      	EOR  R25,R21
000b6d 0f55      	LSL  R21
000b6e 9587      	ROR  R24
                 
                 __UNPACK1:
000b6f e850      	LDI  R21,0x80
000b70 2e07      	MOV  R0,R23
000b71 2205      	AND  R0,R21
000b72 0f66      	LSL  R22
000b73 1f77      	ROL  R23
000b74 2775      	EOR  R23,R21
000b75 0f55      	LSL  R21
000b76 9567      	ROR  R22
000b77 9508      	RET
                 
                 __CFD1U:
000b78 9468      	SET
000b79 c001      	RJMP __CFD1U0
                 __CFD1:
000b7a 94e8      	CLT
                 __CFD1U0:
000b7b 935f      	PUSH R21
000b7c dff2      	RCALL __UNPACK1
000b7d 3870      	CPI  R23,0x80
000b7e f018      	BRLO __CFD10
000b7f 3f7f      	CPI  R23,0xFF
000b80 f408      	BRCC __CFD10
000b81 c0a0      	RJMP __ZERORES
                 __CFD10:
000b82 e156      	LDI  R21,22
000b83 1b57      	SUB  R21,R23
000b84 f4aa      	BRPL __CFD11
000b85 9551      	NEG  R21
000b86 3058      	CPI  R21,8
000b87 f40e      	BRTC __CFD19
000b88 3059      	CPI  R21,9
                 __CFD19:
000b89 f030      	BRLO __CFD17
000b8a efef      	SER  R30
000b8b efff      	SER  R31
000b8c ef6f      	SER  R22
000b8d e77f      	LDI  R23,0x7F
000b8e f977      	BLD  R23,7
000b8f c01a      	RJMP __CFD15
                 __CFD17:
000b90 2777      	CLR  R23
000b91 2355      	TST  R21
000b92 f0b9      	BREQ __CFD15
                 __CFD18:
000b93 0fee      	LSL  R30
000b94 1fff      	ROL  R31
000b95 1f66      	ROL  R22
000b96 1f77      	ROL  R23
000b97 955a      	DEC  R21
000b98 f7d1      	BRNE __CFD18
000b99 c010      	RJMP __CFD15
                 __CFD11:
000b9a 2777      	CLR  R23
                 __CFD12:
000b9b 3058      	CPI  R21,8
000b9c f028      	BRLO __CFD13
000b9d 2fef      	MOV  R30,R31
000b9e 2ff6      	MOV  R31,R22
000b9f 2f67      	MOV  R22,R23
000ba0 5058      	SUBI R21,8
000ba1 cff9      	RJMP __CFD12
                 __CFD13:
000ba2 2355      	TST  R21
000ba3 f031      	BREQ __CFD15
                 __CFD14:
000ba4 9576      	LSR  R23
000ba5 9567      	ROR  R22
000ba6 95f7      	ROR  R31
000ba7 95e7      	ROR  R30
000ba8 955a      	DEC  R21
000ba9 f7d1      	BRNE __CFD14
                 __CFD15:
000baa 2000      	TST  R0
000bab f40a      	BRPL __CFD16
000bac d11e      	RCALL __ANEGD1
                 __CFD16:
000bad 915f      	POP  R21
000bae 9508      	RET
                 
                 __CDF1U:
000baf 9468      	SET
000bb0 c001      	RJMP __CDF1U0
                 __CDF1:
000bb1 94e8      	CLT
                 __CDF1U0:
000bb2 9730      	SBIW R30,0
000bb3 4060      	SBCI R22,0
000bb4 4070      	SBCI R23,0
000bb5 f0b1      	BREQ __CDF10
000bb6 2400      	CLR  R0
000bb7 f026      	BRTS __CDF11
000bb8 2377      	TST  R23
000bb9 f412      	BRPL __CDF11
000bba 9400      	COM  R0
000bbb d10f      	RCALL __ANEGD1
                 __CDF11:
000bbc 2e17      	MOV  R1,R23
000bbd e17e      	LDI  R23,30
000bbe 2011      	TST  R1
                 __CDF12:
000bbf f032      	BRMI __CDF13
000bc0 957a      	DEC  R23
000bc1 0fee      	LSL  R30
000bc2 1fff      	ROL  R31
000bc3 1f66      	ROL  R22
000bc4 1c11      	ROL  R1
000bc5 cff9      	RJMP __CDF12
                 __CDF13:
000bc6 2fef      	MOV  R30,R31
000bc7 2ff6      	MOV  R31,R22
000bc8 2d61      	MOV  R22,R1
000bc9 935f      	PUSH R21
000bca df8a      	RCALL __REPACK
000bcb 915f      	POP  R21
                 __CDF10:
000bcc 9508      	RET
                 
                 __SWAPACC:
000bcd 934f      	PUSH R20
000bce 01af      	MOVW R20,R30
000bcf 01fd      	MOVW R30,R26
000bd0 01da      	MOVW R26,R20
000bd1 01ab      	MOVW R20,R22
000bd2 01bc      	MOVW R22,R24
000bd3 01ca      	MOVW R24,R20
000bd4 2d40      	MOV  R20,R0
000bd5 2c01      	MOV  R0,R1
000bd6 2e14      	MOV  R1,R20
000bd7 914f      	POP  R20
000bd8 9508      	RET
                 
                 __UADD12:
000bd9 0fea      	ADD  R30,R26
000bda 1ffb      	ADC  R31,R27
000bdb 1f68      	ADC  R22,R24
000bdc 9508      	RET
                 
                 __NEGMAN1:
000bdd 95e0      	COM  R30
000bde 95f0      	COM  R31
000bdf 9560      	COM  R22
000be0 5fef      	SUBI R30,-1
000be1 4fff      	SBCI R31,-1
000be2 4f6f      	SBCI R22,-1
000be3 9508      	RET
                 
                 __ADDF12:
000be4 935f      	PUSH R21
000be5 df81      	RCALL __UNPACK
000be6 3890      	CPI  R25,0x80
000be7 f139      	BREQ __ADDF129
                 
                 __ADDF120:
000be8 3870      	CPI  R23,0x80
000be9 f121      	BREQ __ADDF128
                 __ADDF121:
000bea 2f57      	MOV  R21,R23
000beb 1b59      	SUB  R21,R25
000bec f12b      	BRVS __ADDF1211
000bed f412      	BRPL __ADDF122
000bee dfde      	RCALL __SWAPACC
000bef cffa      	RJMP __ADDF121
                 __ADDF122:
000bf0 3158      	CPI  R21,24
000bf1 f018      	BRLO __ADDF123
000bf2 27aa      	CLR  R26
000bf3 27bb      	CLR  R27
000bf4 2788      	CLR  R24
                 __ADDF123:
000bf5 3058      	CPI  R21,8
000bf6 f028      	BRLO __ADDF124
000bf7 2fab      	MOV  R26,R27
000bf8 2fb8      	MOV  R27,R24
000bf9 2788      	CLR  R24
000bfa 5058      	SUBI R21,8
000bfb cff9      	RJMP __ADDF123
                 __ADDF124:
000bfc 2355      	TST  R21
000bfd f029      	BREQ __ADDF126
                 __ADDF125:
000bfe 9586      	LSR  R24
000bff 95b7      	ROR  R27
000c00 95a7      	ROR  R26
000c01 955a      	DEC  R21
000c02 f7d9      	BRNE __ADDF125
                 __ADDF126:
000c03 2d50      	MOV  R21,R0
000c04 2551      	EOR  R21,R1
000c05 f072      	BRMI __ADDF127
000c06 dfd2      	RCALL __UADD12
000c07 f438      	BRCC __ADDF129
000c08 9567      	ROR  R22
000c09 95f7      	ROR  R31
000c0a 95e7      	ROR  R30
000c0b 9573      	INC  R23
000c0c f413      	BRVC __ADDF129
000c0d c020      	RJMP __MAXRES
                 __ADDF128:
000c0e dfbe      	RCALL __SWAPACC
                 __ADDF129:
000c0f df45      	RCALL __REPACK
000c10 915f      	POP  R21
000c11 9508      	RET
                 __ADDF1211:
000c12 f7d8      	BRCC __ADDF128
000c13 cffb      	RJMP __ADDF129
                 __ADDF127:
000c14 1bea      	SUB  R30,R26
000c15 0bfb      	SBC  R31,R27
000c16 0b68      	SBC  R22,R24
000c17 f051      	BREQ __ZERORES
000c18 f410      	BRCC __ADDF1210
000c19 9400      	COM  R0
000c1a dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000c1b 2366      	TST  R22
000c1c f392      	BRMI __ADDF129
000c1d 0fee      	LSL  R30
000c1e 1fff      	ROL  R31
000c1f 1f66      	ROL  R22
000c20 957a      	DEC  R23
000c21 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000c22 27ee      	CLR  R30
000c23 27ff      	CLR  R31
000c24 2766      	CLR  R22
000c25 2777      	CLR  R23
000c26 915f      	POP  R21
000c27 9508      	RET
                 
                 __MINRES:
000c28 efef      	SER  R30
000c29 efff      	SER  R31
000c2a e76f      	LDI  R22,0x7F
000c2b ef7f      	SER  R23
000c2c 915f      	POP  R21
000c2d 9508      	RET
                 
                 __MAXRES:
000c2e efef      	SER  R30
000c2f efff      	SER  R31
000c30 e76f      	LDI  R22,0x7F
000c31 e77f      	LDI  R23,0x7F
000c32 915f      	POP  R21
000c33 9508      	RET
                 
                 __MULF12:
000c34 935f      	PUSH R21
000c35 df31      	RCALL __UNPACK
000c36 3870      	CPI  R23,0x80
000c37 f351      	BREQ __ZERORES
000c38 3890      	CPI  R25,0x80
000c39 f341      	BREQ __ZERORES
000c3a 2401      	EOR  R0,R1
000c3b 9408      	SEC
000c3c 1f79      	ADC  R23,R25
000c3d f423      	BRVC __MULF124
000c3e f31c      	BRLT __ZERORES
                 __MULF125:
000c3f 2000      	TST  R0
000c40 f33a      	BRMI __MINRES
000c41 cfec      	RJMP __MAXRES
                 __MULF124:
000c42 920f      	PUSH R0
000c43 931f      	PUSH R17
000c44 932f      	PUSH R18
000c45 933f      	PUSH R19
000c46 934f      	PUSH R20
000c47 2711      	CLR  R17
000c48 2722      	CLR  R18
000c49 2799      	CLR  R25
000c4a 9f68      	MUL  R22,R24
000c4b 01a0      	MOVW R20,R0
000c4c 9f8f      	MUL  R24,R31
000c4d 2d30      	MOV  R19,R0
000c4e 0d41      	ADD  R20,R1
000c4f 1f59      	ADC  R21,R25
000c50 9f6b      	MUL  R22,R27
000c51 0d30      	ADD  R19,R0
000c52 1d41      	ADC  R20,R1
000c53 1f59      	ADC  R21,R25
000c54 9f8e      	MUL  R24,R30
000c55 d027      	RCALL __MULF126
000c56 9fbf      	MUL  R27,R31
000c57 d025      	RCALL __MULF126
000c58 9f6a      	MUL  R22,R26
000c59 d023      	RCALL __MULF126
000c5a 9fbe      	MUL  R27,R30
000c5b d01d      	RCALL __MULF127
000c5c 9faf      	MUL  R26,R31
000c5d d01b      	RCALL __MULF127
000c5e 9fae      	MUL  R26,R30
000c5f 0d11      	ADD  R17,R1
000c60 1f29      	ADC  R18,R25
000c61 1f39      	ADC  R19,R25
000c62 1f49      	ADC  R20,R25
000c63 1f59      	ADC  R21,R25
000c64 2fe3      	MOV  R30,R19
000c65 2ff4      	MOV  R31,R20
000c66 2f65      	MOV  R22,R21
000c67 2f52      	MOV  R21,R18
000c68 914f      	POP  R20
000c69 913f      	POP  R19
000c6a 912f      	POP  R18
000c6b 911f      	POP  R17
000c6c 900f      	POP  R0
000c6d 2366      	TST  R22
000c6e f02a      	BRMI __MULF122
000c6f 0f55      	LSL  R21
000c70 1fee      	ROL  R30
000c71 1fff      	ROL  R31
000c72 1f66      	ROL  R22
000c73 c002      	RJMP __MULF123
                 __MULF122:
000c74 9573      	INC  R23
000c75 f24b      	BRVS __MULF125
                 __MULF123:
000c76 ded4      	RCALL __ROUND_REPACK
000c77 915f      	POP  R21
000c78 9508      	RET
                 
                 __MULF127:
000c79 0d10      	ADD  R17,R0
000c7a 1d21      	ADC  R18,R1
000c7b 1f39      	ADC  R19,R25
000c7c c002      	RJMP __MULF128
                 __MULF126:
000c7d 0d20      	ADD  R18,R0
000c7e 1d31      	ADC  R19,R1
                 __MULF128:
000c7f 1f49      	ADC  R20,R25
000c80 1f59      	ADC  R21,R25
000c81 9508      	RET
                 
                 __DIVF21:
000c82 935f      	PUSH R21
000c83 dee3      	RCALL __UNPACK
000c84 3870      	CPI  R23,0x80
000c85 f421      	BRNE __DIVF210
000c86 2011      	TST  R1
                 __DIVF211:
000c87 f40a      	BRPL __DIVF219
000c88 cf9f      	RJMP __MINRES
                 __DIVF219:
000c89 cfa4      	RJMP __MAXRES
                 __DIVF210:
000c8a 3890      	CPI  R25,0x80
000c8b f409      	BRNE __DIVF218
                 __DIVF217:
000c8c cf95      	RJMP __ZERORES
                 __DIVF218:
000c8d 2401      	EOR  R0,R1
000c8e 9408      	SEC
000c8f 0b97      	SBC  R25,R23
000c90 f41b      	BRVC __DIVF216
000c91 f3d4      	BRLT __DIVF217
000c92 2000      	TST  R0
000c93 cff3      	RJMP __DIVF211
                 __DIVF216:
000c94 2f79      	MOV  R23,R25
000c95 931f      	PUSH R17
000c96 932f      	PUSH R18
000c97 933f      	PUSH R19
000c98 934f      	PUSH R20
000c99 2411      	CLR  R1
000c9a 2711      	CLR  R17
000c9b 2722      	CLR  R18
000c9c 2733      	CLR  R19
000c9d 2744      	CLR  R20
000c9e 2755      	CLR  R21
000c9f e290      	LDI  R25,32
                 __DIVF212:
000ca0 17ae      	CP   R26,R30
000ca1 07bf      	CPC  R27,R31
000ca2 0786      	CPC  R24,R22
000ca3 0741      	CPC  R20,R17
000ca4 f030      	BRLO __DIVF213
000ca5 1bae      	SUB  R26,R30
000ca6 0bbf      	SBC  R27,R31
000ca7 0b86      	SBC  R24,R22
000ca8 0b41      	SBC  R20,R17
000ca9 9408      	SEC
000caa c001      	RJMP __DIVF214
                 __DIVF213:
000cab 9488      	CLC
                 __DIVF214:
000cac 1f55      	ROL  R21
000cad 1f22      	ROL  R18
000cae 1f33      	ROL  R19
000caf 1c11      	ROL  R1
000cb0 1faa      	ROL  R26
000cb1 1fbb      	ROL  R27
000cb2 1f88      	ROL  R24
000cb3 1f44      	ROL  R20
000cb4 959a      	DEC  R25
000cb5 f751      	BRNE __DIVF212
000cb6 01f9      	MOVW R30,R18
000cb7 2d61      	MOV  R22,R1
000cb8 914f      	POP  R20
000cb9 913f      	POP  R19
000cba 912f      	POP  R18
000cbb 911f      	POP  R17
000cbc 2366      	TST  R22
000cbd f032      	BRMI __DIVF215
000cbe 0f55      	LSL  R21
000cbf 1fee      	ROL  R30
000cc0 1fff      	ROL  R31
000cc1 1f66      	ROL  R22
000cc2 957a      	DEC  R23
000cc3 f243      	BRVS __DIVF217
                 __DIVF215:
000cc4 de86      	RCALL __ROUND_REPACK
000cc5 915f      	POP  R21
000cc6 9508      	RET
                 
                 __ANEGW1:
000cc7 95f1      	NEG  R31
000cc8 95e1      	NEG  R30
000cc9 40f0      	SBCI R31,0
000cca 9508      	RET
                 
                 __ANEGD1:
000ccb 95f0      	COM  R31
000ccc 9560      	COM  R22
000ccd 9570      	COM  R23
000cce 95e1      	NEG  R30
000ccf 4fff      	SBCI R31,-1
000cd0 4f6f      	SBCI R22,-1
000cd1 4f7f      	SBCI R23,-1
000cd2 9508      	RET
                 
                 __LSLW3:
000cd3 0fee      	LSL  R30
000cd4 1fff      	ROL  R31
                 __LSLW2:
000cd5 0fee      	LSL  R30
000cd6 1fff      	ROL  R31
000cd7 0fee      	LSL  R30
000cd8 1fff      	ROL  R31
000cd9 9508      	RET
                 
                 __LSRD1:
000cda 9576      	LSR  R23
000cdb 9567      	ROR  R22
000cdc 95f7      	ROR  R31
000cdd 95e7      	ROR  R30
000cde 9508      	RET
                 
                 __CWD1:
000cdf 2f6f      	MOV  R22,R31
000ce0 0f66      	ADD  R22,R22
000ce1 0b66      	SBC  R22,R22
000ce2 2f76      	MOV  R23,R22
000ce3 9508      	RET
                 
                 __MANDW12:
000ce4 94e8      	CLT
000ce5 fff7      	SBRS R31,7
000ce6 c002      	RJMP __MANDW121
000ce7 dfdf      	RCALL __ANEGW1
000ce8 9468      	SET
                 __MANDW121:
000ce9 23ea      	AND  R30,R26
000cea 23fb      	AND  R31,R27
000ceb f40e      	BRTC __MANDW122
000cec dfda      	RCALL __ANEGW1
                 __MANDW122:
000ced 9508      	RET
                 
                 __GETD1S0:
000cee 81e8      	LD   R30,Y
000cef 81f9      	LDD  R31,Y+1
000cf0 816a      	LDD  R22,Y+2
000cf1 817b      	LDD  R23,Y+3
000cf2 9508      	RET
                 
                 __GETD2S0:
000cf3 81a8      	LD   R26,Y
000cf4 81b9      	LDD  R27,Y+1
000cf5 818a      	LDD  R24,Y+2
000cf6 819b      	LDD  R25,Y+3
000cf7 9508      	RET
                 
                 __PUTD1S0:
000cf8 83e8      	ST   Y,R30
000cf9 83f9      	STD  Y+1,R31
000cfa 836a      	STD  Y+2,R22
000cfb 837b      	STD  Y+3,R23
000cfc 9508      	RET
                 
                 __SAVELOCR6:
000cfd 935a      	ST   -Y,R21
                 __SAVELOCR5:
000cfe 934a      	ST   -Y,R20
                 __SAVELOCR4:
000cff 933a      	ST   -Y,R19
                 __SAVELOCR3:
000d00 932a      	ST   -Y,R18
                 __SAVELOCR2:
000d01 931a      	ST   -Y,R17
000d02 930a      	ST   -Y,R16
000d03 9508      	RET
                 
                 __LOADLOCR6:
000d04 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000d05 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000d06 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000d07 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000d08 8119      	LDD  R17,Y+1
000d09 8108      	LD   R16,Y
000d0a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  53 r1 :  24 r2 :   0 r3 :   0 r4 :  44 r5 :  28 r6 :   4 r7 :  13 
r8 :   0 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  40 r17:  55 r18:  36 r19:  44 r20:  27 r21:  78 r22:  78 r23:  53 
r24:  61 r25:  46 r26: 300 r27: 140 r28:  33 r29:   1 r30: 468 r31: 191 
x  :  53 y  : 201 z  :  12 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  23 
adiw  :  34 and   :   4 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  47 
brge  :  11 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  17 
brlt  :   2 brmi  :   7 brne  : 101 brpl  :   7 brsh  :  11 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 254 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  67 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  10 
cp    :  37 cpc   :  50 cpi   :  76 cpse  :   0 dec   :  12 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   4 jmp   :  34 ld    :  81 ldd   :  55 ldi   : 444 
lds   :   2 lpm   :   7 lsl   :  14 lsr   :   3 mov   :  74 movw  :  56 
mul   :  12 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   0 out   :  37 pop   :  22 push  :  21 rcall :  76 ret   :  68 
reti  :   1 rjmp  : 151 rol   :  27 ror   :  15 sbc   :   8 sbci  :  22 
sbi   :  14 sbic  :   3 sbis  :   4 sbiw  :  34 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  96 std   :  27 sts   :   2 sub   :   6 subi  :  26 swap  :   1 
tst   :  23 wdr   :   1 
Instructions used: 74 out of 116 (63.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001a16   5328   1350   6678   32768  20.4%
[.dseg] 0x000060 0x000765      0   1285   1285    2048  62.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
