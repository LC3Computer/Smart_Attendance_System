
AVRASM ver. 2.1.30  C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm Thu Dec 12 23:39:18 2024

C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01d3 	JMP  __RESET
000002 940c 02e3 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000      	.DB  0x0,0x0
                 
                 _0x3:
00002b 3837
00002c 4f39
00002d 3534
00002e 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00002f 3231
000030 4333
000031 304c
000032 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x0:
000033 2031
000034 203a
000035 7553
000036 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000037 7469
000038 5320
000039 7574
00003a 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003b 746e
00003c 4320
00003d 646f
00003e 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
00003f 2020
000040 2020
000041 7270
000042 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000043 2073
000044 6163
000045 636e
000046 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000047 7420
000048 206f
000049 6162
00004a 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004b 4500
00004c 746e
00004d 7265
00004e 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
00004f 756f
000050 2072
000051 7473
000052 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000053 6e65
000054 2074
000055 6f63
000056 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
000057 003a
000058 754e
000059 626d
00005a 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005b 6f20
00005c 2066
00005d 7473
00005e 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
00005f 6e65
000060 7374
000061 3a20
000062 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000063 7250
000064 7365
000065 2073
000066 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000067 636e
000068 6c65
000069 5420
00006a 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006b 6f47
00006c 4220
00006d 6361
00006e 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
00006f 7453
000070 7261
000071 2074
000072 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000073 6e61
000074 6673
000075 7265
000076 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000077 676e
000078 2e2e
000079 002e
00007a 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007b 7261
00007c 2074
00007d 7254
00007e 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
00007f 6d73
000080 7469
000081 6620
000082 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x66,0x69,0x6E
000083 7369
000084 6568
000085 0064
000086 2031      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x20
000087 203a
000088 6553
000089 7261
00008a 6863      	.DB  0x3A,0x20,0x53,0x65,0x61,0x72,0x63,0x68
00008b 5320
00008c 7574
00008d 6564
00008e 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00008f 2000
000090 2020
000091 5020
000092 6572      	.DB  0x0,0x20,0x20,0x20,0x20,0x50,0x72,0x65
000093 7373
000094 4320
000095 6e61
000096 6563      	.DB  0x73,0x73,0x20,0x43,0x61,0x6E,0x63,0x65
000097 206c
000098 6f54
000099 4220
00009a 6361      	.DB  0x6C,0x20,0x54,0x6F,0x20,0x42,0x61,0x63
00009b 006b
00009c 6e45
00009d 6574
00009e 2072      	.DB  0x6B,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00009f 7453
0000a0 6475
0000a1 6e65
0000a2 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a3 6f43
0000a4 6564
0000a5 4620
0000a6 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a7 5320
0000a8 6165
0000a9 6372
0000aa 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000ab 4300
0000ac 656c
0000ad 7261
0000ae 6e69      	.DB  0x0,0x43,0x6C,0x65,0x61,0x72,0x69,0x6E
0000af 2067
0000b0 4545
0000b1 5250
0000b2 4d4f      	.DB  0x67,0x20,0x45,0x45,0x50,0x52,0x4F,0x4D
0000b3 2e20
0000b4 2e2e
0000b5 3400
0000b6 0030      	.DB  0x20,0x2E,0x2E,0x2E,0x0,0x34,0x30,0x0
0000b7 6e49
0000b8 6f63
0000b9 7272
0000ba 6365      	.DB  0x49,0x6E,0x63,0x6F,0x72,0x72,0x65,0x63
0000bb 2074
0000bc 7553
0000bd 6475
0000be 6e65      	.DB  0x74,0x20,0x53,0x75,0x75,0x64,0x65,0x6E
0000bf 2074
0000c0 6f43
0000c1 6564
0000c2 4620      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x46
0000c3 726f
0000c4 616d
0000c5 0074
0000c6 6f59      	.DB  0x6F,0x72,0x6D,0x61,0x74,0x0,0x59,0x6F
0000c7 2075
0000c8 6957
0000c9 6c6c
0000ca 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
0000cb 6361
0000cc 206b
0000cd 654d
0000ce 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
0000cf 4920
0000d0 206e
0000d1 2035
0000d2 6553      	.DB  0x20,0x49,0x6E,0x20,0x35,0x20,0x53,0x65
0000d3 6f63
0000d4 646e
0000d5 4400
0000d6 7075      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x44,0x75,0x70
0000d7 696c
0000d8 6163
0000d9 6574
0000da 5320      	.DB  0x6C,0x69,0x63,0x61,0x74,0x65,0x20,0x53
0000db 7575
0000dc 6564
0000dd 746e
0000de 4320      	.DB  0x75,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000df 646f
0000e0 2065
0000e1 6e45
0000e2 6574      	.DB  0x6F,0x64,0x65,0x20,0x45,0x6E,0x74,0x65
0000e3 6572
0000e4 0064
0000e5 7453
0000e6 6475      	.DB  0x72,0x65,0x64,0x0,0x53,0x74,0x75,0x64
0000e7 6e65
0000e8 2074
0000e9 6f43
0000ea 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
0000eb 5320
0000ec 6375
0000ed 6563
0000ee 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
0000ef 7566
0000f0 6c6c
0000f1 2079
0000f2 6441      	.DB  0x66,0x75,0x6C,0x6C,0x79,0x20,0x41,0x64
0000f3 6564
0000f4 0064
0000f5 6f59
0000f6 2075      	.DB  0x64,0x65,0x64,0x0,0x59,0x6F,0x75,0x20
0000f7 6957
0000f8 6c6c
0000f9 4220
0000fa 6361      	.DB  0x57,0x69,0x6C,0x6C,0x20,0x42,0x61,0x63
0000fb 206b
0000fc 654d
0000fd 756e
0000fe 4920      	.DB  0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20,0x49
0000ff 206e
000100 2032
000101 6553
000102 6f63      	.DB  0x6E,0x20,0x32,0x20,0x53,0x65,0x63,0x6F
000103 646e
000104 5300
000105 7574
000106 6564      	.DB  0x6E,0x64,0x0,0x53,0x74,0x75,0x64,0x65
000107 746e
000108 4320
000109 646f
00010a 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
00010b 6f46
00010c 6e75
00010d 0064
00010e 704f      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x4F,0x70
00010f 2073
000110 202c
000111 7453
000112 6475      	.DB  0x73,0x20,0x2C,0x20,0x53,0x74,0x75,0x64
000113 6e65
000114 2074
000115 6f43
000116 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
000117 4e20
000118 746f
000119 4620
00011a 756f      	.DB  0x20,0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75
00011b 646e
00011c 5400
00011d 6d65
00011e 2870      	.DB  0x6E,0x64,0x0,0x54,0x65,0x6D,0x70,0x28
00011f 2943
000120 003a
000121 3a31
000122 4120      	.DB  0x43,0x29,0x3A,0x0,0x31,0x3A,0x20,0x41
000123 7474
000124 6e65
000125 6164
000126 636e      	.DB  0x74,0x74,0x65,0x6E,0x64,0x61,0x6E,0x63
000127 2065
000128 6e49
000129 7469
00012a 6169      	.DB  0x65,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00012b 696c
00012c 617a
00012d 6974
00012e 6e6f      	.DB  0x6C,0x69,0x7A,0x61,0x74,0x69,0x6F,0x6E
00012f 3200
000130 203a
000131 7453
000132 6475      	.DB  0x0,0x32,0x3A,0x20,0x53,0x74,0x75,0x64
000133 6e65
000134 2074
000135 614d
000136 616e      	.DB  0x65,0x6E,0x74,0x20,0x4D,0x61,0x6E,0x61
000137 6567
000138 656d
000139 746e
00013a 3300      	.DB  0x67,0x65,0x6D,0x65,0x6E,0x74,0x0,0x33
00013b 203a
00013c 6956
00013d 7765
00013e 5020      	.DB  0x3A,0x20,0x56,0x69,0x65,0x77,0x20,0x50
00013f 6572
000140 6573
000141 746e
000142 5320      	.DB  0x72,0x65,0x73,0x65,0x6E,0x74,0x20,0x53
000143 7574
000144 6564
000145 746e
000146 2073      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x73,0x20
000147 3400
000148 203a
000149 6554
00014a 706d      	.DB  0x0,0x34,0x3A,0x20,0x54,0x65,0x6D,0x70
00014b 7265
00014c 7461
00014d 7275
00014e 2065      	.DB  0x65,0x72,0x61,0x74,0x75,0x72,0x65,0x20
00014f 6f4d
000150 696e
000151 6f74
000152 6972      	.DB  0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69
000153 676e
000154 3500
000155 203a
000156 6552      	.DB  0x6E,0x67,0x0,0x35,0x3A,0x20,0x52,0x65
000157 7274
000158 6569
000159 6576
00015a 5320      	.DB  0x74,0x72,0x69,0x65,0x76,0x65,0x20,0x53
00015b 7574
00015c 6564
00015d 746e
00015e 4420      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x44
00015f 7461
000160 0061
000161 3a36
000162 5420      	.DB  0x61,0x74,0x61,0x0,0x36,0x3A,0x20,0x54
000163 6172
000164 6666
000165 6369
000166 4d20      	.DB  0x72,0x61,0x66,0x66,0x69,0x63,0x20,0x4D
000167 6e6f
000168 7469
000169 726f
00016a 6e69      	.DB  0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E
00016b 0067      	.DB  0x67,0x0
                 _0x2000060:
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1208): warning: .cseg .db misalignment - padding zero byte
00016c 0001      	.DB  0x1
                 _0x2000000:
00016d 4e2d
00016e 4e41
00016f 4900
000170 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1211): warning: .cseg .db misalignment - padding zero byte
000171 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000172 0002      	.DW  0x02
000173 0004      	.DW  0x04
000174 0054      	.DW  __REG_VARS*2
                 
000175 0010      	.DW  0x10
000176 052f      	.DW  _keypad
000177 0056      	.DW  _0x3*2
                 
000178 0018      	.DW  0x18
000179 0260      	.DW  _0xA
00017a 0066      	.DW  _0x0*2
                 
00017b 0019      	.DW  0x19
00017c 0278      	.DW  _0xA+24
00017d 007e      	.DW  _0x0*2+24
                 
00017e 0019      	.DW  0x19
00017f 0291      	.DW  _0xA+49
000180 0097      	.DW  _0x0*2+49
                 
000181 0016      	.DW  0x16
000182 02aa      	.DW  _0xA+74
000183 00b0      	.DW  _0x0*2+74
                 
000184 0018      	.DW  0x18
000185 02c0      	.DW  _0xA+96
000186 00c6      	.DW  _0x0*2+96
                 
000187 0016      	.DW  0x16
000188 02d8      	.DW  _0xA+120
000189 00de      	.DW  _0x0*2+120
                 
00018a 0018      	.DW  0x18
00018b 02ee      	.DW  _0xA+142
00018c 00f4      	.DW  _0x0*2+142
                 
00018d 0013      	.DW  0x13
00018e 0306      	.DW  _0xA+166
00018f 010c      	.DW  _0x0*2+166
                 
000190 0019      	.DW  0x19
000191 0319      	.DW  _0xA+185
000192 011f      	.DW  _0x0*2+185
                 
000193 001f      	.DW  0x1F
000194 0332      	.DW  _0xA+210
000195 0138      	.DW  _0x0*2+210
                 
000196 0014      	.DW  0x14
000197 0351      	.DW  _0x49
000198 0157      	.DW  _0x0*2+241
                 
000199 0003      	.DW  0x03
00019a 0365      	.DW  _0x49+20
00019b 016b      	.DW  _0x0*2+261
                 
00019c 001e      	.DW  0x1E
00019d 0368      	.DW  _0x49+23
00019e 016e      	.DW  _0x0*2+264
                 
00019f 001f      	.DW  0x1F
0001a0 0386      	.DW  _0x49+53
0001a1 018c      	.DW  _0x0*2+294
                 
0001a2 001f      	.DW  0x1F
0001a3 03a5      	.DW  _0x49+84
0001a4 01ab      	.DW  _0x0*2+325
                 
0001a5 001f      	.DW  0x1F
0001a6 03c4      	.DW  _0x49+115
0001a7 018c      	.DW  _0x0*2+294
                 
0001a8 0020      	.DW  0x20
0001a9 03e3      	.DW  _0x49+146
0001aa 01ca      	.DW  _0x0*2+356
                 
0001ab 001f      	.DW  0x1F
0001ac 0403      	.DW  _0x49+178
0001ad 01ea      	.DW  _0x0*2+388
                 
0001ae 0013      	.DW  0x13
0001af 0422      	.DW  _0x49+209
0001b0 0209      	.DW  _0x0*2+419
                 
0001b1 001f      	.DW  0x1F
0001b2 0435      	.DW  _0x49+228
0001b3 018c      	.DW  _0x0*2+294
                 
0001b4 001d      	.DW  0x1D
0001b5 0454      	.DW  _0x49+259
0001b6 021c      	.DW  _0x0*2+438
                 
0001b7 001f      	.DW  0x1F
0001b8 0471      	.DW  _0x49+288
0001b9 018c      	.DW  _0x0*2+294
                 
0001ba 0009      	.DW  0x09
0001bb 0490      	.DW  _0x7F
0001bc 0239      	.DW  _0x0*2+467
                 
0001bd 001d      	.DW  0x1D
0001be 0499      	.DW  _0x87
0001bf 0242      	.DW  _0x0*2+476
                 
0001c0 0016      	.DW  0x16
0001c1 04b6      	.DW  _0x87+29
0001c2 025f      	.DW  _0x0*2+505
                 
0001c3 001a      	.DW  0x1A
0001c4 04cc      	.DW  _0x87+51
0001c5 0275      	.DW  _0x0*2+527
                 
0001c6 001a      	.DW  0x1A
0001c7 04e6      	.DW  _0x87+77
0001c8 028f      	.DW  _0x0*2+553
                 
0001c9 0019      	.DW  0x19
0001ca 0500      	.DW  _0x87+103
0001cb 02a9      	.DW  _0x0*2+579
                 
0001cc 0016      	.DW  0x16
0001cd 0519      	.DW  _0x87+128
0001ce 02c2      	.DW  _0x0*2+604
                 
0001cf 0001      	.DW  0x01
0001d0 055f      	.DW  __seed_G100
0001d1 02d8      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0001d2 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001d3 94f8      	CLI
0001d4 27ee      	CLR  R30
0001d5 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001d6 e0f1      	LDI  R31,1
0001d7 bffb      	OUT  GICR,R31
0001d8 bfeb      	OUT  GICR,R30
0001d9 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001da e08d      	LDI  R24,(14-2)+1
0001db e0a2      	LDI  R26,2
0001dc 27bb      	CLR  R27
                 __CLEAR_REG:
0001dd 93ed      	ST   X+,R30
0001de 958a      	DEC  R24
0001df f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001e0 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001e1 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001e2 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0001e3 93ed      	ST   X+,R30
0001e4 9701      	SBIW R24,1
0001e5 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001e6 eee4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001e7 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001e8 9185      	LPM  R24,Z+
0001e9 9195      	LPM  R25,Z+
0001ea 9700      	SBIW R24,0
0001eb f061      	BREQ __GLOBAL_INI_END
0001ec 91a5      	LPM  R26,Z+
0001ed 91b5      	LPM  R27,Z+
0001ee 9005      	LPM  R0,Z+
0001ef 9015      	LPM  R1,Z+
0001f0 01bf      	MOVW R22,R30
0001f1 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001f2 9005      	LPM  R0,Z+
0001f3 920d      	ST   X+,R0
0001f4 9701      	SBIW R24,1
0001f5 f7e1      	BRNE __GLOBAL_INI_LOOP
0001f6 01fb      	MOVW R30,R22
0001f7 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001f8 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001f9 bfed      	OUT  SPL,R30
0001fa e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001fb bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001fc e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001fd e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001fe 940c 0200 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void LCM35_init();
                 ;void show_temp();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;int search_student_code();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0047 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0048     int i, j;
                 ; 0000 0049     unsigned char st_counts;
                 ; 0000 004A     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
000200 efe0      	LDI  R30,LOW(240)
000201 bbe4      	OUT  0x14,R30
                 ; 0000 004B     KEY_PRT = 0xFF;
000202 efef      	LDI  R30,LOW(255)
000203 bbe5      	OUT  0x15,R30
                 ; 0000 004C     KEY_PRT &= 0x0F;    // ground all rows at once
000204 b3e5      	IN   R30,0x15
000205 70ef      	ANDI R30,LOW(0xF)
000206 bbe5      	OUT  0x15,R30
                 ; 0000 004D     MCUCR = 0x02;       // make INT0 falling edge triggered
000207 e0e2      	LDI  R30,LOW(2)
000208 bfe5      	OUT  0x35,R30
                 ; 0000 004E     GICR = (1 << INT0); // enable external interrupt 0
000209 e4e0      	LDI  R30,LOW(64)
00020a bfeb      	OUT  0x3B,R30
                 ; 0000 004F     lcd_init();
00020b d26b      	RCALL _lcd_init
                 ; 0000 0050     USART_init(0x33);
00020c e3a3      	LDI  R26,LOW(51)
00020d e0b0      	LDI  R27,0
00020e d34f      	RCALL _USART_init
                 ; 0000 0051 
                 ; 0000 0052 #asm("sei")           // enable interrupts
00020f 9478      	sei
                 ; 0000 0053     lcdCommand(0x01); // clear LCD
000210 e0a1      	LDI  R26,LOW(1)
000211 d251      	RCALL _lcdCommand
                 ; 0000 0054     LCM35_init();
000212 d2b0      	RCALL _LCM35_init
                 ; 0000 0055     while (1)
                 _0x4:
                 ; 0000 0056     {
                 ; 0000 0057         if (stage == STAGE_INIT_MENU)
000213 2c04      	MOV  R0,R4
000214 2805      	OR   R0,R5
000215 f411      	BRNE _0x7
                 ; 0000 0058         {
                 ; 0000 0059             show_menu();
000216 d2d3      	RCALL _show_menu
                 ; 0000 005A         }
                 ; 0000 005B         else if (stage == STAGE_ATTENDENC_MENU)
000217 c0c9      	RJMP _0x8
                 _0x7:
000218 940e 062a 	CALL SUBOPT_0x0
00021a f469      	BRNE _0x9
                 ; 0000 005C         {
                 ; 0000 005D             lcdCommand(0x01);
00021b 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 005E             lcd_gotoxy(1, 1);
                 ; 0000 005F             lcd_print("1 : Submit Student Code");
                +
00021d e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
00021e e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
00021f 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0060             lcd_gotoxy(1, 2);
                 ; 0000 0061             lcd_print("    press cancel to back");
                +
000221 e7a8     +LDI R26 , LOW ( _0xA + ( 24 ) )
000222 e0b2     +LDI R27 , HIGH ( _0xA + ( 24 ) )
                 	__POINTW2MN _0xA,24
000223 d288      	RCALL _lcd_print
                 ; 0000 0062             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
000224 940e 062a 	CALL SUBOPT_0x0
000226 f3e9      	BREQ _0xB
                 ; 0000 0063                 ;
                 ; 0000 0064         }
                 ; 0000 0065         else if (stage == STAGE_SUBMIT_CODE)
000227 c0b9      	RJMP _0xE
                 _0x9:
000228 940e 063e 	CALL SUBOPT_0x3
00022a f461      	BRNE _0xF
                 ; 0000 0066         {
                 ; 0000 0067             lcdCommand(0x01);
00022b 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0068             lcd_gotoxy(1, 1);
                 ; 0000 0069             lcd_print("Enter your student code:");
                +
00022d e9a1     +LDI R26 , LOW ( _0xA + ( 49 ) )
00022e e0b2     +LDI R27 , HIGH ( _0xA + ( 49 ) )
                 	__POINTW2MN _0xA,49
00022f 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 006A             lcd_gotoxy(1, 2);
                 ; 0000 006B             lcdCommand(0x0f);   // display on, cursor blinking
000231 940e 0643 	CALL SUBOPT_0x4
                 ; 0000 006C             delay_us(100 * 16); // wait
                 ; 0000 006D             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
000233 940e 063e 	CALL SUBOPT_0x3
000235 f3e9      	BREQ _0x10
                 ; 0000 006E                 ;
                 ; 0000 006F             lcdCommand(0x0c);   // display on, cursor off
000236 c0a7      	RJMP _0xA5
                 ; 0000 0070             delay_us(100 * 16); // wait
                 ; 0000 0071         }
                 ; 0000 0072         else if (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xF:
000237 940e 064b 	CALL SUBOPT_0x5
000239 f411      	BRNE _0x14
                 ; 0000 0073         {
                 ; 0000 0074             show_temp();
00023a d28d      	RCALL _show_temp
                 ; 0000 0075         }
                 ; 0000 0076         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00023b c0a5      	RJMP _0x15
                 _0x14:
00023c 940e 0650 	CALL SUBOPT_0x6
00023e f009      	BREQ PC+2
00023f c047      	RJMP _0x16
                 ; 0000 0077         {
                 ; 0000 0078             lcdCommand(0x01);
000240 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0079             lcd_gotoxy(1, 1);
                 ; 0000 007A             lcd_print("Number of students : ");
                +
000242 eaaa     +LDI R26 , LOW ( _0xA + ( 74 ) )
000243 e0b2     +LDI R27 , HIGH ( _0xA + ( 74 ) )
                 	__POINTW2MN _0xA,74
000244 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 007B             lcd_gotoxy(1, 2);
                 ; 0000 007C             st_counts = read_byte_from_eeprom(0x0);
000246 e0a0      	LDI  R26,LOW(0)
000247 e0b0      	LDI  R27,0
000248 d2f7      	RCALL _read_byte_from_eeprom
000249 2f5e      	MOV  R21,R30
                 ; 0000 007D             memset(buffer, 0, 32);
00024a 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 007E             itoa(st_counts, buffer);
00024c 2fe5      	MOV  R30,R21
00024d e0f0      	LDI  R31,0
00024e 940e 065f 	CALL SUBOPT_0x8
000250 940e 05b3 	CALL _itoa
                 ; 0000 007F             lcd_print(buffer);
000252 940e 0664 	CALL SUBOPT_0x9
                 ; 0000 0080             delay_ms(1000);
                 ; 0000 0081 
                 ; 0000 0082             for (i = 0; i < st_counts; i++)
                +
000254 e000     +LDI R16 , LOW ( 0 )
000255 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
000256 2fe5      	MOV  R30,R21
000257 01d8      	MOVW R26,R16
000258 e0f0      	LDI  R31,0
000259 17ae      	CP   R26,R30
00025a 07bf      	CPC  R27,R31
00025b f514      	BRGE _0x19
                 ; 0000 0083             {
                 ; 0000 0084                 memset(buffer, 0, 32);
00025c 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 0085                 for (j = 0; j < 8; j++)
                +
00025e e020     +LDI R18 , LOW ( 0 )
00025f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1B:
                +
000260 3028     +CPI R18 , LOW ( 8 )
000261 e0e0     +LDI R30 , HIGH ( 8 )
000262 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000263 f46c      	BRGE _0x1C
                 ; 0000 0086                 {
                 ; 0000 0087                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000264 01f9      	MOVW R30,R18
000265 5ce1      	SUBI R30,LOW(-_buffer)
000266 4ffa      	SBCI R31,HIGH(-_buffer)
000267 93ff      	PUSH R31
000268 93ef      	PUSH R30
000269 940e 066c 	CALL SUBOPT_0xA
00026b 91af      	POP  R26
00026c 91bf      	POP  R27
00026d 93ec      	ST   X,R30
                 ; 0000 0088                 }
                +
00026e 5f2f     +SUBI R18 , LOW ( - 1 )
00026f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000270 cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0089                 buffer[j] = '\0';
000271 e3af      	LDI  R26,LOW(_buffer)
000272 e0b5      	LDI  R27,HIGH(_buffer)
000273 0fa2      	ADD  R26,R18
000274 1fb3      	ADC  R27,R19
000275 e0e0      	LDI  R30,LOW(0)
000276 93ec      	ST   X,R30
                 ; 0000 008A                 lcdCommand(0x01);
000277 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 008B                 lcd_gotoxy(1, 1);
                 ; 0000 008C                 lcd_print(buffer);
000279 940e 0664 	CALL SUBOPT_0x9
                 ; 0000 008D                 delay_ms(1000);
                 ; 0000 008E             }
                +
00027b 5f0f     +SUBI R16 , LOW ( - 1 )
00027c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00027d cfd8      	RJMP _0x18
                 _0x19:
                 ; 0000 008F 
                 ; 0000 0090             lcdCommand(0x01);
00027e 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0091             lcd_gotoxy(1, 1);
                 ; 0000 0092             lcd_print("Press Cancel To Go Back");
                +
000280 eca0     +LDI R26 , LOW ( _0xA + ( 96 ) )
000281 e0b2     +LDI R27 , HIGH ( _0xA + ( 96 ) )
                 	__POINTW2MN _0xA,96
000282 d229      	RCALL _lcd_print
                 ; 0000 0093             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1D:
000283 940e 0650 	CALL SUBOPT_0x6
000285 f3e9      	BREQ _0x1D
                 ; 0000 0094                 ;
                 ; 0000 0095         }
                 ; 0000 0096         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
000286 c05a      	RJMP _0x20
                 _0x16:
000287 e0e5      	LDI  R30,LOW(5)
000288 e0f0      	LDI  R31,HIGH(5)
000289 15e4      	CP   R30,R4
00028a 05f5      	CPC  R31,R5
00028b f5a1      	BRNE _0x21
                 ; 0000 0097         {
                 ; 0000 0098             lcdCommand(0x01);
00028c 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0099             lcd_gotoxy(1, 1);
                 ; 0000 009A             lcd_print("Start Transferring...");
                +
00028e eda8     +LDI R26 , LOW ( _0xA + ( 120 ) )
00028f e0b2     +LDI R27 , HIGH ( _0xA + ( 120 ) )
                 	__POINTW2MN _0xA,120
000290 d21b      	RCALL _lcd_print
                 ; 0000 009B             st_counts = read_byte_from_eeprom(0x0);
000291 940e 0675 	CALL SUBOPT_0xB
000293 2f5e      	MOV  R21,R30
                 ; 0000 009C             for (i = 0; i < st_counts; i++)
                +
000294 e000     +LDI R16 , LOW ( 0 )
000295 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
000296 2fe5      	MOV  R30,R21
000297 01d8      	MOVW R26,R16
000298 e0f0      	LDI  R31,0
000299 17ae      	CP   R26,R30
00029a 07bf      	CPC  R27,R31
00029b f4d4      	BRGE _0x24
                 ; 0000 009D             {
                 ; 0000 009E                 for (j = 0; j < 8; j++)
                +
00029c e020     +LDI R18 , LOW ( 0 )
00029d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
00029e 3028     +CPI R18 , LOW ( 8 )
00029f e0e0     +LDI R30 , HIGH ( 8 )
0002a0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002a1 f43c      	BRGE _0x27
                 ; 0000 009F                 {
                 ; 0000 00A0                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
0002a2 940e 066c 	CALL SUBOPT_0xA
0002a4 2fae      	MOV  R26,R30
0002a5 d2b1      	RCALL _USART_Transmit
                 ; 0000 00A1                 }
                +
0002a6 5f2f     +SUBI R18 , LOW ( - 1 )
0002a7 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002a8 cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 00A2                 USART_Transmit('\r');
0002a9 e0ad      	LDI  R26,LOW(13)
0002aa d2ac      	RCALL _USART_Transmit
                 ; 0000 00A3                 USART_Transmit('\r');
0002ab e0ad      	LDI  R26,LOW(13)
0002ac d2aa      	RCALL _USART_Transmit
                 ; 0000 00A4                 USART_Transmit('\r');
0002ad e0ad      	LDI  R26,LOW(13)
0002ae d2a8      	RCALL _USART_Transmit
                 ; 0000 00A5 
                 ; 0000 00A6 
                 ; 0000 00A7 
                 ; 0000 00A8                 delay_ms(500);
0002af efa4      	LDI  R26,LOW(500)
0002b0 e0b1      	LDI  R27,HIGH(500)
0002b1 940e 0701 	CALL _delay_ms
                 ; 0000 00A9             }
                +
0002b3 5f0f     +SUBI R16 , LOW ( - 1 )
0002b4 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002b5 cfe0      	RJMP _0x23
                 _0x24:
                 ; 0000 00AA             lcdCommand(0x01);
0002b6 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 00AB             lcd_gotoxy(1, 1);
                 ; 0000 00AC             lcd_print("Usart Transmit finished");
                +
0002b8 eeae     +LDI R26 , LOW ( _0xA + ( 142 ) )
0002b9 e0b2     +LDI R27 , HIGH ( _0xA + ( 142 ) )
                 	__POINTW2MN _0xA,142
0002ba d1f1      	RCALL _lcd_print
                 ; 0000 00AD             delay_ms(2000);
0002bb 940e 0679 	CALL SUBOPT_0xC
                 ; 0000 00AE             stage = STAGE_INIT_MENU;
0002bd 2444      	CLR  R4
0002be 2455      	CLR  R5
                 ; 0000 00AF         }
                 ; 0000 00B0         else if (stage == STAGE_STUDENT_MANAGMENT)
0002bf c021      	RJMP _0x28
                 _0x21:
0002c0 940e 067d 	CALL SUBOPT_0xD
0002c2 f469      	BRNE _0x29
                 ; 0000 00B1         {
                 ; 0000 00B2             lcdCommand(0x01);
0002c3 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 00B3             lcd_gotoxy(1, 1);
                 ; 0000 00B4             lcd_print("1 : Search Student");
                +
0002c5 e0a6     +LDI R26 , LOW ( _0xA + ( 166 ) )
0002c6 e0b3     +LDI R27 , HIGH ( _0xA + ( 166 ) )
                 	__POINTW2MN _0xA,166
0002c7 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 00B5             lcd_gotoxy(1, 2);
                 ; 0000 00B6             lcd_print("    Press Cancel To Back");
                +
0002c9 e1a9     +LDI R26 , LOW ( _0xA + ( 185 ) )
0002ca e0b3     +LDI R27 , HIGH ( _0xA + ( 185 ) )
                 	__POINTW2MN _0xA,185
0002cb d1e0      	RCALL _lcd_print
                 ; 0000 00B7             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2A:
0002cc 940e 067d 	CALL SUBOPT_0xD
0002ce f3e9      	BREQ _0x2A
                 ; 0000 00B8                 ;
                 ; 0000 00B9         }
                 ; 0000 00BA         else if (stage == STAGE_SEARCH_STUDENT)
0002cf c011      	RJMP _0x2D
                 _0x29:
0002d0 940e 0682 	CALL SUBOPT_0xE
0002d2 f471      	BRNE _0x2E
                 ; 0000 00BB         {
                 ; 0000 00BC             lcdCommand(0x01);
0002d3 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 00BD             lcd_gotoxy(1, 1);
                 ; 0000 00BE             lcd_print("Enter Student Code For Search:");
                +
0002d5 e3a2     +LDI R26 , LOW ( _0xA + ( 210 ) )
0002d6 e0b3     +LDI R27 , HIGH ( _0xA + ( 210 ) )
                 	__POINTW2MN _0xA,210
0002d7 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 00BF             lcd_gotoxy(1, 2);
                 ; 0000 00C0             lcdCommand(0x0f);   // display on, cursor blinking
0002d9 940e 0643 	CALL SUBOPT_0x4
                 ; 0000 00C1             delay_us(100 * 16); // wait
                 ; 0000 00C2             while (stage == STAGE_SEARCH_STUDENT)
                 _0x2F:
0002db 940e 0682 	CALL SUBOPT_0xE
0002dd f3e9      	BREQ _0x2F
                 ; 0000 00C3                 ;
                 ; 0000 00C4             lcdCommand(0x0c);   // display on, cursor off
                 _0xA5:
0002de e0ac      	LDI  R26,LOW(12)
0002df 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 00C5             delay_us(100 * 16); // wait
                 ; 0000 00C6         }
                 ; 0000 00C7     }
                 _0x2E:
                 _0x2D:
                 _0x28:
                 _0x20:
                 _0x15:
                 _0xE:
                 _0x8:
0002e1 cf31      	RJMP _0x4
                 ; 0000 00C8 }
                 _0x32:
0002e2 cfff      	RJMP _0x32
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0xF1
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 00CC {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
0002e3 920a      	ST   -Y,R0
0002e4 921a      	ST   -Y,R1
0002e5 92fa      	ST   -Y,R15
0002e6 936a      	ST   -Y,R22
0002e7 937a      	ST   -Y,R23
0002e8 938a      	ST   -Y,R24
0002e9 939a      	ST   -Y,R25
0002ea 93aa      	ST   -Y,R26
0002eb 93ba      	ST   -Y,R27
0002ec 93ea      	ST   -Y,R30
0002ed 93fa      	ST   -Y,R31
0002ee b7ef      	IN   R30,SREG
0002ef 93ea      	ST   -Y,R30
                 ; 0000 00CD     unsigned char colloc, rowloc, cl, st_counts;
                 ; 0000 00CE     int i;
                 ; 0000 00CF 
                 ; 0000 00D0     // detect the key
                 ; 0000 00D1     while (1)
0002f0 940e 0737 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	i -> R20,R21
                 ; 0000 00D2     {
                 ; 0000 00D3         KEY_PRT = 0xEF;            // ground row 0
0002f2 eeef      	LDI  R30,LOW(239)
0002f3 940e 068e 	CALL SUBOPT_0x10
                 ; 0000 00D4         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00D5         if (colloc != 0x0F)        // column detected
0002f5 f011      	BREQ _0x36
                 ; 0000 00D6         {
                 ; 0000 00D7             rowloc = 0; // save row location
0002f6 e000      	LDI  R16,LOW(0)
                 ; 0000 00D8             break;      // exit while loop
0002f7 c012      	RJMP _0x35
                 ; 0000 00D9         }
                 ; 0000 00DA         KEY_PRT = 0xDF;            // ground row 1
                 _0x36:
0002f8 edef      	LDI  R30,LOW(223)
0002f9 940e 068e 	CALL SUBOPT_0x10
                 ; 0000 00DB         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00DC         if (colloc != 0x0F)        // column detected
0002fb f011      	BREQ _0x37
                 ; 0000 00DD         {
                 ; 0000 00DE             rowloc = 1; // save row location
0002fc e001      	LDI  R16,LOW(1)
                 ; 0000 00DF             break;      // exit while loop
0002fd c00c      	RJMP _0x35
                 ; 0000 00E0         }
                 ; 0000 00E1         KEY_PRT = 0xBF;            // ground row 2
                 _0x37:
0002fe ebef      	LDI  R30,LOW(191)
0002ff 940e 068e 	CALL SUBOPT_0x10
                 ; 0000 00E2         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00E3         if (colloc != 0x0F)        // column detected
000301 f011      	BREQ _0x38
                 ; 0000 00E4         {
                 ; 0000 00E5             rowloc = 2; // save row location
000302 e002      	LDI  R16,LOW(2)
                 ; 0000 00E6             break;      // exit while loop
000303 c006      	RJMP _0x35
                 ; 0000 00E7         }
                 ; 0000 00E8         KEY_PRT = 0x7F;            // ground row 3
                 _0x38:
000304 e7ef      	LDI  R30,LOW(127)
000305 bbe5      	OUT  0x15,R30
                 ; 0000 00E9         colloc = (KEY_PIN & 0x0F); // read the columns
000306 b3e3      	IN   R30,0x13
000307 70ef      	ANDI R30,LOW(0xF)
000308 2f1e      	MOV  R17,R30
                 ; 0000 00EA         rowloc = 3;                // save row location
000309 e003      	LDI  R16,LOW(3)
                 ; 0000 00EB         break;                     // exit while loop
                 ; 0000 00EC     }
                 _0x35:
                 ; 0000 00ED     // check column and send result to Port D
                 ; 0000 00EE     if (colloc == 0x0E)
00030a 301e      	CPI  R17,14
00030b f411      	BRNE _0x39
                 ; 0000 00EF         cl = 0;
00030c e030      	LDI  R19,LOW(0)
                 ; 0000 00F0     else if (colloc == 0x0D)
00030d c009      	RJMP _0x3A
                 _0x39:
00030e 301d      	CPI  R17,13
00030f f411      	BRNE _0x3B
                 ; 0000 00F1         cl = 1;
000310 e031      	LDI  R19,LOW(1)
                 ; 0000 00F2     else if (colloc == 0x0B)
000311 c005      	RJMP _0x3C
                 _0x3B:
000312 301b      	CPI  R17,11
000313 f411      	BRNE _0x3D
                 ; 0000 00F3         cl = 2;
000314 e032      	LDI  R19,LOW(2)
                 ; 0000 00F4     else
000315 c001      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00F5         cl = 3;
000316 e033      	LDI  R19,LOW(3)
                 ; 0000 00F6 
                 ; 0000 00F7     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x3E:
                 _0x3C:
                 _0x3A:
000317 b3e5      	IN   R30,0x15
000318 70ef      	ANDI R30,LOW(0xF)
000319 bbe5      	OUT  0x15,R30
                 ; 0000 00F8 
                 ; 0000 00F9     // inside menu level 1
                 ; 0000 00FA     if (stage == STAGE_INIT_MENU)
00031a 2c04      	MOV  R0,R4
00031b 2805      	OR   R0,R5
00031c f5c1      	BRNE _0x3F
                 ; 0000 00FB     {
                 ; 0000 00FC         switch (keypad[rowloc][cl] - '0')
00031d 940e 0694 	CALL SUBOPT_0x11
00031f 97f0      	SBIW R30,48
                 ; 0000 00FD         {
                 ; 0000 00FE         case OPTION_ATTENDENCE:
000320 30e1      	CPI  R30,LOW(0x1)
000321 e0a0      	LDI  R26,HIGH(0x1)
000322 07fa      	CPC  R31,R26
000323 f421      	BRNE _0x43
                 ; 0000 00FF             stage = STAGE_ATTENDENC_MENU;
000324 e0e1      	LDI  R30,LOW(1)
000325 e0f0      	LDI  R31,HIGH(1)
000326 012f      	MOVW R4,R30
                 ; 0000 0100             break;
000327 c02c      	RJMP _0x42
                 ; 0000 0101 
                 ; 0000 0102         case OPTION_TEMPERATURE_MONITORING:
                 _0x43:
000328 30e4      	CPI  R30,LOW(0x4)
000329 e0a0      	LDI  R26,HIGH(0x4)
00032a 07fa      	CPC  R31,R26
00032b f421      	BRNE _0x44
                 ; 0000 0103             stage = STAGE_TEMPERATURE_MONITORING;
00032c e0e3      	LDI  R30,LOW(3)
00032d e0f0      	LDI  R31,HIGH(3)
00032e 012f      	MOVW R4,R30
                 ; 0000 0104             break;
00032f c024      	RJMP _0x42
                 ; 0000 0105         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x44:
000330 30e3      	CPI  R30,LOW(0x3)
000331 e0a0      	LDI  R26,HIGH(0x3)
000332 07fa      	CPC  R31,R26
000333 f421      	BRNE _0x45
                 ; 0000 0106             stage = STAGE_VIEW_PRESENT_STUDENTS;
000334 e0e4      	LDI  R30,LOW(4)
000335 e0f0      	LDI  R31,HIGH(4)
000336 012f      	MOVW R4,R30
                 ; 0000 0107             break;
000337 c01c      	RJMP _0x42
                 ; 0000 0108         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x45:
000338 30e5      	CPI  R30,LOW(0x5)
000339 e0a0      	LDI  R26,HIGH(0x5)
00033a 07fa      	CPC  R31,R26
00033b f421      	BRNE _0x46
                 ; 0000 0109             stage = STAGE_RETRIEVE_STUDENT_DATA;
00033c e0e5      	LDI  R30,LOW(5)
00033d e0f0      	LDI  R31,HIGH(5)
00033e 012f      	MOVW R4,R30
                 ; 0000 010A             break;
00033f c014      	RJMP _0x42
                 ; 0000 010B         case OPTION_STUDENT_MANAGEMENT:
                 _0x46:
000340 30e2      	CPI  R30,LOW(0x2)
000341 e0a0      	LDI  R26,HIGH(0x2)
000342 07fa      	CPC  R31,R26
000343 f421      	BRNE _0x47
                 ; 0000 010C             stage = STAGE_STUDENT_MANAGMENT;
000344 e0e6      	LDI  R30,LOW(6)
000345 e0f0      	LDI  R31,HIGH(6)
000346 012f      	MOVW R4,R30
                 ; 0000 010D             break;
000347 c00c      	RJMP _0x42
                 ; 0000 010E         case 9:
                 _0x47:
000348 30e9      	CPI  R30,LOW(0x9)
000349 e0a0      	LDI  R26,HIGH(0x9)
00034a 07fa      	CPC  R31,R26
00034b f441      	BRNE _0x4A
                 ; 0000 010F #asm("cli") // disable interrupts
00034c 94f8      	cli
                 ; 0000 0110 
                 ; 0000 0111             lcdCommand(0x1);
00034d 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0112             lcd_gotoxy(1, 1);
                 ; 0000 0113             lcd_print("Clearing EEPROM ...");
                +
00034f e5a1     +LDI R26 , LOW ( _0x49 + ( 0 ) )
000350 e0b3     +LDI R27 , HIGH ( _0x49 + ( 0 ) )
                 	__POINTW2MN _0x49,0
000351 d15a      	RCALL _lcd_print
                 ; 0000 0114             clear_eeprom();
000352 d1d3      	RCALL _clear_eeprom
                 ; 0000 0115 #asm("sei") // enable interrupts
000353 9478      	sei
                 ; 0000 0116 
                 ; 0000 0117         default:
                 _0x4A:
                 ; 0000 0118             break;
                 ; 0000 0119         }
                 _0x42:
                 ; 0000 011A     }
                 ; 0000 011B     else if (stage == STAGE_ATTENDENC_MENU)
000354 c0fd      	RJMP _0x4B
                 _0x3F:
000355 940e 062a 	CALL SUBOPT_0x0
000357 f499      	BRNE _0x4C
                 ; 0000 011C     {
                 ; 0000 011D         switch (keypad[rowloc][cl])
000358 940e 0694 	CALL SUBOPT_0x11
                 ; 0000 011E         {
                 ; 0000 011F         case 'C':
00035a 34e3      	CPI  R30,LOW(0x43)
00035b e0a0      	LDI  R26,HIGH(0x43)
00035c 07fa      	CPC  R31,R26
00035d f419      	BRNE _0x50
                 ; 0000 0120             stage = STAGE_INIT_MENU;
00035e 2444      	CLR  R4
00035f 2455      	CLR  R5
                 ; 0000 0121             break;
000360 c009      	RJMP _0x4F
                 ; 0000 0122         case '1':
                 _0x50:
000361 33e1      	CPI  R30,LOW(0x31)
000362 e0a0      	LDI  R26,HIGH(0x31)
000363 07fa      	CPC  R31,R26
000364 f429      	BRNE _0x52
                 ; 0000 0123             memset(buffer, 0, 32);
000365 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 0124             stage = STAGE_SUBMIT_CODE;
000367 e0e2      	LDI  R30,LOW(2)
000368 e0f0      	LDI  R31,HIGH(2)
000369 012f      	MOVW R4,R30
                 ; 0000 0125             break;
                 ; 0000 0126         default:
                 _0x52:
                 ; 0000 0127             break;
                 ; 0000 0128         }
                 _0x4F:
                 ; 0000 0129     }
                 ; 0000 012A     else if (stage == STAGE_SUBMIT_CODE)
00036a c0e7      	RJMP _0x53
                 _0x4C:
00036b 940e 063e 	CALL SUBOPT_0x3
00036d f009      	BREQ PC+2
00036e c07a      	RJMP _0x54
                 ; 0000 012B     {
                 ; 0000 012C 
                 ; 0000 012D         if ((keypad[rowloc][cl] - '0') < 10)
00036f 940e 0694 	CALL SUBOPT_0x11
000371 97fa      	SBIW R30,58
000372 f45c      	BRGE _0x55
                 ; 0000 012E         {
                 ; 0000 012F             if (strlen(buffer) <= 30)
000373 940e 06a2 	CALL SUBOPT_0x12
000375 977f      	SBIW R30,31
000376 f430      	BRSH _0x56
                 ; 0000 0130             {
                 ; 0000 0131                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000377 940e 06a2 	CALL SUBOPT_0x12
000379 940e 06a6 	CALL SUBOPT_0x13
                 ; 0000 0132                 buffer[strlen(buffer) + 1] = '\0';
00037b 940e 06b8 	CALL SUBOPT_0x14
                 ; 0000 0133                 lcdData(keypad[rowloc][cl]);
                 ; 0000 0134             }
                 ; 0000 0135         }
                 _0x56:
                 ; 0000 0136         else if (keypad[rowloc][cl] == 'E')
00037d c06a      	RJMP _0x57
                 _0x55:
00037e 940e 06ca 	CALL SUBOPT_0x15
000380 34a5      	CPI  R26,LOW(0x45)
000381 f009      	BREQ PC+2
000382 c05e      	RJMP _0x58
                 ; 0000 0137         {
                 ; 0000 0138 
                 ; 0000 0139             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 013A                 strlen(buffer) != 8)
000383 e3ef      	LDI  R30,LOW(_buffer)
000384 e0f5      	LDI  R31,HIGH(_buffer)
000385 93fa      	ST   -Y,R31
000386 93ea      	ST   -Y,R30
                +
000387 e6e5     +LDI R30 , LOW ( _0x49 + ( 20 ) )
000388 e0f3     +LDI R31 , HIGH ( _0x49 + ( 20 ) )
                 	__POINTW1MN _0x49,20
000389 93fa      	ST   -Y,R31
00038a 93ea      	ST   -Y,R30
00038b e0a2      	LDI  R26,LOW(2)
00038c 940e 0611 	CALL _strncmp
00038e 30e0      	CPI  R30,0
00038f f431      	BRNE _0x5A
000390 940e 06a2 	CALL SUBOPT_0x12
000392 30e8      	CPI  R30,LOW(0x8)
000393 e0a0      	LDI  R26,HIGH(0x8)
000394 07fa      	CPC  R31,R26
000395 f061      	BREQ _0x59
                 _0x5A:
                 ; 0000 013B             {
                 ; 0000 013C                 lcdCommand(0x01);
000396 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 013D                 lcd_gotoxy(1, 1);
                 ; 0000 013E                 lcd_print("Incorrect Suudent Code Format");
                +
000398 e6a8     +LDI R26 , LOW ( _0x49 + ( 23 ) )
000399 e0b3     +LDI R27 , HIGH ( _0x49 + ( 23 ) )
                 	__POINTW2MN _0x49,23
00039a 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 013F                 lcd_gotoxy(1, 2);
                 ; 0000 0140                 lcd_print("You Will Back Menu In 5 Second");
                +
00039c e8a6     +LDI R26 , LOW ( _0x49 + ( 53 ) )
00039d e0b3     +LDI R27 , HIGH ( _0x49 + ( 53 ) )
                 	__POINTW2MN _0x49,53
00039e d10d      	RCALL _lcd_print
                 ; 0000 0141                 delay_ms(5000);
00039f e8a8      	LDI  R26,LOW(5000)
0003a0 e1b3      	LDI  R27,HIGH(5000)
0003a1 c03a      	RJMP _0xA6
                 ; 0000 0142             }
                 ; 0000 0143             else if (search_student_code())
                 _0x59:
0003a2 d1c8      	RCALL _search_student_code
0003a3 9730      	SBIW R30,0
0003a4 f061      	BREQ _0x5D
                 ; 0000 0144             {
                 ; 0000 0145                 lcdCommand(0x01);
0003a5 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0146                 lcd_gotoxy(1, 1);
                 ; 0000 0147                 lcd_print("Duplicate Suudent Code Entered");
                +
0003a7 eaa5     +LDI R26 , LOW ( _0x49 + ( 84 ) )
0003a8 e0b3     +LDI R27 , HIGH ( _0x49 + ( 84 ) )
                 	__POINTW2MN _0x49,84
0003a9 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0148                 lcd_gotoxy(1, 2);
                 ; 0000 0149                 lcd_print("You Will Back Menu In 5 Second");
                +
0003ab eca4     +LDI R26 , LOW ( _0x49 + ( 115 ) )
0003ac e0b3     +LDI R27 , HIGH ( _0x49 + ( 115 ) )
                 	__POINTW2MN _0x49,115
0003ad d0fe      	RCALL _lcd_print
                 ; 0000 014A                 delay_ms(5000);
0003ae e8a8      	LDI  R26,LOW(5000)
0003af e1b3      	LDI  R27,HIGH(5000)
0003b0 c02b      	RJMP _0xA6
                 ; 0000 014B             }
                 ; 0000 014C             else
                 _0x5D:
                 ; 0000 014D             {
                 ; 0000 014E                 // save the buffer to EEPROM
                 ; 0000 014F                 st_counts = read_byte_from_eeprom(0x0);
0003b1 940e 0675 	CALL SUBOPT_0xB
0003b3 2f2e      	MOV  R18,R30
                 ; 0000 0150                 for (i = 0; i < 8; i++)
                +
0003b4 e040     +LDI R20 , LOW ( 0 )
0003b5 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x60:
                +
0003b6 3048     +CPI R20 , LOW ( 8 )
0003b7 e0e0     +LDI R30 , HIGH ( 8 )
0003b8 075e     +CPC R21 , R30
                 	__CPWRN 20,21,8
0003b9 f484      	BRGE _0x61
                 ; 0000 0151                 {
                 ; 0000 0152                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
0003ba 2fe2      	MOV  R30,R18
0003bb e0f0      	LDI  R31,0
0003bc 9631      	ADIW R30,1
0003bd 940e 070f 	CALL __LSLW3
0003bf 0fe4      	ADD  R30,R20
0003c0 1ff5      	ADC  R31,R21
0003c1 940e 065f 	CALL SUBOPT_0x8
0003c3 0fa4      	ADD  R26,R20
0003c4 1fb5      	ADC  R27,R21
0003c5 91ac      	LD   R26,X
0003c6 d185      	RCALL _write_byte_to_eeprom
                 ; 0000 0153                 }
                +
0003c7 5f4f     +SUBI R20 , LOW ( - 1 )
0003c8 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0003c9 cfec      	RJMP _0x60
                 _0x61:
                 ; 0000 0154                 write_byte_to_eeprom(0x0, st_counts + 1);
0003ca e0e0      	LDI  R30,LOW(0)
0003cb e0f0      	LDI  R31,HIGH(0)
0003cc 93fa      	ST   -Y,R31
0003cd 93ea      	ST   -Y,R30
0003ce 2fa2      	MOV  R26,R18
0003cf 5faf      	SUBI R26,-LOW(1)
0003d0 d17b      	RCALL _write_byte_to_eeprom
                 ; 0000 0155 
                 ; 0000 0156                 lcdCommand(0x01);
0003d1 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0157                 lcd_gotoxy(1, 1);
                 ; 0000 0158                 lcd_print("Student Code Successfully Added");
                +
0003d3 eea3     +LDI R26 , LOW ( _0x49 + ( 146 ) )
0003d4 e0b3     +LDI R27 , HIGH ( _0x49 + ( 146 ) )
                 	__POINTW2MN _0x49,146
0003d5 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0159                 lcd_gotoxy(1, 2);
                 ; 0000 015A                 lcd_print("You Will Back Menu In 2 Second");
                +
0003d7 e0a3     +LDI R26 , LOW ( _0x49 + ( 178 ) )
0003d8 e0b4     +LDI R27 , HIGH ( _0x49 + ( 178 ) )
                 	__POINTW2MN _0x49,178
0003d9 d0d2      	RCALL _lcd_print
                 ; 0000 015B                 delay_ms(2000);
0003da eda0      	LDI  R26,LOW(2000)
0003db e0b7      	LDI  R27,HIGH(2000)
                 _0xA6:
0003dc 940e 0701 	CALL _delay_ms
                 ; 0000 015C             }
                 ; 0000 015D             memset(buffer, 0, 32);
0003de 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 015E 
                 ; 0000 015F             stage = STAGE_ATTENDENC_MENU;
0003e0 c004      	RJMP _0xA7
                 ; 0000 0160         }
                 ; 0000 0161         else if (keypad[rowloc][cl] == 'C')
                 _0x58:
0003e1 940e 06ca 	CALL SUBOPT_0x15
0003e3 34a3      	CPI  R26,LOW(0x43)
0003e4 f419      	BRNE _0x63
                 ; 0000 0162             stage = STAGE_ATTENDENC_MENU;
                 _0xA7:
0003e5 e0e1      	LDI  R30,LOW(1)
0003e6 e0f0      	LDI  R31,HIGH(1)
0003e7 012f      	MOVW R4,R30
                 ; 0000 0163     }
                 _0x63:
                 _0x57:
                 ; 0000 0164     else if (stage == STAGE_TEMPERATURE_MONITORING)
0003e8 c069      	RJMP _0x64
                 _0x54:
0003e9 940e 064b 	CALL SUBOPT_0x5
0003eb f439      	BRNE _0x65
                 ; 0000 0165     {
                 ; 0000 0166 
                 ; 0000 0167         if (keypad[rowloc][cl] == 'C')
0003ec 940e 06ca 	CALL SUBOPT_0x15
0003ee 34a3      	CPI  R26,LOW(0x43)
0003ef f411      	BRNE _0x66
                 ; 0000 0168             stage = STAGE_INIT_MENU;
0003f0 2444      	CLR  R4
0003f1 2455      	CLR  R5
                 ; 0000 0169     }
                 _0x66:
                 ; 0000 016A     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0003f2 c05f      	RJMP _0x67
                 _0x65:
0003f3 940e 0650 	CALL SUBOPT_0x6
0003f5 f439      	BRNE _0x68
                 ; 0000 016B     {
                 ; 0000 016C         if (keypad[rowloc][cl] == 'C')
0003f6 940e 06ca 	CALL SUBOPT_0x15
0003f8 34a3      	CPI  R26,LOW(0x43)
0003f9 f411      	BRNE _0x69
                 ; 0000 016D             stage = STAGE_INIT_MENU;
0003fa 2444      	CLR  R4
0003fb 2455      	CLR  R5
                 ; 0000 016E     }
                 _0x69:
                 ; 0000 016F     else if (stage == STAGE_STUDENT_MANAGMENT)
0003fc c055      	RJMP _0x6A
                 _0x68:
0003fd 940e 067d 	CALL SUBOPT_0xD
0003ff f479      	BRNE _0x6B
                 ; 0000 0170     {
                 ; 0000 0171         if (keypad[rowloc][cl] == 'C')
000400 940e 06ca 	CALL SUBOPT_0x15
000402 34a3      	CPI  R26,LOW(0x43)
000403 f419      	BRNE _0x6C
                 ; 0000 0172             stage = STAGE_INIT_MENU;
000404 2444      	CLR  R4
000405 2455      	CLR  R5
                 ; 0000 0173         else if (keypad[rowloc][cl] == '1')
000406 c007      	RJMP _0x6D
                 _0x6C:
000407 940e 06ca 	CALL SUBOPT_0x15
000409 33a1      	CPI  R26,LOW(0x31)
00040a f419      	BRNE _0x6E
                 ; 0000 0174             stage = STAGE_SEARCH_STUDENT;
00040b e0e7      	LDI  R30,LOW(7)
00040c e0f0      	LDI  R31,HIGH(7)
00040d 012f      	MOVW R4,R30
                 ; 0000 0175     }
                 _0x6E:
                 _0x6D:
                 ; 0000 0176     else if (stage == STAGE_SEARCH_STUDENT)
00040e c043      	RJMP _0x6F
                 _0x6B:
00040f 940e 0682 	CALL SUBOPT_0xE
000411 f009      	BREQ PC+2
000412 c03f      	RJMP _0x70
                 ; 0000 0177     {
                 ; 0000 0178         if ((keypad[rowloc][cl] - '0') < 10)
000413 940e 0694 	CALL SUBOPT_0x11
000415 97fa      	SBIW R30,58
000416 f45c      	BRGE _0x71
                 ; 0000 0179         {
                 ; 0000 017A             if (strlen(buffer) <= 30)
000417 940e 06a2 	CALL SUBOPT_0x12
000419 977f      	SBIW R30,31
00041a f430      	BRSH _0x72
                 ; 0000 017B             {
                 ; 0000 017C                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00041b 940e 06a2 	CALL SUBOPT_0x12
00041d 940e 06a6 	CALL SUBOPT_0x13
                 ; 0000 017D                 buffer[strlen(buffer) + 1] = '\0';
00041f 940e 06b8 	CALL SUBOPT_0x14
                 ; 0000 017E                 lcdData(keypad[rowloc][cl]);
                 ; 0000 017F             }
                 ; 0000 0180         }
                 _0x72:
                 ; 0000 0181         else if (keypad[rowloc][cl] == 'E')
000421 c030      	RJMP _0x73
                 _0x71:
000422 940e 06ca 	CALL SUBOPT_0x15
000424 34a5      	CPI  R26,LOW(0x45)
000425 f529      	BRNE _0x74
                 ; 0000 0182         {
                 ; 0000 0183             // search from eeprom data
                 ; 0000 0184             int result = search_student_code();
                 ; 0000 0185 
                 ; 0000 0186             if (result == 1)
000426 9722      	SBIW R28,2
                 ;	result -> Y+0
000427 d143      	RCALL _search_student_code
000428 83e8      	ST   Y,R30
000429 83f9      	STD  Y+1,R31
00042a 81a8      	LD   R26,Y
00042b 81b9      	LDD  R27,Y+1
00042c 9711      	SBIW R26,1
00042d f449      	BRNE _0x75
                 ; 0000 0187             {
                 ; 0000 0188                 lcdCommand(0x01);
00042e 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0189                 lcd_gotoxy(1, 1);
                 ; 0000 018A                 lcd_print("Student Code Found");
                +
000430 e2a2     +LDI R26 , LOW ( _0x49 + ( 209 ) )
000431 e0b4     +LDI R27 , HIGH ( _0x49 + ( 209 ) )
                 	__POINTW2MN _0x49,209
000432 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 018B                 lcd_gotoxy(1, 2);
                 ; 0000 018C                 lcd_print("You Will Back Menu In 5 Second");
                +
000434 e3a5     +LDI R26 , LOW ( _0x49 + ( 228 ) )
000435 e0b4     +LDI R27 , HIGH ( _0x49 + ( 228 ) )
                 	__POINTW2MN _0x49,228
000436 c008      	RJMP _0xA8
                 ; 0000 018D                 delay_ms(5000);
                 ; 0000 018E             }
                 ; 0000 018F             else
                 _0x75:
                 ; 0000 0190             {
                 ; 0000 0191                 lcdCommand(0x01);
000437 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 0192                 lcd_gotoxy(1, 1);
                 ; 0000 0193                 lcd_print("Ops , Student Code Not Found");
                +
000439 e5a4     +LDI R26 , LOW ( _0x49 + ( 259 ) )
00043a e0b4     +LDI R27 , HIGH ( _0x49 + ( 259 ) )
                 	__POINTW2MN _0x49,259
00043b 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0194                 lcd_gotoxy(1, 2);
                 ; 0000 0195                 lcd_print("You Will Back Menu In 5 Second");
                +
00043d e7a1     +LDI R26 , LOW ( _0x49 + ( 288 ) )
00043e e0b4     +LDI R27 , HIGH ( _0x49 + ( 288 ) )
                 	__POINTW2MN _0x49,288
                 _0xA8:
00043f d06c      	RCALL _lcd_print
                 ; 0000 0196                 delay_ms(5000);
000440 e8a8      	LDI  R26,LOW(5000)
000441 e1b3      	LDI  R27,HIGH(5000)
000442 940e 0701 	CALL _delay_ms
                 ; 0000 0197             }
                 ; 0000 0198             memset(buffer, 0, 32);
000444 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 0199             stage = STAGE_STUDENT_MANAGMENT;
000446 e0e6      	LDI  R30,LOW(6)
000447 e0f0      	LDI  R31,HIGH(6)
000448 012f      	MOVW R4,R30
                 ; 0000 019A         }
000449 9622      	ADIW R28,2
                 ; 0000 019B         else if (keypad[rowloc][cl] == 'C')
00044a c007      	RJMP _0x77
                 _0x74:
00044b 940e 06ca 	CALL SUBOPT_0x15
00044d 34a3      	CPI  R26,LOW(0x43)
00044e f419      	BRNE _0x78
                 ; 0000 019C             stage = STAGE_STUDENT_MANAGMENT;
00044f e0e6      	LDI  R30,LOW(6)
000450 e0f0      	LDI  R31,HIGH(6)
000451 012f      	MOVW R4,R30
                 ; 0000 019D     }
                 _0x78:
                 _0x77:
                 _0x73:
                 ; 0000 019E }
                 _0x70:
                 _0x6F:
                 _0x6A:
                 _0x67:
                 _0x64:
                 _0x53:
                 _0x4B:
000452 940e 073e 	CALL __LOADLOCR6
000454 9626      	ADIW R28,6
000455 91e9      	LD   R30,Y+
000456 bfef      	OUT  SREG,R30
000457 91f9      	LD   R31,Y+
000458 91e9      	LD   R30,Y+
000459 91b9      	LD   R27,Y+
00045a 91a9      	LD   R26,Y+
00045b 9199      	LD   R25,Y+
00045c 9189      	LD   R24,Y+
00045d 9179      	LD   R23,Y+
00045e 9169      	LD   R22,Y+
00045f 90f9      	LD   R15,Y+
000460 9019      	LD   R1,Y+
000461 9009      	LD   R0,Y+
000462 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x49:
000351           	.BYTE 0x13F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 01A1 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 01A2     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
000463 940e 06d7 	CALL SUBOPT_0x16
                 ;	cmnd -> Y+0
                 ; 0000 01A3     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
000465 98c0      	CBI  0x18,0
                 ; 0000 01A4     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000466 940e 06e0 	CALL SUBOPT_0x17
                 ; 0000 01A5     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01A6     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01A7     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01A8     delay_us(20 * 16);         // wait
                +
000468 e880     +LDI R24 , LOW ( 640 )
000469 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
00046a 9701     +SBIW R24 , 1
00046b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 01A9     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
00046c 940e 06e7 	CALL SUBOPT_0x18
                 ; 0000 01AA     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01AB     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01AC     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01AD }
00046e c0ed      	RJMP _0x20A0002
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 01AF {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 01B0     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
00046f 940e 06d7 	CALL SUBOPT_0x16
                 ;	data -> Y+0
                 ; 0000 01B1     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
000471 9ac0      	SBI  0x18,0
                 ; 0000 01B2     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
000472 940e 06e0 	CALL SUBOPT_0x17
                 ; 0000 01B3     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01B4     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01B5     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01B6     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
000474 940e 06e7 	CALL SUBOPT_0x18
                 ; 0000 01B7     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01B8     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01B9     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01BA }
000476 c0e5      	RJMP _0x20A0002
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 01BC {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 01BD     LCD_DDR = 0xFF;            // LCD port is output
000477 efef      	LDI  R30,LOW(255)
000478 bbe7      	OUT  0x17,R30
                 ; 0000 01BE     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
000479 98c2      	CBI  0x18,2
                 ; 0000 01BF     delay_us(2000 * 16);       // wait for stable power
                +
00047a e080     +LDI R24 , LOW ( 64000 )
00047b ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
00047c 9701     +SBIW R24 , 1
00047d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 01C0     lcdCommand(0x33);          //$33 for 4-bit mode
00047e e3a3      	LDI  R26,LOW(51)
00047f 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01C1     delay_us(100 * 16);        // wait
                 ; 0000 01C2     lcdCommand(0x32);          //$32 for 4-bit mode
000481 e3a2      	LDI  R26,LOW(50)
000482 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01C3     delay_us(100 * 16);        // wait
                 ; 0000 01C4     lcdCommand(0x28);          //$28 for 4-bit mode
000484 e2a8      	LDI  R26,LOW(40)
000485 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01C5     delay_us(100 * 16);        // wait
                 ; 0000 01C6     lcdCommand(0x0c);          // display on, cursor off
000487 e0ac      	LDI  R26,LOW(12)
000488 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01C7     delay_us(100 * 16);        // wait
                 ; 0000 01C8     lcdCommand(0x01);          // clear LCD
00048a e0a1      	LDI  R26,LOW(1)
00048b dfd7      	RCALL _lcdCommand
                 ; 0000 01C9     delay_us(2000 * 16);       // wait
                +
00048c e080     +LDI R24 , LOW ( 64000 )
00048d ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
00048e 9701     +SBIW R24 , 1
00048f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 01CA     lcdCommand(0x06);          // shift cursor right
000490 e0a6      	LDI  R26,LOW(6)
000491 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01CB     delay_us(100 * 16);
                 ; 0000 01CC }
000493 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 01CE {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 01CF     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 01D0     lcdCommand(firstCharAdr[y - 1] + x - 1);
000494 93aa      	ST   -Y,R26
000495 9724      	SBIW R28,4
000496 e8e0      	LDI  R30,LOW(128)
000497 83e8      	ST   Y,R30
000498 ece0      	LDI  R30,LOW(192)
000499 83e9      	STD  Y+1,R30
00049a e9e4      	LDI  R30,LOW(148)
00049b 83ea      	STD  Y+2,R30
00049c ede4      	LDI  R30,LOW(212)
00049d 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
00049e 81ec      	LDD  R30,Y+4
00049f e0f0      	LDI  R31,0
0004a0 9731      	SBIW R30,1
0004a1 01de      	MOVW R26,R28
0004a2 0fae      	ADD  R26,R30
0004a3 1fbf      	ADC  R27,R31
0004a4 91ec      	LD   R30,X
0004a5 81ad      	LDD  R26,Y+5
0004a6 0fae      	ADD  R26,R30
0004a7 50a1      	SUBI R26,LOW(1)
0004a8 940e 0687 	CALL SUBOPT_0xF
                 ; 0000 01D1     delay_us(100 * 16);
                 ; 0000 01D2 }
0004aa 9626      	ADIW R28,6
0004ab 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 01D4 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 01D5     unsigned char i = 0;
                 ; 0000 01D6     while (str[i] != 0)
0004ac 93ba      	ST   -Y,R27
0004ad 93aa      	ST   -Y,R26
0004ae 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0004af e010      	LDI  R17,0
                 _0x79:
0004b0 81a9      	LDD  R26,Y+1
0004b1 81ba      	LDD  R27,Y+1+1
0004b2 27ee      	CLR  R30
0004b3 0fa1      	ADD  R26,R17
0004b4 1fbe      	ADC  R27,R30
0004b5 91ec      	LD   R30,X
0004b6 30e0      	CPI  R30,0
0004b7 f049      	BREQ _0x7B
                 ; 0000 01D7     {
                 ; 0000 01D8         lcdData(str[i]);
0004b8 81a9      	LDD  R26,Y+1
0004b9 81ba      	LDD  R27,Y+1+1
0004ba 27ee      	CLR  R30
0004bb 0fa1      	ADD  R26,R17
0004bc 1fbe      	ADC  R27,R30
0004bd 91ac      	LD   R26,X
0004be dfb0      	RCALL _lcdData
                 ; 0000 01D9         i++;
0004bf 5f1f      	SUBI R17,-1
                 ; 0000 01DA     }
0004c0 cfef      	RJMP _0x79
                 _0x7B:
                 ; 0000 01DB }
0004c1 8118      	LDD  R17,Y+0
0004c2 c092      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;void LCM35_init()
                 ; 0000 01DE {
                 _LCM35_init:
                 ; .FSTART _LCM35_init
                 ; 0000 01DF     ADMUX = 0xE0;
0004c3 eee0      	LDI  R30,LOW(224)
0004c4 b9e7      	OUT  0x7,R30
                 ; 0000 01E0     ADCSRA = 0x87;
0004c5 e8e7      	LDI  R30,LOW(135)
0004c6 b9e6      	OUT  0x6,R30
                 ; 0000 01E1 }
0004c7 9508      	RET
                 ; .FEND
                 ;
                 ;void show_temp()
                 ; 0000 01E4 {
                 _show_temp:
                 ; .FSTART _show_temp
                 ; 0000 01E5     unsigned char temperatureVal = 0;
                 ; 0000 01E6     unsigned char temperatureRep[3];
                 ; 0000 01E7 
                 ; 0000 01E8     while (stage == STAGE_TEMPERATURE_MONITORING)
0004c8 9723      	SBIW R28,3
0004c9 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
0004ca e010      	LDI  R17,0
                 _0x7C:
0004cb 940e 064b 	CALL SUBOPT_0x5
0004cd f4c9      	BRNE _0x7E
                 ; 0000 01E9     {
                 ; 0000 01EA         lcdCommand(0x01);
0004ce 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 01EB         lcd_gotoxy(1, 1);
                 ; 0000 01EC         lcd_print("Temp(C):");
                +
0004d0 e9a0     +LDI R26 , LOW ( _0x7F + ( 0 ) )
0004d1 e0b4     +LDI R27 , HIGH ( _0x7F + ( 0 ) )
                 	__POINTW2MN _0x7F,0
0004d2 dfd9      	RCALL _lcd_print
                 ; 0000 01ED         ADCSRA |= (1 << ADSC);
0004d3 9a36      	SBI  0x6,6
                 ; 0000 01EE         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x80:
0004d4 9b34      	SBIS 0x6,4
                 ; 0000 01EF             ;
0004d5 cffe      	RJMP _0x80
                 ; 0000 01F0         temperatureVal = ADCH;
0004d6 b115      	IN   R17,5
                 ; 0000 01F1         itoa(temperatureVal, temperatureRep);
0004d7 2fe1      	MOV  R30,R17
0004d8 e0f0      	LDI  R31,0
0004d9 93fa      	ST   -Y,R31
0004da 93ea      	ST   -Y,R30
0004db 01de      	MOVW R26,R28
0004dc 9613      	ADIW R26,3
0004dd 940e 05b3 	CALL _itoa
                 ; 0000 01F2         lcd_print(temperatureRep);
0004df 01de      	MOVW R26,R28
0004e0 9611      	ADIW R26,1
0004e1 dfca      	RCALL _lcd_print
                 ; 0000 01F3         delay_ms(500);
0004e2 efa4      	LDI  R26,LOW(500)
0004e3 e0b1      	LDI  R27,HIGH(500)
0004e4 940e 0701 	CALL _delay_ms
                 ; 0000 01F4     }
0004e6 cfe4      	RJMP _0x7C
                 _0x7E:
                 ; 0000 01F5 }
0004e7 8118      	LDD  R17,Y+0
0004e8 9624      	ADIW R28,4
0004e9 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x7F:
000490           	.BYTE 0x9
                 ;
                 ;void show_menu()
                 ; 0000 01F8 {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 01F9     unsigned char page_num = 0;
                 ; 0000 01FA     while (stage == STAGE_INIT_MENU)
0004ea 931a      	ST   -Y,R17
                 ;	page_num -> R17
0004eb e010      	LDI  R17,0
                 _0x83:
0004ec 2c04      	MOV  R0,R4
0004ed 2805      	OR   R0,R5
0004ee f5a9      	BRNE _0x85
                 ; 0000 01FB     {
                 ; 0000 01FC         lcdCommand(0x01);
0004ef 940e 062f 	CALL SUBOPT_0x1
                 ; 0000 01FD         lcd_gotoxy(1, 1);
                 ; 0000 01FE         if (page_num == 0)
0004f1 3010      	CPI  R17,0
0004f2 f461      	BRNE _0x86
                 ; 0000 01FF         {
                 ; 0000 0200             lcd_print("1: Attendance Initialization");
                +
0004f3 e9a9     +LDI R26 , LOW ( _0x87 + ( 0 ) )
0004f4 e0b4     +LDI R27 , HIGH ( _0x87 + ( 0 ) )
                 	__POINTW2MN _0x87,0
0004f5 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0201             lcd_gotoxy(1, 2);
                 ; 0000 0202             lcd_print("2: Student Management");
                +
0004f7 eba6     +LDI R26 , LOW ( _0x87 + ( 29 ) )
0004f8 e0b4     +LDI R27 , HIGH ( _0x87 + ( 29 ) )
                 	__POINTW2MN _0x87,29
0004f9 940e 06f5 	CALL SUBOPT_0x19
                 ; 0000 0203             if (stage == STAGE_INIT_MENU)
0004fb f411      	BRNE _0x88
                 ; 0000 0204                 delay_ms(2000);
0004fc 940e 0679 	CALL SUBOPT_0xC
                 ; 0000 0205             page_num = (page_num + 1) % 3;
                 _0x88:
0004fe c01b      	RJMP _0xA9
                 ; 0000 0206         }
                 ; 0000 0207         else if (page_num == 1)
                 _0x86:
0004ff 3011      	CPI  R17,1
000500 f461      	BRNE _0x8A
                 ; 0000 0208         {
                 ; 0000 0209             lcd_print("3: View Present Students ");
                +
000501 ecac     +LDI R26 , LOW ( _0x87 + ( 51 ) )
000502 e0b4     +LDI R27 , HIGH ( _0x87 + ( 51 ) )
                 	__POINTW2MN _0x87,51
000503 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 020A             lcd_gotoxy(1, 2);
                 ; 0000 020B             lcd_print("4: Temperature Monitoring");
                +
000505 eea6     +LDI R26 , LOW ( _0x87 + ( 77 ) )
000506 e0b4     +LDI R27 , HIGH ( _0x87 + ( 77 ) )
                 	__POINTW2MN _0x87,77
000507 940e 06f5 	CALL SUBOPT_0x19
                 ; 0000 020C             if (stage == STAGE_INIT_MENU)
000509 f411      	BRNE _0x8B
                 ; 0000 020D                 delay_ms(2000);
00050a 940e 0679 	CALL SUBOPT_0xC
                 ; 0000 020E             page_num = (page_num + 1) % 3;
                 _0x8B:
00050c c00d      	RJMP _0xA9
                 ; 0000 020F         }
                 ; 0000 0210         else if (page_num == 2)
                 _0x8A:
00050d 3012      	CPI  R17,2
00050e f4a1      	BRNE _0x8D
                 ; 0000 0211         {
                 ; 0000 0212             lcd_print("5: Retrieve Student Data");
                +
00050f e0a0     +LDI R26 , LOW ( _0x87 + ( 103 ) )
000510 e0b5     +LDI R27 , HIGH ( _0x87 + ( 103 ) )
                 	__POINTW2MN _0x87,103
000511 940e 0637 	CALL SUBOPT_0x2
                 ; 0000 0213             lcd_gotoxy(1, 2);
                 ; 0000 0214             lcd_print("6: Traffic Monitoring");
                +
000513 e1a9     +LDI R26 , LOW ( _0x87 + ( 128 ) )
000514 e0b5     +LDI R27 , HIGH ( _0x87 + ( 128 ) )
                 	__POINTW2MN _0x87,128
000515 940e 06f5 	CALL SUBOPT_0x19
                 ; 0000 0215             if (stage == STAGE_INIT_MENU)
000517 f411      	BRNE _0x8E
                 ; 0000 0216                 delay_ms(2000);
000518 940e 0679 	CALL SUBOPT_0xC
                 ; 0000 0217             page_num = (page_num + 1) % 3;
                 _0x8E:
                 _0xA9:
00051a 2fe1      	MOV  R30,R17
00051b e0f0      	LDI  R31,0
00051c 9631      	ADIW R30,1
00051d 01df      	MOVW R26,R30
00051e e0e3      	LDI  R30,LOW(3)
00051f e0f0      	LDI  R31,HIGH(3)
000520 940e 0729 	CALL __MODW21
000522 2f1e      	MOV  R17,R30
                 ; 0000 0218         }
                 ; 0000 0219     }
                 _0x8D:
000523 cfc8      	RJMP _0x83
                 _0x85:
                 ; 0000 021A }
000524 9119      	LD   R17,Y+
000525 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x87:
000499           	.BYTE 0x96
                 ;
                 ;void clear_eeprom()
                 ; 0000 021D {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 021E     unsigned int i;
                 ; 0000 021F     for (i = 0; i <= 1023; i++)
000526 931a      	ST   -Y,R17
000527 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000528 e000     +LDI R16 , LOW ( 0 )
000529 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x90:
                +
00052a 3000     +CPI R16 , LOW ( 1024 )
00052b e0e4     +LDI R30 , HIGH ( 1024 )
00052c 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
00052d f478      	BRSH _0x91
                 ; 0000 0220     {
                 ; 0000 0221         // Wait for the previous write to complete
                 ; 0000 0222         while (EECR & (1 << EEWE))
                 _0x92:
00052e 99e1      	SBIC 0x1C,1
                 ; 0000 0223             ;
00052f cffe      	RJMP _0x92
                 ; 0000 0224 
                 ; 0000 0225         // Set up address registers
                 ; 0000 0226         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000530 2fe1      	MOV  R30,R17
000531 70f0      	ANDI R31,HIGH(0x0)
000532 70e3      	ANDI R30,LOW(0x3)
000533 bbef      	OUT  0x1F,R30
                 ; 0000 0227         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000534 2fe0      	MOV  R30,R16
000535 bbee      	OUT  0x1E,R30
                 ; 0000 0228 
                 ; 0000 0229         // Set up data register
                 ; 0000 022A         EEDR = 0; // Write 0 to EEPROM
000536 e0e0      	LDI  R30,LOW(0)
000537 bbed      	OUT  0x1D,R30
                 ; 0000 022B 
                 ; 0000 022C         // Enable write
                 ; 0000 022D         EECR |= (1 << EEMWE); // Master write enable
000538 9ae2      	SBI  0x1C,2
                 ; 0000 022E         EECR |= (1 << EEWE);  // Start EEPROM write
000539 9ae1      	SBI  0x1C,1
                 ; 0000 022F     }
                +
00053a 5f0f     +SUBI R16 , LOW ( - 1 )
00053b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00053c cfed      	RJMP _0x90
                 _0x91:
                 ; 0000 0230 }
00053d 9109      	LD   R16,Y+
00053e 9119      	LD   R17,Y+
00053f 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0233 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 0234     unsigned char x;
                 ; 0000 0235     // Wait for the previous write to complete
                 ; 0000 0236     while (EECR & (1 << EEWE))
000540 93ba      	ST   -Y,R27
000541 93aa      	ST   -Y,R26
000542 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x95:
000543 99e1      	SBIC 0x1C,1
                 ; 0000 0237         ;
000544 cffe      	RJMP _0x95
                 ; 0000 0238 
                 ; 0000 0239     // Set up address registers
                 ; 0000 023A     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000545 940e 06fa 	CALL SUBOPT_0x1A
                 ; 0000 023B     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 023C     EECR |= (1 << EERE);        // Read Enable
000547 9ae0      	SBI  0x1C,0
                 ; 0000 023D     x = EEDR;
000548 b31d      	IN   R17,29
                 ; 0000 023E     return x;
000549 2fe1      	MOV  R30,R17
00054a 8118      	LDD  R17,Y+0
00054b c009      	RJMP _0x20A0003
                 ; 0000 023F }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 0242 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 0243     // Wait for the previous write to complete
                 ; 0000 0244     while (EECR & (1 << EEWE))
00054c 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x98:
00054d 99e1      	SBIC 0x1C,1
                 ; 0000 0245         ;
00054e cffe      	RJMP _0x98
                 ; 0000 0246 
                 ; 0000 0247     // Set up address registers
                 ; 0000 0248     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
00054f 940e 06fa 	CALL SUBOPT_0x1A
                 ; 0000 0249     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 024A 
                 ; 0000 024B     // Set up data register
                 ; 0000 024C     EEDR = value; // Write 0 to EEPROM
000551 81e8      	LD   R30,Y
000552 bbed      	OUT  0x1D,R30
                 ; 0000 024D 
                 ; 0000 024E     // Enable write
                 ; 0000 024F     EECR |= (1 << EEMWE); // Master write enable
000553 9ae2      	SBI  0x1C,2
                 ; 0000 0250     EECR |= (1 << EEWE);  // Start EEPROM write
000554 9ae1      	SBI  0x1C,1
                 ; 0000 0251 }
                 _0x20A0003:
000555 9623      	ADIW R28,3
000556 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 0254 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0255     while (!(UCSRA & (1 << UDRE)))
000557 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x9B:
000558 9b5d      	SBIS 0xB,5
                 ; 0000 0256         ;
000559 cffe      	RJMP _0x9B
                 ; 0000 0257     UDR = data;
00055a 81e8      	LD   R30,Y
00055b b9ec      	OUT  0xC,R30
                 ; 0000 0258 }
                 _0x20A0002:
00055c 9621      	ADIW R28,1
00055d 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 025B {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 025C     UBRRL = (unsigned char)ubrr;
00055e 93ba      	ST   -Y,R27
00055f 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000560 81e8      	LD   R30,Y
000561 b9e9      	OUT  0x9,R30
                 ; 0000 025D     UBRRH = (unsigned char)(ubrr >> 8);
000562 81e9      	LDD  R30,Y+1
000563 70f0      	ANDI R31,HIGH(0x0)
000564 bde0      	OUT  0x20,R30
                 ; 0000 025E     UCSRB = (1 << RXEN) | (1 << TXEN);
000565 e1e8      	LDI  R30,LOW(24)
000566 b9ea      	OUT  0xA,R30
                 ; 0000 025F     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
000567 e0e6      	LDI  R30,LOW(6)
000568 bde0      	OUT  0x20,R30
                 ; 0000 0260 }
000569 9622      	ADIW R28,2
00056a 9508      	RET
                 ; .FEND
                 ;
                 ;int search_student_code()
                 ; 0000 0263 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 0264     unsigned char st_counts, i, j;
                 ; 0000 0265     char temp[32];
                 ; 0000 0266 
                 ; 0000 0267     st_counts = read_byte_from_eeprom(0x0);
00056b 97a0      	SBIW R28,32
00056c 940e 0739 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
00056e 940e 0675 	CALL SUBOPT_0xB
000570 2f1e      	MOV  R17,R30
                 ; 0000 0268 
                 ; 0000 0269     for (i = 0; i < st_counts; i++)
000571 e000      	LDI  R16,LOW(0)
                 _0x9F:
000572 1701      	CP   R16,R17
000573 f5c8      	BRSH _0xA0
                 ; 0000 026A     {
                 ; 0000 026B         memset(temp, 0, 32);
000574 01fe      	MOVW R30,R28
000575 9634      	ADIW R30,4
000576 93fa      	ST   -Y,R31
000577 93ea      	ST   -Y,R30
000578 e0e0      	LDI  R30,LOW(0)
000579 93ea      	ST   -Y,R30
00057a e2a0      	LDI  R26,LOW(32)
00057b e0b0      	LDI  R27,0
00057c 940e 05e1 	CALL _memset
                 ; 0000 026C         for (j = 0; j < 8; j++)
00057e e030      	LDI  R19,LOW(0)
                 _0xA2:
00057f 3038      	CPI  R19,8
000580 f4b8      	BRSH _0xA3
                 ; 0000 026D         {
                 ; 0000 026E             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000581 2fe3      	MOV  R30,R19
000582 e0f0      	LDI  R31,0
000583 01de      	MOVW R26,R28
000584 9614      	ADIW R26,4
000585 0fea      	ADD  R30,R26
000586 1ffb      	ADC  R31,R27
000587 93ff      	PUSH R31
000588 93ef      	PUSH R30
000589 2fa3      	MOV  R26,R19
00058a 27bb      	CLR  R27
00058b 2fe0      	MOV  R30,R16
00058c e0f0      	LDI  R31,0
00058d 9631      	ADIW R30,1
00058e 940e 070f 	CALL __LSLW3
000590 0fae      	ADD  R26,R30
000591 1fbf      	ADC  R27,R31
000592 dfad      	RCALL _read_byte_from_eeprom
000593 91af      	POP  R26
000594 91bf      	POP  R27
000595 93ec      	ST   X,R30
                 ; 0000 026F         }
000596 5f3f      	SUBI R19,-1
000597 cfe7      	RJMP _0xA2
                 _0xA3:
                 ; 0000 0270         temp[j] = '\0';
000598 2fe3      	MOV  R30,R19
000599 e0f0      	LDI  R31,0
00059a 01de      	MOVW R26,R28
00059b 9614      	ADIW R26,4
00059c 0fae      	ADD  R26,R30
00059d 1fbf      	ADC  R27,R31
00059e e0e0      	LDI  R30,LOW(0)
00059f 93ec      	ST   X,R30
                 ; 0000 0271         if (strcmp(temp, buffer) == 0)
0005a0 01fe      	MOVW R30,R28
0005a1 9634      	ADIW R30,4
0005a2 940e 065f 	CALL SUBOPT_0x8
0005a4 940e 05f1 	CALL _strcmp
0005a6 30e0      	CPI  R30,0
0005a7 f419      	BRNE _0xA4
                 ; 0000 0272             return 1;
0005a8 e0e1      	LDI  R30,LOW(1)
0005a9 e0f0      	LDI  R31,HIGH(1)
0005aa c004      	RJMP _0x20A0001
                 ; 0000 0273     }
                 _0xA4:
0005ab 5f0f      	SUBI R16,-1
0005ac cfc5      	RJMP _0x9F
                 _0xA0:
                 ; 0000 0274 
                 ; 0000 0275     return 0;
0005ad e0e0      	LDI  R30,LOW(0)
0005ae e0f0      	LDI  R31,HIGH(0)
                 _0x20A0001:
0005af 940e 0740 	CALL __LOADLOCR4
0005b1 96a4      	ADIW R28,36
0005b2 9508      	RET
                 ; 0000 0276 }
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0005b3 93ba      	ST   -Y,R27
0005b4 93aa      	ST   -Y,R26
0005b5 91a9          ld   r26,y+
0005b6 91b9          ld   r27,y+
0005b7 91e9          ld   r30,y+
0005b8 91f9          ld   r31,y+
0005b9 9630          adiw r30,0
0005ba f42a          brpl __itoa0
0005bb 95e0          com  r30
0005bc 95f0          com  r31
0005bd 9631          adiw r30,1
0005be e26d          ldi  r22,'-'
0005bf 936d          st   x+,r22
                 __itoa0:
0005c0 94e8          clt
0005c1 e180          ldi  r24,low(10000)
0005c2 e297          ldi  r25,high(10000)
0005c3 d00d          rcall __itoa1
0005c4 ee88          ldi  r24,low(1000)
0005c5 e093          ldi  r25,high(1000)
0005c6 d00a          rcall __itoa1
0005c7 e684          ldi  r24,100
0005c8 2799          clr  r25
0005c9 d007          rcall __itoa1
0005ca e08a          ldi  r24,10
0005cb d005          rcall __itoa1
0005cc 2f6e          mov  r22,r30
0005cd d010          rcall __itoa5
0005ce 2766          clr  r22
0005cf 936c          st   x,r22
0005d0 9508          ret
                 
                 __itoa1:
0005d1 2766          clr	 r22
                 __itoa2:
0005d2 17e8          cp   r30,r24
0005d3 07f9          cpc  r31,r25
0005d4 f020          brlo __itoa3
0005d5 9563          inc  r22
0005d6 1be8          sub  r30,r24
0005d7 0bf9          sbc  r31,r25
0005d8 f7c9          brne __itoa2
                 __itoa3:
0005d9 2366          tst  r22
0005da f411          brne __itoa4
0005db f016          brts __itoa5
0005dc 9508          ret
                 __itoa4:
0005dd 9468          set
                 __itoa5:
0005de 5d60          subi r22,-0x30
0005df 936d          st   x+,r22
0005e0 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
0005e1 93ba      	ST   -Y,R27
0005e2 93aa      	ST   -Y,R26
0005e3 81b9          ldd  r27,y+1
0005e4 81a8          ld   r26,y
0005e5 9610          adiw r26,0
0005e6 f031          breq memset1
0005e7 81fc          ldd  r31,y+4
0005e8 81eb          ldd  r30,y+3
0005e9 816a          ldd  r22,y+2
                 memset0:
0005ea 9361          st   z+,r22
0005eb 9711          sbiw r26,1
0005ec f7e9          brne memset0
                 memset1:
0005ed 81eb          ldd  r30,y+3
0005ee 81fc          ldd  r31,y+4
0005ef 9625      	ADIW R28,5
0005f0 9508      	RET
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
0005f1 93ba      	ST   -Y,R27
0005f2 93aa      	ST   -Y,R26
0005f3 91e9          ld   r30,y+
0005f4 91f9          ld   r31,y+
0005f5 91a9          ld   r26,y+
0005f6 91b9          ld   r27,y+
                 strcmp0:
0005f7 916d          ld   r22,x+
0005f8 9171          ld   r23,z+
0005f9 1767          cp   r22,r23
0005fa f421          brne strcmp1
0005fb 2366          tst  r22
0005fc f7d1          brne strcmp0
                 strcmp3:
0005fd 27ee          clr  r30
0005fe 9508          ret
                 strcmp1:
0005ff 1b67          sub  r22,r23
000600 f3e1          breq strcmp3
000601 e0e1          ldi  r30,1
000602 f408          brcc strcmp2
000603 50e2          subi r30,2
                 strcmp2:
000604 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000605 93ba      	ST   -Y,R27
000606 93aa      	ST   -Y,R26
000607 91a9          ld   r26,y+
000608 91b9          ld   r27,y+
000609 27ee          clr  r30
00060a 27ff          clr  r31
                 strlen0:
00060b 916d          ld   r22,x+
00060c 2366          tst  r22
00060d f011          breq strlen1
00060e 9631          adiw r30,1
00060f cffb          rjmp strlen0
                 strlen1:
000610 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000611 93aa      	ST   -Y,R26
000612 2766          clr  r22
000613 2777          clr  r23
000614 9189          ld   r24,y+
000615 91e9          ld   r30,y+
000616 91f9          ld   r31,y+
000617 91a9          ld   r26,y+
000618 91b9          ld   r27,y+
                 strncmp0:
000619 2388          tst  r24
00061a f049          breq strncmp1
00061b 958a          dec  r24
00061c 916d          ld   r22,x+
00061d 9171          ld   r23,z+
00061e 1767          cp   r22,r23
00061f f421          brne strncmp1
000620 2366          tst  r22
000621 f7b9          brne strncmp0
                 strncmp3:
000622 27ee          clr  r30
000623 9508          ret
                 strncmp1:
000624 1b67          sub  r22,r23
000625 f3e1          breq strncmp3
000626 e0e1          ldi  r30,1
000627 f408          brcc strncmp2
000628 50e2          subi r30,2
                 strncmp2:
000629 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
00052f           	.BYTE 0x10
                 _buffer:
00053f           	.BYTE 0x20
                 __seed_G100:
00055f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00062a e0e1      	LDI  R30,LOW(1)
00062b e0f0      	LDI  R31,HIGH(1)
00062c 15e4      	CP   R30,R4
00062d 05f5      	CPC  R31,R5
00062e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:93 WORDS
                 SUBOPT_0x1:
00062f e0a1      	LDI  R26,LOW(1)
000630 940e 0463 	CALL _lcdCommand
000632 e0e1      	LDI  R30,LOW(1)
000633 93ea      	ST   -Y,R30
000634 e0a1      	LDI  R26,LOW(1)
000635 940c 0494 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x2:
000637 940e 04ac 	CALL _lcd_print
000639 e0e1      	LDI  R30,LOW(1)
00063a 93ea      	ST   -Y,R30
00063b e0a2      	LDI  R26,LOW(2)
00063c 940c 0494 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00063e e0e2      	LDI  R30,LOW(2)
00063f e0f0      	LDI  R31,HIGH(2)
000640 15e4      	CP   R30,R4
000641 05f5      	CPC  R31,R5
000642 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000643 e0af      	LDI  R26,LOW(15)
000644 940e 0463 	CALL _lcdCommand
                +
000646 e880     +LDI R24 , LOW ( 3200 )
000647 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000648 9701     +SBIW R24 , 1
000649 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
00064a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00064b e0e3      	LDI  R30,LOW(3)
00064c e0f0      	LDI  R31,HIGH(3)
00064d 15e4      	CP   R30,R4
00064e 05f5      	CPC  R31,R5
00064f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000650 e0e4      	LDI  R30,LOW(4)
000651 e0f0      	LDI  R31,HIGH(4)
000652 15e4      	CP   R30,R4
000653 05f5      	CPC  R31,R5
000654 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x7:
000655 e3ef      	LDI  R30,LOW(_buffer)
000656 e0f5      	LDI  R31,HIGH(_buffer)
000657 93fa      	ST   -Y,R31
000658 93ea      	ST   -Y,R30
000659 e0e0      	LDI  R30,LOW(0)
00065a 93ea      	ST   -Y,R30
00065b e2a0      	LDI  R26,LOW(32)
00065c e0b0      	LDI  R27,0
00065d 940c 05e1 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
00065f 93fa      	ST   -Y,R31
000660 93ea      	ST   -Y,R30
000661 e3af      	LDI  R26,LOW(_buffer)
000662 e0b5      	LDI  R27,HIGH(_buffer)
000663 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000664 e3af      	LDI  R26,LOW(_buffer)
000665 e0b5      	LDI  R27,HIGH(_buffer)
000666 940e 04ac 	CALL _lcd_print
000668 eea8      	LDI  R26,LOW(1000)
000669 e0b3      	LDI  R27,HIGH(1000)
00066a 940c 0701 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
00066c 01f8      	MOVW R30,R16
00066d 9631      	ADIW R30,1
00066e 940e 070f 	CALL __LSLW3
000670 0fe2      	ADD  R30,R18
000671 1ff3      	ADC  R31,R19
000672 01df      	MOVW R26,R30
000673 940c 0540 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000675 e0a0      	LDI  R26,LOW(0)
000676 e0b0      	LDI  R27,0
000677 940c 0540 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000679 eda0      	LDI  R26,LOW(2000)
00067a e0b7      	LDI  R27,HIGH(2000)
00067b 940c 0701 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00067d e0e6      	LDI  R30,LOW(6)
00067e e0f0      	LDI  R31,HIGH(6)
00067f 15e4      	CP   R30,R4
000680 05f5      	CPC  R31,R5
000681 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000682 e0e7      	LDI  R30,LOW(7)
000683 e0f0      	LDI  R31,HIGH(7)
000684 15e4      	CP   R30,R4
000685 05f5      	CPC  R31,R5
000686 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xF:
000687 940e 0463 	CALL _lcdCommand
                +
000689 e880     +LDI R24 , LOW ( 3200 )
00068a e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
00068b 9701     +SBIW R24 , 1
00068c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
00068d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00068e bbe5      	OUT  0x15,R30
00068f b3e3      	IN   R30,0x13
000690 70ef      	ANDI R30,LOW(0xF)
000691 2f1e      	MOV  R17,R30
000692 301f      	CPI  R17,15
000693 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0x11:
000694 2fe0      	MOV  R30,R16
000695 e2af      	LDI  R26,LOW(_keypad)
000696 e0b5      	LDI  R27,HIGH(_keypad)
000697 e0f0      	LDI  R31,0
000698 940e 0711 	CALL __LSLW2
00069a 0fae      	ADD  R26,R30
00069b 1fbf      	ADC  R27,R31
00069c 27ee      	CLR  R30
00069d 0fa3      	ADD  R26,R19
00069e 1fbe      	ADC  R27,R30
00069f 91ec      	LD   R30,X
0006a0 e0f0      	LDI  R31,0
0006a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
0006a2 e3af      	LDI  R26,LOW(_buffer)
0006a3 e0b5      	LDI  R27,HIGH(_buffer)
0006a4 940c 0605 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x13:
0006a6 5ce1      	SUBI R30,LOW(-_buffer)
0006a7 4ffa      	SBCI R31,HIGH(-_buffer)
0006a8 010f      	MOVW R0,R30
0006a9 2fe0      	MOV  R30,R16
0006aa e2af      	LDI  R26,LOW(_keypad)
0006ab e0b5      	LDI  R27,HIGH(_keypad)
0006ac e0f0      	LDI  R31,0
0006ad 940e 0711 	CALL __LSLW2
0006af 0fae      	ADD  R26,R30
0006b0 1fbf      	ADC  R27,R31
0006b1 27ee      	CLR  R30
0006b2 0fa3      	ADD  R26,R19
0006b3 1fbe      	ADC  R27,R30
0006b4 91ec      	LD   R30,X
0006b5 01d0      	MOVW R26,R0
0006b6 93ec      	ST   X,R30
0006b7 cfea      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x14:
                +
0006b8 5ce0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
0006b9 4ffa     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
0006ba e0a0      	LDI  R26,LOW(0)
0006bb 83a0      	STD  Z+0,R26
0006bc 2fe0      	MOV  R30,R16
0006bd e2af      	LDI  R26,LOW(_keypad)
0006be e0b5      	LDI  R27,HIGH(_keypad)
0006bf e0f0      	LDI  R31,0
0006c0 940e 0711 	CALL __LSLW2
0006c2 0fae      	ADD  R26,R30
0006c3 1fbf      	ADC  R27,R31
0006c4 27ee      	CLR  R30
0006c5 0fa3      	ADD  R26,R19
0006c6 1fbe      	ADC  R27,R30
0006c7 91ac      	LD   R26,X
0006c8 940c 046f 	JMP  _lcdData
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:67 WORDS
                 SUBOPT_0x15:
0006ca 2fe0      	MOV  R30,R16
0006cb e2af      	LDI  R26,LOW(_keypad)
0006cc e0b5      	LDI  R27,HIGH(_keypad)
0006cd e0f0      	LDI  R31,0
0006ce 940e 0711 	CALL __LSLW2
0006d0 0fae      	ADD  R26,R30
0006d1 1fbf      	ADC  R27,R31
0006d2 27ee      	CLR  R30
0006d3 0fa3      	ADD  R26,R19
0006d4 1fbe      	ADC  R27,R30
0006d5 91ac      	LD   R26,X
0006d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
0006d7 93aa      	ST   -Y,R26
0006d8 b3e8      	IN   R30,0x18
0006d9 70ef      	ANDI R30,LOW(0xF)
0006da 2fae      	MOV  R26,R30
0006db 81e8      	LD   R30,Y
0006dc 7fe0      	ANDI R30,LOW(0xF0)
0006dd 2bea      	OR   R30,R26
0006de bbe8      	OUT  0x18,R30
0006df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
0006e0 98c1      	CBI  0x18,1
0006e1 9ac2      	SBI  0x18,2
                +
0006e2 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
0006e3 958a     +DEC R24
0006e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
0006e5 98c2      	CBI  0x18,2
0006e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x18:
0006e7 b3e8      	IN   R30,0x18
0006e8 70ef      	ANDI R30,LOW(0xF)
0006e9 2fae      	MOV  R26,R30
0006ea 81e8      	LD   R30,Y
0006eb 95e2      	SWAP R30
0006ec 7fe0      	ANDI R30,0xF0
0006ed 2bea      	OR   R30,R26
0006ee bbe8      	OUT  0x18,R30
0006ef 9ac2      	SBI  0x18,2
                +
0006f0 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
0006f1 958a     +DEC R24
0006f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
0006f3 98c2      	CBI  0x18,2
0006f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
0006f5 940e 04ac 	CALL _lcd_print
0006f7 2c04      	MOV  R0,R4
0006f8 2805      	OR   R0,R5
0006f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
0006fa 81ea      	LDD  R30,Y+2
0006fb 70f0      	ANDI R31,HIGH(0x0)
0006fc 70e3      	ANDI R30,LOW(0x3)
0006fd bbef      	OUT  0x1F,R30
0006fe 81e9      	LDD  R30,Y+1
0006ff bbee      	OUT  0x1E,R30
000700 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000701 9610      	adiw r26,0
000702 f039      	breq __delay_ms1
                 __delay_ms0:
000703 95a8      	wdr
                +
000704 ed80     +LDI R24 , LOW ( 0x7D0 )
000705 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000706 9701     +SBIW R24 , 1
000707 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000708 9711      	sbiw r26,1
000709 f7c9      	brne __delay_ms0
                 __delay_ms1:
00070a 9508      	ret
                 
                 __ANEGW1:
00070b 95f1      	NEG  R31
00070c 95e1      	NEG  R30
00070d 40f0      	SBCI R31,0
00070e 9508      	RET
                 
                 __LSLW3:
00070f 0fee      	LSL  R30
000710 1fff      	ROL  R31
                 __LSLW2:
000711 0fee      	LSL  R30
000712 1fff      	ROL  R31
000713 0fee      	LSL  R30
000714 1fff      	ROL  R31
000715 9508      	RET
                 
                 __DIVW21U:
000716 2400      	CLR  R0
000717 2411      	CLR  R1
000718 e190      	LDI  R25,16
                 __DIVW21U1:
000719 0faa      	LSL  R26
00071a 1fbb      	ROL  R27
00071b 1c00      	ROL  R0
00071c 1c11      	ROL  R1
00071d 1a0e      	SUB  R0,R30
00071e 0a1f      	SBC  R1,R31
00071f f418      	BRCC __DIVW21U2
000720 0e0e      	ADD  R0,R30
000721 1e1f      	ADC  R1,R31
000722 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000723 60a1      	SBR  R26,1
                 __DIVW21U3:
000724 959a      	DEC  R25
000725 f799      	BRNE __DIVW21U1
000726 01fd      	MOVW R30,R26
000727 01d0      	MOVW R26,R0
000728 9508      	RET
                 
                 __MODW21:
000729 94e8      	CLT
00072a ffb7      	SBRS R27,7
00072b c004      	RJMP __MODW211
00072c 95a0      	COM  R26
00072d 95b0      	COM  R27
00072e 9611      	ADIW R26,1
00072f 9468      	SET
                 __MODW211:
000730 fdf7      	SBRC R31,7
000731 dfd9      	RCALL __ANEGW1
000732 dfe3      	RCALL __DIVW21U
000733 01fd      	MOVW R30,R26
000734 f40e      	BRTC __MODW212
000735 dfd5      	RCALL __ANEGW1
                 __MODW212:
000736 9508      	RET
                 
                 __SAVELOCR6:
000737 935a      	ST   -Y,R21
                 __SAVELOCR5:
000738 934a      	ST   -Y,R20
                 __SAVELOCR4:
000739 933a      	ST   -Y,R19
                 __SAVELOCR3:
00073a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00073b 931a      	ST   -Y,R17
00073c 930a      	ST   -Y,R16
00073d 9508      	RET
                 
                 __LOADLOCR6:
00073e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00073f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000740 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000741 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000742 8119      	LDD  R17,Y+1
000743 8108      	LD   R16,Y
000744 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  21 r1 :   7 r2 :   0 r3 :   0 r4 :  26 r5 :  16 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  27 r17:  43 r18:  14 r19:  24 r20:   7 r21:  12 r22:  27 r23:   9 
r24:  34 r25:  17 r26: 179 r27:  92 r28:  21 r29:   1 r30: 285 r31: 105 
x  :  22 y  : 129 z  :  11 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  20 
adiw  :  25 and   :   0 andi  :  13 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  22 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  61 brpl  :   1 brsh  :   5 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 138 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   2 cln   :   0 
clr   :  30 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  13 cpc   :  23 cpi   :  32 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   9 inc   :   1 jmp   :  31 ld    :  51 ldd   :  24 ldi   : 276 
lds   :   0 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  33 movw  :  31 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   6 
ori   :   0 out   :  31 pop   :   4 push  :   4 rcall :  39 ret   :  43 
reti  :   1 rjmp  :  67 rol   :   6 ror   :   0 sbc   :   2 sbci  :  10 
sbi   :   9 sbic  :   3 sbis  :   2 sbiw  :  23 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  75 std   :   5 sts   :   0 sub   :   4 subi  :  17 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e8a   2872    850   3722   32768  11.4%
[.dseg] 0x000060 0x000563      0    771    771    2048  37.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
