
AVRASM ver. 2.1.30  D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm Fri Dec 13 01:39:42 2024

D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 01d4 	JMP  __RESET
000002 940c 02e3 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 3837
00002d 4f39
00002e 3534
00002f 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000030 3231
000031 4333
000032 304c
000033 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x0:
000034 2031
000035 203a
000036 7553
000037 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000038 7469
000039 5320
00003a 7574
00003b 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003c 746e
00003d 4320
00003e 646f
00003f 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000040 2020
000041 2020
000042 7270
000043 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000044 2073
000045 6163
000046 636e
000047 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000048 7420
000049 206f
00004a 6162
00004b 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004c 4500
00004d 746e
00004e 7265
00004f 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000050 756f
000051 2072
000052 7473
000053 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000054 6e65
000055 2074
000056 6f63
000057 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
000058 003a
000059 754e
00005a 626d
00005b 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005c 6f20
00005d 2066
00005e 7473
00005f 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
000060 6e65
000061 7374
000062 3a20
000063 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000064 7250
000065 7365
000066 2073
000067 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000068 636e
000069 6c65
00006a 5420
00006b 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006c 6f47
00006d 4220
00006e 6361
00006f 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
000070 7453
000071 7261
000072 2074
000073 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000074 6e61
000075 6673
000076 7265
000077 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000078 676e
000079 2e2e
00007a 002e
00007b 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007c 7261
00007d 2074
00007e 7254
00007f 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
000080 6d73
000081 7469
000082 4620
000083 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
000084 7369
000085 6568
000086 0064
000087 2031      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x20
000088 203a
000089 6553
00008a 7261
00008b 6863      	.DB  0x3A,0x20,0x53,0x65,0x61,0x72,0x63,0x68
00008c 5320
00008d 7574
00008e 6564
00008f 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000090 2000
000091 2020
000092 5020
000093 6572      	.DB  0x0,0x20,0x20,0x20,0x20,0x50,0x72,0x65
000094 7373
000095 4320
000096 6e61
000097 6563      	.DB  0x73,0x73,0x20,0x43,0x61,0x6E,0x63,0x65
000098 206c
000099 6f54
00009a 4220
00009b 6361      	.DB  0x6C,0x20,0x54,0x6F,0x20,0x42,0x61,0x63
00009c 006b
00009d 6e45
00009e 6574
00009f 2072      	.DB  0x6B,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
0000a0 7453
0000a1 6475
0000a2 6e65
0000a3 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a4 6f43
0000a5 6564
0000a6 4620
0000a7 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a8 5320
0000a9 6165
0000aa 6372
0000ab 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000ac 4300
0000ad 656c
0000ae 7261
0000af 6e69      	.DB  0x0,0x43,0x6C,0x65,0x61,0x72,0x69,0x6E
0000b0 2067
0000b1 4545
0000b2 5250
0000b3 4d4f      	.DB  0x67,0x20,0x45,0x45,0x50,0x52,0x4F,0x4D
0000b4 2e20
0000b5 2e2e
0000b6 3400
0000b7 0030      	.DB  0x20,0x2E,0x2E,0x2E,0x0,0x34,0x30,0x0
0000b8 6e49
0000b9 6f63
0000ba 7272
0000bb 6365      	.DB  0x49,0x6E,0x63,0x6F,0x72,0x72,0x65,0x63
0000bc 2074
0000bd 7553
0000be 6475
0000bf 6e65      	.DB  0x74,0x20,0x53,0x75,0x75,0x64,0x65,0x6E
0000c0 2074
0000c1 6f43
0000c2 6564
0000c3 4620      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x46
0000c4 726f
0000c5 616d
0000c6 0074
0000c7 6f59      	.DB  0x6F,0x72,0x6D,0x61,0x74,0x0,0x59,0x6F
0000c8 2075
0000c9 6957
0000ca 6c6c
0000cb 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
0000cc 6361
0000cd 206b
0000ce 654d
0000cf 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
0000d0 4920
0000d1 206e
0000d2 2032
0000d3 6553      	.DB  0x20,0x49,0x6E,0x20,0x32,0x20,0x53,0x65
0000d4 6f63
0000d5 646e
0000d6 4400
0000d7 7075      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x44,0x75,0x70
0000d8 696c
0000d9 6163
0000da 6574
0000db 5320      	.DB  0x6C,0x69,0x63,0x61,0x74,0x65,0x20,0x53
0000dc 7575
0000dd 6564
0000de 746e
0000df 4320      	.DB  0x75,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000e0 646f
0000e1 2065
0000e2 6e45
0000e3 6574      	.DB  0x6F,0x64,0x65,0x20,0x45,0x6E,0x74,0x65
0000e4 6572
0000e5 0064
0000e6 7453
0000e7 6475      	.DB  0x72,0x65,0x64,0x0,0x53,0x74,0x75,0x64
0000e8 6e65
0000e9 2074
0000ea 6f43
0000eb 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
0000ec 5320
0000ed 6375
0000ee 6563
0000ef 7373      	.DB  0x20,0x53,0x75,0x63,0x63,0x65,0x73,0x73
0000f0 7566
0000f1 6c6c
0000f2 2079
0000f3 6441      	.DB  0x66,0x75,0x6C,0x6C,0x79,0x20,0x41,0x64
0000f4 6564
0000f5 0064
0000f6 7453
0000f7 6475      	.DB  0x64,0x65,0x64,0x0,0x53,0x74,0x75,0x64
0000f8 6e65
0000f9 2074
0000fa 6f43
0000fb 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
0000fc 4620
0000fd 756f
0000fe 646e
0000ff 5900      	.DB  0x20,0x46,0x6F,0x75,0x6E,0x64,0x0,0x59
000100 756f
000101 5720
000102 6c69
000103 206c      	.DB  0x6F,0x75,0x20,0x57,0x69,0x6C,0x6C,0x20
000104 6142
000105 6b63
000106 4d20
000107 6e65      	.DB  0x42,0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E
000108 2075
000109 6e49
00010a 3520
00010b 5320      	.DB  0x75,0x20,0x49,0x6E,0x20,0x35,0x20,0x53
00010c 6365
00010d 6e6f
00010e 0064
00010f 704f      	.DB  0x65,0x63,0x6F,0x6E,0x64,0x0,0x4F,0x70
000110 2073
000111 202c
000112 7453
000113 6475      	.DB  0x73,0x20,0x2C,0x20,0x53,0x74,0x75,0x64
000114 6e65
000115 2074
000116 6f43
000117 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
000118 4e20
000119 746f
00011a 4620
00011b 756f      	.DB  0x20,0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75
00011c 646e
00011d 5400
00011e 6d65
00011f 2870      	.DB  0x6E,0x64,0x0,0x54,0x65,0x6D,0x70,0x28
000120 2943
000121 003a
000122 3a31
000123 4120      	.DB  0x43,0x29,0x3A,0x0,0x31,0x3A,0x20,0x41
000124 7474
000125 6e65
000126 6164
000127 636e      	.DB  0x74,0x74,0x65,0x6E,0x64,0x61,0x6E,0x63
000128 2065
000129 6e49
00012a 7469
00012b 6169      	.DB  0x65,0x20,0x49,0x6E,0x69,0x74,0x69,0x61
00012c 696c
00012d 617a
00012e 6974
00012f 6e6f      	.DB  0x6C,0x69,0x7A,0x61,0x74,0x69,0x6F,0x6E
000130 3200
000131 203a
000132 7453
000133 6475      	.DB  0x0,0x32,0x3A,0x20,0x53,0x74,0x75,0x64
000134 6e65
000135 2074
000136 614d
000137 616e      	.DB  0x65,0x6E,0x74,0x20,0x4D,0x61,0x6E,0x61
000138 6567
000139 656d
00013a 746e
00013b 3300      	.DB  0x67,0x65,0x6D,0x65,0x6E,0x74,0x0,0x33
00013c 203a
00013d 6956
00013e 7765
00013f 5020      	.DB  0x3A,0x20,0x56,0x69,0x65,0x77,0x20,0x50
000140 6572
000141 6573
000142 746e
000143 5320      	.DB  0x72,0x65,0x73,0x65,0x6E,0x74,0x20,0x53
000144 7574
000145 6564
000146 746e
000147 2073      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x73,0x20
000148 3400
000149 203a
00014a 6554
00014b 706d      	.DB  0x0,0x34,0x3A,0x20,0x54,0x65,0x6D,0x70
00014c 7265
00014d 7461
00014e 7275
00014f 2065      	.DB  0x65,0x72,0x61,0x74,0x75,0x72,0x65,0x20
000150 6f4d
000151 696e
000152 6f74
000153 6972      	.DB  0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69
000154 676e
000155 3500
000156 203a
000157 6552      	.DB  0x6E,0x67,0x0,0x35,0x3A,0x20,0x52,0x65
000158 7274
000159 6569
00015a 6576
00015b 5320      	.DB  0x74,0x72,0x69,0x65,0x76,0x65,0x20,0x53
00015c 7574
00015d 6564
00015e 746e
00015f 4420      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x44
000160 7461
000161 0061
000162 3a36
000163 5420      	.DB  0x61,0x74,0x61,0x0,0x36,0x3A,0x20,0x54
000164 6172
000165 6666
000166 6369
000167 4d20      	.DB  0x72,0x61,0x66,0x66,0x69,0x63,0x20,0x4D
000168 6e6f
000169 7469
00016a 726f
00016b 6e69      	.DB  0x6F,0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E
00016c 0067      	.DB  0x67,0x0
                 _0x2000060:
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1209): warning: .cseg .db misalignment - padding zero byte
00016d 0001      	.DB  0x1
                 _0x2000000:
00016e 4e2d
00016f 4e41
000170 4900
000171 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
D:\projects\hardware\microFinalProject\Debug\List\microFinalProjectCodes.asm(1212): warning: .cseg .db misalignment - padding zero byte
000172 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000173 0004      	.DW  0x04
000174 0004      	.DW  0x04
000175 0054      	.DW  __REG_VARS*2
                 
000176 0010      	.DW  0x10
000177 052f      	.DW  _keypad
000178 0058      	.DW  _0x3*2
                 
000179 0018      	.DW  0x18
00017a 0260      	.DW  _0xA
00017b 0068      	.DW  _0x0*2
                 
00017c 0019      	.DW  0x19
00017d 0278      	.DW  _0xA+24
00017e 0080      	.DW  _0x0*2+24
                 
00017f 0019      	.DW  0x19
000180 0291      	.DW  _0xA+49
000181 0099      	.DW  _0x0*2+49
                 
000182 0016      	.DW  0x16
000183 02aa      	.DW  _0xA+74
000184 00b2      	.DW  _0x0*2+74
                 
000185 0018      	.DW  0x18
000186 02c0      	.DW  _0xA+96
000187 00c8      	.DW  _0x0*2+96
                 
000188 0016      	.DW  0x16
000189 02d8      	.DW  _0xA+120
00018a 00e0      	.DW  _0x0*2+120
                 
00018b 0018      	.DW  0x18
00018c 02ee      	.DW  _0xA+142
00018d 00f6      	.DW  _0x0*2+142
                 
00018e 0013      	.DW  0x13
00018f 0306      	.DW  _0xA+166
000190 010e      	.DW  _0x0*2+166
                 
000191 0019      	.DW  0x19
000192 0319      	.DW  _0xA+185
000193 0121      	.DW  _0x0*2+185
                 
000194 001f      	.DW  0x1F
000195 0332      	.DW  _0xA+210
000196 013a      	.DW  _0x0*2+210
                 
000197 0014      	.DW  0x14
000198 0351      	.DW  _0x49
000199 0159      	.DW  _0x0*2+241
                 
00019a 0003      	.DW  0x03
00019b 0365      	.DW  _0x49+20
00019c 016d      	.DW  _0x0*2+261
                 
00019d 001e      	.DW  0x1E
00019e 0368      	.DW  _0x49+23
00019f 0170      	.DW  _0x0*2+264
                 
0001a0 001f      	.DW  0x1F
0001a1 0386      	.DW  _0x49+53
0001a2 018e      	.DW  _0x0*2+294
                 
0001a3 001f      	.DW  0x1F
0001a4 03a5      	.DW  _0x49+84
0001a5 01ad      	.DW  _0x0*2+325
                 
0001a6 001f      	.DW  0x1F
0001a7 03c4      	.DW  _0x49+115
0001a8 018e      	.DW  _0x0*2+294
                 
0001a9 0020      	.DW  0x20
0001aa 03e3      	.DW  _0x49+146
0001ab 01cc      	.DW  _0x0*2+356
                 
0001ac 001f      	.DW  0x1F
0001ad 0403      	.DW  _0x49+178
0001ae 018e      	.DW  _0x0*2+294
                 
0001af 0013      	.DW  0x13
0001b0 0422      	.DW  _0x49+209
0001b1 01ec      	.DW  _0x0*2+388
                 
0001b2 001f      	.DW  0x1F
0001b3 0435      	.DW  _0x49+228
0001b4 01ff      	.DW  _0x0*2+407
                 
0001b5 001d      	.DW  0x1D
0001b6 0454      	.DW  _0x49+259
0001b7 021e      	.DW  _0x0*2+438
                 
0001b8 001f      	.DW  0x1F
0001b9 0471      	.DW  _0x49+288
0001ba 01ff      	.DW  _0x0*2+407
                 
0001bb 0009      	.DW  0x09
0001bc 0490      	.DW  _0x84
0001bd 023b      	.DW  _0x0*2+467
                 
0001be 001d      	.DW  0x1D
0001bf 0499      	.DW  _0x8C
0001c0 0244      	.DW  _0x0*2+476
                 
0001c1 0016      	.DW  0x16
0001c2 04b6      	.DW  _0x8C+29
0001c3 0261      	.DW  _0x0*2+505
                 
0001c4 001a      	.DW  0x1A
0001c5 04cc      	.DW  _0x8C+51
0001c6 0277      	.DW  _0x0*2+527
                 
0001c7 001a      	.DW  0x1A
0001c8 04e6      	.DW  _0x8C+77
0001c9 0291      	.DW  _0x0*2+553
                 
0001ca 0019      	.DW  0x19
0001cb 0500      	.DW  _0x8C+103
0001cc 02ab      	.DW  _0x0*2+579
                 
0001cd 0016      	.DW  0x16
0001ce 0519      	.DW  _0x8C+128
0001cf 02c4      	.DW  _0x0*2+604
                 
0001d0 0001      	.DW  0x01
0001d1 055f      	.DW  __seed_G100
0001d2 02da      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0001d3 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0001d4 94f8      	CLI
0001d5 27ee      	CLR  R30
0001d6 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0001d7 e0f1      	LDI  R31,1
0001d8 bffb      	OUT  GICR,R31
0001d9 bfeb      	OUT  GICR,R30
0001da bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0001db e08d      	LDI  R24,(14-2)+1
0001dc e0a2      	LDI  R26,2
0001dd 27bb      	CLR  R27
                 __CLEAR_REG:
0001de 93ed      	ST   X+,R30
0001df 958a      	DEC  R24
0001e0 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0001e1 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0001e2 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0001e3 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0001e4 93ed      	ST   X+,R30
0001e5 9701      	SBIW R24,1
0001e6 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0001e7 eee6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0001e8 e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0001e9 9185      	LPM  R24,Z+
0001ea 9195      	LPM  R25,Z+
0001eb 9700      	SBIW R24,0
0001ec f061      	BREQ __GLOBAL_INI_END
0001ed 91a5      	LPM  R26,Z+
0001ee 91b5      	LPM  R27,Z+
0001ef 9005      	LPM  R0,Z+
0001f0 9015      	LPM  R1,Z+
0001f1 01bf      	MOVW R22,R30
0001f2 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0001f3 9005      	LPM  R0,Z+
0001f4 920d      	ST   X+,R0
0001f5 9701      	SBIW R24,1
0001f6 f7e1      	BRNE __GLOBAL_INI_LOOP
0001f7 01fb      	MOVW R30,R22
0001f8 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0001f9 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0001fa bfed      	OUT  SPL,R30
0001fb e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0001fc bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0001fd e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0001fe e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0001ff 940c 0201 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 3
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void LCM35_init();
                 ;void show_temp();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char search_student_code();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 004C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 004D     int i, j;
                 ; 0000 004E     unsigned char st_counts;
                 ; 0000 004F     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
000201 efe0      	LDI  R30,LOW(240)
000202 bbe4      	OUT  0x14,R30
                 ; 0000 0050     KEY_PRT = 0xFF;
000203 efef      	LDI  R30,LOW(255)
000204 bbe5      	OUT  0x15,R30
                 ; 0000 0051     KEY_PRT &= 0x0F;    // ground all rows at once
000205 b3e5      	IN   R30,0x15
000206 70ef      	ANDI R30,LOW(0xF)
000207 bbe5      	OUT  0x15,R30
                 ; 0000 0052     MCUCR = 0x02;       // make INT0 falling edge triggered
000208 e0e2      	LDI  R30,LOW(2)
000209 bfe5      	OUT  0x35,R30
                 ; 0000 0053     GICR = (1 << INT0); // enable external interrupt 0
00020a e4e0      	LDI  R30,LOW(64)
00020b bfeb      	OUT  0x3B,R30
                 ; 0000 0054     BUZZER_DDR |= (1 << BUZZER_NUM); //make buzzer pin output
00020c 9a8f      	SBI  0x11,7
                 ; 0000 0055     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
00020d 9897      	CBI  0x12,7
                 ; 0000 0056     lcd_init();
00020e d2a8      	RCALL _lcd_init
                 ; 0000 0057     USART_init(0x33);
00020f e3a3      	LDI  R26,LOW(51)
000210 e0b0      	LDI  R27,0
000211 d390      	RCALL _USART_init
                 ; 0000 0058 
                 ; 0000 0059 
                 ; 0000 005A #asm("sei")           // enable interrupts
000212 9478      	sei
                 ; 0000 005B     lcdCommand(0x01); // clear LCD
000213 e0a1      	LDI  R26,LOW(1)
000214 d28e      	RCALL _lcdCommand
                 ; 0000 005C     LCM35_init();
000215 d2ed      	RCALL _LCM35_init
                 ; 0000 005D     while (1)
                 _0x4:
                 ; 0000 005E     {
                 ; 0000 005F         if (stage == STAGE_INIT_MENU)
000216 2c04      	MOV  R0,R4
000217 2805      	OR   R0,R5
000218 f411      	BRNE _0x7
                 ; 0000 0060         {
                 ; 0000 0061             show_menu();
000219 d310      	RCALL _show_menu
                 ; 0000 0062         }
                 ; 0000 0063         else if (stage == STAGE_ATTENDENC_MENU)
00021a c0c6      	RJMP _0x8
                 _0x7:
00021b 940e 066c 	CALL SUBOPT_0x0
00021d f469      	BRNE _0x9
                 ; 0000 0064         {
                 ; 0000 0065             lcdCommand(0x01);
00021e 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0066             lcd_gotoxy(1, 1);
                 ; 0000 0067             lcd_print("1 : Submit Student Code");
                +
000220 e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
000221 e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
000222 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0068             lcd_gotoxy(1, 2);
                 ; 0000 0069             lcd_print("    press cancel to back");
                +
000224 e7a8     +LDI R26 , LOW ( _0xA + ( 24 ) )
000225 e0b2     +LDI R27 , HIGH ( _0xA + ( 24 ) )
                 	__POINTW2MN _0xA,24
000226 d2c5      	RCALL _lcd_print
                 ; 0000 006A             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
000227 940e 066c 	CALL SUBOPT_0x0
000229 f3e9      	BREQ _0xB
                 ; 0000 006B                 ;
                 ; 0000 006C         }
                 ; 0000 006D         else if (stage == STAGE_SUBMIT_CODE)
00022a c0b6      	RJMP _0xE
                 _0x9:
00022b 940e 0680 	CALL SUBOPT_0x3
00022d f461      	BRNE _0xF
                 ; 0000 006E         {
                 ; 0000 006F             lcdCommand(0x01);
00022e 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0070             lcd_gotoxy(1, 1);
                 ; 0000 0071             lcd_print("Enter your student code:");
                +
000230 e9a1     +LDI R26 , LOW ( _0xA + ( 49 ) )
000231 e0b2     +LDI R27 , HIGH ( _0xA + ( 49 ) )
                 	__POINTW2MN _0xA,49
000232 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0072             lcd_gotoxy(1, 2);
                 ; 0000 0073             lcdCommand(0x0f);   // display on, cursor blinking
000234 940e 0685 	CALL SUBOPT_0x4
                 ; 0000 0074             delay_us(100 * 16); // wait
                 ; 0000 0075             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
000236 940e 0680 	CALL SUBOPT_0x3
000238 f3e9      	BREQ _0x10
                 ; 0000 0076                 ;
                 ; 0000 0077             lcdCommand(0x0c);   // display on, cursor off
000239 c0a4      	RJMP _0xB6
                 ; 0000 0078             delay_us(100 * 16); // wait
                 ; 0000 0079         }
                 ; 0000 007A         else if (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xF:
00023a 940e 068d 	CALL SUBOPT_0x5
00023c f411      	BRNE _0x14
                 ; 0000 007B         {
                 ; 0000 007C             show_temp();
00023d d2ca      	RCALL _show_temp
                 ; 0000 007D         }
                 ; 0000 007E         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00023e c0a2      	RJMP _0x15
                 _0x14:
00023f 940e 0692 	CALL SUBOPT_0x6
000241 f009      	BREQ PC+2
000242 c047      	RJMP _0x16
                 ; 0000 007F         {
                 ; 0000 0080             lcdCommand(0x01);
000243 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0081             lcd_gotoxy(1, 1);
                 ; 0000 0082             lcd_print("Number of students : ");
                +
000245 eaaa     +LDI R26 , LOW ( _0xA + ( 74 ) )
000246 e0b2     +LDI R27 , HIGH ( _0xA + ( 74 ) )
                 	__POINTW2MN _0xA,74
000247 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0083             lcd_gotoxy(1, 2);
                 ; 0000 0084             st_counts = read_byte_from_eeprom(0x0);
000249 e0a0      	LDI  R26,LOW(0)
00024a e0b0      	LDI  R27,0
00024b d338      	RCALL _read_byte_from_eeprom
00024c 2f5e      	MOV  R21,R30
                 ; 0000 0085             memset(buffer, 0, 32);
00024d 940e 0697 	CALL SUBOPT_0x7
                 ; 0000 0086             itoa(st_counts, buffer);
00024f 2fe5      	MOV  R30,R21
000250 e0f0      	LDI  R31,0
000251 940e 06a1 	CALL SUBOPT_0x8
000253 940e 05f5 	CALL _itoa
                 ; 0000 0087             lcd_print(buffer);
000255 940e 06a6 	CALL SUBOPT_0x9
                 ; 0000 0088             delay_ms(1000);
                 ; 0000 0089 
                 ; 0000 008A             for (i = 0; i < st_counts; i++)
                +
000257 e000     +LDI R16 , LOW ( 0 )
000258 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
000259 2fe5      	MOV  R30,R21
00025a 01d8      	MOVW R26,R16
00025b e0f0      	LDI  R31,0
00025c 17ae      	CP   R26,R30
00025d 07bf      	CPC  R27,R31
00025e f514      	BRGE _0x19
                 ; 0000 008B             {
                 ; 0000 008C                 memset(buffer, 0, 32);
00025f 940e 0697 	CALL SUBOPT_0x7
                 ; 0000 008D                 for (j = 0; j < 8; j++)
                +
000261 e020     +LDI R18 , LOW ( 0 )
000262 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1B:
                +
000263 3028     +CPI R18 , LOW ( 8 )
000264 e0e0     +LDI R30 , HIGH ( 8 )
000265 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000266 f46c      	BRGE _0x1C
                 ; 0000 008E                 {
                 ; 0000 008F                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000267 01f9      	MOVW R30,R18
000268 5ce1      	SUBI R30,LOW(-_buffer)
000269 4ffa      	SBCI R31,HIGH(-_buffer)
00026a 93ff      	PUSH R31
00026b 93ef      	PUSH R30
00026c 940e 06ae 	CALL SUBOPT_0xA
00026e 91af      	POP  R26
00026f 91bf      	POP  R27
000270 93ec      	ST   X,R30
                 ; 0000 0090                 }
                +
000271 5f2f     +SUBI R18 , LOW ( - 1 )
000272 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000273 cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0091                 buffer[j] = '\0';
000274 e3af      	LDI  R26,LOW(_buffer)
000275 e0b5      	LDI  R27,HIGH(_buffer)
000276 0fa2      	ADD  R26,R18
000277 1fb3      	ADC  R27,R19
000278 e0e0      	LDI  R30,LOW(0)
000279 93ec      	ST   X,R30
                 ; 0000 0092                 lcdCommand(0x01);
00027a 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0093                 lcd_gotoxy(1, 1);
                 ; 0000 0094                 lcd_print(buffer);
00027c 940e 06a6 	CALL SUBOPT_0x9
                 ; 0000 0095                 delay_ms(1000);
                 ; 0000 0096             }
                +
00027e 5f0f     +SUBI R16 , LOW ( - 1 )
00027f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000280 cfd8      	RJMP _0x18
                 _0x19:
                 ; 0000 0097 
                 ; 0000 0098             lcdCommand(0x01);
000281 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0099             lcd_gotoxy(1, 1);
                 ; 0000 009A             lcd_print("Press Cancel To Go Back");
                +
000283 eca0     +LDI R26 , LOW ( _0xA + ( 96 ) )
000284 e0b2     +LDI R27 , HIGH ( _0xA + ( 96 ) )
                 	__POINTW2MN _0xA,96
000285 d266      	RCALL _lcd_print
                 ; 0000 009B             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1D:
000286 940e 0692 	CALL SUBOPT_0x6
000288 f3e9      	BREQ _0x1D
                 ; 0000 009C                 ;
                 ; 0000 009D         }
                 ; 0000 009E         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
000289 c057      	RJMP _0x20
                 _0x16:
00028a e0e5      	LDI  R30,LOW(5)
00028b e0f0      	LDI  R31,HIGH(5)
00028c 15e4      	CP   R30,R4
00028d 05f5      	CPC  R31,R5
00028e f589      	BRNE _0x21
                 ; 0000 009F         {
                 ; 0000 00A0             lcdCommand(0x01);
00028f 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 00A1             lcd_gotoxy(1, 1);
                 ; 0000 00A2             lcd_print("Start Transferring...");
                +
000291 eda8     +LDI R26 , LOW ( _0xA + ( 120 ) )
000292 e0b2     +LDI R27 , HIGH ( _0xA + ( 120 ) )
                 	__POINTW2MN _0xA,120
000293 d258      	RCALL _lcd_print
                 ; 0000 00A3             st_counts = read_byte_from_eeprom(0x0);
000294 940e 06b7 	CALL SUBOPT_0xB
000296 2f5e      	MOV  R21,R30
                 ; 0000 00A4             for (i = 0; i < st_counts; i++)
                +
000297 e000     +LDI R16 , LOW ( 0 )
000298 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
000299 2fe5      	MOV  R30,R21
00029a 01d8      	MOVW R26,R16
00029b e0f0      	LDI  R31,0
00029c 17ae      	CP   R26,R30
00029d 07bf      	CPC  R27,R31
00029e f4c4      	BRGE _0x24
                 ; 0000 00A5             {
                 ; 0000 00A6                 for (j = 0; j < 8; j++)
                +
00029f e020     +LDI R18 , LOW ( 0 )
0002a0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
0002a1 3028     +CPI R18 , LOW ( 8 )
0002a2 e0e0     +LDI R30 , HIGH ( 8 )
0002a3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002a4 f43c      	BRGE _0x27
                 ; 0000 00A7                 {
                 ; 0000 00A8                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
0002a5 940e 06ae 	CALL SUBOPT_0xA
0002a7 2fae      	MOV  R26,R30
0002a8 d2f2      	RCALL _USART_Transmit
                 ; 0000 00A9                 }
                +
0002a9 5f2f     +SUBI R18 , LOW ( - 1 )
0002aa 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002ab cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 00AA                 USART_Transmit('\r');
0002ac e0ad      	LDI  R26,LOW(13)
0002ad d2ed      	RCALL _USART_Transmit
                 ; 0000 00AB                 USART_Transmit('\r');
0002ae e0ad      	LDI  R26,LOW(13)
0002af d2eb      	RCALL _USART_Transmit
                 ; 0000 00AC                 delay_ms(500);
0002b0 efa4      	LDI  R26,LOW(500)
0002b1 e0b1      	LDI  R27,HIGH(500)
0002b2 940e 0712 	CALL _delay_ms
                 ; 0000 00AD             }
                +
0002b4 5f0f     +SUBI R16 , LOW ( - 1 )
0002b5 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002b6 cfe2      	RJMP _0x23
                 _0x24:
                 ; 0000 00AE             lcdCommand(0x01);
0002b7 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 00AF             lcd_gotoxy(1, 1);
                 ; 0000 00B0             lcd_print("Usart Transmit Finished");
                +
0002b9 eeae     +LDI R26 , LOW ( _0xA + ( 142 ) )
0002ba e0b2     +LDI R27 , HIGH ( _0xA + ( 142 ) )
                 	__POINTW2MN _0xA,142
0002bb 940e 06bb 	CALL SUBOPT_0xC
                 ; 0000 00B1             delay_ms(2000);
                 ; 0000 00B2             stage = STAGE_INIT_MENU;
0002bd 2444      	CLR  R4
0002be 2455      	CLR  R5
                 ; 0000 00B3         }
                 ; 0000 00B4         else if (stage == STAGE_STUDENT_MANAGMENT)
0002bf c021      	RJMP _0x28
                 _0x21:
0002c0 940e 06c1 	CALL SUBOPT_0xD
0002c2 f469      	BRNE _0x29
                 ; 0000 00B5         {
                 ; 0000 00B6             lcdCommand(0x01);
0002c3 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 00B7             lcd_gotoxy(1, 1);
                 ; 0000 00B8             lcd_print("1 : Search Student");
                +
0002c5 e0a6     +LDI R26 , LOW ( _0xA + ( 166 ) )
0002c6 e0b3     +LDI R27 , HIGH ( _0xA + ( 166 ) )
                 	__POINTW2MN _0xA,166
0002c7 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 00B9             lcd_gotoxy(1, 2);
                 ; 0000 00BA             lcd_print("    Press Cancel To Back");
                +
0002c9 e1a9     +LDI R26 , LOW ( _0xA + ( 185 ) )
0002ca e0b3     +LDI R27 , HIGH ( _0xA + ( 185 ) )
                 	__POINTW2MN _0xA,185
0002cb d220      	RCALL _lcd_print
                 ; 0000 00BB             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2A:
0002cc 940e 06c1 	CALL SUBOPT_0xD
0002ce f3e9      	BREQ _0x2A
                 ; 0000 00BC                 ;
                 ; 0000 00BD         }
                 ; 0000 00BE         else if (stage == STAGE_SEARCH_STUDENT)
0002cf c011      	RJMP _0x2D
                 _0x29:
0002d0 940e 06c6 	CALL SUBOPT_0xE
0002d2 f471      	BRNE _0x2E
                 ; 0000 00BF         {
                 ; 0000 00C0             lcdCommand(0x01);
0002d3 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 00C1             lcd_gotoxy(1, 1);
                 ; 0000 00C2             lcd_print("Enter Student Code For Search:");
                +
0002d5 e3a2     +LDI R26 , LOW ( _0xA + ( 210 ) )
0002d6 e0b3     +LDI R27 , HIGH ( _0xA + ( 210 ) )
                 	__POINTW2MN _0xA,210
0002d7 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 00C3             lcd_gotoxy(1, 2);
                 ; 0000 00C4             lcdCommand(0x0f);   // display on, cursor blinking
0002d9 940e 0685 	CALL SUBOPT_0x4
                 ; 0000 00C5             delay_us(100 * 16); // wait
                 ; 0000 00C6             while (stage == STAGE_SEARCH_STUDENT)
                 _0x2F:
0002db 940e 06c6 	CALL SUBOPT_0xE
0002dd f3e9      	BREQ _0x2F
                 ; 0000 00C7                 ;
                 ; 0000 00C8             lcdCommand(0x0c);   // display on, cursor off
                 _0xB6:
0002de e0ac      	LDI  R26,LOW(12)
0002df 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 00C9             delay_us(100 * 16); // wait
                 ; 0000 00CA         }
                 ; 0000 00CB     }
                 _0x2E:
                 _0x2D:
                 _0x28:
                 _0x20:
                 _0x15:
                 _0xE:
                 _0x8:
0002e1 cf34      	RJMP _0x4
                 ; 0000 00CC }
                 _0x32:
0002e2 cfff      	RJMP _0x32
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0xF1
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 00D0 {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
0002e3 920a      	ST   -Y,R0
0002e4 921a      	ST   -Y,R1
0002e5 92fa      	ST   -Y,R15
0002e6 936a      	ST   -Y,R22
0002e7 937a      	ST   -Y,R23
0002e8 938a      	ST   -Y,R24
0002e9 939a      	ST   -Y,R25
0002ea 93aa      	ST   -Y,R26
0002eb 93ba      	ST   -Y,R27
0002ec 93ea      	ST   -Y,R30
0002ed 93fa      	ST   -Y,R31
0002ee b7ef      	IN   R30,SREG
0002ef 93ea      	ST   -Y,R30
                 ; 0000 00D1     unsigned char colloc, rowloc, cl, st_counts;
                 ; 0000 00D2     int i;
                 ; 0000 00D3 
                 ; 0000 00D4     // detect the key
                 ; 0000 00D5     while (1)
0002f0 940e 0748 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	i -> R20,R21
                 ; 0000 00D6     {
                 ; 0000 00D7         KEY_PRT = 0xEF;            // ground row 0
0002f2 eeef      	LDI  R30,LOW(239)
0002f3 940e 06d2 	CALL SUBOPT_0x10
                 ; 0000 00D8         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00D9         if (colloc != 0x0F)        // column detected
0002f5 f011      	BREQ _0x36
                 ; 0000 00DA         {
                 ; 0000 00DB             rowloc = 0; // save row location
0002f6 e000      	LDI  R16,LOW(0)
                 ; 0000 00DC             break;      // exit while loop
0002f7 c012      	RJMP _0x35
                 ; 0000 00DD         }
                 ; 0000 00DE         KEY_PRT = 0xDF;            // ground row 1
                 _0x36:
0002f8 edef      	LDI  R30,LOW(223)
0002f9 940e 06d2 	CALL SUBOPT_0x10
                 ; 0000 00DF         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00E0         if (colloc != 0x0F)        // column detected
0002fb f011      	BREQ _0x37
                 ; 0000 00E1         {
                 ; 0000 00E2             rowloc = 1; // save row location
0002fc e001      	LDI  R16,LOW(1)
                 ; 0000 00E3             break;      // exit while loop
0002fd c00c      	RJMP _0x35
                 ; 0000 00E4         }
                 ; 0000 00E5         KEY_PRT = 0xBF;            // ground row 2
                 _0x37:
0002fe ebef      	LDI  R30,LOW(191)
0002ff 940e 06d2 	CALL SUBOPT_0x10
                 ; 0000 00E6         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 00E7         if (colloc != 0x0F)        // column detected
000301 f011      	BREQ _0x38
                 ; 0000 00E8         {
                 ; 0000 00E9             rowloc = 2; // save row location
000302 e002      	LDI  R16,LOW(2)
                 ; 0000 00EA             break;      // exit while loop
000303 c006      	RJMP _0x35
                 ; 0000 00EB         }
                 ; 0000 00EC         KEY_PRT = 0x7F;            // ground row 3
                 _0x38:
000304 e7ef      	LDI  R30,LOW(127)
000305 bbe5      	OUT  0x15,R30
                 ; 0000 00ED         colloc = (KEY_PIN & 0x0F); // read the columns
000306 b3e3      	IN   R30,0x13
000307 70ef      	ANDI R30,LOW(0xF)
000308 2f1e      	MOV  R17,R30
                 ; 0000 00EE         rowloc = 3;                // save row location
000309 e003      	LDI  R16,LOW(3)
                 ; 0000 00EF         break;                     // exit while loop
                 ; 0000 00F0     }
                 _0x35:
                 ; 0000 00F1     // check column and send result to Port D
                 ; 0000 00F2     if (colloc == 0x0E)
00030a 301e      	CPI  R17,14
00030b f411      	BRNE _0x39
                 ; 0000 00F3         cl = 0;
00030c e030      	LDI  R19,LOW(0)
                 ; 0000 00F4     else if (colloc == 0x0D)
00030d c009      	RJMP _0x3A
                 _0x39:
00030e 301d      	CPI  R17,13
00030f f411      	BRNE _0x3B
                 ; 0000 00F5         cl = 1;
000310 e031      	LDI  R19,LOW(1)
                 ; 0000 00F6     else if (colloc == 0x0B)
000311 c005      	RJMP _0x3C
                 _0x3B:
000312 301b      	CPI  R17,11
000313 f411      	BRNE _0x3D
                 ; 0000 00F7         cl = 2;
000314 e032      	LDI  R19,LOW(2)
                 ; 0000 00F8     else
000315 c001      	RJMP _0x3E
                 _0x3D:
                 ; 0000 00F9         cl = 3;
000316 e033      	LDI  R19,LOW(3)
                 ; 0000 00FA 
                 ; 0000 00FB     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x3E:
                 _0x3C:
                 _0x3A:
000317 b3e5      	IN   R30,0x15
000318 70ef      	ANDI R30,LOW(0xF)
000319 bbe5      	OUT  0x15,R30
                 ; 0000 00FC 
                 ; 0000 00FD     // inside menu level 1
                 ; 0000 00FE     if (stage == STAGE_INIT_MENU)
00031a 2c04      	MOV  R0,R4
00031b 2805      	OR   R0,R5
00031c f009      	BREQ PC+2
00031d c056      	RJMP _0x3F
                 ; 0000 00FF     {
                 ; 0000 0100         switch (keypad[rowloc][cl] - '0')
00031e 940e 06d8 	CALL SUBOPT_0x11
000320 91ec      	LD   R30,X
000321 e0f0      	LDI  R31,0
000322 97f0      	SBIW R30,48
                 ; 0000 0101         {
                 ; 0000 0102         case OPTION_ATTENDENCE:
000323 30e1      	CPI  R30,LOW(0x1)
000324 e0a0      	LDI  R26,HIGH(0x1)
000325 07fa      	CPC  R31,R26
000326 f421      	BRNE _0x43
                 ; 0000 0103             stage = STAGE_ATTENDENC_MENU;
000327 e0e1      	LDI  R30,LOW(1)
000328 e0f0      	LDI  R31,HIGH(1)
000329 012f      	MOVW R4,R30
                 ; 0000 0104             break;
00032a c02c      	RJMP _0x42
                 ; 0000 0105 
                 ; 0000 0106         case OPTION_TEMPERATURE_MONITORING:
                 _0x43:
00032b 30e4      	CPI  R30,LOW(0x4)
00032c e0a0      	LDI  R26,HIGH(0x4)
00032d 07fa      	CPC  R31,R26
00032e f421      	BRNE _0x44
                 ; 0000 0107             stage = STAGE_TEMPERATURE_MONITORING;
00032f e0e3      	LDI  R30,LOW(3)
000330 e0f0      	LDI  R31,HIGH(3)
000331 012f      	MOVW R4,R30
                 ; 0000 0108             break;
000332 c024      	RJMP _0x42
                 ; 0000 0109         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x44:
000333 30e3      	CPI  R30,LOW(0x3)
000334 e0a0      	LDI  R26,HIGH(0x3)
000335 07fa      	CPC  R31,R26
000336 f421      	BRNE _0x45
                 ; 0000 010A             stage = STAGE_VIEW_PRESENT_STUDENTS;
000337 e0e4      	LDI  R30,LOW(4)
000338 e0f0      	LDI  R31,HIGH(4)
000339 012f      	MOVW R4,R30
                 ; 0000 010B             break;
00033a c01c      	RJMP _0x42
                 ; 0000 010C         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x45:
00033b 30e5      	CPI  R30,LOW(0x5)
00033c e0a0      	LDI  R26,HIGH(0x5)
00033d 07fa      	CPC  R31,R26
00033e f421      	BRNE _0x46
                 ; 0000 010D             stage = STAGE_RETRIEVE_STUDENT_DATA;
00033f e0e5      	LDI  R30,LOW(5)
000340 e0f0      	LDI  R31,HIGH(5)
000341 012f      	MOVW R4,R30
                 ; 0000 010E             break;
000342 c014      	RJMP _0x42
                 ; 0000 010F         case OPTION_STUDENT_MANAGEMENT:
                 _0x46:
000343 30e2      	CPI  R30,LOW(0x2)
000344 e0a0      	LDI  R26,HIGH(0x2)
000345 07fa      	CPC  R31,R26
000346 f421      	BRNE _0x47
                 ; 0000 0110             stage = STAGE_STUDENT_MANAGMENT;
000347 e0e6      	LDI  R30,LOW(6)
000348 e0f0      	LDI  R31,HIGH(6)
000349 012f      	MOVW R4,R30
                 ; 0000 0111             break;
00034a c00c      	RJMP _0x42
                 ; 0000 0112         case 9:
                 _0x47:
00034b 30e9      	CPI  R30,LOW(0x9)
00034c e0a0      	LDI  R26,HIGH(0x9)
00034d 07fa      	CPC  R31,R26
00034e f441      	BRNE _0x4A
                 ; 0000 0113 #asm("cli") // disable interrupts
00034f 94f8      	cli
                 ; 0000 0114 
                 ; 0000 0115             lcdCommand(0x1);
000350 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0116             lcd_gotoxy(1, 1);
                 ; 0000 0117             lcd_print("Clearing EEPROM ...");
                +
000352 e5a1     +LDI R26 , LOW ( _0x49 + ( 0 ) )
000353 e0b3     +LDI R27 , HIGH ( _0x49 + ( 0 ) )
                 	__POINTW2MN _0x49,0
000354 d197      	RCALL _lcd_print
                 ; 0000 0118             clear_eeprom();
000355 d214      	RCALL _clear_eeprom
                 ; 0000 0119 #asm("sei") // enable interrupts
000356 9478      	sei
                 ; 0000 011A 
                 ; 0000 011B         default:
                 _0x4A:
                 ; 0000 011C             break;
                 ; 0000 011D         }
                 _0x42:
                 ; 0000 011E 
                 ; 0000 011F 
                 ; 0000 0120         if(keypad[rowloc][cl] == 'L'){
000357 940e 06d8 	CALL SUBOPT_0x11
000359 91ac      	LD   R26,X
00035a 34ac      	CPI  R26,LOW(0x4C)
00035b f449      	BRNE _0x4B
                 ; 0000 0121             page_num = page_num > 0 ? page_num -1 : (MENU_PAGE_COUNT -1);
00035c e0e0      	LDI  R30,LOW(0)
00035d 15e7      	CP   R30,R7
00035e f420      	BRSH _0x4C
00035f 2de7      	MOV  R30,R7
000360 e0f0      	LDI  R31,0
000361 9731      	SBIW R30,1
000362 c001      	RJMP _0x4D
                 _0x4C:
000363 e0e2      	LDI  R30,LOW(2)
                 _0x4D:
000364 2e7e      	MOV  R7,R30
                 ; 0000 0122         }
                 ; 0000 0123          if(keypad[rowloc][cl] == 'R'){
                 _0x4B:
000365 940e 06d8 	CALL SUBOPT_0x11
000367 91ac      	LD   R26,X
000368 35a2      	CPI  R26,LOW(0x52)
000369 f449      	BRNE _0x4F
                 ; 0000 0124             page_num = (page_num +1) % MENU_PAGE_COUNT;
00036a 2de7      	MOV  R30,R7
00036b e0f0      	LDI  R31,0
00036c 9631      	ADIW R30,1
00036d 01df      	MOVW R26,R30
00036e e0e3      	LDI  R30,LOW(3)
00036f e0f0      	LDI  R31,HIGH(3)
000370 940e 073a 	CALL __MODW21
000372 2e7e      	MOV  R7,R30
                 ; 0000 0125         }
                 ; 0000 0126 
                 ; 0000 0127 
                 ; 0000 0128     }
                 _0x4F:
                 ; 0000 0129     else if (stage == STAGE_ATTENDENC_MENU)
000373 c11e      	RJMP _0x50
                 _0x3F:
000374 940e 066c 	CALL SUBOPT_0x0
000376 f4a9      	BRNE _0x51
                 ; 0000 012A     {
                 ; 0000 012B         switch (keypad[rowloc][cl])
000377 940e 06d8 	CALL SUBOPT_0x11
000379 91ec      	LD   R30,X
00037a e0f0      	LDI  R31,0
                 ; 0000 012C         {
                 ; 0000 012D         case 'C':
00037b 34e3      	CPI  R30,LOW(0x43)
00037c e0a0      	LDI  R26,HIGH(0x43)
00037d 07fa      	CPC  R31,R26
00037e f419      	BRNE _0x55
                 ; 0000 012E             stage = STAGE_INIT_MENU;
00037f 2444      	CLR  R4
000380 2455      	CLR  R5
                 ; 0000 012F             break;
000381 c009      	RJMP _0x54
                 ; 0000 0130         case '1':
                 _0x55:
000382 33e1      	CPI  R30,LOW(0x31)
000383 e0a0      	LDI  R26,HIGH(0x31)
000384 07fa      	CPC  R31,R26
000385 f429      	BRNE _0x57
                 ; 0000 0131             memset(buffer, 0, 32);
000386 940e 0697 	CALL SUBOPT_0x7
                 ; 0000 0132             stage = STAGE_SUBMIT_CODE;
000388 e0e2      	LDI  R30,LOW(2)
000389 e0f0      	LDI  R31,HIGH(2)
00038a 012f      	MOVW R4,R30
                 ; 0000 0133             break;
                 ; 0000 0134         default:
                 _0x57:
                 ; 0000 0135             break;
                 ; 0000 0136         }
                 _0x54:
                 ; 0000 0137     }
                 ; 0000 0138     else if (stage == STAGE_SUBMIT_CODE)
00038b c106      	RJMP _0x58
                 _0x51:
00038c 940e 0680 	CALL SUBOPT_0x3
00038e f009      	BREQ PC+2
00038f c089      	RJMP _0x59
                 ; 0000 0139     {
                 ; 0000 013A 
                 ; 0000 013B         if ((keypad[rowloc][cl] - '0') < 10)
000390 940e 06d8 	CALL SUBOPT_0x11
000392 91ec      	LD   R30,X
000393 e0f0      	LDI  R31,0
000394 97fa      	SBIW R30,58
000395 f4ac      	BRGE _0x5A
                 ; 0000 013C         {
                 ; 0000 013D             if (strlen(buffer) <= 30)
000396 940e 06e4 	CALL SUBOPT_0x12
000398 977f      	SBIW R30,31
000399 f480      	BRSH _0x5B
                 ; 0000 013E             {
                 ; 0000 013F                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00039a 940e 06e4 	CALL SUBOPT_0x12
00039c 5ce1      	SUBI R30,LOW(-_buffer)
00039d 4ffa      	SBCI R31,HIGH(-_buffer)
00039e 010f      	MOVW R0,R30
00039f 940e 06d8 	CALL SUBOPT_0x11
0003a1 91ec      	LD   R30,X
0003a2 01d0      	MOVW R26,R0
0003a3 93ec      	ST   X,R30
                 ; 0000 0140                 buffer[strlen(buffer) + 1] = '\0';
0003a4 940e 06e4 	CALL SUBOPT_0x12
0003a6 940e 06e8 	CALL SUBOPT_0x13
                 ; 0000 0141                 lcdData(keypad[rowloc][cl]);
0003a8 91ac      	LD   R26,X
0003a9 d105      	RCALL _lcdData
                 ; 0000 0142             }
                 ; 0000 0143         }
                 _0x5B:
                 ; 0000 0144         else if (keypad[rowloc][cl] == 'E')
0003aa c06d      	RJMP _0x5C
                 _0x5A:
0003ab 940e 06d8 	CALL SUBOPT_0x11
0003ad 91ac      	LD   R26,X
0003ae 34a5      	CPI  R26,LOW(0x45)
0003af f009      	BREQ PC+2
0003b0 c05f      	RJMP _0x5D
                 ; 0000 0145         {
                 ; 0000 0146 
                 ; 0000 0147         #asm("cli")
0003b1 94f8      	cli
                 ; 0000 0148 
                 ; 0000 0149             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 014A                 strlen(buffer) != 8)
0003b2 e3ef      	LDI  R30,LOW(_buffer)
0003b3 e0f5      	LDI  R31,HIGH(_buffer)
0003b4 93fa      	ST   -Y,R31
0003b5 93ea      	ST   -Y,R30
                +
0003b6 e6e5     +LDI R30 , LOW ( _0x49 + ( 20 ) )
0003b7 e0f3     +LDI R31 , HIGH ( _0x49 + ( 20 ) )
                 	__POINTW1MN _0x49,20
0003b8 93fa      	ST   -Y,R31
0003b9 93ea      	ST   -Y,R30
0003ba e0a2      	LDI  R26,LOW(2)
0003bb 940e 0653 	CALL _strncmp
0003bd 30e0      	CPI  R30,0
0003be f431      	BRNE _0x5F
0003bf 940e 06e4 	CALL SUBOPT_0x12
0003c1 30e8      	CPI  R30,LOW(0x8)
0003c2 e0a0      	LDI  R26,HIGH(0x8)
0003c3 07fa      	CPC  R31,R26
0003c4 f069      	BREQ _0x5E
                 _0x5F:
                 ; 0000 014B             {
                 ; 0000 014C 
                 ; 0000 014D                 BUZZER_PRT |= (1<<BUZZER_NUM); //turn on buzzer
0003c5 9a97      	SBI  0x12,7
                 ; 0000 014E                 lcdCommand(0x01);
0003c6 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 014F                 lcd_gotoxy(1, 1);
                 ; 0000 0150                 lcd_print("Incorrect Suudent Code Format");
                +
0003c8 e6a8     +LDI R26 , LOW ( _0x49 + ( 23 ) )
0003c9 e0b3     +LDI R27 , HIGH ( _0x49 + ( 23 ) )
                 	__POINTW2MN _0x49,23
0003ca 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0151                 lcd_gotoxy(1, 2);
                 ; 0000 0152                 lcd_print("You Will Back Menu In 2 Second");
                +
0003cc e8a6     +LDI R26 , LOW ( _0x49 + ( 53 ) )
0003cd e0b3     +LDI R27 , HIGH ( _0x49 + ( 53 ) )
                 	__POINTW2MN _0x49,53
0003ce 940e 06bb 	CALL SUBOPT_0xC
                 ; 0000 0153                 delay_ms(2000);
                 ; 0000 0154                 BUZZER_PRT &= ~(1<<BUZZER_NUM); //turn off buzzer
0003d0 9897      	CBI  0x12,7
                 ; 0000 0155             }
                 ; 0000 0156             else if (search_student_code())
0003d1 c03a      	RJMP _0x61
                 _0x5E:
0003d2 d1dc      	RCALL _search_student_code
0003d3 30e0      	CPI  R30,0
0003d4 f069      	BREQ _0x62
                 ; 0000 0157             {
                 ; 0000 0158                 BUZZER_PRT |= (1<<BUZZER_NUM); //turn on buzzer
0003d5 9a97      	SBI  0x12,7
                 ; 0000 0159                 lcdCommand(0x01);
0003d6 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 015A                 lcd_gotoxy(1, 1);
                 ; 0000 015B                 lcd_print("Duplicate Suudent Code Entered");
                +
0003d8 eaa5     +LDI R26 , LOW ( _0x49 + ( 84 ) )
0003d9 e0b3     +LDI R27 , HIGH ( _0x49 + ( 84 ) )
                 	__POINTW2MN _0x49,84
0003da 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 015C                 lcd_gotoxy(1, 2);
                 ; 0000 015D                 lcd_print("You Will Back Menu In 2 Second");
                +
0003dc eca4     +LDI R26 , LOW ( _0x49 + ( 115 ) )
0003dd e0b3     +LDI R27 , HIGH ( _0x49 + ( 115 ) )
                 	__POINTW2MN _0x49,115
0003de 940e 06bb 	CALL SUBOPT_0xC
                 ; 0000 015E                 delay_ms(2000);
                 ; 0000 015F                 BUZZER_PRT &= ~(1<<BUZZER_NUM); //turn off buzzer
0003e0 9897      	CBI  0x12,7
                 ; 0000 0160             }
                 ; 0000 0161             else
0003e1 c02a      	RJMP _0x63
                 _0x62:
                 ; 0000 0162             {
                 ; 0000 0163                 // save the buffer to EEPROM
                 ; 0000 0164                 st_counts = read_byte_from_eeprom(0x0);
0003e2 940e 06b7 	CALL SUBOPT_0xB
0003e4 2f2e      	MOV  R18,R30
                 ; 0000 0165                 for (i = 0; i < 8; i++)
                +
0003e5 e040     +LDI R20 , LOW ( 0 )
0003e6 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x65:
                +
0003e7 3048     +CPI R20 , LOW ( 8 )
0003e8 e0e0     +LDI R30 , HIGH ( 8 )
0003e9 075e     +CPC R21 , R30
                 	__CPWRN 20,21,8
0003ea f484      	BRGE _0x66
                 ; 0000 0166                 {
                 ; 0000 0167                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
0003eb 2fe2      	MOV  R30,R18
0003ec e0f0      	LDI  R31,0
0003ed 9631      	ADIW R30,1
0003ee 940e 0720 	CALL __LSLW3
0003f0 0fe4      	ADD  R30,R20
0003f1 1ff5      	ADC  R31,R21
0003f2 940e 06a1 	CALL SUBOPT_0x8
0003f4 0fa4      	ADD  R26,R20
0003f5 1fb5      	ADC  R27,R21
0003f6 91ac      	LD   R26,X
0003f7 d198      	RCALL _write_byte_to_eeprom
                 ; 0000 0168                 }
                +
0003f8 5f4f     +SUBI R20 , LOW ( - 1 )
0003f9 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0003fa cfec      	RJMP _0x65
                 _0x66:
                 ; 0000 0169                 write_byte_to_eeprom(0x0, st_counts + 1);
0003fb e0e0      	LDI  R30,LOW(0)
0003fc e0f0      	LDI  R31,HIGH(0)
0003fd 93fa      	ST   -Y,R31
0003fe 93ea      	ST   -Y,R30
0003ff 2fa2      	MOV  R26,R18
000400 5faf      	SUBI R26,-LOW(1)
000401 d18e      	RCALL _write_byte_to_eeprom
                 ; 0000 016A 
                 ; 0000 016B                 lcdCommand(0x01);
000402 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 016C                 lcd_gotoxy(1, 1);
                 ; 0000 016D                 lcd_print("Student Code Successfully Added");
                +
000404 eea3     +LDI R26 , LOW ( _0x49 + ( 146 ) )
000405 e0b3     +LDI R27 , HIGH ( _0x49 + ( 146 ) )
                 	__POINTW2MN _0x49,146
000406 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 016E                 lcd_gotoxy(1, 2);
                 ; 0000 016F                 lcd_print("You Will Back Menu In 2 Second");
                +
000408 e0a3     +LDI R26 , LOW ( _0x49 + ( 178 ) )
000409 e0b4     +LDI R27 , HIGH ( _0x49 + ( 178 ) )
                 	__POINTW2MN _0x49,178
00040a 940e 06bb 	CALL SUBOPT_0xC
                 ; 0000 0170                 delay_ms(2000);
                 ; 0000 0171             }
                 _0x63:
                 _0x61:
                 ; 0000 0172             memset(buffer, 0, 32);
00040c 940e 0697 	CALL SUBOPT_0x7
                 ; 0000 0173              #asm("sei")
00040e 9478      	sei
                 ; 0000 0174             stage = STAGE_ATTENDENC_MENU;
00040f c005      	RJMP _0xB7
                 ; 0000 0175         }
                 ; 0000 0176         else if (keypad[rowloc][cl] == 'C')
                 _0x5D:
000410 940e 06d8 	CALL SUBOPT_0x11
000412 91ac      	LD   R26,X
000413 34a3      	CPI  R26,LOW(0x43)
000414 f419      	BRNE _0x68
                 ; 0000 0177             stage = STAGE_ATTENDENC_MENU;
                 _0xB7:
000415 e0e1      	LDI  R30,LOW(1)
000416 e0f0      	LDI  R31,HIGH(1)
000417 012f      	MOVW R4,R30
                 ; 0000 0178     }
                 _0x68:
                 _0x5C:
                 ; 0000 0179     else if (stage == STAGE_TEMPERATURE_MONITORING)
000418 c079      	RJMP _0x69
                 _0x59:
000419 940e 068d 	CALL SUBOPT_0x5
00041b f441      	BRNE _0x6A
                 ; 0000 017A     {
                 ; 0000 017B 
                 ; 0000 017C         if (keypad[rowloc][cl] == 'C')
00041c 940e 06d8 	CALL SUBOPT_0x11
00041e 91ac      	LD   R26,X
00041f 34a3      	CPI  R26,LOW(0x43)
000420 f411      	BRNE _0x6B
                 ; 0000 017D             stage = STAGE_INIT_MENU;
000421 2444      	CLR  R4
000422 2455      	CLR  R5
                 ; 0000 017E     }
                 _0x6B:
                 ; 0000 017F     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
000423 c06e      	RJMP _0x6C
                 _0x6A:
000424 940e 0692 	CALL SUBOPT_0x6
000426 f441      	BRNE _0x6D
                 ; 0000 0180     {
                 ; 0000 0181         if (keypad[rowloc][cl] == 'C')
000427 940e 06d8 	CALL SUBOPT_0x11
000429 91ac      	LD   R26,X
00042a 34a3      	CPI  R26,LOW(0x43)
00042b f411      	BRNE _0x6E
                 ; 0000 0182             stage = STAGE_INIT_MENU;
00042c 2444      	CLR  R4
00042d 2455      	CLR  R5
                 ; 0000 0183     }
                 _0x6E:
                 ; 0000 0184     else if (stage == STAGE_STUDENT_MANAGMENT)
00042e c063      	RJMP _0x6F
                 _0x6D:
00042f 940e 06c1 	CALL SUBOPT_0xD
000431 f489      	BRNE _0x70
                 ; 0000 0185     {
                 ; 0000 0186         if (keypad[rowloc][cl] == 'C')
000432 940e 06d8 	CALL SUBOPT_0x11
000434 91ac      	LD   R26,X
000435 34a3      	CPI  R26,LOW(0x43)
000436 f419      	BRNE _0x71
                 ; 0000 0187             stage = STAGE_INIT_MENU;
000437 2444      	CLR  R4
000438 2455      	CLR  R5
                 ; 0000 0188         else if (keypad[rowloc][cl] == '1')
000439 c008      	RJMP _0x72
                 _0x71:
00043a 940e 06d8 	CALL SUBOPT_0x11
00043c 91ac      	LD   R26,X
00043d 33a1      	CPI  R26,LOW(0x31)
00043e f419      	BRNE _0x73
                 ; 0000 0189             stage = STAGE_SEARCH_STUDENT;
00043f e0e7      	LDI  R30,LOW(7)
000440 e0f0      	LDI  R31,HIGH(7)
000441 012f      	MOVW R4,R30
                 ; 0000 018A     }
                 _0x73:
                 _0x72:
                 ; 0000 018B     else if (stage == STAGE_SEARCH_STUDENT)
000442 c04f      	RJMP _0x74
                 _0x70:
000443 940e 06c6 	CALL SUBOPT_0xE
000445 f009      	BREQ PC+2
000446 c04b      	RJMP _0x75
                 ; 0000 018C     {
                 ; 0000 018D         if ((keypad[rowloc][cl] - '0') < 10)
000447 940e 06d8 	CALL SUBOPT_0x11
000449 91ec      	LD   R30,X
00044a e0f0      	LDI  R31,0
00044b 97fa      	SBIW R30,58
00044c f4ac      	BRGE _0x76
                 ; 0000 018E         {
                 ; 0000 018F             if (strlen(buffer) <= 30)
00044d 940e 06e4 	CALL SUBOPT_0x12
00044f 977f      	SBIW R30,31
000450 f480      	BRSH _0x77
                 ; 0000 0190             {
                 ; 0000 0191                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000451 940e 06e4 	CALL SUBOPT_0x12
000453 5ce1      	SUBI R30,LOW(-_buffer)
000454 4ffa      	SBCI R31,HIGH(-_buffer)
000455 010f      	MOVW R0,R30
000456 940e 06d8 	CALL SUBOPT_0x11
000458 91ec      	LD   R30,X
000459 01d0      	MOVW R26,R0
00045a 93ec      	ST   X,R30
                 ; 0000 0192                 buffer[strlen(buffer) + 1] = '\0';
00045b 940e 06e4 	CALL SUBOPT_0x12
00045d 940e 06e8 	CALL SUBOPT_0x13
                 ; 0000 0193                 lcdData(keypad[rowloc][cl]);
00045f 91ac      	LD   R26,X
000460 d04e      	RCALL _lcdData
                 ; 0000 0194             }
                 ; 0000 0195         }
                 _0x77:
                 ; 0000 0196         else if (keypad[rowloc][cl] == 'E')
000461 c030      	RJMP _0x78
                 _0x76:
000462 940e 06d8 	CALL SUBOPT_0x11
000464 91ac      	LD   R26,X
000465 34a5      	CPI  R26,LOW(0x45)
000466 f519      	BRNE _0x79
                 ; 0000 0197         {
                 ; 0000 0198             // search from eeprom data
                 ; 0000 0199             unsigned char result = search_student_code();
                 ; 0000 019A 
                 ; 0000 019B             if (result == 1)
000467 9721      	SBIW R28,1
                 ;	result -> Y+0
000468 d146      	RCALL _search_student_code
000469 83e8      	ST   Y,R30
00046a 81a8      	LD   R26,Y
00046b 30a1      	CPI  R26,LOW(0x1)
00046c f449      	BRNE _0x7A
                 ; 0000 019C             {
                 ; 0000 019D                 lcdCommand(0x01);
00046d 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 019E                 lcd_gotoxy(1, 1);
                 ; 0000 019F                 lcd_print("Student Code Found");
                +
00046f e2a2     +LDI R26 , LOW ( _0x49 + ( 209 ) )
000470 e0b4     +LDI R27 , HIGH ( _0x49 + ( 209 ) )
                 	__POINTW2MN _0x49,209
000471 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 01A0                 lcd_gotoxy(1, 2);
                 ; 0000 01A1                 lcd_print("You Will Back Menu In 5 Second");
                +
000473 e3a5     +LDI R26 , LOW ( _0x49 + ( 228 ) )
000474 e0b4     +LDI R27 , HIGH ( _0x49 + ( 228 ) )
                 	__POINTW2MN _0x49,228
000475 c008      	RJMP _0xB8
                 ; 0000 01A2                 delay_ms(5000);
                 ; 0000 01A3             }
                 ; 0000 01A4             else
                 _0x7A:
                 ; 0000 01A5             {
                 ; 0000 01A6                 lcdCommand(0x01);
000476 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 01A7                 lcd_gotoxy(1, 1);
                 ; 0000 01A8                 lcd_print("Ops , Student Code Not Found");
                +
000478 e5a4     +LDI R26 , LOW ( _0x49 + ( 259 ) )
000479 e0b4     +LDI R27 , HIGH ( _0x49 + ( 259 ) )
                 	__POINTW2MN _0x49,259
00047a 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 01A9                 lcd_gotoxy(1, 2);
                 ; 0000 01AA                 lcd_print("You Will Back Menu In 5 Second");
                +
00047c e7a1     +LDI R26 , LOW ( _0x49 + ( 288 ) )
00047d e0b4     +LDI R27 , HIGH ( _0x49 + ( 288 ) )
                 	__POINTW2MN _0x49,288
                 _0xB8:
00047e d06d      	RCALL _lcd_print
                 ; 0000 01AB                 delay_ms(5000);
00047f e8a8      	LDI  R26,LOW(5000)
000480 e1b3      	LDI  R27,HIGH(5000)
000481 940e 0712 	CALL _delay_ms
                 ; 0000 01AC             }
                 ; 0000 01AD             memset(buffer, 0, 32);
000483 940e 0697 	CALL SUBOPT_0x7
                 ; 0000 01AE             stage = STAGE_STUDENT_MANAGMENT;
000485 e0e6      	LDI  R30,LOW(6)
000486 e0f0      	LDI  R31,HIGH(6)
000487 012f      	MOVW R4,R30
                 ; 0000 01AF         }
000488 9621      	ADIW R28,1
                 ; 0000 01B0         else if (keypad[rowloc][cl] == 'C')
000489 c008      	RJMP _0x7C
                 _0x79:
00048a 940e 06d8 	CALL SUBOPT_0x11
00048c 91ac      	LD   R26,X
00048d 34a3      	CPI  R26,LOW(0x43)
00048e f419      	BRNE _0x7D
                 ; 0000 01B1             stage = STAGE_STUDENT_MANAGMENT;
00048f e0e6      	LDI  R30,LOW(6)
000490 e0f0      	LDI  R31,HIGH(6)
000491 012f      	MOVW R4,R30
                 ; 0000 01B2     }
                 _0x7D:
                 _0x7C:
                 _0x78:
                 ; 0000 01B3 }
                 _0x75:
                 _0x74:
                 _0x6F:
                 _0x6C:
                 _0x69:
                 _0x58:
                 _0x50:
000492 940e 074f 	CALL __LOADLOCR6
000494 9626      	ADIW R28,6
000495 91e9      	LD   R30,Y+
000496 bfef      	OUT  SREG,R30
000497 91f9      	LD   R31,Y+
000498 91e9      	LD   R30,Y+
000499 91b9      	LD   R27,Y+
00049a 91a9      	LD   R26,Y+
00049b 9199      	LD   R25,Y+
00049c 9189      	LD   R24,Y+
00049d 9179      	LD   R23,Y+
00049e 9169      	LD   R22,Y+
00049f 90f9      	LD   R15,Y+
0004a0 9019      	LD   R1,Y+
0004a1 9009      	LD   R0,Y+
0004a2 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x49:
000351           	.BYTE 0x13F
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 01B6 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 01B7     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0004a3 940e 06ed 	CALL SUBOPT_0x14
                 ;	cmnd -> Y+0
                 ; 0000 01B8     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0004a5 98c0      	CBI  0x18,0
                 ; 0000 01B9     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0004a6 940e 06f6 	CALL SUBOPT_0x15
                 ; 0000 01BA     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01BB     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01BC     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01BD     delay_us(20 * 16);         // wait
                +
0004a8 e880     +LDI R24 , LOW ( 640 )
0004a9 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0004aa 9701     +SBIW R24 , 1
0004ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 01BE     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0004ac 940e 06fd 	CALL SUBOPT_0x16
                 ; 0000 01BF     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01C0     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01C1     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01C2 }
0004ae c0f1      	RJMP _0x20A0002
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 01C4 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 01C5     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0004af 940e 06ed 	CALL SUBOPT_0x14
                 ;	data -> Y+0
                 ; 0000 01C6     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0004b1 9ac0      	SBI  0x18,0
                 ; 0000 01C7     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0004b2 940e 06f6 	CALL SUBOPT_0x15
                 ; 0000 01C8     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01C9     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01CA     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01CB     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0004b4 940e 06fd 	CALL SUBOPT_0x16
                 ; 0000 01CC     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 01CD     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 01CE     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 01CF }
0004b6 c0e9      	RJMP _0x20A0002
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 01D1 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 01D2     LCD_DDR = 0xFF;            // LCD port is output
0004b7 efef      	LDI  R30,LOW(255)
0004b8 bbe7      	OUT  0x17,R30
                 ; 0000 01D3     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0004b9 98c2      	CBI  0x18,2
                 ; 0000 01D4     delay_us(2000 * 16);       // wait for stable power
                +
0004ba e080     +LDI R24 , LOW ( 64000 )
0004bb ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0004bc 9701     +SBIW R24 , 1
0004bd f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 01D5     lcdCommand(0x33);          //$33 for 4-bit mode
0004be e3a3      	LDI  R26,LOW(51)
0004bf 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01D6     delay_us(100 * 16);        // wait
                 ; 0000 01D7     lcdCommand(0x32);          //$32 for 4-bit mode
0004c1 e3a2      	LDI  R26,LOW(50)
0004c2 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01D8     delay_us(100 * 16);        // wait
                 ; 0000 01D9     lcdCommand(0x28);          //$28 for 4-bit mode
0004c4 e2a8      	LDI  R26,LOW(40)
0004c5 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01DA     delay_us(100 * 16);        // wait
                 ; 0000 01DB     lcdCommand(0x0c);          // display on, cursor off
0004c7 e0ac      	LDI  R26,LOW(12)
0004c8 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01DC     delay_us(100 * 16);        // wait
                 ; 0000 01DD     lcdCommand(0x01);          // clear LCD
0004ca e0a1      	LDI  R26,LOW(1)
0004cb dfd7      	RCALL _lcdCommand
                 ; 0000 01DE     delay_us(2000 * 16);       // wait
                +
0004cc e080     +LDI R24 , LOW ( 64000 )
0004cd ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0004ce 9701     +SBIW R24 , 1
0004cf f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 01DF     lcdCommand(0x06);          // shift cursor right
0004d0 e0a6      	LDI  R26,LOW(6)
0004d1 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01E0     delay_us(100 * 16);
                 ; 0000 01E1 }
0004d3 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 01E3 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 01E4     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 01E5     lcdCommand(firstCharAdr[y - 1] + x - 1);
0004d4 93aa      	ST   -Y,R26
0004d5 9724      	SBIW R28,4
0004d6 e8e0      	LDI  R30,LOW(128)
0004d7 83e8      	ST   Y,R30
0004d8 ece0      	LDI  R30,LOW(192)
0004d9 83e9      	STD  Y+1,R30
0004da e9e4      	LDI  R30,LOW(148)
0004db 83ea      	STD  Y+2,R30
0004dc ede4      	LDI  R30,LOW(212)
0004dd 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
0004de 81ec      	LDD  R30,Y+4
0004df e0f0      	LDI  R31,0
0004e0 9731      	SBIW R30,1
0004e1 01de      	MOVW R26,R28
0004e2 0fae      	ADD  R26,R30
0004e3 1fbf      	ADC  R27,R31
0004e4 91ec      	LD   R30,X
0004e5 81ad      	LDD  R26,Y+5
0004e6 0fae      	ADD  R26,R30
0004e7 50a1      	SUBI R26,LOW(1)
0004e8 940e 06cb 	CALL SUBOPT_0xF
                 ; 0000 01E6     delay_us(100 * 16);
                 ; 0000 01E7 }
0004ea 9626      	ADIW R28,6
0004eb 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 01E9 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 01EA     unsigned char i = 0;
                 ; 0000 01EB     while (str[i] != 0)
0004ec 93ba      	ST   -Y,R27
0004ed 93aa      	ST   -Y,R26
0004ee 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0004ef e010      	LDI  R17,0
                 _0x7E:
0004f0 81a9      	LDD  R26,Y+1
0004f1 81ba      	LDD  R27,Y+1+1
0004f2 27ee      	CLR  R30
0004f3 0fa1      	ADD  R26,R17
0004f4 1fbe      	ADC  R27,R30
0004f5 91ec      	LD   R30,X
0004f6 30e0      	CPI  R30,0
0004f7 f049      	BREQ _0x80
                 ; 0000 01EC     {
                 ; 0000 01ED         lcdData(str[i]);
0004f8 81a9      	LDD  R26,Y+1
0004f9 81ba      	LDD  R27,Y+1+1
0004fa 27ee      	CLR  R30
0004fb 0fa1      	ADD  R26,R17
0004fc 1fbe      	ADC  R27,R30
0004fd 91ac      	LD   R26,X
0004fe dfb0      	RCALL _lcdData
                 ; 0000 01EE         i++;
0004ff 5f1f      	SUBI R17,-1
                 ; 0000 01EF     }
000500 cfef      	RJMP _0x7E
                 _0x80:
                 ; 0000 01F0 }
000501 8118      	LDD  R17,Y+0
000502 c096      	RJMP _0x20A0003
                 ; .FEND
                 ;
                 ;void LCM35_init()
                 ; 0000 01F3 {
                 _LCM35_init:
                 ; .FSTART _LCM35_init
                 ; 0000 01F4     ADMUX = 0xE0;
000503 eee0      	LDI  R30,LOW(224)
000504 b9e7      	OUT  0x7,R30
                 ; 0000 01F5     ADCSRA = 0x87;
000505 e8e7      	LDI  R30,LOW(135)
000506 b9e6      	OUT  0x6,R30
                 ; 0000 01F6 }
000507 9508      	RET
                 ; .FEND
                 ;
                 ;void show_temp()
                 ; 0000 01F9 {
                 _show_temp:
                 ; .FSTART _show_temp
                 ; 0000 01FA     unsigned char temperatureVal = 0;
                 ; 0000 01FB     unsigned char temperatureRep[3];
                 ; 0000 01FC 
                 ; 0000 01FD     while (stage == STAGE_TEMPERATURE_MONITORING)
000508 9723      	SBIW R28,3
000509 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
00050a e010      	LDI  R17,0
                 _0x81:
00050b 940e 068d 	CALL SUBOPT_0x5
00050d f4c9      	BRNE _0x83
                 ; 0000 01FE     {
                 ; 0000 01FF         lcdCommand(0x01);
00050e 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0200         lcd_gotoxy(1, 1);
                 ; 0000 0201         lcd_print("Temp(C):");
                +
000510 e9a0     +LDI R26 , LOW ( _0x84 + ( 0 ) )
000511 e0b4     +LDI R27 , HIGH ( _0x84 + ( 0 ) )
                 	__POINTW2MN _0x84,0
000512 dfd9      	RCALL _lcd_print
                 ; 0000 0202         ADCSRA |= (1 << ADSC);
000513 9a36      	SBI  0x6,6
                 ; 0000 0203         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x85:
000514 9b34      	SBIS 0x6,4
                 ; 0000 0204             ;
000515 cffe      	RJMP _0x85
                 ; 0000 0205         temperatureVal = ADCH;
000516 b115      	IN   R17,5
                 ; 0000 0206         itoa(temperatureVal, temperatureRep);
000517 2fe1      	MOV  R30,R17
000518 e0f0      	LDI  R31,0
000519 93fa      	ST   -Y,R31
00051a 93ea      	ST   -Y,R30
00051b 01de      	MOVW R26,R28
00051c 9613      	ADIW R26,3
00051d 940e 05f5 	CALL _itoa
                 ; 0000 0207         lcd_print(temperatureRep);
00051f 01de      	MOVW R26,R28
000520 9611      	ADIW R26,1
000521 dfca      	RCALL _lcd_print
                 ; 0000 0208         delay_ms(500);
000522 efa4      	LDI  R26,LOW(500)
000523 e0b1      	LDI  R27,HIGH(500)
000524 940e 0712 	CALL _delay_ms
                 ; 0000 0209     }
000526 cfe4      	RJMP _0x81
                 _0x83:
                 ; 0000 020A }
000527 8118      	LDD  R17,Y+0
000528 9624      	ADIW R28,4
000529 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x84:
000490           	.BYTE 0x9
                 ;
                 ;void show_menu()
                 ; 0000 020D {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 020E 
                 ; 0000 020F     while (stage == STAGE_INIT_MENU)
                 _0x88:
00052a 2c04      	MOV  R0,R4
00052b 2805      	OR   R0,R5
00052c f5e1      	BRNE _0x8A
                 ; 0000 0210     {
                 ; 0000 0211         lcdCommand(0x01);
00052d 940e 0671 	CALL SUBOPT_0x1
                 ; 0000 0212         lcd_gotoxy(1, 1);
                 ; 0000 0213         if (page_num == 0)
00052f 2077      	TST  R7
000530 f481      	BRNE _0x8B
                 ; 0000 0214         {
                 ; 0000 0215             lcd_print("1: Attendance Initialization");
                +
000531 e9a9     +LDI R26 , LOW ( _0x8C + ( 0 ) )
000532 e0b4     +LDI R27 , HIGH ( _0x8C + ( 0 ) )
                 	__POINTW2MN _0x8C,0
000533 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0216             lcd_gotoxy(1, 2);
                 ; 0000 0217             lcd_print("2: Student Management");
                +
000535 eba6     +LDI R26 , LOW ( _0x8C + ( 29 ) )
000536 e0b4     +LDI R27 , HIGH ( _0x8C + ( 29 ) )
                 	__POINTW2MN _0x8C,29
000537 dfb4      	RCALL _lcd_print
                 ; 0000 0218             while(page_num==0 && stage == STAGE_INIT_MENU);
                 _0x8D:
000538 2077      	TST  R7
000539 f421      	BRNE _0x90
00053a 2400      	CLR  R0
00053b 1404      	CP   R0,R4
00053c 0405      	CPC  R0,R5
00053d f009      	BREQ _0x91
                 _0x90:
00053e c001      	RJMP _0x8F
                 _0x91:
00053f cff8      	RJMP _0x8D
                 _0x8F:
                 ; 0000 0219 
                 ; 0000 021A         }
                 ; 0000 021B         else if (page_num == 1)
000540 c027      	RJMP _0x92
                 _0x8B:
000541 e0e1      	LDI  R30,LOW(1)
000542 15e7      	CP   R30,R7
000543 f489      	BRNE _0x93
                 ; 0000 021C         {
                 ; 0000 021D             lcd_print("3: View Present Students ");
                +
000544 ecac     +LDI R26 , LOW ( _0x8C + ( 51 ) )
000545 e0b4     +LDI R27 , HIGH ( _0x8C + ( 51 ) )
                 	__POINTW2MN _0x8C,51
000546 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 021E             lcd_gotoxy(1, 2);
                 ; 0000 021F             lcd_print("4: Temperature Monitoring");
                +
000548 eea6     +LDI R26 , LOW ( _0x8C + ( 77 ) )
000549 e0b4     +LDI R27 , HIGH ( _0x8C + ( 77 ) )
                 	__POINTW2MN _0x8C,77
00054a dfa1      	RCALL _lcd_print
                 ; 0000 0220              while(page_num==1 && stage == STAGE_INIT_MENU);
                 _0x94:
00054b e0e1      	LDI  R30,LOW(1)
00054c 15e7      	CP   R30,R7
00054d f421      	BRNE _0x97
00054e 2400      	CLR  R0
00054f 1404      	CP   R0,R4
000550 0405      	CPC  R0,R5
000551 f009      	BREQ _0x98
                 _0x97:
000552 c001      	RJMP _0x96
                 _0x98:
000553 cff7      	RJMP _0x94
                 _0x96:
                 ; 0000 0221 
                 ; 0000 0222         }
                 ; 0000 0223         else if (page_num == 2)
000554 c013      	RJMP _0x99
                 _0x93:
000555 e0e2      	LDI  R30,LOW(2)
000556 15e7      	CP   R30,R7
000557 f481      	BRNE _0x9A
                 ; 0000 0224         {
                 ; 0000 0225             lcd_print("5: Retrieve Student Data");
                +
000558 e0a0     +LDI R26 , LOW ( _0x8C + ( 103 ) )
000559 e0b5     +LDI R27 , HIGH ( _0x8C + ( 103 ) )
                 	__POINTW2MN _0x8C,103
00055a 940e 0679 	CALL SUBOPT_0x2
                 ; 0000 0226             lcd_gotoxy(1, 2);
                 ; 0000 0227             lcd_print("6: Traffic Monitoring");
                +
00055c e1a9     +LDI R26 , LOW ( _0x8C + ( 128 ) )
00055d e0b5     +LDI R27 , HIGH ( _0x8C + ( 128 ) )
                 	__POINTW2MN _0x8C,128
00055e df8d      	RCALL _lcd_print
                 ; 0000 0228             while(page_num==2 && stage == STAGE_INIT_MENU);
                 _0x9B:
00055f e0e2      	LDI  R30,LOW(2)
000560 15e7      	CP   R30,R7
000561 f421      	BRNE _0x9E
000562 2400      	CLR  R0
000563 1404      	CP   R0,R4
000564 0405      	CPC  R0,R5
000565 f009      	BREQ _0x9F
                 _0x9E:
000566 c001      	RJMP _0x9D
                 _0x9F:
000567 cff7      	RJMP _0x9B
                 _0x9D:
                 ; 0000 0229 
                 ; 0000 022A         }
                 ; 0000 022B     }
                 _0x9A:
                 _0x99:
                 _0x92:
000568 cfc1      	RJMP _0x88
                 _0x8A:
                 ; 0000 022C }
000569 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x8C:
000499           	.BYTE 0x96
                 ;
                 ;void clear_eeprom()
                 ; 0000 022F {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 0230     unsigned int i;
                 ; 0000 0231     for (i = 0; i <= 1023; i++)
00056a 931a      	ST   -Y,R17
00056b 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00056c e000     +LDI R16 , LOW ( 0 )
00056d e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA1:
                +
00056e 3000     +CPI R16 , LOW ( 1024 )
00056f e0e4     +LDI R30 , HIGH ( 1024 )
000570 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000571 f478      	BRSH _0xA2
                 ; 0000 0232     {
                 ; 0000 0233         // Wait for the previous write to complete
                 ; 0000 0234         while (EECR & (1 << EEWE))
                 _0xA3:
000572 99e1      	SBIC 0x1C,1
                 ; 0000 0235             ;
000573 cffe      	RJMP _0xA3
                 ; 0000 0236 
                 ; 0000 0237         // Set up address registers
                 ; 0000 0238         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000574 2fe1      	MOV  R30,R17
000575 70f0      	ANDI R31,HIGH(0x0)
000576 70e3      	ANDI R30,LOW(0x3)
000577 bbef      	OUT  0x1F,R30
                 ; 0000 0239         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000578 2fe0      	MOV  R30,R16
000579 bbee      	OUT  0x1E,R30
                 ; 0000 023A 
                 ; 0000 023B         // Set up data register
                 ; 0000 023C         EEDR = 0; // Write 0 to EEPROM
00057a e0e0      	LDI  R30,LOW(0)
00057b bbed      	OUT  0x1D,R30
                 ; 0000 023D 
                 ; 0000 023E         // Enable write
                 ; 0000 023F         EECR |= (1 << EEMWE); // Master write enable
00057c 9ae2      	SBI  0x1C,2
                 ; 0000 0240         EECR |= (1 << EEWE);  // Start EEPROM write
00057d 9ae1      	SBI  0x1C,1
                 ; 0000 0241     }
                +
00057e 5f0f     +SUBI R16 , LOW ( - 1 )
00057f 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000580 cfed      	RJMP _0xA1
                 _0xA2:
                 ; 0000 0242 }
000581 9109      	LD   R16,Y+
000582 9119      	LD   R17,Y+
000583 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0245 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 0246     unsigned char x;
                 ; 0000 0247     // Wait for the previous write to complete
                 ; 0000 0248     while (EECR & (1 << EEWE))
000584 93ba      	ST   -Y,R27
000585 93aa      	ST   -Y,R26
000586 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0xA6:
000587 99e1      	SBIC 0x1C,1
                 ; 0000 0249         ;
000588 cffe      	RJMP _0xA6
                 ; 0000 024A 
                 ; 0000 024B     // Set up address registers
                 ; 0000 024C     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000589 940e 070b 	CALL SUBOPT_0x17
                 ; 0000 024D     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 024E     EECR |= (1 << EERE);        // Read Enable
00058b 9ae0      	SBI  0x1C,0
                 ; 0000 024F     x = EEDR;
00058c b31d      	IN   R17,29
                 ; 0000 0250     return x;
00058d 2fe1      	MOV  R30,R17
00058e 8118      	LDD  R17,Y+0
00058f c009      	RJMP _0x20A0003
                 ; 0000 0251 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 0254 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 0255     // Wait for the previous write to complete
                 ; 0000 0256     while (EECR & (1 << EEWE))
000590 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0xA9:
000591 99e1      	SBIC 0x1C,1
                 ; 0000 0257         ;
000592 cffe      	RJMP _0xA9
                 ; 0000 0258 
                 ; 0000 0259     // Set up address registers
                 ; 0000 025A     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000593 940e 070b 	CALL SUBOPT_0x17
                 ; 0000 025B     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 025C 
                 ; 0000 025D     // Set up data register
                 ; 0000 025E     EEDR = value; // Write 0 to EEPROM
000595 81e8      	LD   R30,Y
000596 bbed      	OUT  0x1D,R30
                 ; 0000 025F 
                 ; 0000 0260     // Enable write
                 ; 0000 0261     EECR |= (1 << EEMWE); // Master write enable
000597 9ae2      	SBI  0x1C,2
                 ; 0000 0262     EECR |= (1 << EEWE);  // Start EEPROM write
000598 9ae1      	SBI  0x1C,1
                 ; 0000 0263 }
                 _0x20A0003:
000599 9623      	ADIW R28,3
00059a 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 0266 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0267     while (!(UCSRA & (1 << UDRE)))
00059b 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0xAC:
00059c 9b5d      	SBIS 0xB,5
                 ; 0000 0268         ;
00059d cffe      	RJMP _0xAC
                 ; 0000 0269     UDR = data;
00059e 81e8      	LD   R30,Y
00059f b9ec      	OUT  0xC,R30
                 ; 0000 026A }
                 _0x20A0002:
0005a0 9621      	ADIW R28,1
0005a1 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 026D {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 026E     UBRRL = (unsigned char)ubrr;
0005a2 93ba      	ST   -Y,R27
0005a3 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
0005a4 81e8      	LD   R30,Y
0005a5 b9e9      	OUT  0x9,R30
                 ; 0000 026F     UBRRH = (unsigned char)(ubrr >> 8);
0005a6 81e9      	LDD  R30,Y+1
0005a7 70f0      	ANDI R31,HIGH(0x0)
0005a8 bde0      	OUT  0x20,R30
                 ; 0000 0270     UCSRB = (1 << RXEN) | (1 << TXEN);
0005a9 e1e8      	LDI  R30,LOW(24)
0005aa b9ea      	OUT  0xA,R30
                 ; 0000 0271     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
0005ab e0e6      	LDI  R30,LOW(6)
0005ac bde0      	OUT  0x20,R30
                 ; 0000 0272 }
0005ad 9622      	ADIW R28,2
0005ae 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 0275 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 0276     unsigned char st_counts, i, j;
                 ; 0000 0277     char temp[32];
                 ; 0000 0278 
                 ; 0000 0279     st_counts = read_byte_from_eeprom(0x0);
0005af 97a0      	SBIW R28,32
0005b0 940e 074a 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
0005b2 940e 06b7 	CALL SUBOPT_0xB
0005b4 2f1e      	MOV  R17,R30
                 ; 0000 027A 
                 ; 0000 027B     for (i = 0; i < st_counts; i++)
0005b5 e000      	LDI  R16,LOW(0)
                 _0xB0:
0005b6 1701      	CP   R16,R17
0005b7 f5c0      	BRSH _0xB1
                 ; 0000 027C     {
                 ; 0000 027D         memset(temp, 0, 32);
0005b8 01fe      	MOVW R30,R28
0005b9 9634      	ADIW R30,4
0005ba 93fa      	ST   -Y,R31
0005bb 93ea      	ST   -Y,R30
0005bc e0e0      	LDI  R30,LOW(0)
0005bd 93ea      	ST   -Y,R30
0005be e2a0      	LDI  R26,LOW(32)
0005bf e0b0      	LDI  R27,0
0005c0 940e 0623 	CALL _memset
                 ; 0000 027E         for (j = 0; j < 8; j++)
0005c2 e030      	LDI  R19,LOW(0)
                 _0xB3:
0005c3 3038      	CPI  R19,8
0005c4 f4b8      	BRSH _0xB4
                 ; 0000 027F         {
                 ; 0000 0280             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0005c5 2fe3      	MOV  R30,R19
0005c6 e0f0      	LDI  R31,0
0005c7 01de      	MOVW R26,R28
0005c8 9614      	ADIW R26,4
0005c9 0fea      	ADD  R30,R26
0005ca 1ffb      	ADC  R31,R27
0005cb 93ff      	PUSH R31
0005cc 93ef      	PUSH R30
0005cd 2fa3      	MOV  R26,R19
0005ce 27bb      	CLR  R27
0005cf 2fe0      	MOV  R30,R16
0005d0 e0f0      	LDI  R31,0
0005d1 9631      	ADIW R30,1
0005d2 940e 0720 	CALL __LSLW3
0005d4 0fae      	ADD  R26,R30
0005d5 1fbf      	ADC  R27,R31
0005d6 dfad      	RCALL _read_byte_from_eeprom
0005d7 91af      	POP  R26
0005d8 91bf      	POP  R27
0005d9 93ec      	ST   X,R30
                 ; 0000 0281         }
0005da 5f3f      	SUBI R19,-1
0005db cfe7      	RJMP _0xB3
                 _0xB4:
                 ; 0000 0282         temp[j] = '\0';
0005dc 2fe3      	MOV  R30,R19
0005dd e0f0      	LDI  R31,0
0005de 01de      	MOVW R26,R28
0005df 9614      	ADIW R26,4
0005e0 0fae      	ADD  R26,R30
0005e1 1fbf      	ADC  R27,R31
0005e2 e0e0      	LDI  R30,LOW(0)
0005e3 93ec      	ST   X,R30
                 ; 0000 0283         if (strcmp(temp, buffer) == 0)
0005e4 01fe      	MOVW R30,R28
0005e5 9634      	ADIW R30,4
0005e6 940e 06a1 	CALL SUBOPT_0x8
0005e8 940e 0633 	CALL _strcmp
0005ea 30e0      	CPI  R30,0
0005eb f411      	BRNE _0xB5
                 ; 0000 0284             return 1;
0005ec e0e1      	LDI  R30,LOW(1)
0005ed c003      	RJMP _0x20A0001
                 ; 0000 0285     }
                 _0xB5:
0005ee 5f0f      	SUBI R16,-1
0005ef cfc6      	RJMP _0xB0
                 _0xB1:
                 ; 0000 0286 
                 ; 0000 0287     return 0;
0005f0 e0e0      	LDI  R30,LOW(0)
                 _0x20A0001:
0005f1 940e 0751 	CALL __LOADLOCR4
0005f3 96a4      	ADIW R28,36
0005f4 9508      	RET
                 ; 0000 0288 }
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0005f5 93ba      	ST   -Y,R27
0005f6 93aa      	ST   -Y,R26
0005f7 91a9          ld   r26,y+
0005f8 91b9          ld   r27,y+
0005f9 91e9          ld   r30,y+
0005fa 91f9          ld   r31,y+
0005fb 9630          adiw r30,0
0005fc f42a          brpl __itoa0
0005fd 95e0          com  r30
0005fe 95f0          com  r31
0005ff 9631          adiw r30,1
000600 e26d          ldi  r22,'-'
000601 936d          st   x+,r22
                 __itoa0:
000602 94e8          clt
000603 e180          ldi  r24,low(10000)
000604 e297          ldi  r25,high(10000)
000605 d00d          rcall __itoa1
000606 ee88          ldi  r24,low(1000)
000607 e093          ldi  r25,high(1000)
000608 d00a          rcall __itoa1
000609 e684          ldi  r24,100
00060a 2799          clr  r25
00060b d007          rcall __itoa1
00060c e08a          ldi  r24,10
00060d d005          rcall __itoa1
00060e 2f6e          mov  r22,r30
00060f d010          rcall __itoa5
000610 2766          clr  r22
000611 936c          st   x,r22
000612 9508          ret
                 
                 __itoa1:
000613 2766          clr	 r22
                 __itoa2:
000614 17e8          cp   r30,r24
000615 07f9          cpc  r31,r25
000616 f020          brlo __itoa3
000617 9563          inc  r22
000618 1be8          sub  r30,r24
000619 0bf9          sbc  r31,r25
00061a f7c9          brne __itoa2
                 __itoa3:
00061b 2366          tst  r22
00061c f411          brne __itoa4
00061d f016          brts __itoa5
00061e 9508          ret
                 __itoa4:
00061f 9468          set
                 __itoa5:
000620 5d60          subi r22,-0x30
000621 936d          st   x+,r22
000622 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000623 93ba      	ST   -Y,R27
000624 93aa      	ST   -Y,R26
000625 81b9          ldd  r27,y+1
000626 81a8          ld   r26,y
000627 9610          adiw r26,0
000628 f031          breq memset1
000629 81fc          ldd  r31,y+4
00062a 81eb          ldd  r30,y+3
00062b 816a          ldd  r22,y+2
                 memset0:
00062c 9361          st   z+,r22
00062d 9711          sbiw r26,1
00062e f7e9          brne memset0
                 memset1:
00062f 81eb          ldd  r30,y+3
000630 81fc          ldd  r31,y+4
000631 9625      	ADIW R28,5
000632 9508      	RET
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
000633 93ba      	ST   -Y,R27
000634 93aa      	ST   -Y,R26
000635 91e9          ld   r30,y+
000636 91f9          ld   r31,y+
000637 91a9          ld   r26,y+
000638 91b9          ld   r27,y+
                 strcmp0:
000639 916d          ld   r22,x+
00063a 9171          ld   r23,z+
00063b 1767          cp   r22,r23
00063c f421          brne strcmp1
00063d 2366          tst  r22
00063e f7d1          brne strcmp0
                 strcmp3:
00063f 27ee          clr  r30
000640 9508          ret
                 strcmp1:
000641 1b67          sub  r22,r23
000642 f3e1          breq strcmp3
000643 e0e1          ldi  r30,1
000644 f408          brcc strcmp2
000645 50e2          subi r30,2
                 strcmp2:
000646 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000647 93ba      	ST   -Y,R27
000648 93aa      	ST   -Y,R26
000649 91a9          ld   r26,y+
00064a 91b9          ld   r27,y+
00064b 27ee          clr  r30
00064c 27ff          clr  r31
                 strlen0:
00064d 916d          ld   r22,x+
00064e 2366          tst  r22
00064f f011          breq strlen1
000650 9631          adiw r30,1
000651 cffb          rjmp strlen0
                 strlen1:
000652 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000653 93aa      	ST   -Y,R26
000654 2766          clr  r22
000655 2777          clr  r23
000656 9189          ld   r24,y+
000657 91e9          ld   r30,y+
000658 91f9          ld   r31,y+
000659 91a9          ld   r26,y+
00065a 91b9          ld   r27,y+
                 strncmp0:
00065b 2388          tst  r24
00065c f049          breq strncmp1
00065d 958a          dec  r24
00065e 916d          ld   r22,x+
00065f 9171          ld   r23,z+
000660 1767          cp   r22,r23
000661 f421          brne strncmp1
000662 2366          tst  r22
000663 f7b9          brne strncmp0
                 strncmp3:
000664 27ee          clr  r30
000665 9508          ret
                 strncmp1:
000666 1b67          sub  r22,r23
000667 f3e1          breq strncmp3
000668 e0e1          ldi  r30,1
000669 f408          brcc strncmp2
00066a 50e2          subi r30,2
                 strncmp2:
00066b 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
00052f           	.BYTE 0x10
                 _buffer:
00053f           	.BYTE 0x20
                 __seed_G100:
00055f           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00066c e0e1      	LDI  R30,LOW(1)
00066d e0f0      	LDI  R31,HIGH(1)
00066e 15e4      	CP   R30,R4
00066f 05f5      	CPC  R31,R5
000670 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:93 WORDS
                 SUBOPT_0x1:
000671 e0a1      	LDI  R26,LOW(1)
000672 940e 04a3 	CALL _lcdCommand
000674 e0e1      	LDI  R30,LOW(1)
000675 93ea      	ST   -Y,R30
000676 e0a1      	LDI  R26,LOW(1)
000677 940c 04d4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x2:
000679 940e 04ec 	CALL _lcd_print
00067b e0e1      	LDI  R30,LOW(1)
00067c 93ea      	ST   -Y,R30
00067d e0a2      	LDI  R26,LOW(2)
00067e 940c 04d4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000680 e0e2      	LDI  R30,LOW(2)
000681 e0f0      	LDI  R31,HIGH(2)
000682 15e4      	CP   R30,R4
000683 05f5      	CPC  R31,R5
000684 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000685 e0af      	LDI  R26,LOW(15)
000686 940e 04a3 	CALL _lcdCommand
                +
000688 e880     +LDI R24 , LOW ( 3200 )
000689 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
00068a 9701     +SBIW R24 , 1
00068b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
00068c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00068d e0e3      	LDI  R30,LOW(3)
00068e e0f0      	LDI  R31,HIGH(3)
00068f 15e4      	CP   R30,R4
000690 05f5      	CPC  R31,R5
000691 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000692 e0e4      	LDI  R30,LOW(4)
000693 e0f0      	LDI  R31,HIGH(4)
000694 15e4      	CP   R30,R4
000695 05f5      	CPC  R31,R5
000696 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:29 WORDS
                 SUBOPT_0x7:
000697 e3ef      	LDI  R30,LOW(_buffer)
000698 e0f5      	LDI  R31,HIGH(_buffer)
000699 93fa      	ST   -Y,R31
00069a 93ea      	ST   -Y,R30
00069b e0e0      	LDI  R30,LOW(0)
00069c 93ea      	ST   -Y,R30
00069d e2a0      	LDI  R26,LOW(32)
00069e e0b0      	LDI  R27,0
00069f 940c 0623 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0006a1 93fa      	ST   -Y,R31
0006a2 93ea      	ST   -Y,R30
0006a3 e3af      	LDI  R26,LOW(_buffer)
0006a4 e0b5      	LDI  R27,HIGH(_buffer)
0006a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0006a6 e3af      	LDI  R26,LOW(_buffer)
0006a7 e0b5      	LDI  R27,HIGH(_buffer)
0006a8 940e 04ec 	CALL _lcd_print
0006aa eea8      	LDI  R26,LOW(1000)
0006ab e0b3      	LDI  R27,HIGH(1000)
0006ac 940c 0712 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0006ae 01f8      	MOVW R30,R16
0006af 9631      	ADIW R30,1
0006b0 940e 0720 	CALL __LSLW3
0006b2 0fe2      	ADD  R30,R18
0006b3 1ff3      	ADC  R31,R19
0006b4 01df      	MOVW R26,R30
0006b5 940c 0584 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
0006b7 e0a0      	LDI  R26,LOW(0)
0006b8 e0b0      	LDI  R27,0
0006b9 940c 0584 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
0006bb 940e 04ec 	CALL _lcd_print
0006bd eda0      	LDI  R26,LOW(2000)
0006be e0b7      	LDI  R27,HIGH(2000)
0006bf 940c 0712 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0006c1 e0e6      	LDI  R30,LOW(6)
0006c2 e0f0      	LDI  R31,HIGH(6)
0006c3 15e4      	CP   R30,R4
0006c4 05f5      	CPC  R31,R5
0006c5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0006c6 e0e7      	LDI  R30,LOW(7)
0006c7 e0f0      	LDI  R31,HIGH(7)
0006c8 15e4      	CP   R30,R4
0006c9 05f5      	CPC  R31,R5
0006ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xF:
0006cb 940e 04a3 	CALL _lcdCommand
                +
0006cd e880     +LDI R24 , LOW ( 3200 )
0006ce e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0006cf 9701     +SBIW R24 , 1
0006d0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0006d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
0006d2 bbe5      	OUT  0x15,R30
0006d3 b3e3      	IN   R30,0x13
0006d4 70ef      	ANDI R30,LOW(0xF)
0006d5 2f1e      	MOV  R17,R30
0006d6 301f      	CPI  R17,15
0006d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:150 WORDS
                 SUBOPT_0x11:
0006d8 2fe0      	MOV  R30,R16
0006d9 e2af      	LDI  R26,LOW(_keypad)
0006da e0b5      	LDI  R27,HIGH(_keypad)
0006db e0f0      	LDI  R31,0
0006dc 940e 0722 	CALL __LSLW2
0006de 0fae      	ADD  R26,R30
0006df 1fbf      	ADC  R27,R31
0006e0 27ee      	CLR  R30
0006e1 0fa3      	ADD  R26,R19
0006e2 1fbe      	ADC  R27,R30
0006e3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x12:
0006e4 e3af      	LDI  R26,LOW(_buffer)
0006e5 e0b5      	LDI  R27,HIGH(_buffer)
0006e6 940c 0647 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
                +
0006e8 5ce0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
0006e9 4ffa     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
0006ea e0a0      	LDI  R26,LOW(0)
0006eb 83a0      	STD  Z+0,R26
0006ec cfeb      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0006ed 93aa      	ST   -Y,R26
0006ee b3e8      	IN   R30,0x18
0006ef 70ef      	ANDI R30,LOW(0xF)
0006f0 2fae      	MOV  R26,R30
0006f1 81e8      	LD   R30,Y
0006f2 7fe0      	ANDI R30,LOW(0xF0)
0006f3 2bea      	OR   R30,R26
0006f4 bbe8      	OUT  0x18,R30
0006f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0006f6 98c1      	CBI  0x18,1
0006f7 9ac2      	SBI  0x18,2
                +
0006f8 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
0006f9 958a     +DEC R24
0006fa f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
0006fb 98c2      	CBI  0x18,2
0006fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x16:
0006fd b3e8      	IN   R30,0x18
0006fe 70ef      	ANDI R30,LOW(0xF)
0006ff 2fae      	MOV  R26,R30
000700 81e8      	LD   R30,Y
000701 95e2      	SWAP R30
000702 7fe0      	ANDI R30,0xF0
000703 2bea      	OR   R30,R26
000704 bbe8      	OUT  0x18,R30
000705 9ac2      	SBI  0x18,2
                +
000706 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000707 958a     +DEC R24
000708 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000709 98c2      	CBI  0x18,2
00070a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x17:
00070b 81ea      	LDD  R30,Y+2
00070c 70f0      	ANDI R31,HIGH(0x0)
00070d 70e3      	ANDI R30,LOW(0x3)
00070e bbef      	OUT  0x1F,R30
00070f 81e9      	LDD  R30,Y+1
000710 bbee      	OUT  0x1E,R30
000711 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000712 9610      	adiw r26,0
000713 f039      	breq __delay_ms1
                 __delay_ms0:
000714 95a8      	wdr
                +
000715 ed80     +LDI R24 , LOW ( 0x7D0 )
000716 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000717 9701     +SBIW R24 , 1
000718 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000719 9711      	sbiw r26,1
00071a f7c9      	brne __delay_ms0
                 __delay_ms1:
00071b 9508      	ret
                 
                 __ANEGW1:
00071c 95f1      	NEG  R31
00071d 95e1      	NEG  R30
00071e 40f0      	SBCI R31,0
00071f 9508      	RET
                 
                 __LSLW3:
000720 0fee      	LSL  R30
000721 1fff      	ROL  R31
                 __LSLW2:
000722 0fee      	LSL  R30
000723 1fff      	ROL  R31
000724 0fee      	LSL  R30
000725 1fff      	ROL  R31
000726 9508      	RET
                 
                 __DIVW21U:
000727 2400      	CLR  R0
000728 2411      	CLR  R1
000729 e190      	LDI  R25,16
                 __DIVW21U1:
00072a 0faa      	LSL  R26
00072b 1fbb      	ROL  R27
00072c 1c00      	ROL  R0
00072d 1c11      	ROL  R1
00072e 1a0e      	SUB  R0,R30
00072f 0a1f      	SBC  R1,R31
000730 f418      	BRCC __DIVW21U2
000731 0e0e      	ADD  R0,R30
000732 1e1f      	ADC  R1,R31
000733 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000734 60a1      	SBR  R26,1
                 __DIVW21U3:
000735 959a      	DEC  R25
000736 f799      	BRNE __DIVW21U1
000737 01fd      	MOVW R30,R26
000738 01d0      	MOVW R26,R0
000739 9508      	RET
                 
                 __MODW21:
00073a 94e8      	CLT
00073b ffb7      	SBRS R27,7
00073c c004      	RJMP __MODW211
00073d 95a0      	COM  R26
00073e 95b0      	COM  R27
00073f 9611      	ADIW R26,1
000740 9468      	SET
                 __MODW211:
000741 fdf7      	SBRC R31,7
000742 dfd9      	RCALL __ANEGW1
000743 dfe3      	RCALL __DIVW21U
000744 01fd      	MOVW R30,R26
000745 f40e      	BRTC __MODW212
000746 dfd5      	RCALL __ANEGW1
                 __MODW212:
000747 9508      	RET
                 
                 __SAVELOCR6:
000748 935a      	ST   -Y,R21
                 __SAVELOCR5:
000749 934a      	ST   -Y,R20
                 __SAVELOCR4:
00074a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00074b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00074c 931a      	ST   -Y,R17
00074d 930a      	ST   -Y,R16
00074e 9508      	RET
                 
                 __LOADLOCR6:
00074f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000750 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000751 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000752 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000753 8119      	LDD  R17,Y+1
000754 8108      	LD   R16,Y
000755 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  30 r1 :   7 r2 :   0 r3 :   0 r4 :  28 r5 :  18 r6 :   0 r7 :  11 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  24 r17:  35 r18:  14 r19:  21 r20:   7 r21:  12 r22:  27 r23:   9 
r24:  34 r25:  17 r26: 179 r27:  79 r28:  21 r29:   1 r30: 294 r31: 101 
x  :  37 y  : 125 z  :  11 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  13 add   :  14 
adiw  :  25 and   :   0 andi  :  13 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  26 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  62 brpl  :   1 brsh  :   6 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  : 135 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  30 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  21 cpc   :  26 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   9 inc   :   1 jmp   :  30 ld    :  64 ldd   :  23 ldi   : 267 
lds   :   0 lpm   :   7 lsl   :   4 lsr   :   0 mov   :  31 movw  :  33 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   5 
ori   :   0 out   :  31 pop   :   4 push  :   4 rcall :  39 ret   :  41 
reti  :   1 rjmp  :  75 rol   :   6 ror   :   0 sbc   :   2 sbci  :  11 
sbi   :  12 sbic  :   3 sbis  :   2 sbiw  :  22 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  75 std   :   4 sts   :   0 sub   :   4 subi  :  18 swap  :   1 
tst   :   7 wdr   :   1 
Instructions used: 61 out of 116 (52.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000eac   2904    852   3756   32768  11.5%
[.dseg] 0x000060 0x000563      0    771    771    2048  37.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 5 warnings
