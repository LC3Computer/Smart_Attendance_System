
AVRASM ver. 2.1.30  C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm Sat Dec 14 05:53:35 2024

C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R4
                 	.DEF _stage_msb=R5
                 	.DEF _page_num=R7
                 	.DEF _US_count=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0242 	JMP  __RESET
000002 940c 0371 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
00002c 3837
00002d 4f39
00002e 3534
00002f 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
000030 3231
000031 4333
000032 304c
000033 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0xEB:
000034 ffff      	.DB  0xFF,0xFF
                 _0x0:
000035 2031
000036 203a
000037 7553
000038 6d62      	.DB  0x31,0x20,0x3A,0x20,0x53,0x75,0x62,0x6D
000039 7469
00003a 5320
00003b 7574
00003c 6564      	.DB  0x69,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00003d 746e
00003e 4320
00003f 646f
000040 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
000041 2020
000042 2020
000043 7270
000044 7365      	.DB  0x20,0x20,0x20,0x20,0x70,0x72,0x65,0x73
000045 2073
000046 6163
000047 636e
000048 6c65      	.DB  0x73,0x20,0x63,0x61,0x6E,0x63,0x65,0x6C
000049 7420
00004a 206f
00004b 6162
00004c 6b63      	.DB  0x20,0x74,0x6F,0x20,0x62,0x61,0x63,0x6B
00004d 4500
00004e 746e
00004f 7265
000050 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000051 756f
000052 2072
000053 7473
000054 6475      	.DB  0x6F,0x75,0x72,0x20,0x73,0x74,0x75,0x64
000055 6e65
000056 2074
000057 6f63
000058 6564      	.DB  0x65,0x6E,0x74,0x20,0x63,0x6F,0x64,0x65
000059 003a
00005a 754e
00005b 626d
00005c 7265      	.DB  0x3A,0x0,0x4E,0x75,0x6D,0x62,0x65,0x72
00005d 6f20
00005e 2066
00005f 7473
000060 6475      	.DB  0x20,0x6F,0x66,0x20,0x73,0x74,0x75,0x64
000061 6e65
000062 7374
000063 3a20
000064 0020      	.DB  0x65,0x6E,0x74,0x73,0x20,0x3A,0x20,0x0
000065 7250
000066 7365
000067 2073
000068 6143      	.DB  0x50,0x72,0x65,0x73,0x73,0x20,0x43,0x61
000069 636e
00006a 6c65
00006b 5420
00006c 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x54,0x6F,0x20
00006d 6f47
00006e 4220
00006f 6361
000070 006b      	.DB  0x47,0x6F,0x20,0x42,0x61,0x63,0x6B,0x0
000071 7453
000072 7261
000073 2074
000074 7254      	.DB  0x53,0x74,0x61,0x72,0x74,0x20,0x54,0x72
000075 6e61
000076 6673
000077 7265
000078 6972      	.DB  0x61,0x6E,0x73,0x66,0x65,0x72,0x72,0x69
000079 676e
00007a 2e2e
00007b 002e
00007c 7355      	.DB  0x6E,0x67,0x2E,0x2E,0x2E,0x0,0x55,0x73
00007d 7261
00007e 2074
00007f 7254
000080 6e61      	.DB  0x61,0x72,0x74,0x20,0x54,0x72,0x61,0x6E
000081 6d73
000082 7469
000083 4620
000084 6e69      	.DB  0x73,0x6D,0x69,0x74,0x20,0x46,0x69,0x6E
000085 7369
000086 6568
000087 0064
000088 3a31      	.DB  0x69,0x73,0x68,0x65,0x64,0x0,0x31,0x3A
000089 5320
00008a 6165
00008b 6372
00008c 2068      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x20
00008d 7453
00008e 6475
00008f 6e65
000090 0074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x0
000091 3a32
000092 4420
000093 6c65
000094 7465      	.DB  0x32,0x3A,0x20,0x44,0x65,0x6C,0x65,0x74
000095 2065
000096 7453
000097 6475
000098 6e65      	.DB  0x65,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000099 0074
00009a 6e45
00009b 6574
00009c 2072      	.DB  0x74,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
00009d 7453
00009e 6475
00009f 6e65
0000a0 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000a1 6f43
0000a2 6564
0000a3 4620
0000a4 726f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x46,0x6F,0x72
0000a5 5320
0000a6 6165
0000a7 6372
0000a8 3a68      	.DB  0x20,0x53,0x65,0x61,0x72,0x63,0x68,0x3A
0000a9 4500
0000aa 746e
0000ab 7265
0000ac 5320      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x53
0000ad 7574
0000ae 6564
0000af 746e
0000b0 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0000b1 646f
0000b2 2065
0000b3 6f46
0000b4 2072      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x72,0x20
0000b5 6544
0000b6 656c
0000b7 6574
0000b8 003a      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x3A,0x0
0000b9 6c43
0000ba 6165
0000bb 6972
0000bc 676e      	.DB  0x43,0x6C,0x65,0x61,0x72,0x69,0x6E,0x67
0000bd 4520
0000be 5045
0000bf 4f52
0000c0 204d      	.DB  0x20,0x45,0x45,0x50,0x52,0x4F,0x4D,0x20
0000c1 2e2e
0000c2 002e
0000c3 3034
0000c4 4900      	.DB  0x2E,0x2E,0x2E,0x0,0x34,0x30,0x0,0x49
0000c5 636e
0000c6 726f
0000c7 6572
0000c8 7463      	.DB  0x6E,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
0000c9 5320
0000ca 7574
0000cb 6564
0000cc 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
0000cd 4320
0000ce 646f
0000cf 2065
0000d0 6f46      	.DB  0x20,0x43,0x6F,0x64,0x65,0x20,0x46,0x6F
0000d1 6d72
0000d2 7461
0000d3 5900
0000d4 756f      	.DB  0x72,0x6D,0x61,0x74,0x0,0x59,0x6F,0x75
0000d5 5720
0000d6 6c69
0000d7 206c
0000d8 6142      	.DB  0x20,0x57,0x69,0x6C,0x6C,0x20,0x42,0x61
0000d9 6b63
0000da 4d20
0000db 6e65
0000dc 2075      	.DB  0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75,0x20
0000dd 6e49
0000de 3220
0000df 5320
0000e0 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
0000e1 6e6f
0000e2 0064
0000e3 7544
0000e4 6c70      	.DB  0x6F,0x6E,0x64,0x0,0x44,0x75,0x70,0x6C
0000e5 6369
0000e6 7461
0000e7 2065
0000e8 7453      	.DB  0x69,0x63,0x61,0x74,0x65,0x20,0x53,0x74
0000e9 6475
0000ea 6e65
0000eb 2074
0000ec 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
0000ed 6564
0000ee 4520
0000ef 746e
0000f0 7265      	.DB  0x64,0x65,0x20,0x45,0x6E,0x74,0x65,0x72
0000f1 6465
0000f2 5300
0000f3 7574
0000f4 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
0000f5 746e
0000f6 4320
0000f7 646f
0000f8 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
0000f9 7553
0000fa 6363
0000fb 7365
0000fc 6673      	.DB  0x53,0x75,0x63,0x63,0x65,0x73,0x73,0x66
0000fd 6c75
0000fe 796c
0000ff 4120
000100 6464      	.DB  0x75,0x6C,0x6C,0x79,0x20,0x41,0x64,0x64
000101 6465
000102 5300
000103 7574
000104 6564      	.DB  0x65,0x64,0x0,0x53,0x74,0x75,0x64,0x65
000105 746e
000106 4320
000107 646f
000108 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000109 6f46
00010a 6e75
00010b 0064
00010c 6f59      	.DB  0x46,0x6F,0x75,0x6E,0x64,0x0,0x59,0x6F
00010d 2075
00010e 6957
00010f 6c6c
000110 4220      	.DB  0x75,0x20,0x57,0x69,0x6C,0x6C,0x20,0x42
000111 6361
000112 206b
000113 654d
000114 756e      	.DB  0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E,0x75
000115 4920
000116 206e
000117 2035
000118 6553      	.DB  0x20,0x49,0x6E,0x20,0x35,0x20,0x53,0x65
000119 6f63
00011a 646e
00011b 4f00
00011c 7370      	.DB  0x63,0x6F,0x6E,0x64,0x0,0x4F,0x70,0x73
00011d 2c20
00011e 5320
00011f 7574
000120 6564      	.DB  0x20,0x2C,0x20,0x53,0x74,0x75,0x64,0x65
000121 746e
000122 4320
000123 646f
000124 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000125 6f4e
000126 2074
000127 6f46
000128 6e75      	.DB  0x4E,0x6F,0x74,0x20,0x46,0x6F,0x75,0x6E
000129 0064
00012a 6157
00012b 7469
00012c 4620      	.DB  0x64,0x0,0x57,0x61,0x69,0x74,0x20,0x46
00012d 726f
00012e 4420
00012f 6c65
000130 7465      	.DB  0x6F,0x72,0x20,0x44,0x65,0x6C,0x65,0x74
000131 2e65
000132 2e2e
000133 5300
000134 7574      	.DB  0x65,0x2E,0x2E,0x2E,0x0,0x53,0x74,0x75
000135 6564
000136 746e
000137 4320
000138 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
000139 2065
00013a 6157
00013b 2073
00013c 6544      	.DB  0x65,0x20,0x57,0x61,0x73,0x20,0x44,0x65
00013d 656c
00013e 6574
00013f 0064
000140 6574      	.DB  0x6C,0x65,0x74,0x65,0x64,0x0,0x74,0x65
000141 706d
000142 7265
000143 7461
000144 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000145 2865
000146 2943
000147 003a
000148 3a31      	.DB  0x65,0x28,0x43,0x29,0x3A,0x0,0x31,0x3A
000149 4120
00014a 7474
00014b 6e65
00014c 6164      	.DB  0x20,0x41,0x74,0x74,0x65,0x6E,0x64,0x61
00014d 636e
00014e 2065
00014f 6e49
000150 7469      	.DB  0x6E,0x63,0x65,0x20,0x49,0x6E,0x69,0x74
000151 6169
000152 696c
000153 617a
000154 6974      	.DB  0x69,0x61,0x6C,0x69,0x7A,0x61,0x74,0x69
000155 6e6f
000156 3200
000157 203a
000158 7453      	.DB  0x6F,0x6E,0x0,0x32,0x3A,0x20,0x53,0x74
000159 6475
00015a 6e65
00015b 2074
00015c 614d      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x4D,0x61
00015d 616e
00015e 6567
00015f 656d
000160 746e      	.DB  0x6E,0x61,0x67,0x65,0x6D,0x65,0x6E,0x74
000161 3300
000162 203a
000163 6956
000164 7765      	.DB  0x0,0x33,0x3A,0x20,0x56,0x69,0x65,0x77
000165 5020
000166 6572
000167 6573
000168 746e      	.DB  0x20,0x50,0x72,0x65,0x73,0x65,0x6E,0x74
000169 5320
00016a 7574
00016b 6564
00016c 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
00016d 2073
00016e 3400
00016f 203a
000170 6554      	.DB  0x73,0x20,0x0,0x34,0x3A,0x20,0x54,0x65
000171 706d
000172 7265
000173 7461
000174 7275      	.DB  0x6D,0x70,0x65,0x72,0x61,0x74,0x75,0x72
000175 2065
000176 6f4d
000177 696e
000178 6f74      	.DB  0x65,0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F
000179 6972
00017a 676e
00017b 3500
00017c 203a      	.DB  0x72,0x69,0x6E,0x67,0x0,0x35,0x3A,0x20
00017d 6552
00017e 7274
00017f 6569
000180 6576      	.DB  0x52,0x65,0x74,0x72,0x69,0x65,0x76,0x65
000181 5320
000182 7574
000183 6564
000184 746e      	.DB  0x20,0x53,0x74,0x75,0x64,0x65,0x6E,0x74
000185 4420
000186 7461
000187 0061
000188 3a36      	.DB  0x20,0x44,0x61,0x74,0x61,0x0,0x36,0x3A
000189 5420
00018a 6172
00018b 6666
00018c 6369      	.DB  0x20,0x54,0x72,0x61,0x66,0x66,0x69,0x63
00018d 4d20
00018e 6e6f
00018f 7469
000190 726f      	.DB  0x20,0x4D,0x6F,0x6E,0x69,0x74,0x6F,0x72
000191 6e69
000192 0067
000193 6944
000194 7473      	.DB  0x69,0x6E,0x67,0x0,0x44,0x69,0x73,0x74
000195 6e61
000196 6563
000197 203a
000198 4500      	.DB  0x61,0x6E,0x63,0x65,0x3A,0x20,0x0,0x45
000199 7272
00019a 726f
00019b 4e00
00019c 206f      	.DB  0x72,0x72,0x6F,0x72,0x0,0x4E,0x6F,0x20
00019d 624f
00019e 7473
00019f 6361
0001a0 656c      	.DB  0x4F,0x62,0x73,0x74,0x61,0x63,0x6C,0x65
0001a1 2000
0001a2 6d63
0001a3 0020
0001a4 6f43      	.DB  0x0,0x20,0x63,0x6D,0x20,0x0,0x43,0x6F
0001a5 6e75
0001a6 3a74
0001a7 0020      	.DB  0x75,0x6E,0x74,0x3A,0x20,0x0
                 _0x2000060:
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1226): warning: .cseg .db misalignment - padding zero byte
0001a8 0001      	.DB  0x1
                 _0x2000000:
0001a9 4e2d
0001aa 4e41
0001ab 4900
0001ac 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\HP\Downloads\final_micro\attendance-avr\Debug\List\microFinalProjectCodes.asm(1229): warning: .cseg .db misalignment - padding zero byte
0001ad 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
0001ae 0004      	.DW  0x04
0001af 0004      	.DW  0x04
0001b0 0054      	.DW  __REG_VARS*2
                 
0001b1 0010      	.DW  0x10
0001b2 0619      	.DW  _keypad
0001b3 0058      	.DW  _0x3*2
                 
0001b4 0018      	.DW  0x18
0001b5 0260      	.DW  _0xA
0001b6 006a      	.DW  _0x0*2
                 
0001b7 0019      	.DW  0x19
0001b8 0278      	.DW  _0xA+24
0001b9 0082      	.DW  _0x0*2+24
                 
0001ba 0019      	.DW  0x19
0001bb 0291      	.DW  _0xA+49
0001bc 009b      	.DW  _0x0*2+49
                 
0001bd 0016      	.DW  0x16
0001be 02aa      	.DW  _0xA+74
0001bf 00b4      	.DW  _0x0*2+74
                 
0001c0 0018      	.DW  0x18
0001c1 02c0      	.DW  _0xA+96
0001c2 00ca      	.DW  _0x0*2+96
                 
0001c3 0016      	.DW  0x16
0001c4 02d8      	.DW  _0xA+120
0001c5 00e2      	.DW  _0x0*2+120
                 
0001c6 0018      	.DW  0x18
0001c7 02ee      	.DW  _0xA+142
0001c8 00f8      	.DW  _0x0*2+142
                 
0001c9 0012      	.DW  0x12
0001ca 0306      	.DW  _0xA+166
0001cb 0110      	.DW  _0x0*2+166
                 
0001cc 0012      	.DW  0x12
0001cd 0318      	.DW  _0xA+184
0001ce 0122      	.DW  _0x0*2+184
                 
0001cf 001f      	.DW  0x1F
0001d0 032a      	.DW  _0xA+202
0001d1 0134      	.DW  _0x0*2+202
                 
0001d2 001f      	.DW  0x1F
0001d3 0349      	.DW  _0xA+233
0001d4 0153      	.DW  _0x0*2+233
                 
0001d5 0014      	.DW  0x14
0001d6 0368      	.DW  _0x54
0001d7 0172      	.DW  _0x0*2+264
                 
0001d8 0002      	.DW  0x02
0001d9 037c      	.DW  _0x54+20
0001da 00c8      	.DW  _0x0*2+94
                 
0001db 0003      	.DW  0x03
0001dc 037e      	.DW  _0x54+22
0001dd 0186      	.DW  _0x0*2+284
                 
0001de 001e      	.DW  0x1E
0001df 0381      	.DW  _0x54+25
0001e0 0189      	.DW  _0x0*2+287
                 
0001e1 001f      	.DW  0x1F
0001e2 039f      	.DW  _0x54+55
0001e3 01a7      	.DW  _0x0*2+317
                 
0001e4 001f      	.DW  0x1F
0001e5 03be      	.DW  _0x54+86
0001e6 01c6      	.DW  _0x0*2+348
                 
0001e7 001f      	.DW  0x1F
0001e8 03dd      	.DW  _0x54+117
0001e9 01a7      	.DW  _0x0*2+317
                 
0001ea 0020      	.DW  0x20
0001eb 03fc      	.DW  _0x54+148
0001ec 01e5      	.DW  _0x0*2+379
                 
0001ed 001f      	.DW  0x1F
0001ee 041c      	.DW  _0x54+180
0001ef 01a7      	.DW  _0x0*2+317
                 
0001f0 0002      	.DW  0x02
0001f1 043b      	.DW  _0x54+211
0001f2 00c8      	.DW  _0x0*2+94
                 
0001f3 0013      	.DW  0x13
0001f4 043d      	.DW  _0x54+213
0001f5 0205      	.DW  _0x0*2+411
                 
0001f6 001f      	.DW  0x1F
0001f7 0450      	.DW  _0x54+232
0001f8 0218      	.DW  _0x0*2+430
                 
0001f9 001d      	.DW  0x1D
0001fa 046f      	.DW  _0x54+263
0001fb 0237      	.DW  _0x0*2+461
                 
0001fc 001f      	.DW  0x1F
0001fd 048c      	.DW  _0x54+292
0001fe 0218      	.DW  _0x0*2+430
                 
0001ff 0002      	.DW  0x02
000200 04ab      	.DW  _0x54+323
000201 00c8      	.DW  _0x0*2+94
                 
000202 0013      	.DW  0x13
000203 04ad      	.DW  _0x54+325
000204 0205      	.DW  _0x0*2+411
                 
000205 0013      	.DW  0x13
000206 04c0      	.DW  _0x54+344
000207 0254      	.DW  _0x0*2+490
                 
000208 0019      	.DW  0x19
000209 04d3      	.DW  _0x54+363
00020a 0267      	.DW  _0x0*2+509
                 
00020b 001f      	.DW  0x1F
00020c 04ec      	.DW  _0x54+388
00020d 01a7      	.DW  _0x0*2+317
                 
00020e 001d      	.DW  0x1D
00020f 050b      	.DW  _0x54+419
000210 0237      	.DW  _0x0*2+461
                 
000211 001f      	.DW  0x1F
000212 0528      	.DW  _0x54+448
000213 01a7      	.DW  _0x0*2+317
                 
000214 0010      	.DW  0x10
000215 0547      	.DW  _0xA2
000216 0280      	.DW  _0x0*2+534
                 
000217 0002      	.DW  0x02
000218 0557      	.DW  _0xA2+16
000219 00c8      	.DW  _0x0*2+94
                 
00021a 001d      	.DW  0x1D
00021b 0559      	.DW  _0xAE
00021c 0290      	.DW  _0x0*2+550
                 
00021d 0016      	.DW  0x16
00021e 0576      	.DW  _0xAE+29
00021f 02ad      	.DW  _0x0*2+579
                 
000220 001a      	.DW  0x1A
000221 058c      	.DW  _0xAE+51
000222 02c3      	.DW  _0x0*2+601
                 
000223 001a      	.DW  0x1A
000224 05a6      	.DW  _0xAE+77
000225 02dd      	.DW  _0x0*2+627
                 
000226 0019      	.DW  0x19
000227 05c0      	.DW  _0xAE+103
000228 02f7      	.DW  _0x0*2+653
                 
000229 0016      	.DW  0x16
00022a 05d9      	.DW  _0xAE+128
00022b 0310      	.DW  _0x0*2+678
                 
00022c 0002      	.DW  0x02
00022d 0649      	.DW  _previous_count_S0000013000
00022e 0068      	.DW  _0xEB*2
                 
00022f 000b      	.DW  0x0B
000230 05ef      	.DW  _0xEC
000231 0326      	.DW  _0x0*2+700
                 
000232 0006      	.DW  0x06
000233 05fa      	.DW  _0xEC+11
000234 0331      	.DW  _0x0*2+711
                 
000235 000c      	.DW  0x0C
000236 0600      	.DW  _0xEC+17
000237 0337      	.DW  _0x0*2+717
                 
000238 0005      	.DW  0x05
000239 060c      	.DW  _0xEC+29
00023a 0343      	.DW  _0x0*2+729
                 
00023b 0008      	.DW  0x08
00023c 0611      	.DW  _0xEC+34
00023d 0348      	.DW  _0x0*2+734
                 
00023e 0001      	.DW  0x01
00023f 064b      	.DW  __seed_G100
000240 0350      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
000241 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000242 94f8      	CLI
000243 27ee      	CLR  R30
000244 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000245 e0f1      	LDI  R31,1
000246 bffb      	OUT  GICR,R31
000247 bfeb      	OUT  GICR,R30
000248 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000249 e08d      	LDI  R24,(14-2)+1
00024a e0a2      	LDI  R26,2
00024b 27bb      	CLR  R27
                 __CLEAR_REG:
00024c 93ed      	ST   X+,R30
00024d 958a      	DEC  R24
00024e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00024f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000250 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000251 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000252 93ed      	ST   X+,R30
000253 9701      	SBIW R24,1
000254 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000255 e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000256 e0f3      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000257 9185      	LPM  R24,Z+
000258 9195      	LPM  R25,Z+
000259 9700      	SBIW R24,0
00025a f061      	BREQ __GLOBAL_INI_END
00025b 91a5      	LPM  R26,Z+
00025c 91b5      	LPM  R27,Z+
00025d 9005      	LPM  R0,Z+
00025e 9015      	LPM  R1,Z+
00025f 01bf      	MOVW R22,R30
000260 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000261 9005      	LPM  R0,Z+
000262 920d      	ST   X+,R0
000263 9701      	SBIW R24,1
000264 f7e1      	BRNE __GLOBAL_INI_LOOP
000265 01fb      	MOVW R30,R22
000266 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000267 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000268 bfed      	OUT  SPL,R30
000269 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00026a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00026b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00026c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00026d 940c 026f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;
                 ;#define LCD_PRT PORTB // LCD DATA PORT
                 ;#define LCD_DDR DDRB  // LCD DATA DDR
                 ;#define LCD_PIN PINB  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTC // keyboard PORT
                 ;#define KEY_DDR DDRC  // keyboard DDR
                 ;#define KEY_PIN PINC  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 3
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {'7', '8', '9', 'O',
                 ;                              '4', '5', '6', 'D',
                 ;                              '1', '2', '3', 'C',
                 ;                              'L', '0', 'R', 'E'};
                 
                 	.DSEG
                 ;
                 ;unsigned int stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 005B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 005C     int i, j;
                 ; 0000 005D     unsigned char st_counts;
                 ; 0000 005E     KEY_DDR = 0xF0;
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
00026f efe0      	LDI  R30,LOW(240)
000270 bbe4      	OUT  0x14,R30
                 ; 0000 005F     KEY_PRT = 0xFF;
000271 efef      	LDI  R30,LOW(255)
000272 bbe5      	OUT  0x15,R30
                 ; 0000 0060     KEY_PRT &= 0x0F;                  // ground all rows at once
000273 b3e5      	IN   R30,0x15
000274 70ef      	ANDI R30,LOW(0xF)
000275 bbe5      	OUT  0x15,R30
                 ; 0000 0061     MCUCR = 0x02;                     // make INT0 falling edge triggered
000276 e0e2      	LDI  R30,LOW(2)
000277 bfe5      	OUT  0x35,R30
                 ; 0000 0062     GICR = (1 << INT0);               // enable external interrupt 0
000278 e4e0      	LDI  R30,LOW(64)
000279 bfeb      	OUT  0x3B,R30
                 ; 0000 0063     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
00027a 9a8f      	SBI  0x11,7
                 ; 0000 0064     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
00027b 9897      	CBI  0x12,7
                 ; 0000 0065     USART_init(0x33);
00027c e3a3      	LDI  R26,LOW(51)
00027d e0b0      	LDI  R27,0
00027e d44c      	RCALL _USART_init
                 ; 0000 0066     HCSR04Init(); // Initialize ultrasonic sensor
00027f d4d1      	RCALL _HCSR04Init
                 ; 0000 0067     lcd_init();
000280 d355      	RCALL _lcd_init
                 ; 0000 0068 
                 ; 0000 0069 #asm("sei")           // enable interrupts
000281 9478      	sei
                 ; 0000 006A     lcdCommand(0x01); // clear LCD
000282 e0a1      	LDI  R26,LOW(1)
000283 d33e      	RCALL _lcdCommand
                 ; 0000 006B     while (1)
                 _0x4:
                 ; 0000 006C     {
                 ; 0000 006D         if (stage == STAGE_INIT_MENU)
000284 2c04      	MOV  R0,R4
000285 2805      	OR   R0,R5
000286 f411      	BRNE _0x7
                 ; 0000 006E         {
                 ; 0000 006F             show_menu();
000287 d3cb      	RCALL _show_menu
                 ; 0000 0070         }
                 ; 0000 0071         else if (stage == STAGE_ATTENDENC_MENU)
000288 c0e6      	RJMP _0x8
                 _0x7:
000289 940e 088e 	CALL SUBOPT_0x0
00028b f469      	BRNE _0x9
                 ; 0000 0072         {
                 ; 0000 0073             lcdCommand(0x01);
00028c 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0074             lcd_gotoxy(1, 1);
                 ; 0000 0075             lcd_print("1 : Submit Student Code");
                +
00028e e6a0     +LDI R26 , LOW ( _0xA + ( 0 ) )
00028f e0b2     +LDI R27 , HIGH ( _0xA + ( 0 ) )
                 	__POINTW2MN _0xA,0
000290 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0076             lcd_gotoxy(1, 2);
                 ; 0000 0077             lcd_print("    press cancel to back");
                +
000292 e7a8     +LDI R26 , LOW ( _0xA + ( 24 ) )
000293 e0b2     +LDI R27 , HIGH ( _0xA + ( 24 ) )
                 	__POINTW2MN _0xA,24
000294 d375      	RCALL _lcd_print
                 ; 0000 0078             while (stage == STAGE_ATTENDENC_MENU)
                 _0xB:
000295 940e 088e 	CALL SUBOPT_0x0
000297 f3e9      	BREQ _0xB
                 ; 0000 0079                 ;
                 ; 0000 007A         }
                 ; 0000 007B         else if (stage == STAGE_SUBMIT_CODE)
000298 c0d6      	RJMP _0xE
                 _0x9:
000299 940e 08a2 	CALL SUBOPT_0x3
00029b f471      	BRNE _0xF
                 ; 0000 007C         {
                 ; 0000 007D             lcdCommand(0x01);
00029c 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 007E             lcd_gotoxy(1, 1);
                 ; 0000 007F             lcd_print("Enter your student code:");
                +
00029e e9a1     +LDI R26 , LOW ( _0xA + ( 49 ) )
00029f e0b2     +LDI R27 , HIGH ( _0xA + ( 49 ) )
                 	__POINTW2MN _0xA,49
0002a0 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0080             lcd_gotoxy(1, 2);
                 ; 0000 0081             lcdCommand(0x0f);   // display on, cursor blinking
0002a2 940e 08a7 	CALL SUBOPT_0x4
                 ; 0000 0082             delay_us(100 * 16); // wait
                 ; 0000 0083             while (stage == STAGE_SUBMIT_CODE)
                 _0x10:
0002a4 940e 08a2 	CALL SUBOPT_0x3
0002a6 f3e9      	BREQ _0x10
                 ; 0000 0084                 ;
                 ; 0000 0085             lcdCommand(0x0c);   // display on, cursor off
0002a7 940e 08af 	CALL SUBOPT_0x5
                 ; 0000 0086             delay_us(100 * 16); // wait
                 ; 0000 0087         }
                 ; 0000 0088         else if (stage == STAGE_TEMPERATURE_MONITORING)
0002a9 c0c5      	RJMP _0x13
                 _0xF:
0002aa 940e 08b7 	CALL SUBOPT_0x6
0002ac f411      	BRNE _0x14
                 ; 0000 0089         {
                 ; 0000 008A             show_temperature();
0002ad d373      	RCALL _show_temperature
                 ; 0000 008B         }
                 ; 0000 008C         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0002ae c0c0      	RJMP _0x15
                 _0x14:
0002af 940e 08bc 	CALL SUBOPT_0x7
0002b1 f009      	BREQ PC+2
0002b2 c049      	RJMP _0x16
                 ; 0000 008D         {
                 ; 0000 008E             lcdCommand(0x01);
0002b3 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 008F             lcd_gotoxy(1, 1);
                 ; 0000 0090             lcd_print("Number of students : ");
                +
0002b5 eaaa     +LDI R26 , LOW ( _0xA + ( 74 ) )
0002b6 e0b2     +LDI R27 , HIGH ( _0xA + ( 74 ) )
                 	__POINTW2MN _0xA,74
0002b7 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0091             lcd_gotoxy(1, 2);
                 ; 0000 0092             st_counts = read_byte_from_eeprom(0x0);
0002b9 e0a0      	LDI  R26,LOW(0)
0002ba e0b0      	LDI  R27,0
0002bb d3f1      	RCALL _read_byte_from_eeprom
0002bc 2f5e      	MOV  R21,R30
                 ; 0000 0093             memset(buffer, 0, 32);
0002bd 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 0094             itoa(st_counts, buffer);
0002bf 2fe5      	MOV  R30,R21
0002c0 e0f0      	LDI  R31,0
0002c1 93fa      	ST   -Y,R31
0002c2 93ea      	ST   -Y,R30
0002c3 e2a9      	LDI  R26,LOW(_buffer)
0002c4 e0b6      	LDI  R27,HIGH(_buffer)
0002c5 940e 082b 	CALL _itoa
                 ; 0000 0095             lcd_print(buffer);
0002c7 940e 08cb 	CALL SUBOPT_0x9
                 ; 0000 0096             delay_ms(1000);
                 ; 0000 0097 
                 ; 0000 0098             for (i = 0; i < st_counts; i++)
                +
0002c9 e000     +LDI R16 , LOW ( 0 )
0002ca e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x18:
0002cb 2fe5      	MOV  R30,R21
0002cc 01d8      	MOVW R26,R16
0002cd e0f0      	LDI  R31,0
0002ce 17ae      	CP   R26,R30
0002cf 07bf      	CPC  R27,R31
0002d0 f514      	BRGE _0x19
                 ; 0000 0099             {
                 ; 0000 009A                 memset(buffer, 0, 32);
0002d1 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 009B                 for (j = 0; j < 8; j++)
                +
0002d3 e020     +LDI R18 , LOW ( 0 )
0002d4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x1B:
                +
0002d5 3028     +CPI R18 , LOW ( 8 )
0002d6 e0e0     +LDI R30 , HIGH ( 8 )
0002d7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0002d8 f46c      	BRGE _0x1C
                 ; 0000 009C                 {
                 ; 0000 009D                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0002d9 01f9      	MOVW R30,R18
0002da 5de7      	SUBI R30,LOW(-_buffer)
0002db 4ff9      	SBCI R31,HIGH(-_buffer)
0002dc 93ff      	PUSH R31
0002dd 93ef      	PUSH R30
0002de 940e 08d3 	CALL SUBOPT_0xA
0002e0 91af      	POP  R26
0002e1 91bf      	POP  R27
0002e2 93ec      	ST   X,R30
                 ; 0000 009E                 }
                +
0002e3 5f2f     +SUBI R18 , LOW ( - 1 )
0002e4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002e5 cfef      	RJMP _0x1B
                 _0x1C:
                 ; 0000 009F                 buffer[j] = '\0';
0002e6 e2a9      	LDI  R26,LOW(_buffer)
0002e7 e0b6      	LDI  R27,HIGH(_buffer)
0002e8 0fa2      	ADD  R26,R18
0002e9 1fb3      	ADC  R27,R19
0002ea e0e0      	LDI  R30,LOW(0)
0002eb 93ec      	ST   X,R30
                 ; 0000 00A0                 lcdCommand(0x01);
0002ec 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00A1                 lcd_gotoxy(1, 1);
                 ; 0000 00A2                 lcd_print(buffer);
0002ee 940e 08cb 	CALL SUBOPT_0x9
                 ; 0000 00A3                 delay_ms(1000);
                 ; 0000 00A4             }
                +
0002f0 5f0f     +SUBI R16 , LOW ( - 1 )
0002f1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0002f2 cfd8      	RJMP _0x18
                 _0x19:
                 ; 0000 00A5 
                 ; 0000 00A6             lcdCommand(0x01);
0002f3 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00A7             lcd_gotoxy(1, 1);
                 ; 0000 00A8             lcd_print("Press Cancel To Go Back");
                +
0002f5 eca0     +LDI R26 , LOW ( _0xA + ( 96 ) )
0002f6 e0b2     +LDI R27 , HIGH ( _0xA + ( 96 ) )
                 	__POINTW2MN _0xA,96
0002f7 d312      	RCALL _lcd_print
                 ; 0000 00A9             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x1D:
0002f8 940e 08bc 	CALL SUBOPT_0x7
0002fa f3e9      	BREQ _0x1D
                 ; 0000 00AA                 ;
                 ; 0000 00AB         }
                 ; 0000 00AC         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
0002fb c073      	RJMP _0x20
                 _0x16:
0002fc e0e5      	LDI  R30,LOW(5)
0002fd e0f0      	LDI  R31,HIGH(5)
0002fe 15e4      	CP   R30,R4
0002ff 05f5      	CPC  R31,R5
000300 f5b1      	BRNE _0x21
                 ; 0000 00AD         {
                 ; 0000 00AE             lcdCommand(0x01);
000301 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00AF             lcd_gotoxy(1, 1);
                 ; 0000 00B0             lcd_print("Start Transferring...");
                +
000303 eda8     +LDI R26 , LOW ( _0xA + ( 120 ) )
000304 e0b2     +LDI R27 , HIGH ( _0xA + ( 120 ) )
                 	__POINTW2MN _0xA,120
000305 d304      	RCALL _lcd_print
                 ; 0000 00B1             st_counts = read_byte_from_eeprom(0x0);
000306 940e 08dc 	CALL SUBOPT_0xB
000308 2f5e      	MOV  R21,R30
                 ; 0000 00B2             for (i = 0; i < st_counts; i++)
                +
000309 e000     +LDI R16 , LOW ( 0 )
00030a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x23:
00030b 2fe5      	MOV  R30,R21
00030c 01d8      	MOVW R26,R16
00030d e0f0      	LDI  R31,0
00030e 17ae      	CP   R26,R30
00030f 07bf      	CPC  R27,R31
000310 f494      	BRGE _0x24
                 ; 0000 00B3             {
                 ; 0000 00B4                 for (j = 0; j < 8; j++)
                +
000311 e020     +LDI R18 , LOW ( 0 )
000312 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x26:
                +
000313 3028     +CPI R18 , LOW ( 8 )
000314 e0e0     +LDI R30 , HIGH ( 8 )
000315 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000316 f43c      	BRGE _0x27
                 ; 0000 00B5                 {
                 ; 0000 00B6                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
000317 940e 08d3 	CALL SUBOPT_0xA
000319 2fae      	MOV  R26,R30
00031a d3a9      	RCALL _USART_Transmit
                 ; 0000 00B7                 }
                +
00031b 5f2f     +SUBI R18 , LOW ( - 1 )
00031c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00031d cff5      	RJMP _0x26
                 _0x27:
                 ; 0000 00B8 
                 ; 0000 00B9                 USART_Transmit('\r');
00031e 940e 08e0 	CALL SUBOPT_0xC
                 ; 0000 00BA                 USART_Transmit('\r');
                 ; 0000 00BB 
                 ; 0000 00BC                 delay_ms(500);
                 ; 0000 00BD             }
                +
000320 5f0f     +SUBI R16 , LOW ( - 1 )
000321 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000322 cfe8      	RJMP _0x23
                 _0x24:
                 ; 0000 00BE             for (j = 0; j < 8; j++)
                +
000323 e020     +LDI R18 , LOW ( 0 )
000324 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x29:
                +
000325 3028     +CPI R18 , LOW ( 8 )
000326 e0e0     +LDI R30 , HIGH ( 8 )
000327 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000328 f42c      	BRGE _0x2A
                 ; 0000 00BF             {
                 ; 0000 00C0                 USART_Transmit('=');
000329 e3ad      	LDI  R26,LOW(61)
00032a d399      	RCALL _USART_Transmit
                 ; 0000 00C1             }
                +
00032b 5f2f     +SUBI R18 , LOW ( - 1 )
00032c 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00032d cff7      	RJMP _0x29
                 _0x2A:
                 ; 0000 00C2 
                 ; 0000 00C3             USART_Transmit('\r');
00032e 940e 08e0 	CALL SUBOPT_0xC
                 ; 0000 00C4             USART_Transmit('\r');
                 ; 0000 00C5             delay_ms(500);
                 ; 0000 00C6 
                 ; 0000 00C7             lcdCommand(0x01);
000330 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00C8             lcd_gotoxy(1, 1);
                 ; 0000 00C9             lcd_print("Usart Transmit Finished");
                +
000332 eeae     +LDI R26 , LOW ( _0xA + ( 142 ) )
000333 e0b2     +LDI R27 , HIGH ( _0xA + ( 142 ) )
                 	__POINTW2MN _0xA,142
000334 940e 08ea 	CALL SUBOPT_0xD
                 ; 0000 00CA             delay_ms(2000);
                 ; 0000 00CB             stage = STAGE_INIT_MENU;
000336 c036      	RJMP _0xF7
                 ; 0000 00CC         }
                 ; 0000 00CD         else if (stage == STAGE_STUDENT_MANAGMENT)
                 _0x21:
000337 940e 08f0 	CALL SUBOPT_0xE
000339 f469      	BRNE _0x2C
                 ; 0000 00CE         {
                 ; 0000 00CF             lcdCommand(0x01);
00033a 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00D0             lcd_gotoxy(1, 1);
                 ; 0000 00D1             lcd_print("1: Search Student");
                +
00033c e0a6     +LDI R26 , LOW ( _0xA + ( 166 ) )
00033d e0b3     +LDI R27 , HIGH ( _0xA + ( 166 ) )
                 	__POINTW2MN _0xA,166
00033e 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 00D2             lcd_gotoxy(1, 2);
                 ; 0000 00D3             lcd_print("2: Delete Student");
                +
000340 e1a8     +LDI R26 , LOW ( _0xA + ( 184 ) )
000341 e0b3     +LDI R27 , HIGH ( _0xA + ( 184 ) )
                 	__POINTW2MN _0xA,184
000342 d2c7      	RCALL _lcd_print
                 ; 0000 00D4             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x2D:
000343 940e 08f0 	CALL SUBOPT_0xE
000345 f3e9      	BREQ _0x2D
                 ; 0000 00D5                 ;
                 ; 0000 00D6         }
                 ; 0000 00D7         else if (stage == STAGE_SEARCH_STUDENT)
000346 c028      	RJMP _0x30
                 _0x2C:
000347 940e 08f5 	CALL SUBOPT_0xF
000349 f471      	BRNE _0x31
                 ; 0000 00D8         {
                 ; 0000 00D9             lcdCommand(0x01);
00034a 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00DA             lcd_gotoxy(1, 1);
                 ; 0000 00DB             lcd_print("Enter Student Code For Search:");
                +
00034c e2aa     +LDI R26 , LOW ( _0xA + ( 202 ) )
00034d e0b3     +LDI R27 , HIGH ( _0xA + ( 202 ) )
                 	__POINTW2MN _0xA,202
00034e 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 00DC             lcd_gotoxy(1, 2);
                 ; 0000 00DD             lcdCommand(0x0f);   // display on, cursor blinking
000350 940e 08a7 	CALL SUBOPT_0x4
                 ; 0000 00DE             delay_us(100 * 16); // wait
                 ; 0000 00DF             while (stage == STAGE_SEARCH_STUDENT)
                 _0x32:
000352 940e 08f5 	CALL SUBOPT_0xF
000354 f3e9      	BREQ _0x32
                 ; 0000 00E0                 ;
                 ; 0000 00E1             lcdCommand(0x0c);   // display on, cursor off
000355 940e 08af 	CALL SUBOPT_0x5
                 ; 0000 00E2             delay_us(100 * 16); // wait
                 ; 0000 00E3         }
                 ; 0000 00E4         else if (stage == STAGE_DELETE_STUDENT)
000357 c017      	RJMP _0x35
                 _0x31:
000358 940e 08fa 	CALL SUBOPT_0x10
00035a f471      	BRNE _0x36
                 ; 0000 00E5         {
                 ; 0000 00E6             lcdCommand(0x01);
00035b 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 00E7             lcd_gotoxy(1, 1);
                 ; 0000 00E8             lcd_print("Enter Student Code For Delete:");
                +
00035d e4a9     +LDI R26 , LOW ( _0xA + ( 233 ) )
00035e e0b3     +LDI R27 , HIGH ( _0xA + ( 233 ) )
                 	__POINTW2MN _0xA,233
00035f 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 00E9             lcd_gotoxy(1, 2);
                 ; 0000 00EA             lcdCommand(0x0f);   // display on, cursor blinking
000361 940e 08a7 	CALL SUBOPT_0x4
                 ; 0000 00EB             delay_us(100 * 16); // wait
                 ; 0000 00EC             while (stage == STAGE_DELETE_STUDENT)
                 _0x37:
000363 940e 08fa 	CALL SUBOPT_0x10
000365 f3e9      	BREQ _0x37
                 ; 0000 00ED                 ;
                 ; 0000 00EE             lcdCommand(0x0c); // display on, cursor off
000366 940e 08af 	CALL SUBOPT_0x5
                 ; 0000 00EF             delay_us(100 * 16);
                 ; 0000 00F0         }
                 ; 0000 00F1         else if (stage == STAGE_TRAFFIC_MONITORING)
000368 c006      	RJMP _0x3A
                 _0x36:
000369 940e 08ff 	CALL SUBOPT_0x11
00036b f419      	BRNE _0x3B
                 ; 0000 00F2         {
                 ; 0000 00F3             startSonar();
00036c d43a      	RCALL _startSonar
                 ; 0000 00F4             stage = STAGE_INIT_MENU;
                 _0xF7:
00036d 2444      	CLR  R4
00036e 2455      	CLR  R5
                 ; 0000 00F5         }
                 ; 0000 00F6     }
                 _0x3B:
                 _0x3A:
                 _0x35:
                 _0x30:
                 _0x20:
                 _0x15:
                 _0x13:
                 _0xE:
                 _0x8:
00036f cf14      	RJMP _0x4
                 ; 0000 00F7 }
                 _0x3C:
000370 cfff      	RJMP _0x3C
                 ; .FEND
                 
                 	.DSEG
                 _0xA:
000260           	.BYTE 0x108
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 00FB {
                 
                 	.CSEG
                 _int0_routine:
                 ; .FSTART _int0_routine
000371 920a      	ST   -Y,R0
000372 921a      	ST   -Y,R1
000373 92fa      	ST   -Y,R15
000374 936a      	ST   -Y,R22
000375 937a      	ST   -Y,R23
000376 938a      	ST   -Y,R24
000377 939a      	ST   -Y,R25
000378 93aa      	ST   -Y,R26
000379 93ba      	ST   -Y,R27
00037a 93ea      	ST   -Y,R30
00037b 93fa      	ST   -Y,R31
00037c b7ef      	IN   R30,SREG
00037d 93ea      	ST   -Y,R30
                 ; 0000 00FC     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 00FD     int i;
                 ; 0000 00FE 
                 ; 0000 00FF     // detect the key
                 ; 0000 0100     while (1)
00037e 9722      	SBIW R28,2
00037f 940e 0b5a 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 0101     {
                 ; 0000 0102         KEY_PRT = 0xEF;            // ground row 0
000381 eeef      	LDI  R30,LOW(239)
000382 940e 0904 	CALL SUBOPT_0x12
                 ; 0000 0103         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0104         if (colloc != 0x0F)        // column detected
000384 f011      	BREQ _0x40
                 ; 0000 0105         {
                 ; 0000 0106             rowloc = 0; // save row location
000385 e000      	LDI  R16,LOW(0)
                 ; 0000 0107             break;      // exit while loop
000386 c012      	RJMP _0x3F
                 ; 0000 0108         }
                 ; 0000 0109         KEY_PRT = 0xDF;            // ground row 1
                 _0x40:
000387 edef      	LDI  R30,LOW(223)
000388 940e 0904 	CALL SUBOPT_0x12
                 ; 0000 010A         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 010B         if (colloc != 0x0F)        // column detected
00038a f011      	BREQ _0x41
                 ; 0000 010C         {
                 ; 0000 010D             rowloc = 1; // save row location
00038b e001      	LDI  R16,LOW(1)
                 ; 0000 010E             break;      // exit while loop
00038c c00c      	RJMP _0x3F
                 ; 0000 010F         }
                 ; 0000 0110         KEY_PRT = 0xBF;            // ground row 2
                 _0x41:
00038d ebef      	LDI  R30,LOW(191)
00038e 940e 0904 	CALL SUBOPT_0x12
                 ; 0000 0111         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 0112         if (colloc != 0x0F)        // column detected
000390 f011      	BREQ _0x42
                 ; 0000 0113         {
                 ; 0000 0114             rowloc = 2; // save row location
000391 e002      	LDI  R16,LOW(2)
                 ; 0000 0115             break;      // exit while loop
000392 c006      	RJMP _0x3F
                 ; 0000 0116         }
                 ; 0000 0117         KEY_PRT = 0x7F;            // ground row 3
                 _0x42:
000393 e7ef      	LDI  R30,LOW(127)
000394 bbe5      	OUT  0x15,R30
                 ; 0000 0118         colloc = (KEY_PIN & 0x0F); // read the columns
000395 b3e3      	IN   R30,0x13
000396 70ef      	ANDI R30,LOW(0xF)
000397 2f1e      	MOV  R17,R30
                 ; 0000 0119         rowloc = 3;                // save row location
000398 e003      	LDI  R16,LOW(3)
                 ; 0000 011A         break;                     // exit while loop
                 ; 0000 011B     }
                 _0x3F:
                 ; 0000 011C     // check column and send result to Port D
                 ; 0000 011D     if (colloc == 0x0E)
000399 301e      	CPI  R17,14
00039a f411      	BRNE _0x43
                 ; 0000 011E         cl = 0;
00039b e030      	LDI  R19,LOW(0)
                 ; 0000 011F     else if (colloc == 0x0D)
00039c c009      	RJMP _0x44
                 _0x43:
00039d 301d      	CPI  R17,13
00039e f411      	BRNE _0x45
                 ; 0000 0120         cl = 1;
00039f e031      	LDI  R19,LOW(1)
                 ; 0000 0121     else if (colloc == 0x0B)
0003a0 c005      	RJMP _0x46
                 _0x45:
0003a1 301b      	CPI  R17,11
0003a2 f411      	BRNE _0x47
                 ; 0000 0122         cl = 2;
0003a3 e032      	LDI  R19,LOW(2)
                 ; 0000 0123     else
0003a4 c001      	RJMP _0x48
                 _0x47:
                 ; 0000 0124         cl = 3;
0003a5 e033      	LDI  R19,LOW(3)
                 ; 0000 0125 
                 ; 0000 0126     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x48:
                 _0x46:
                 _0x44:
0003a6 b3e5      	IN   R30,0x15
0003a7 70ef      	ANDI R30,LOW(0xF)
0003a8 bbe5      	OUT  0x15,R30
                 ; 0000 0127 
                 ; 0000 0128     // inside menu level 1
                 ; 0000 0129     if (stage == STAGE_INIT_MENU)
0003a9 2c04      	MOV  R0,R4
0003aa 2805      	OR   R0,R5
0003ab f009      	BREQ PC+2
0003ac c060      	RJMP _0x49
                 ; 0000 012A     {
                 ; 0000 012B         switch (keypad[rowloc][cl] - '0')
0003ad 940e 090a 	CALL SUBOPT_0x13
0003af 91ec      	LD   R30,X
0003b0 e0f0      	LDI  R31,0
0003b1 97f0      	SBIW R30,48
                 ; 0000 012C         {
                 ; 0000 012D         case OPTION_ATTENDENCE:
0003b2 30e1      	CPI  R30,LOW(0x1)
0003b3 e0a0      	LDI  R26,HIGH(0x1)
0003b4 07fa      	CPC  R31,R26
0003b5 f421      	BRNE _0x4D
                 ; 0000 012E             stage = STAGE_ATTENDENC_MENU;
0003b6 e0e1      	LDI  R30,LOW(1)
0003b7 e0f0      	LDI  R31,HIGH(1)
0003b8 012f      	MOVW R4,R30
                 ; 0000 012F             break;
0003b9 c036      	RJMP _0x4C
                 ; 0000 0130 
                 ; 0000 0131         case OPTION_TEMPERATURE_MONITORING:
                 _0x4D:
0003ba 30e4      	CPI  R30,LOW(0x4)
0003bb e0a0      	LDI  R26,HIGH(0x4)
0003bc 07fa      	CPC  R31,R26
0003bd f421      	BRNE _0x4E
                 ; 0000 0132             stage = STAGE_TEMPERATURE_MONITORING;
0003be e0e3      	LDI  R30,LOW(3)
0003bf e0f0      	LDI  R31,HIGH(3)
0003c0 012f      	MOVW R4,R30
                 ; 0000 0133             break;
0003c1 c02e      	RJMP _0x4C
                 ; 0000 0134         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x4E:
0003c2 30e3      	CPI  R30,LOW(0x3)
0003c3 e0a0      	LDI  R26,HIGH(0x3)
0003c4 07fa      	CPC  R31,R26
0003c5 f421      	BRNE _0x4F
                 ; 0000 0135             stage = STAGE_VIEW_PRESENT_STUDENTS;
0003c6 e0e4      	LDI  R30,LOW(4)
0003c7 e0f0      	LDI  R31,HIGH(4)
0003c8 012f      	MOVW R4,R30
                 ; 0000 0136             break;
0003c9 c026      	RJMP _0x4C
                 ; 0000 0137         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x4F:
0003ca 30e5      	CPI  R30,LOW(0x5)
0003cb e0a0      	LDI  R26,HIGH(0x5)
0003cc 07fa      	CPC  R31,R26
0003cd f421      	BRNE _0x50
                 ; 0000 0138             stage = STAGE_RETRIEVE_STUDENT_DATA;
0003ce e0e5      	LDI  R30,LOW(5)
0003cf e0f0      	LDI  R31,HIGH(5)
0003d0 012f      	MOVW R4,R30
                 ; 0000 0139             break;
0003d1 c01e      	RJMP _0x4C
                 ; 0000 013A         case OPTION_STUDENT_MANAGEMENT:
                 _0x50:
0003d2 30e2      	CPI  R30,LOW(0x2)
0003d3 e0a0      	LDI  R26,HIGH(0x2)
0003d4 07fa      	CPC  R31,R26
0003d5 f421      	BRNE _0x51
                 ; 0000 013B             stage = STAGE_STUDENT_MANAGMENT;
0003d6 e0e6      	LDI  R30,LOW(6)
0003d7 e0f0      	LDI  R31,HIGH(6)
0003d8 012f      	MOVW R4,R30
                 ; 0000 013C             break;
0003d9 c016      	RJMP _0x4C
                 ; 0000 013D         case OPTION_TRAFFIC_MONITORING:
                 _0x51:
0003da 30e6      	CPI  R30,LOW(0x6)
0003db e0a0      	LDI  R26,HIGH(0x6)
0003dc 07fa      	CPC  R31,R26
0003dd f421      	BRNE _0x52
                 ; 0000 013E             stage = STAGE_TRAFFIC_MONITORING;
0003de e0e9      	LDI  R30,LOW(9)
0003df e0f0      	LDI  R31,HIGH(9)
0003e0 012f      	MOVW R4,R30
                 ; 0000 013F             break;
0003e1 c00e      	RJMP _0x4C
                 ; 0000 0140         case 9:
                 _0x52:
0003e2 30e9      	CPI  R30,LOW(0x9)
0003e3 e0a0      	LDI  R26,HIGH(0x9)
0003e4 07fa      	CPC  R31,R26
0003e5 f451      	BRNE _0x55
                 ; 0000 0141 #asm("cli") // disable interrupts
0003e6 94f8      	cli
                 ; 0000 0142 
                 ; 0000 0143             lcdCommand(0x1);
0003e7 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0144             lcd_gotoxy(1, 1);
                 ; 0000 0145             lcd_print("Clearing EEPROM ...");
                +
0003e9 e6a8     +LDI R26 , LOW ( _0x54 + ( 0 ) )
0003ea e0b3     +LDI R27 , HIGH ( _0x54 + ( 0 ) )
                 	__POINTW2MN _0x54,0
0003eb d21e      	RCALL _lcd_print
                 ; 0000 0146             clear_eeprom();
0003ec d2a6      	RCALL _clear_eeprom
                 ; 0000 0147 #asm("sei") // enable interrupts
0003ed 9478      	sei
                 ; 0000 0148             stage = STAGE_INIT_MENU;
0003ee 2444      	CLR  R4
0003ef 2455      	CLR  R5
                 ; 0000 0149         default:
                 _0x55:
                 ; 0000 014A             break;
                 ; 0000 014B         }
                 _0x4C:
                 ; 0000 014C 
                 ; 0000 014D         if (keypad[rowloc][cl] == 'L')
0003f0 940e 090a 	CALL SUBOPT_0x13
0003f2 91ac      	LD   R26,X
0003f3 34ac      	CPI  R26,LOW(0x4C)
0003f4 f449      	BRNE _0x56
                 ; 0000 014E         {
                 ; 0000 014F             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0003f5 e0e0      	LDI  R30,LOW(0)
0003f6 15e7      	CP   R30,R7
0003f7 f420      	BRSH _0x57
0003f8 2de7      	MOV  R30,R7
0003f9 e0f0      	LDI  R31,0
0003fa 9731      	SBIW R30,1
0003fb c001      	RJMP _0x58
                 _0x57:
0003fc e0e2      	LDI  R30,LOW(2)
                 _0x58:
0003fd 2e7e      	MOV  R7,R30
                 ; 0000 0150         }
                 ; 0000 0151         if (keypad[rowloc][cl] == 'R')
                 _0x56:
0003fe 940e 090a 	CALL SUBOPT_0x13
000400 91ac      	LD   R26,X
000401 35a2      	CPI  R26,LOW(0x52)
000402 f449      	BRNE _0x5A
                 ; 0000 0152         {
                 ; 0000 0153             page_num = (page_num + 1) % MENU_PAGE_COUNT;
000403 2de7      	MOV  R30,R7
000404 e0f0      	LDI  R31,0
000405 9631      	ADIW R30,1
000406 01df      	MOVW R26,R30
000407 e0e3      	LDI  R30,LOW(3)
000408 e0f0      	LDI  R31,HIGH(3)
000409 940e 0b3d 	CALL __MODW21
00040b 2e7e      	MOV  R7,R30
                 ; 0000 0154         }
                 ; 0000 0155     }
                 _0x5A:
                 ; 0000 0156     else if (stage == STAGE_ATTENDENC_MENU)
00040c c1a4      	RJMP _0x5B
                 _0x49:
00040d 940e 088e 	CALL SUBOPT_0x0
00040f f4a9      	BRNE _0x5C
                 ; 0000 0157     {
                 ; 0000 0158         switch (keypad[rowloc][cl])
000410 940e 090a 	CALL SUBOPT_0x13
000412 91ec      	LD   R30,X
000413 e0f0      	LDI  R31,0
                 ; 0000 0159         {
                 ; 0000 015A         case 'C':
000414 34e3      	CPI  R30,LOW(0x43)
000415 e0a0      	LDI  R26,HIGH(0x43)
000416 07fa      	CPC  R31,R26
000417 f419      	BRNE _0x60
                 ; 0000 015B             stage = STAGE_INIT_MENU;
000418 2444      	CLR  R4
000419 2455      	CLR  R5
                 ; 0000 015C             break;
00041a c009      	RJMP _0x5F
                 ; 0000 015D         case '1':
                 _0x60:
00041b 33e1      	CPI  R30,LOW(0x31)
00041c e0a0      	LDI  R26,HIGH(0x31)
00041d 07fa      	CPC  R31,R26
00041e f429      	BRNE _0x62
                 ; 0000 015E             memset(buffer, 0, 32);
00041f 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 015F             stage = STAGE_SUBMIT_CODE;
000421 e0e2      	LDI  R30,LOW(2)
000422 e0f0      	LDI  R31,HIGH(2)
000423 012f      	MOVW R4,R30
                 ; 0000 0160             break;
                 ; 0000 0161         default:
                 _0x62:
                 ; 0000 0162             break;
                 ; 0000 0163         }
                 _0x5F:
                 ; 0000 0164     }
                 ; 0000 0165     else if (stage == STAGE_SUBMIT_CODE)
000424 c18c      	RJMP _0x63
                 _0x5C:
000425 940e 08a2 	CALL SUBOPT_0x3
000427 f009      	BREQ PC+2
000428 c09a      	RJMP _0x64
                 ; 0000 0166     {
                 ; 0000 0167 
                 ; 0000 0168         if ((keypad[rowloc][cl] - '0') < 10)
000429 940e 090a 	CALL SUBOPT_0x13
00042b 91ec      	LD   R30,X
00042c e0f0      	LDI  R31,0
00042d 97fa      	SBIW R30,58
00042e f47c      	BRGE _0x65
                 ; 0000 0169         {
                 ; 0000 016A             if (strlen(buffer) <= 30)
00042f 940e 0916 	CALL SUBOPT_0x14
000431 977f      	SBIW R30,31
000432 f450      	BRSH _0x66
                 ; 0000 016B             {
                 ; 0000 016C                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000433 940e 0916 	CALL SUBOPT_0x14
000435 940e 091a 	CALL SUBOPT_0x15
000437 940e 091e 	CALL SUBOPT_0x16
                 ; 0000 016D                 buffer[strlen(buffer) + 1] = '\0';
000439 940e 0922 	CALL SUBOPT_0x17
                 ; 0000 016E                 lcdData(keypad[rowloc][cl]);
00043b 91ac      	LD   R26,X
00043c d191      	RCALL _lcdData
                 ; 0000 016F             }
                 ; 0000 0170         }
                 _0x66:
                 ; 0000 0171         else if (keypad[rowloc][cl] == 'D')
00043d c084      	RJMP _0x67
                 _0x65:
00043e 940e 090a 	CALL SUBOPT_0x13
000440 91ac      	LD   R26,X
000441 34a4      	CPI  R26,LOW(0x44)
000442 f461      	BRNE _0x68
                 ; 0000 0172         {
                 ; 0000 0173             buffer_len = strlen(buffer);
000443 940e 0916 	CALL SUBOPT_0x14
000445 2f5e      	MOV  R21,R30
                 ; 0000 0174             if (buffer_len > 0)
000446 3051      	CPI  R21,1
000447 f030      	BRLO _0x69
                 ; 0000 0175             {
                 ; 0000 0176                 buffer[buffer_len - 1] = '\0';
000448 940e 0927 	CALL SUBOPT_0x18
                 ; 0000 0177                 lcdCommand(0x10);
                 ; 0000 0178                 lcd_print(" ");
                +
00044a e7ac     +LDI R26 , LOW ( _0x54 + ( 20 ) )
00044b e0b3     +LDI R27 , HIGH ( _0x54 + ( 20 ) )
                 	__POINTW2MN _0x54,20
00044c 940e 0931 	CALL SUBOPT_0x19
                 ; 0000 0179                 lcdCommand(0x10);
                 ; 0000 017A             }
                 ; 0000 017B         }
                 _0x69:
                 ; 0000 017C         else if (keypad[rowloc][cl] == 'E')
00044e c073      	RJMP _0x6A
                 _0x68:
00044f 940e 090a 	CALL SUBOPT_0x13
000451 91ac      	LD   R26,X
000452 34a5      	CPI  R26,LOW(0x45)
000453 f009      	BREQ PC+2
000454 c065      	RJMP _0x6B
                 ; 0000 017D         {
                 ; 0000 017E 
                 ; 0000 017F #asm("cli")
000455 94f8      	cli
                 ; 0000 0180 
                 ; 0000 0181             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 0182                 strlen(buffer) != 8)
000456 e2e9      	LDI  R30,LOW(_buffer)
000457 e0f6      	LDI  R31,HIGH(_buffer)
000458 93fa      	ST   -Y,R31
000459 93ea      	ST   -Y,R30
                +
00045a e7ee     +LDI R30 , LOW ( _0x54 + ( 22 ) )
00045b e0f3     +LDI R31 , HIGH ( _0x54 + ( 22 ) )
                 	__POINTW1MN _0x54,22
00045c 93fa      	ST   -Y,R31
00045d 93ea      	ST   -Y,R30
00045e e0a2      	LDI  R26,LOW(2)
00045f 940e 0875 	CALL _strncmp
000461 30e0      	CPI  R30,0
000462 f431      	BRNE _0x6D
000463 940e 0916 	CALL SUBOPT_0x14
000465 30e8      	CPI  R30,LOW(0x8)
000466 e0a0      	LDI  R26,HIGH(0x8)
000467 07fa      	CPC  R31,R26
000468 f069      	BREQ _0x6C
                 _0x6D:
                 ; 0000 0183             {
                 ; 0000 0184 
                 ; 0000 0185                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000469 9a97      	SBI  0x12,7
                 ; 0000 0186                 lcdCommand(0x01);
00046a 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0187                 lcd_gotoxy(1, 1);
                 ; 0000 0188                 lcd_print("Incorrect Student Code Format");
                +
00046c e8a1     +LDI R26 , LOW ( _0x54 + ( 25 ) )
00046d e0b3     +LDI R27 , HIGH ( _0x54 + ( 25 ) )
                 	__POINTW2MN _0x54,25
00046e 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0189                 lcd_gotoxy(1, 2);
                 ; 0000 018A                 lcd_print("You Will Back Menu In 2 Second");
                +
000470 e9af     +LDI R26 , LOW ( _0x54 + ( 55 ) )
000471 e0b3     +LDI R27 , HIGH ( _0x54 + ( 55 ) )
                 	__POINTW2MN _0x54,55
000472 940e 08ea 	CALL SUBOPT_0xD
                 ; 0000 018B                 delay_ms(2000);
                 ; 0000 018C                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
000474 9897      	CBI  0x12,7
                 ; 0000 018D             }
                 ; 0000 018E             else if (search_student_code() > 0)
000475 c040      	RJMP _0x6F
                 _0x6C:
000476 d261      	RCALL _search_student_code
000477 30e1      	CPI  R30,LOW(0x1)
000478 f068      	BRLO _0x70
                 ; 0000 018F             {
                 ; 0000 0190                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000479 9a97      	SBI  0x12,7
                 ; 0000 0191                 lcdCommand(0x01);
00047a 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0192                 lcd_gotoxy(1, 1);
                 ; 0000 0193                 lcd_print("Duplicate Student Code Entered");
                +
00047c ebae     +LDI R26 , LOW ( _0x54 + ( 86 ) )
00047d e0b3     +LDI R27 , HIGH ( _0x54 + ( 86 ) )
                 	__POINTW2MN _0x54,86
00047e 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0194                 lcd_gotoxy(1, 2);
                 ; 0000 0195                 lcd_print("You Will Back Menu In 2 Second");
                +
000480 edad     +LDI R26 , LOW ( _0x54 + ( 117 ) )
000481 e0b3     +LDI R27 , HIGH ( _0x54 + ( 117 ) )
                 	__POINTW2MN _0x54,117
000482 940e 08ea 	CALL SUBOPT_0xD
                 ; 0000 0196                 delay_ms(2000);
                 ; 0000 0197                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
000484 9897      	CBI  0x12,7
                 ; 0000 0198             }
                 ; 0000 0199             else
000485 c030      	RJMP _0x71
                 _0x70:
                 ; 0000 019A             {
                 ; 0000 019B                 // save the buffer to EEPROM
                 ; 0000 019C                 st_counts = read_byte_from_eeprom(0x0);
000486 940e 08dc 	CALL SUBOPT_0xB
000488 2f2e      	MOV  R18,R30
                 ; 0000 019D                 for (i = 0; i < 8; i++)
000489 e0e0      	LDI  R30,LOW(0)
00048a 83ee      	STD  Y+6,R30
00048b 83ef      	STD  Y+6+1,R30
                 _0x73:
00048c 81ae      	LDD  R26,Y+6
00048d 81bf      	LDD  R27,Y+6+1
00048e 9718      	SBIW R26,8
00048f f4ac      	BRGE _0x74
                 ; 0000 019E                 {
                 ; 0000 019F                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000490 2fe2      	MOV  R30,R18
000491 940e 0936 	CALL SUBOPT_0x1A
000493 81ae      	LDD  R26,Y+6
000494 81bf      	LDD  R27,Y+6+1
000495 0fea      	ADD  R30,R26
000496 1ffb      	ADC  R31,R27
000497 93fa      	ST   -Y,R31
000498 93ea      	ST   -Y,R30
000499 85e8      	LDD  R30,Y+8
00049a 85f9      	LDD  R31,Y+8+1
00049b 5de7      	SUBI R30,LOW(-_buffer)
00049c 4ff9      	SBCI R31,HIGH(-_buffer)
00049d 81a0      	LD   R26,Z
00049e d21a      	RCALL _write_byte_to_eeprom
                 ; 0000 01A0                 }
00049f 81ee      	LDD  R30,Y+6
0004a0 81ff      	LDD  R31,Y+6+1
0004a1 9631      	ADIW R30,1
0004a2 83ee      	STD  Y+6,R30
0004a3 83ff      	STD  Y+6+1,R31
0004a4 cfe7      	RJMP _0x73
                 _0x74:
                 ; 0000 01A1                 write_byte_to_eeprom(0x0, st_counts + 1);
0004a5 e0e0      	LDI  R30,LOW(0)
0004a6 e0f0      	LDI  R31,HIGH(0)
0004a7 93fa      	ST   -Y,R31
0004a8 93ea      	ST   -Y,R30
0004a9 2fa2      	MOV  R26,R18
0004aa 5faf      	SUBI R26,-LOW(1)
0004ab d20d      	RCALL _write_byte_to_eeprom
                 ; 0000 01A2 
                 ; 0000 01A3                 lcdCommand(0x01);
0004ac 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 01A4                 lcd_gotoxy(1, 1);
                 ; 0000 01A5                 lcd_print("Student Code Successfully Added");
                +
0004ae efac     +LDI R26 , LOW ( _0x54 + ( 148 ) )
0004af e0b3     +LDI R27 , HIGH ( _0x54 + ( 148 ) )
                 	__POINTW2MN _0x54,148
0004b0 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 01A6                 lcd_gotoxy(1, 2);
                 ; 0000 01A7                 lcd_print("You Will Back Menu In 2 Second");
                +
0004b2 e1ac     +LDI R26 , LOW ( _0x54 + ( 180 ) )
0004b3 e0b4     +LDI R27 , HIGH ( _0x54 + ( 180 ) )
                 	__POINTW2MN _0x54,180
0004b4 940e 08ea 	CALL SUBOPT_0xD
                 ; 0000 01A8                 delay_ms(2000);
                 ; 0000 01A9             }
                 _0x71:
                 _0x6F:
                 ; 0000 01AA             memset(buffer, 0, 32);
0004b6 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 01AB #asm("sei")
0004b8 9478      	sei
                 ; 0000 01AC             stage = STAGE_ATTENDENC_MENU;
0004b9 c005      	RJMP _0xF8
                 ; 0000 01AD         }
                 ; 0000 01AE         else if (keypad[rowloc][cl] == 'C')
                 _0x6B:
0004ba 940e 090a 	CALL SUBOPT_0x13
0004bc 91ac      	LD   R26,X
0004bd 34a3      	CPI  R26,LOW(0x43)
0004be f419      	BRNE _0x76
                 ; 0000 01AF             stage = STAGE_ATTENDENC_MENU;
                 _0xF8:
0004bf e0e1      	LDI  R30,LOW(1)
0004c0 e0f0      	LDI  R31,HIGH(1)
0004c1 012f      	MOVW R4,R30
                 ; 0000 01B0     }
                 _0x76:
                 _0x6A:
                 _0x67:
                 ; 0000 01B1     else if (stage == STAGE_TEMPERATURE_MONITORING)
0004c2 c0ee      	RJMP _0x77
                 _0x64:
0004c3 940e 08b7 	CALL SUBOPT_0x6
0004c5 f441      	BRNE _0x78
                 ; 0000 01B2     {
                 ; 0000 01B3 
                 ; 0000 01B4         if (keypad[rowloc][cl] == 'C')
0004c6 940e 090a 	CALL SUBOPT_0x13
0004c8 91ac      	LD   R26,X
0004c9 34a3      	CPI  R26,LOW(0x43)
0004ca f411      	BRNE _0x79
                 ; 0000 01B5             stage = STAGE_INIT_MENU;
0004cb 2444      	CLR  R4
0004cc 2455      	CLR  R5
                 ; 0000 01B6     }
                 _0x79:
                 ; 0000 01B7     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0004cd c0e3      	RJMP _0x7A
                 _0x78:
0004ce 940e 08bc 	CALL SUBOPT_0x7
0004d0 f441      	BRNE _0x7B
                 ; 0000 01B8     {
                 ; 0000 01B9         if (keypad[rowloc][cl] == 'C')
0004d1 940e 090a 	CALL SUBOPT_0x13
0004d3 91ac      	LD   R26,X
0004d4 34a3      	CPI  R26,LOW(0x43)
0004d5 f411      	BRNE _0x7C
                 ; 0000 01BA             stage = STAGE_INIT_MENU;
0004d6 2444      	CLR  R4
0004d7 2455      	CLR  R5
                 ; 0000 01BB     }
                 _0x7C:
                 ; 0000 01BC     else if (stage == STAGE_STUDENT_MANAGMENT)
0004d8 c0d8      	RJMP _0x7D
                 _0x7B:
0004d9 940e 08f0 	CALL SUBOPT_0xE
0004db f4c9      	BRNE _0x7E
                 ; 0000 01BD     {
                 ; 0000 01BE         if (keypad[rowloc][cl] == 'C')
0004dc 940e 090a 	CALL SUBOPT_0x13
0004de 91ac      	LD   R26,X
0004df 34a3      	CPI  R26,LOW(0x43)
0004e0 f419      	BRNE _0x7F
                 ; 0000 01BF             stage = STAGE_INIT_MENU;
0004e1 2444      	CLR  R4
0004e2 2455      	CLR  R5
                 ; 0000 01C0         else if (keypad[rowloc][cl] == '1')
0004e3 c010      	RJMP _0x80
                 _0x7F:
0004e4 940e 090a 	CALL SUBOPT_0x13
0004e6 91ac      	LD   R26,X
0004e7 33a1      	CPI  R26,LOW(0x31)
0004e8 f419      	BRNE _0x81
                 ; 0000 01C1             stage = STAGE_SEARCH_STUDENT;
0004e9 e0e7      	LDI  R30,LOW(7)
0004ea e0f0      	LDI  R31,HIGH(7)
0004eb c007      	RJMP _0xF9
                 ; 0000 01C2         else if (keypad[rowloc][cl] == '2')
                 _0x81:
0004ec 940e 090a 	CALL SUBOPT_0x13
0004ee 91ac      	LD   R26,X
0004ef 33a2      	CPI  R26,LOW(0x32)
0004f0 f419      	BRNE _0x83
                 ; 0000 01C3             stage = STAGE_DELETE_STUDENT;
0004f1 e0e8      	LDI  R30,LOW(8)
0004f2 e0f0      	LDI  R31,HIGH(8)
                 _0xF9:
0004f3 012f      	MOVW R4,R30
                 ; 0000 01C4     }
                 _0x83:
                 _0x80:
                 ; 0000 01C5     else if (stage == STAGE_SEARCH_STUDENT)
0004f4 c0bc      	RJMP _0x84
                 _0x7E:
0004f5 940e 08f5 	CALL SUBOPT_0xF
0004f7 f009      	BREQ PC+2
0004f8 c054      	RJMP _0x85
                 ; 0000 01C6     {
                 ; 0000 01C7         if ((keypad[rowloc][cl] - '0') < 10)
0004f9 940e 090a 	CALL SUBOPT_0x13
0004fb 91ec      	LD   R30,X
0004fc e0f0      	LDI  R31,0
0004fd 97fa      	SBIW R30,58
0004fe f47c      	BRGE _0x86
                 ; 0000 01C8         {
                 ; 0000 01C9             if (strlen(buffer) <= 30)
0004ff 940e 0916 	CALL SUBOPT_0x14
000501 977f      	SBIW R30,31
000502 f450      	BRSH _0x87
                 ; 0000 01CA             {
                 ; 0000 01CB                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000503 940e 0916 	CALL SUBOPT_0x14
000505 940e 091a 	CALL SUBOPT_0x15
000507 940e 091e 	CALL SUBOPT_0x16
                 ; 0000 01CC                 buffer[strlen(buffer) + 1] = '\0';
000509 940e 0922 	CALL SUBOPT_0x17
                 ; 0000 01CD                 lcdData(keypad[rowloc][cl]);
00050b 91ac      	LD   R26,X
00050c d0c1      	RCALL _lcdData
                 ; 0000 01CE             }
                 ; 0000 01CF         }
                 _0x87:
                 ; 0000 01D0         else if (keypad[rowloc][cl] == 'D')
00050d c03e      	RJMP _0x88
                 _0x86:
00050e 940e 090a 	CALL SUBOPT_0x13
000510 91ac      	LD   R26,X
000511 34a4      	CPI  R26,LOW(0x44)
000512 f461      	BRNE _0x89
                 ; 0000 01D1         {
                 ; 0000 01D2             buffer_len = strlen(buffer);
000513 940e 0916 	CALL SUBOPT_0x14
000515 2f5e      	MOV  R21,R30
                 ; 0000 01D3             if (buffer_len > 0)
000516 3051      	CPI  R21,1
000517 f030      	BRLO _0x8A
                 ; 0000 01D4             {
                 ; 0000 01D5                 buffer[buffer_len - 1] = '\0';
000518 940e 0927 	CALL SUBOPT_0x18
                 ; 0000 01D6                 lcdCommand(0x10);
                 ; 0000 01D7                 lcd_print(" ");
                +
00051a e3ab     +LDI R26 , LOW ( _0x54 + ( 211 ) )
00051b e0b4     +LDI R27 , HIGH ( _0x54 + ( 211 ) )
                 	__POINTW2MN _0x54,211
00051c 940e 0931 	CALL SUBOPT_0x19
                 ; 0000 01D8                 lcdCommand(0x10);
                 ; 0000 01D9             }
                 ; 0000 01DA         }
                 _0x8A:
                 ; 0000 01DB         else if (keypad[rowloc][cl] == 'E')
00051e c02d      	RJMP _0x8B
                 _0x89:
00051f 940e 090a 	CALL SUBOPT_0x13
000521 91ac      	LD   R26,X
000522 34a5      	CPI  R26,LOW(0x45)
000523 f501      	BRNE _0x8C
                 ; 0000 01DC         {
                 ; 0000 01DD             // search from eeprom data
                 ; 0000 01DE             unsigned char result = search_student_code();
                 ; 0000 01DF 
                 ; 0000 01E0             if (result > 0)
000524 940e 093b 	CALL SUBOPT_0x1B
                 ;	i -> Y+7
                 ;	result -> Y+0
000526 f048      	BRLO _0x8D
                 ; 0000 01E1             {
                 ; 0000 01E2                 lcdCommand(0x01);
000527 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 01E3                 lcd_gotoxy(1, 1);
                 ; 0000 01E4                 lcd_print("Student Code Found");
                +
000529 e3ad     +LDI R26 , LOW ( _0x54 + ( 213 ) )
00052a e0b4     +LDI R27 , HIGH ( _0x54 + ( 213 ) )
                 	__POINTW2MN _0x54,213
00052b 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 01E5                 lcd_gotoxy(1, 2);
                 ; 0000 01E6                 lcd_print("You Will Back Menu In 5 Second");
                +
00052d e5a0     +LDI R26 , LOW ( _0x54 + ( 232 ) )
00052e e0b4     +LDI R27 , HIGH ( _0x54 + ( 232 ) )
                 	__POINTW2MN _0x54,232
00052f c008      	RJMP _0xFA
                 ; 0000 01E7                 delay_ms(5000);
                 ; 0000 01E8             }
                 ; 0000 01E9             else
                 _0x8D:
                 ; 0000 01EA             {
                 ; 0000 01EB                 lcdCommand(0x01);
000530 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 01EC                 lcd_gotoxy(1, 1);
                 ; 0000 01ED                 lcd_print("Ops , Student Code Not Found");
                +
000532 e6af     +LDI R26 , LOW ( _0x54 + ( 263 ) )
000533 e0b4     +LDI R27 , HIGH ( _0x54 + ( 263 ) )
                 	__POINTW2MN _0x54,263
000534 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 01EE                 lcd_gotoxy(1, 2);
                 ; 0000 01EF                 lcd_print("You Will Back Menu In 5 Second");
                +
000536 e8ac     +LDI R26 , LOW ( _0x54 + ( 292 ) )
000537 e0b4     +LDI R27 , HIGH ( _0x54 + ( 292 ) )
                 	__POINTW2MN _0x54,292
                 _0xFA:
000538 d0d1      	RCALL _lcd_print
                 ; 0000 01F0                 delay_ms(5000);
000539 e8a8      	LDI  R26,LOW(5000)
00053a e1b3      	LDI  R27,HIGH(5000)
00053b 940e 0987 	CALL _delay_ms
                 ; 0000 01F1             }
                 ; 0000 01F2             memset(buffer, 0, 32);
00053d 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 01F3             stage = STAGE_STUDENT_MANAGMENT;
00053f e0e6      	LDI  R30,LOW(6)
000540 e0f0      	LDI  R31,HIGH(6)
000541 012f      	MOVW R4,R30
                 ; 0000 01F4         }
000542 9621      	ADIW R28,1
                 ; 0000 01F5         else if (keypad[rowloc][cl] == 'C')
000543 c008      	RJMP _0x8F
                 _0x8C:
000544 940e 090a 	CALL SUBOPT_0x13
000546 91ac      	LD   R26,X
000547 34a3      	CPI  R26,LOW(0x43)
000548 f419      	BRNE _0x90
                 ; 0000 01F6             stage = STAGE_STUDENT_MANAGMENT;
000549 e0e6      	LDI  R30,LOW(6)
00054a e0f0      	LDI  R31,HIGH(6)
00054b 012f      	MOVW R4,R30
                 ; 0000 01F7     }
                 _0x90:
                 _0x8F:
                 _0x8B:
                 _0x88:
                 ; 0000 01F8     else if (stage == STAGE_DELETE_STUDENT)
00054c c064      	RJMP _0x91
                 _0x85:
00054d 940e 08fa 	CALL SUBOPT_0x10
00054f f009      	BREQ PC+2
000550 c056      	RJMP _0x92
                 ; 0000 01F9     {
                 ; 0000 01FA         if ((keypad[rowloc][cl] - '0') < 10)
000551 940e 090a 	CALL SUBOPT_0x13
000553 91ec      	LD   R30,X
000554 e0f0      	LDI  R31,0
000555 97fa      	SBIW R30,58
000556 f47c      	BRGE _0x93
                 ; 0000 01FB         {
                 ; 0000 01FC             if (strlen(buffer) <= 30)
000557 940e 0916 	CALL SUBOPT_0x14
000559 977f      	SBIW R30,31
00055a f450      	BRSH _0x94
                 ; 0000 01FD             {
                 ; 0000 01FE                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00055b 940e 0916 	CALL SUBOPT_0x14
00055d 940e 091a 	CALL SUBOPT_0x15
00055f 940e 091e 	CALL SUBOPT_0x16
                 ; 0000 01FF                 buffer[strlen(buffer) + 1] = '\0';
000561 940e 0922 	CALL SUBOPT_0x17
                 ; 0000 0200                 lcdData(keypad[rowloc][cl]);
000563 91ac      	LD   R26,X
000564 d069      	RCALL _lcdData
                 ; 0000 0201             }
                 ; 0000 0202         }
                 _0x94:
                 ; 0000 0203         else if (keypad[rowloc][cl] == 'D')
000565 c040      	RJMP _0x95
                 _0x93:
000566 940e 090a 	CALL SUBOPT_0x13
000568 91ac      	LD   R26,X
000569 34a4      	CPI  R26,LOW(0x44)
00056a f461      	BRNE _0x96
                 ; 0000 0204         {
                 ; 0000 0205             buffer_len = strlen(buffer);
00056b 940e 0916 	CALL SUBOPT_0x14
00056d 2f5e      	MOV  R21,R30
                 ; 0000 0206             if (buffer_len > 0)
00056e 3051      	CPI  R21,1
00056f f030      	BRLO _0x97
                 ; 0000 0207             {
                 ; 0000 0208                 buffer[buffer_len - 1] = '\0';
000570 940e 0927 	CALL SUBOPT_0x18
                 ; 0000 0209                 lcdCommand(0x10);
                 ; 0000 020A                 lcd_print(" ");
                +
000572 eaab     +LDI R26 , LOW ( _0x54 + ( 323 ) )
000573 e0b4     +LDI R27 , HIGH ( _0x54 + ( 323 ) )
                 	__POINTW2MN _0x54,323
000574 940e 0931 	CALL SUBOPT_0x19
                 ; 0000 020B                 lcdCommand(0x10);
                 ; 0000 020C             }
                 ; 0000 020D         }
                 _0x97:
                 ; 0000 020E         else if (keypad[rowloc][cl] == 'E')
000576 c02f      	RJMP _0x98
                 _0x96:
000577 940e 090a 	CALL SUBOPT_0x13
000579 91ac      	LD   R26,X
00057a 34a5      	CPI  R26,LOW(0x45)
00057b f551      	BRNE _0x99
                 ; 0000 020F         {
                 ; 0000 0210             // search from eeprom data
                 ; 0000 0211             unsigned char result = search_student_code();
                 ; 0000 0212 
                 ; 0000 0213             if (result > 0)
00057c 940e 093b 	CALL SUBOPT_0x1B
                 ;	i -> Y+7
                 ;	result -> Y+0
00057e f0a0      	BRLO _0x9A
                 ; 0000 0214             {
                 ; 0000 0215                 lcdCommand(0x01);
00057f 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0216                 lcd_gotoxy(1, 1);
                 ; 0000 0217                 lcd_print("Student Code Found");
                +
000581 eaad     +LDI R26 , LOW ( _0x54 + ( 325 ) )
000582 e0b4     +LDI R27 , HIGH ( _0x54 + ( 325 ) )
                 	__POINTW2MN _0x54,325
000583 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0218                 lcd_gotoxy(1, 2);
                 ; 0000 0219                 lcd_print("Wait For Delete...");
                +
000585 eca0     +LDI R26 , LOW ( _0x54 + ( 344 ) )
000586 e0b4     +LDI R27 , HIGH ( _0x54 + ( 344 ) )
                 	__POINTW2MN _0x54,344
000587 d082      	RCALL _lcd_print
                 ; 0000 021A                 delete_student_code(result);
000588 81a8      	LD   R26,Y
000589 d198      	RCALL _delete_student_code
                 ; 0000 021B                 lcdCommand(0x01);
00058a 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 021C                 lcd_gotoxy(1, 1);
                 ; 0000 021D                 lcd_print("Student Code Was Deleted");
                +
00058c eda3     +LDI R26 , LOW ( _0x54 + ( 363 ) )
00058d e0b4     +LDI R27 , HIGH ( _0x54 + ( 363 ) )
                 	__POINTW2MN _0x54,363
00058e 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 021E                 lcd_gotoxy(1, 2);
                 ; 0000 021F                 lcd_print("You Will Back Menu In 2 Second");
                +
000590 eeac     +LDI R26 , LOW ( _0x54 + ( 388 ) )
000591 e0b4     +LDI R27 , HIGH ( _0x54 + ( 388 ) )
                 	__POINTW2MN _0x54,388
000592 c008      	RJMP _0xFB
                 ; 0000 0220                 delay_ms(2000);
                 ; 0000 0221             }
                 ; 0000 0222             else
                 _0x9A:
                 ; 0000 0223             {
                 ; 0000 0224                 lcdCommand(0x01);
000593 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0225                 lcd_gotoxy(1, 1);
                 ; 0000 0226                 lcd_print("Ops , Student Code Not Found");
                +
000595 e0ab     +LDI R26 , LOW ( _0x54 + ( 419 ) )
000596 e0b5     +LDI R27 , HIGH ( _0x54 + ( 419 ) )
                 	__POINTW2MN _0x54,419
000597 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 0227                 lcd_gotoxy(1, 2);
                 ; 0000 0228                 lcd_print("You Will Back Menu In 2 Second");
                +
000599 e2a8     +LDI R26 , LOW ( _0x54 + ( 448 ) )
00059a e0b5     +LDI R27 , HIGH ( _0x54 + ( 448 ) )
                 	__POINTW2MN _0x54,448
                 _0xFB:
00059b d06e      	RCALL _lcd_print
                 ; 0000 0229                 delay_ms(2000);
00059c eda0      	LDI  R26,LOW(2000)
00059d e0b7      	LDI  R27,HIGH(2000)
00059e 940e 0987 	CALL _delay_ms
                 ; 0000 022A             }
                 ; 0000 022B             memset(buffer, 0, 32);
0005a0 940e 08c1 	CALL SUBOPT_0x8
                 ; 0000 022C             stage = STAGE_STUDENT_MANAGMENT;
0005a2 e0e6      	LDI  R30,LOW(6)
0005a3 e0f0      	LDI  R31,HIGH(6)
0005a4 012f      	MOVW R4,R30
                 ; 0000 022D         }
0005a5 9621      	ADIW R28,1
                 ; 0000 022E     }
                 _0x99:
                 _0x98:
                 _0x95:
                 ; 0000 022F     else if (stage == STAGE_TRAFFIC_MONITORING)
0005a6 c00a      	RJMP _0x9C
                 _0x92:
0005a7 940e 08ff 	CALL SUBOPT_0x11
0005a9 f439      	BRNE _0x9D
                 ; 0000 0230     {
                 ; 0000 0231         if (keypad[rowloc][cl] == 'C')
0005aa 940e 090a 	CALL SUBOPT_0x13
0005ac 91ac      	LD   R26,X
0005ad 34a3      	CPI  R26,LOW(0x43)
0005ae f411      	BRNE _0x9E
                 ; 0000 0232             stage = STAGE_INIT_MENU;
0005af 2444      	CLR  R4
0005b0 2455      	CLR  R5
                 ; 0000 0233     }
                 _0x9E:
                 ; 0000 0234 }
                 _0x9D:
                 _0x9C:
                 _0x91:
                 _0x84:
                 _0x7D:
                 _0x7A:
                 _0x77:
                 _0x63:
                 _0x5B:
0005b1 940e 0b61 	CALL __LOADLOCR6
0005b3 9628      	ADIW R28,8
0005b4 91e9      	LD   R30,Y+
0005b5 bfef      	OUT  SREG,R30
0005b6 91f9      	LD   R31,Y+
0005b7 91e9      	LD   R30,Y+
0005b8 91b9      	LD   R27,Y+
0005b9 91a9      	LD   R26,Y+
0005ba 9199      	LD   R25,Y+
0005bb 9189      	LD   R24,Y+
0005bc 9179      	LD   R23,Y+
0005bd 9169      	LD   R22,Y+
0005be 90f9      	LD   R15,Y+
0005bf 9019      	LD   R1,Y+
0005c0 9009      	LD   R0,Y+
0005c1 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x54:
000368           	.BYTE 0x1DF
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 0237 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 0238     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0005c2 940e 0942 	CALL SUBOPT_0x1C
                 ;	cmnd -> Y+0
                 ; 0000 0239     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0005c4 98c0      	CBI  0x18,0
                 ; 0000 023A     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0005c5 940e 094b 	CALL SUBOPT_0x1D
                 ; 0000 023B     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 023C     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 023D     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 023E     delay_us(20 * 16);         // wait
                +
0005c7 e880     +LDI R24 , LOW ( 640 )
0005c8 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0005c9 9701     +SBIW R24 , 1
0005ca f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 023F     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0005cb 940e 0952 	CALL SUBOPT_0x1E
                 ; 0000 0240     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 0241     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 0242     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0243 }
0005cd c0fb      	RJMP _0x20A0004
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 0245 {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 0246     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0005ce 940e 0942 	CALL SUBOPT_0x1C
                 ;	data -> Y+0
                 ; 0000 0247     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0005d0 9ac0      	SBI  0x18,0
                 ; 0000 0248     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0005d1 940e 094b 	CALL SUBOPT_0x1D
                 ; 0000 0249     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 024A     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 024B     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 024C     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0005d3 940e 0952 	CALL SUBOPT_0x1E
                 ; 0000 024D     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 024E     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 024F     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 0250 }
0005d5 c0f3      	RJMP _0x20A0004
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 0252 {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 0253     LCD_DDR = 0xFF;            // LCD port is output
0005d6 efef      	LDI  R30,LOW(255)
0005d7 bbe7      	OUT  0x17,R30
                 ; 0000 0254     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0005d8 98c2      	CBI  0x18,2
                 ; 0000 0255     delay_us(2000 * 16);       // wait for stable power
                +
0005d9 e080     +LDI R24 , LOW ( 64000 )
0005da ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0005db 9701     +SBIW R24 , 1
0005dc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0256     lcdCommand(0x33);          //$33 for 4-bit mode
0005dd e3a3      	LDI  R26,LOW(51)
0005de 940e 0960 	CALL SUBOPT_0x1F
                 ; 0000 0257     delay_us(100 * 16);        // wait
                 ; 0000 0258     lcdCommand(0x32);          //$32 for 4-bit mode
0005e0 e3a2      	LDI  R26,LOW(50)
0005e1 940e 0960 	CALL SUBOPT_0x1F
                 ; 0000 0259     delay_us(100 * 16);        // wait
                 ; 0000 025A     lcdCommand(0x28);          //$28 for 4-bit mode
0005e3 e2a8      	LDI  R26,LOW(40)
0005e4 940e 0960 	CALL SUBOPT_0x1F
                 ; 0000 025B     delay_us(100 * 16);        // wait
                 ; 0000 025C     lcdCommand(0x0c);          // display on, cursor off
0005e6 940e 08af 	CALL SUBOPT_0x5
                 ; 0000 025D     delay_us(100 * 16);        // wait
                 ; 0000 025E     lcdCommand(0x01);          // clear LCD
0005e8 e0a1      	LDI  R26,LOW(1)
0005e9 dfd8      	RCALL _lcdCommand
                 ; 0000 025F     delay_us(2000 * 16);       // wait
                +
0005ea e080     +LDI R24 , LOW ( 64000 )
0005eb ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0005ec 9701     +SBIW R24 , 1
0005ed f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 0260     lcdCommand(0x06);          // shift cursor right
0005ee e0a6      	LDI  R26,LOW(6)
0005ef 940e 0960 	CALL SUBOPT_0x1F
                 ; 0000 0261     delay_us(100 * 16);
                 ; 0000 0262 }
0005f1 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 0264 {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 0265     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 0266     lcdCommand(firstCharAdr[y - 1] + x - 1);
0005f2 93aa      	ST   -Y,R26
0005f3 9724      	SBIW R28,4
0005f4 e8e0      	LDI  R30,LOW(128)
0005f5 83e8      	ST   Y,R30
0005f6 ece0      	LDI  R30,LOW(192)
0005f7 83e9      	STD  Y+1,R30
0005f8 e9e4      	LDI  R30,LOW(148)
0005f9 83ea      	STD  Y+2,R30
0005fa ede4      	LDI  R30,LOW(212)
0005fb 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
0005fc 81ec      	LDD  R30,Y+4
0005fd e0f0      	LDI  R31,0
0005fe 9731      	SBIW R30,1
0005ff 01de      	MOVW R26,R28
000600 0fae      	ADD  R26,R30
000601 1fbf      	ADC  R27,R31
000602 91ec      	LD   R30,X
000603 81ad      	LDD  R26,Y+5
000604 0fae      	ADD  R26,R30
000605 50a1      	SUBI R26,LOW(1)
000606 940e 0960 	CALL SUBOPT_0x1F
                 ; 0000 0267     delay_us(100 * 16);
                 ; 0000 0268 }
000608 9626      	ADIW R28,6
000609 9508      	RET
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 026A {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 026B     unsigned char i = 0;
                 ; 0000 026C     while (str[i] != 0)
00060a 93ba      	ST   -Y,R27
00060b 93aa      	ST   -Y,R26
00060c 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
00060d e010      	LDI  R17,0
                 _0x9F:
00060e 81a9      	LDD  R26,Y+1
00060f 81ba      	LDD  R27,Y+1+1
000610 27ee      	CLR  R30
000611 0fa1      	ADD  R26,R17
000612 1fbe      	ADC  R27,R30
000613 91ec      	LD   R30,X
000614 30e0      	CPI  R30,0
000615 f049      	BREQ _0xA1
                 ; 0000 026D     {
                 ; 0000 026E         lcdData(str[i]);
000616 81a9      	LDD  R26,Y+1
000617 81ba      	LDD  R27,Y+1+1
000618 27ee      	CLR  R30
000619 0fa1      	ADD  R26,R17
00061a 1fbe      	ADC  R27,R30
00061b 91ac      	LD   R26,X
00061c dfb1      	RCALL _lcdData
                 ; 0000 026F         i++;
00061d 5f1f      	SUBI R17,-1
                 ; 0000 0270     }
00061e cfef      	RJMP _0x9F
                 _0xA1:
                 ; 0000 0271 }
00061f 8118      	LDD  R17,Y+0
000620 c0a1      	RJMP _0x20A0005
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 0274 {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 0275     unsigned char temperatureVal = 0;
                 ; 0000 0276     unsigned char temperatureRep[3];
                 ; 0000 0277 
                 ; 0000 0278     ADMUX = 0xE0;
000621 9723      	SBIW R28,3
000622 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000623 e010      	LDI  R17,0
000624 eee0      	LDI  R30,LOW(224)
000625 b9e7      	OUT  0x7,R30
                 ; 0000 0279     ADCSRA = 0x87;
000626 e8e7      	LDI  R30,LOW(135)
000627 b9e6      	OUT  0x6,R30
                 ; 0000 027A 
                 ; 0000 027B     lcdCommand(0x01);
000628 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 027C     lcd_gotoxy(1, 1);
                 ; 0000 027D     lcd_print("temperature(C):");
                +
00062a e4a7     +LDI R26 , LOW ( _0xA2 + ( 0 ) )
00062b e0b5     +LDI R27 , HIGH ( _0xA2 + ( 0 ) )
                 	__POINTW2MN _0xA2,0
00062c dfdd      	RCALL _lcd_print
                 ; 0000 027E 
                 ; 0000 027F     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0xA3:
00062d 940e 08b7 	CALL SUBOPT_0x6
00062f f4f1      	BRNE _0xA5
                 ; 0000 0280     {
                 ; 0000 0281         ADCSRA |= (1 << ADSC);
000630 9a36      	SBI  0x6,6
                 ; 0000 0282         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0xA6:
000631 9b34      	SBIS 0x6,4
                 ; 0000 0283             ;
000632 cffe      	RJMP _0xA6
                 ; 0000 0284         if (ADCH != temperatureVal)
000633 b1e5      	IN   R30,0x5
000634 171e      	CP   R17,R30
000635 f099      	BREQ _0xA9
                 ; 0000 0285         {
                 ; 0000 0286             temperatureVal = ADCH;
000636 b115      	IN   R17,5
                 ; 0000 0287             itoa(temperatureVal, temperatureRep);
000637 2fe1      	MOV  R30,R17
000638 e0f0      	LDI  R31,0
000639 93fa      	ST   -Y,R31
00063a 93ea      	ST   -Y,R30
00063b 01de      	MOVW R26,R28
00063c 9613      	ADIW R26,3
00063d 940e 082b 	CALL _itoa
                 ; 0000 0288             lcd_gotoxy(17, 1);
00063f e1e1      	LDI  R30,LOW(17)
000640 93ea      	ST   -Y,R30
000641 e0a1      	LDI  R26,LOW(1)
000642 dfaf      	RCALL _lcd_gotoxy
                 ; 0000 0289             lcd_print(temperatureRep);
000643 01de      	MOVW R26,R28
000644 9611      	ADIW R26,1
000645 dfc4      	RCALL _lcd_print
                 ; 0000 028A             lcd_print(" ");
                +
000646 e5a7     +LDI R26 , LOW ( _0xA2 + ( 16 ) )
000647 e0b5     +LDI R27 , HIGH ( _0xA2 + ( 16 ) )
                 	__POINTW2MN _0xA2,16
000648 dfc1      	RCALL _lcd_print
                 ; 0000 028B         }
                 ; 0000 028C         delay_ms(500);
                 _0xA9:
000649 efa4      	LDI  R26,LOW(500)
00064a e0b1      	LDI  R27,HIGH(500)
00064b 940e 0987 	CALL _delay_ms
                 ; 0000 028D     }
00064d cfdf      	RJMP _0xA3
                 _0xA5:
                 ; 0000 028E 
                 ; 0000 028F     ADCSRA = 0x0;
00064e e0e0      	LDI  R30,LOW(0)
00064f b9e6      	OUT  0x6,R30
                 ; 0000 0290 }
000650 8118      	LDD  R17,Y+0
000651 9624      	ADIW R28,4
000652 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xA2:
000547           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 0293 {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 0294 
                 ; 0000 0295     while (stage == STAGE_INIT_MENU)
                 _0xAA:
000653 2c04      	MOV  R0,R4
000654 2805      	OR   R0,R5
000655 f5e1      	BRNE _0xAC
                 ; 0000 0296     {
                 ; 0000 0297         lcdCommand(0x01);
000656 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0298         lcd_gotoxy(1, 1);
                 ; 0000 0299         if (page_num == 0)
000658 2077      	TST  R7
000659 f481      	BRNE _0xAD
                 ; 0000 029A         {
                 ; 0000 029B             lcd_print("1: Attendance Initialization");
                +
00065a e5a9     +LDI R26 , LOW ( _0xAE + ( 0 ) )
00065b e0b5     +LDI R27 , HIGH ( _0xAE + ( 0 ) )
                 	__POINTW2MN _0xAE,0
00065c 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 029C             lcd_gotoxy(1, 2);
                 ; 0000 029D             lcd_print("2: Student Management");
                +
00065e e7a6     +LDI R26 , LOW ( _0xAE + ( 29 ) )
00065f e0b5     +LDI R27 , HIGH ( _0xAE + ( 29 ) )
                 	__POINTW2MN _0xAE,29
000660 dfa9      	RCALL _lcd_print
                 ; 0000 029E             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0xAF:
000661 2077      	TST  R7
000662 f421      	BRNE _0xB2
000663 2400      	CLR  R0
000664 1404      	CP   R0,R4
000665 0405      	CPC  R0,R5
000666 f009      	BREQ _0xB3
                 _0xB2:
000667 c001      	RJMP _0xB1
                 _0xB3:
                 ; 0000 029F                 ;
000668 cff8      	RJMP _0xAF
                 _0xB1:
                 ; 0000 02A0         }
                 ; 0000 02A1         else if (page_num == 1)
000669 c027      	RJMP _0xB4
                 _0xAD:
00066a e0e1      	LDI  R30,LOW(1)
00066b 15e7      	CP   R30,R7
00066c f489      	BRNE _0xB5
                 ; 0000 02A2         {
                 ; 0000 02A3             lcd_print("3: View Present Students ");
                +
00066d e8ac     +LDI R26 , LOW ( _0xAE + ( 51 ) )
00066e e0b5     +LDI R27 , HIGH ( _0xAE + ( 51 ) )
                 	__POINTW2MN _0xAE,51
00066f 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 02A4             lcd_gotoxy(1, 2);
                 ; 0000 02A5             lcd_print("4: Temperature Monitoring");
                +
000671 eaa6     +LDI R26 , LOW ( _0xAE + ( 77 ) )
000672 e0b5     +LDI R27 , HIGH ( _0xAE + ( 77 ) )
                 	__POINTW2MN _0xAE,77
000673 df96      	RCALL _lcd_print
                 ; 0000 02A6             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0xB6:
000674 e0e1      	LDI  R30,LOW(1)
000675 15e7      	CP   R30,R7
000676 f421      	BRNE _0xB9
000677 2400      	CLR  R0
000678 1404      	CP   R0,R4
000679 0405      	CPC  R0,R5
00067a f009      	BREQ _0xBA
                 _0xB9:
00067b c001      	RJMP _0xB8
                 _0xBA:
                 ; 0000 02A7                 ;
00067c cff7      	RJMP _0xB6
                 _0xB8:
                 ; 0000 02A8         }
                 ; 0000 02A9         else if (page_num == 2)
00067d c013      	RJMP _0xBB
                 _0xB5:
00067e e0e2      	LDI  R30,LOW(2)
00067f 15e7      	CP   R30,R7
000680 f481      	BRNE _0xBC
                 ; 0000 02AA         {
                 ; 0000 02AB             lcd_print("5: Retrieve Student Data");
                +
000681 eca0     +LDI R26 , LOW ( _0xAE + ( 103 ) )
000682 e0b5     +LDI R27 , HIGH ( _0xAE + ( 103 ) )
                 	__POINTW2MN _0xAE,103
000683 940e 089b 	CALL SUBOPT_0x2
                 ; 0000 02AC             lcd_gotoxy(1, 2);
                 ; 0000 02AD             lcd_print("6: Traffic Monitoring");
                +
000685 eda9     +LDI R26 , LOW ( _0xAE + ( 128 ) )
000686 e0b5     +LDI R27 , HIGH ( _0xAE + ( 128 ) )
                 	__POINTW2MN _0xAE,128
000687 df82      	RCALL _lcd_print
                 ; 0000 02AE             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0xBD:
000688 e0e2      	LDI  R30,LOW(2)
000689 15e7      	CP   R30,R7
00068a f421      	BRNE _0xC0
00068b 2400      	CLR  R0
00068c 1404      	CP   R0,R4
00068d 0405      	CPC  R0,R5
00068e f009      	BREQ _0xC1
                 _0xC0:
00068f c001      	RJMP _0xBF
                 _0xC1:
                 ; 0000 02AF                 ;
000690 cff7      	RJMP _0xBD
                 _0xBF:
                 ; 0000 02B0         }
                 ; 0000 02B1     }
                 _0xBC:
                 _0xBB:
                 _0xB4:
000691 cfc1      	RJMP _0xAA
                 _0xAC:
                 ; 0000 02B2 }
000692 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xAE:
000559           	.BYTE 0x96
                 ;
                 ;void clear_eeprom()
                 ; 0000 02B5 {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 02B6     unsigned int i;
                 ; 0000 02B7 
                 ; 0000 02B8     for (i = 0; i <= 1023; i++)
000693 931a      	ST   -Y,R17
000694 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000695 e000     +LDI R16 , LOW ( 0 )
000696 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xC3:
                +
000697 3000     +CPI R16 , LOW ( 1024 )
000698 e0e4     +LDI R30 , HIGH ( 1024 )
000699 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
00069a f478      	BRSH _0xC4
                 ; 0000 02B9     {
                 ; 0000 02BA         // Wait for the previous write to complete
                 ; 0000 02BB         while (EECR & (1 << EEWE))
                 _0xC5:
00069b 99e1      	SBIC 0x1C,1
                 ; 0000 02BC             ;
00069c cffe      	RJMP _0xC5
                 ; 0000 02BD 
                 ; 0000 02BE         // Set up address registers
                 ; 0000 02BF         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
00069d 2fe1      	MOV  R30,R17
00069e 70f0      	ANDI R31,HIGH(0x0)
00069f 70e3      	ANDI R30,LOW(0x3)
0006a0 bbef      	OUT  0x1F,R30
                 ; 0000 02C0         EEARL = i & 0xFF;        // Low byte (bits 0-7)
0006a1 2fe0      	MOV  R30,R16
0006a2 bbee      	OUT  0x1E,R30
                 ; 0000 02C1 
                 ; 0000 02C2         // Set up data register
                 ; 0000 02C3         EEDR = 0; // Write 0 to EEPROM
0006a3 e0e0      	LDI  R30,LOW(0)
0006a4 bbed      	OUT  0x1D,R30
                 ; 0000 02C4 
                 ; 0000 02C5         // Enable write
                 ; 0000 02C6         EECR |= (1 << EEMWE); // Master write enable
0006a5 9ae2      	SBI  0x1C,2
                 ; 0000 02C7         EECR |= (1 << EEWE);  // Start EEPROM write
0006a6 9ae1      	SBI  0x1C,1
                 ; 0000 02C8     }
                +
0006a7 5f0f     +SUBI R16 , LOW ( - 1 )
0006a8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0006a9 cfed      	RJMP _0xC3
                 _0xC4:
                 ; 0000 02C9 }
0006aa 9109      	LD   R16,Y+
0006ab 9119      	LD   R17,Y+
0006ac 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 02CC {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 02CD     unsigned char x;
                 ; 0000 02CE     // Wait for the previous write to complete
                 ; 0000 02CF     while (EECR & (1 << EEWE))
0006ad 93ba      	ST   -Y,R27
0006ae 93aa      	ST   -Y,R26
0006af 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0xC8:
0006b0 99e1      	SBIC 0x1C,1
                 ; 0000 02D0         ;
0006b1 cffe      	RJMP _0xC8
                 ; 0000 02D1 
                 ; 0000 02D2     // Set up address registers
                 ; 0000 02D3     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0006b2 940e 0967 	CALL SUBOPT_0x20
                 ; 0000 02D4     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02D5     EECR |= (1 << EERE);        // Read Enable
0006b4 9ae0      	SBI  0x1C,0
                 ; 0000 02D6     x = EEDR;
0006b5 b31d      	IN   R17,29
                 ; 0000 02D7     return x;
0006b6 2fe1      	MOV  R30,R17
0006b7 8118      	LDD  R17,Y+0
0006b8 c009      	RJMP _0x20A0005
                 ; 0000 02D8 }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 02DB {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 02DC     // Wait for the previous write to complete
                 ; 0000 02DD     while (EECR & (1 << EEWE))
0006b9 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0xCB:
0006ba 99e1      	SBIC 0x1C,1
                 ; 0000 02DE         ;
0006bb cffe      	RJMP _0xCB
                 ; 0000 02DF 
                 ; 0000 02E0     // Set up address registers
                 ; 0000 02E1     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
0006bc 940e 0967 	CALL SUBOPT_0x20
                 ; 0000 02E2     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 02E3 
                 ; 0000 02E4     // Set up data register
                 ; 0000 02E5     EEDR = value; // Write 0 to EEPROM
0006be 81e8      	LD   R30,Y
0006bf bbed      	OUT  0x1D,R30
                 ; 0000 02E6 
                 ; 0000 02E7     // Enable write
                 ; 0000 02E8     EECR |= (1 << EEMWE); // Master write enable
0006c0 9ae2      	SBI  0x1C,2
                 ; 0000 02E9     EECR |= (1 << EEWE);  // Start EEPROM write
0006c1 9ae1      	SBI  0x1C,1
                 ; 0000 02EA }
                 _0x20A0005:
0006c2 9623      	ADIW R28,3
0006c3 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 02ED {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 02EE     while (!(UCSRA & (1 << UDRE)))
0006c4 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0xCE:
0006c5 9b5d      	SBIS 0xB,5
                 ; 0000 02EF         ;
0006c6 cffe      	RJMP _0xCE
                 ; 0000 02F0     UDR = data;
0006c7 81e8      	LD   R30,Y
0006c8 b9ec      	OUT  0xC,R30
                 ; 0000 02F1 }
                 _0x20A0004:
0006c9 9621      	ADIW R28,1
0006ca 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 02F4 {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 02F5     UBRRL = (unsigned char)ubrr;
0006cb 93ba      	ST   -Y,R27
0006cc 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
0006cd 81e8      	LD   R30,Y
0006ce b9e9      	OUT  0x9,R30
                 ; 0000 02F6     UBRRH = (unsigned char)(ubrr >> 8);
0006cf 81e9      	LDD  R30,Y+1
0006d0 70f0      	ANDI R31,HIGH(0x0)
0006d1 bde0      	OUT  0x20,R30
                 ; 0000 02F7     UCSRB = (1 << RXEN) | (1 << TXEN);
0006d2 e1e8      	LDI  R30,LOW(24)
0006d3 b9ea      	OUT  0xA,R30
                 ; 0000 02F8     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
0006d4 e0e6      	LDI  R30,LOW(6)
0006d5 bde0      	OUT  0x20,R30
                 ; 0000 02F9 }
0006d6 9622      	ADIW R28,2
0006d7 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 02FC {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 02FD     unsigned char st_counts, i, j;
                 ; 0000 02FE     char temp[10];
                 ; 0000 02FF 
                 ; 0000 0300     st_counts = read_byte_from_eeprom(0x0);
0006d8 972a      	SBIW R28,10
0006d9 940e 0b5c 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
0006db 940e 08dc 	CALL SUBOPT_0xB
0006dd 2f1e      	MOV  R17,R30
                 ; 0000 0301 
                 ; 0000 0302     for (i = 0; i < st_counts; i++)
0006de e000      	LDI  R16,LOW(0)
                 _0xD2:
0006df 1701      	CP   R16,R17
0006e0 f5e0      	BRSH _0xD3
                 ; 0000 0303     {
                 ; 0000 0304         memset(temp, 0, 10);
0006e1 01fe      	MOVW R30,R28
0006e2 9634      	ADIW R30,4
0006e3 93fa      	ST   -Y,R31
0006e4 93ea      	ST   -Y,R30
0006e5 e0e0      	LDI  R30,LOW(0)
0006e6 93ea      	ST   -Y,R30
0006e7 e0aa      	LDI  R26,LOW(10)
0006e8 e0b0      	LDI  R27,0
0006e9 940e 0859 	CALL _memset
                 ; 0000 0305         for (j = 0; j < 8; j++)
0006eb e030      	LDI  R19,LOW(0)
                 _0xD5:
0006ec 3038      	CPI  R19,8
0006ed f4a8      	BRSH _0xD6
                 ; 0000 0306         {
                 ; 0000 0307             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0006ee 2fe3      	MOV  R30,R19
0006ef e0f0      	LDI  R31,0
0006f0 01de      	MOVW R26,R28
0006f1 9614      	ADIW R26,4
0006f2 0fea      	ADD  R30,R26
0006f3 1ffb      	ADC  R31,R27
0006f4 93ff      	PUSH R31
0006f5 93ef      	PUSH R30
0006f6 2fa3      	MOV  R26,R19
0006f7 27bb      	CLR  R27
0006f8 2fe0      	MOV  R30,R16
0006f9 940e 0936 	CALL SUBOPT_0x1A
0006fb 0fae      	ADD  R26,R30
0006fc 1fbf      	ADC  R27,R31
0006fd dfaf      	RCALL _read_byte_from_eeprom
0006fe 91af      	POP  R26
0006ff 91bf      	POP  R27
000700 93ec      	ST   X,R30
                 ; 0000 0308         }
000701 5f3f      	SUBI R19,-1
000702 cfe9      	RJMP _0xD5
                 _0xD6:
                 ; 0000 0309         temp[j] = '\0';
000703 2fe3      	MOV  R30,R19
000704 e0f0      	LDI  R31,0
000705 01de      	MOVW R26,R28
000706 9614      	ADIW R26,4
000707 0fae      	ADD  R26,R30
000708 1fbf      	ADC  R27,R31
000709 e0e0      	LDI  R30,LOW(0)
00070a 93ec      	ST   X,R30
                 ; 0000 030A         if (strncmp(temp, buffer, 8) == 0)
00070b 01fe      	MOVW R30,R28
00070c 9634      	ADIW R30,4
00070d 93fa      	ST   -Y,R31
00070e 93ea      	ST   -Y,R30
00070f e2e9      	LDI  R30,LOW(_buffer)
000710 e0f6      	LDI  R31,HIGH(_buffer)
000711 93fa      	ST   -Y,R31
000712 93ea      	ST   -Y,R30
000713 e0a8      	LDI  R26,LOW(8)
000714 940e 0875 	CALL _strncmp
000716 30e0      	CPI  R30,0
000717 f419      	BRNE _0xD7
                 ; 0000 030B             return (i + 1);
000718 2fe0      	MOV  R30,R16
000719 5fef      	SUBI R30,-LOW(1)
00071a c003      	RJMP _0x20A0003
                 ; 0000 030C     }
                 _0xD7:
00071b 5f0f      	SUBI R16,-1
00071c cfc2      	RJMP _0xD2
                 _0xD3:
                 ; 0000 030D 
                 ; 0000 030E     return 0;
00071d e0e0      	LDI  R30,LOW(0)
                 _0x20A0003:
00071e 940e 0b63 	CALL __LOADLOCR4
000720 962e      	ADIW R28,14
000721 9508      	RET
                 ; 0000 030F }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 0312 {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 0313     unsigned char st_counts, i, j;
                 ; 0000 0314     unsigned char temp;
                 ; 0000 0315 
                 ; 0000 0316     st_counts = read_byte_from_eeprom(0x0);
000722 93aa      	ST   -Y,R26
000723 940e 0b5c 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000725 940e 08dc 	CALL SUBOPT_0xB
000727 2f1e      	MOV  R17,R30
                 ; 0000 0317 
                 ; 0000 0318     for (i = index; i <= st_counts; i++)
000728 810c      	LDD  R16,Y+4
                 _0xD9:
000729 1710      	CP   R17,R16
00072a f0d8      	BRLO _0xDA
                 ; 0000 0319     {
                 ; 0000 031A         for (j = 0; j < 8; j++)
00072b e030      	LDI  R19,LOW(0)
                 _0xDC:
00072c 3038      	CPI  R19,8
00072d f4b0      	BRSH _0xDD
                 ; 0000 031B         {
                 ; 0000 031C             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
00072e 2fa3      	MOV  R26,R19
00072f 27bb      	CLR  R27
000730 2fe0      	MOV  R30,R16
000731 940e 0936 	CALL SUBOPT_0x1A
000733 0fae      	ADD  R26,R30
000734 1fbf      	ADC  R27,R31
000735 df77      	RCALL _read_byte_from_eeprom
000736 2f2e      	MOV  R18,R30
                 ; 0000 031D             write_byte_to_eeprom(j + ((i) * 8), temp);
000737 2fa3      	MOV  R26,R19
000738 27bb      	CLR  R27
000739 e0e8      	LDI  R30,LOW(8)
00073a 9fe0      	MUL  R30,R16
00073b 01f0      	MOVW R30,R0
00073c 0fea      	ADD  R30,R26
00073d 1ffb      	ADC  R31,R27
00073e 93fa      	ST   -Y,R31
00073f 93ea      	ST   -Y,R30
000740 2fa2      	MOV  R26,R18
000741 df77      	RCALL _write_byte_to_eeprom
                 ; 0000 031E         }
000742 5f3f      	SUBI R19,-1
000743 cfe8      	RJMP _0xDC
                 _0xDD:
                 ; 0000 031F     }
000744 5f0f      	SUBI R16,-1
000745 cfe3      	RJMP _0xD9
                 _0xDA:
                 ; 0000 0320     write_byte_to_eeprom(0x0, st_counts - 1);
000746 e0e0      	LDI  R30,LOW(0)
000747 e0f0      	LDI  R31,HIGH(0)
000748 93fa      	ST   -Y,R31
000749 93ea      	ST   -Y,R30
00074a 2fa1      	MOV  R26,R17
00074b 50a1      	SUBI R26,LOW(1)
00074c df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 0321 }
00074d 940e 0b63 	CALL __LOADLOCR4
00074f 940c 0867 	JMP  _0x20A0001
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 0324 {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 0325     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000751 9a8d      	SBI  0x11,5
                 ; 0000 0326     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000752 988e      	CBI  0x11,6
                 ; 0000 0327 }
000753 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 032A {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 032B     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000754 9a95      	SBI  0x12,5
                 ; 0000 032C     delay_us(15);                   // Wait for 15 microseconds
                +
000755 e288     +LDI R24 , LOW ( 40 )
                +__DELAY_USB_LOOP :
000756 958a     +DEC R24
000757 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 40
                 ; 0000 032D     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000758 9895      	CBI  0x12,5
                 ; 0000 032E }
000759 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 0331 {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 0332     uint32_t i, result;
                 ; 0000 0333 
                 ; 0000 0334     // Wait for rising edge on Echo pin
                 ; 0000 0335     for (i = 0; i < 600000; i++)
00075a 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
00075b e0e0      	LDI  R30,LOW(0)
                +
00075c 83ec     +STD Y + 4 , R30
00075d 83ed     +STD Y + 4 + 1 , R30
00075e 83ee     +STD Y + 4 + 2 , R30
00075f 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0xDF:
000760 940e 096e 	CALL SUBOPT_0x21
000762 f430      	BRSH _0xE0
                 ; 0000 0336     {
                 ; 0000 0337         if (!(US_PIN & (1 << US_ECHO_POS)))
000763 9b86      	SBIS 0x10,6
                 ; 0000 0338             continue;
000764 c001      	RJMP _0xDE
                 ; 0000 0339         else
                 ; 0000 033A             break;
000765 c003      	RJMP _0xE0
                 ; 0000 033B     }
                 _0xDE:
000766 940e 097a 	CALL SUBOPT_0x22
000768 cff7      	RJMP _0xDF
                 _0xE0:
                 ; 0000 033C 
                 ; 0000 033D     if (i == 600000)
000769 940e 096e 	CALL SUBOPT_0x21
00076b f419      	BRNE _0xE3
                 ; 0000 033E         return US_ERROR; // Timeout error if no rising edge detected
00076c efef      	LDI  R30,LOW(65535)
00076d efff      	LDI  R31,HIGH(65535)
00076e c036      	RJMP _0x20A0002
                 ; 0000 033F 
                 ; 0000 0340     // Start timer with prescaler 8
                 ; 0000 0341     TCCR1A = 0x00;
                 _0xE3:
00076f e0e0      	LDI  R30,LOW(0)
000770 bdef      	OUT  0x2F,R30
                 ; 0000 0342     TCCR1B = (1 << CS11) | (1 << CS10);
000771 e0e3      	LDI  R30,LOW(3)
000772 bdee      	OUT  0x2E,R30
                 ; 0000 0343     TCNT1 = 0x00; // Reset timer
000773 e0e0      	LDI  R30,LOW(0)
000774 e0f0      	LDI  R31,HIGH(0)
000775 bdfd      	OUT  0x2C+1,R31
000776 bdec      	OUT  0x2C,R30
                 ; 0000 0344 
                 ; 0000 0345     // Wait for falling edge on Echo pin
                 ; 0000 0346     for (i = 0; i < 600000; i++)
                +
000777 83ec     +STD Y + 4 , R30
000778 83ed     +STD Y + 4 + 1 , R30
000779 83ee     +STD Y + 4 + 2 , R30
00077a 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0xE5:
00077b 940e 096e 	CALL SUBOPT_0x21
00077d f470      	BRSH _0xE6
                 ; 0000 0347     {
                 ; 0000 0348         if (!(US_PIN & (1 << US_ECHO_POS)))
00077e 9b86      	SBIS 0x10,6
                 ; 0000 0349             break; // Falling edge detected
00077f c00c      	RJMP _0xE6
                 ; 0000 034A         if (TCNT1 > 60000)
000780 b5ec      	IN   R30,0x2C
000781 b5fd      	IN   R31,0x2C+1
000782 36e1      	CPI  R30,LOW(0xEA61)
000783 eeaa      	LDI  R26,HIGH(0xEA61)
000784 07fa      	CPC  R31,R26
000785 f018      	BRLO _0xE8
                 ; 0000 034B             return US_NO_OBSTACLE; // No obstacle in range
000786 efee      	LDI  R30,LOW(65534)
000787 efff      	LDI  R31,HIGH(65534)
000788 c01c      	RJMP _0x20A0002
                 ; 0000 034C     }
                 _0xE8:
000789 940e 097a 	CALL SUBOPT_0x22
00078b cfef      	RJMP _0xE5
                 _0xE6:
                 ; 0000 034D 
                 ; 0000 034E     result = TCNT1; // Capture timer value
00078c b5ec      	IN   R30,0x2C
00078d b5fd      	IN   R31,0x2C+1
00078e 2766      	CLR  R22
00078f 2777      	CLR  R23
000790 940e 0b55 	CALL __PUTD1S0
                 ; 0000 034F     TCCR1B = 0x00;  // Stop timer
000792 e0e0      	LDI  R30,LOW(0)
000793 bdee      	OUT  0x2E,R30
                 ; 0000 0350 
                 ; 0000 0351     if (result > 60000)
000794 940e 0b50 	CALL __GETD2S0
                +
000796 36a1     +CPI R26 , LOW ( 0xEA61 )
000797 eeea     +LDI R30 , HIGH ( 0xEA61 )
000798 07be     +CPC R27 , R30
000799 e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
00079a 078e     +CPC R24 , R30
00079b e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
00079c 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
00079d f018      	BRLO _0xE9
                 ; 0000 0352         return US_NO_OBSTACLE;
00079e efee      	LDI  R30,LOW(65534)
00079f efff      	LDI  R31,HIGH(65534)
0007a0 c004      	RJMP _0x20A0002
                 ; 0000 0353     else
                 _0xE9:
                 ; 0000 0354         return (result >> 1); // Return the measured pulse width
0007a1 940e 0b4b 	CALL __GETD1S0
0007a3 940e 0b20 	CALL __LSRD1
                 ; 0000 0355 }
                 _0x20A0002:
0007a5 9628      	ADIW R28,8
0007a6 9508      	RET
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 0358 {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 0359     char numberString[16];
                 ; 0000 035A     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 035B     int distance, previous_distance = -1;
                 ; 0000 035C     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 035D 
                 ; 0000 035E     lcdCommand(0x01);
0007a7 9760      	SBIW R28,16
0007a8 940e 0b5a 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
0007aa ef4f     +LDI R20 , LOW ( - 1 )
0007ab ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
0007ac 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 035F     lcd_gotoxy(1, 1);
                 ; 0000 0360     lcd_print("Distance: ");
                +
0007ae eeaf     +LDI R26 , LOW ( _0xEC + ( 0 ) )
0007af e0b5     +LDI R27 , HIGH ( _0xEC + ( 0 ) )
                 	__POINTW2MN _0xEC,0
0007b0 de59      	RCALL _lcd_print
                 ; 0000 0361 
                 ; 0000 0362     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0xED:
0007b1 940e 08ff 	CALL SUBOPT_0x11
0007b3 f009      	BREQ PC+2
0007b4 c072      	RJMP _0xEF
                 ; 0000 0363     {
                 ; 0000 0364         HCSR04Trigger();              // Send trigger pulse
0007b5 df9e      	RCALL _HCSR04Trigger
                 ; 0000 0365         pulseWidth = GetPulseWidth(); // Measure echo pulse
0007b6 dfa3      	RCALL _GetPulseWidth
0007b7 018f      	MOVW R16,R30
                 ; 0000 0366 
                 ; 0000 0367         if (pulseWidth == US_ERROR)
0007b8 efef      	LDI  R30,LOW(65535)
0007b9 efff      	LDI  R31,HIGH(65535)
0007ba 17e0      	CP   R30,R16
0007bb 07f1      	CPC  R31,R17
0007bc f429      	BRNE _0xF0
                 ; 0000 0368         {
                 ; 0000 0369             lcdCommand(0x01);
0007bd 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 036A             lcd_gotoxy(1, 1);
                 ; 0000 036B             lcd_print("Error"); // Display error message
                +
0007bf efaa     +LDI R26 , LOW ( _0xEC + ( 11 ) )
0007c0 e0b5     +LDI R27 , HIGH ( _0xEC + ( 11 ) )
                 	__POINTW2MN _0xEC,11
0007c1 c05f      	RJMP _0xFC
                 ; 0000 036C         }
                 ; 0000 036D         else if (pulseWidth == US_NO_OBSTACLE)
                 _0xF0:
0007c2 efee      	LDI  R30,LOW(65534)
0007c3 efff      	LDI  R31,HIGH(65534)
0007c4 17e0      	CP   R30,R16
0007c5 07f1      	CPC  R31,R17
0007c6 f429      	BRNE _0xF2
                 ; 0000 036E         {
                 ; 0000 036F             lcdCommand(0x01);
0007c7 940e 0893 	CALL SUBOPT_0x1
                 ; 0000 0370             lcd_gotoxy(1, 1);
                 ; 0000 0371             lcd_print("No Obstacle"); // Display no obstacle message
                +
0007c9 e0a0     +LDI R26 , LOW ( _0xEC + ( 17 ) )
0007ca e0b6     +LDI R27 , HIGH ( _0xEC + ( 17 ) )
                 	__POINTW2MN _0xEC,17
0007cb c055      	RJMP _0xFC
                 ; 0000 0372         }
                 ; 0000 0373         else
                 _0xF2:
                 ; 0000 0374         {
                 ; 0000 0375             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
0007cc 01f8      	MOVW R30,R16
0007cd 2766      	CLR  R22
0007ce 2777      	CLR  R23
0007cf 940e 09f7 	CALL __CDF1
                +
0007d1 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
0007d2 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
0007d3 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
0007d4 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
0007d5 940e 0a7a 	CALL __MULF12
0007d7 01df      	MOVW R26,R30
0007d8 01cb      	MOVW R24,R22
                +
0007d9 e0e0     +LDI R30 , LOW ( 0x40000000 )
0007da e0f0     +LDI R31 , HIGH ( 0x40000000 )
0007db e060     +LDI R22 , BYTE3 ( 0x40000000 )
0007dc e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
0007dd 940e 0ac8 	CALL __DIVF21
                +
0007df e0a0     +LDI R26 , LOW ( 0x3F000000 )
0007e0 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
0007e1 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
0007e2 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
0007e3 940e 0a2a 	CALL __ADDF12
0007e5 940e 09c0 	CALL __CFD1
0007e7 019f      	MOVW R18,R30
                 ; 0000 0376 
                 ; 0000 0377             if (distance != previous_distance)
                +
0007e8 1742     +CP R20 , R18
0007e9 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
0007ea f089      	BREQ _0xF4
                 ; 0000 0378             {
                 ; 0000 0379                 previous_distance = distance;
0007eb 01a9      	MOVW R20,R18
                 ; 0000 037A                 // Display distance on LCD
                 ; 0000 037B                 itoa(distance, numberString); // Convert distance to string
0007ec 933a      	ST   -Y,R19
0007ed 932a      	ST   -Y,R18
0007ee 01de      	MOVW R26,R28
0007ef 9618      	ADIW R26,8
0007f0 940e 082b 	CALL _itoa
                 ; 0000 037C                 lcd_gotoxy(11, 1);
0007f2 e0eb      	LDI  R30,LOW(11)
0007f3 93ea      	ST   -Y,R30
0007f4 e0a1      	LDI  R26,LOW(1)
0007f5 ddfc      	RCALL _lcd_gotoxy
                 ; 0000 037D                 lcd_print(numberString);
0007f6 01de      	MOVW R26,R28
0007f7 9616      	ADIW R26,6
0007f8 de11      	RCALL _lcd_print
                 ; 0000 037E                 lcd_print(" cm ");
                +
0007f9 e0ac     +LDI R26 , LOW ( _0xEC + ( 29 ) )
0007fa e0b6     +LDI R27 , HIGH ( _0xEC + ( 29 ) )
                 	__POINTW2MN _0xEC,29
0007fb de0e      	RCALL _lcd_print
                 ; 0000 037F             }
                 ; 0000 0380             // Counting logic based on distance
                 ; 0000 0381             if (distance < 6)
                 _0xF4:
                +
0007fc 3026     +CPI R18 , LOW ( 6 )
0007fd e0e0     +LDI R30 , HIGH ( 6 )
0007fe 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
0007ff f40c      	BRGE _0xF5
                 ; 0000 0382             {
                 ; 0000 0383                 US_count++; // Increment count if distance is below threshold
000800 9463      	INC  R6
                 ; 0000 0384             }
                 ; 0000 0385 
                 ; 0000 0386             // Update count on LCD only if it changes
                 ; 0000 0387             if (US_count != previous_count)
                 _0xF5:
000801 91e0 0649 	LDS  R30,_previous_count_S0000013000
000803 91f0 064a 	LDS  R31,_previous_count_S0000013000+1
000805 2da6      	MOV  R26,R6
000806 e0b0      	LDI  R27,0
000807 17ea      	CP   R30,R26
000808 07fb      	CPC  R31,R27
000809 f0c1      	BREQ _0xF6
                 ; 0000 0388             {
                 ; 0000 0389                 previous_count = US_count;
00080a 2de6      	MOV  R30,R6
00080b e0f0      	LDI  R31,0
00080c 93e0 0649 	STS  _previous_count_S0000013000,R30
00080e 93f0 064a 	STS  _previous_count_S0000013000+1,R31
                 ; 0000 038A                 lcd_gotoxy(1, 2); // Move to second line
000810 e0e1      	LDI  R30,LOW(1)
000811 93ea      	ST   -Y,R30
000812 e0a2      	LDI  R26,LOW(2)
000813 ddde      	RCALL _lcd_gotoxy
                 ; 0000 038B                 itoa(US_count, numberString);
000814 2de6      	MOV  R30,R6
000815 e0f0      	LDI  R31,0
000816 93fa      	ST   -Y,R31
000817 93ea      	ST   -Y,R30
000818 01de      	MOVW R26,R28
000819 9618      	ADIW R26,8
00081a 940e 082b 	CALL _itoa
                 ; 0000 038C                 lcd_print("Count: ");
                +
00081c e1a1     +LDI R26 , LOW ( _0xEC + ( 34 ) )
00081d e0b6     +LDI R27 , HIGH ( _0xEC + ( 34 ) )
                 	__POINTW2MN _0xEC,34
00081e ddeb      	RCALL _lcd_print
                 ; 0000 038D                 lcd_print(numberString);
00081f 01de      	MOVW R26,R28
000820 9616      	ADIW R26,6
                 _0xFC:
000821 dde8      	RCALL _lcd_print
                 ; 0000 038E             }
                 ; 0000 038F         }
                 _0xF6:
                 ; 0000 0390         delay_ms(100);
000822 e6a4      	LDI  R26,LOW(100)
000823 e0b0      	LDI  R27,0
000824 940e 0987 	CALL _delay_ms
                 ; 0000 0391     }
000826 cf8a      	RJMP _0xED
                 _0xEF:
                 ; 0000 0392 }
000827 940e 0b61 	CALL __LOADLOCR6
000829 9666      	ADIW R28,22
00082a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0xEC:
0005ef           	.BYTE 0x2A
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00082b 93ba      	ST   -Y,R27
00082c 93aa      	ST   -Y,R26
00082d 91a9          ld   r26,y+
00082e 91b9          ld   r27,y+
00082f 91e9          ld   r30,y+
000830 91f9          ld   r31,y+
000831 9630          adiw r30,0
000832 f42a          brpl __itoa0
000833 95e0          com  r30
000834 95f0          com  r31
000835 9631          adiw r30,1
000836 e26d          ldi  r22,'-'
000837 936d          st   x+,r22
                 __itoa0:
000838 94e8          clt
000839 e180          ldi  r24,low(10000)
00083a e297          ldi  r25,high(10000)
00083b d00d          rcall __itoa1
00083c ee88          ldi  r24,low(1000)
00083d e093          ldi  r25,high(1000)
00083e d00a          rcall __itoa1
00083f e684          ldi  r24,100
000840 2799          clr  r25
000841 d007          rcall __itoa1
000842 e08a          ldi  r24,10
000843 d005          rcall __itoa1
000844 2f6e          mov  r22,r30
000845 d010          rcall __itoa5
000846 2766          clr  r22
000847 936c          st   x,r22
000848 9508          ret
                 
                 __itoa1:
000849 2766          clr	 r22
                 __itoa2:
00084a 17e8          cp   r30,r24
00084b 07f9          cpc  r31,r25
00084c f020          brlo __itoa3
00084d 9563          inc  r22
00084e 1be8          sub  r30,r24
00084f 0bf9          sbc  r31,r25
000850 f7c9          brne __itoa2
                 __itoa3:
000851 2366          tst  r22
000852 f411          brne __itoa4
000853 f016          brts __itoa5
000854 9508          ret
                 __itoa4:
000855 9468          set
                 __itoa5:
000856 5d60          subi r22,-0x30
000857 936d          st   x+,r22
000858 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000859 93ba      	ST   -Y,R27
00085a 93aa      	ST   -Y,R26
00085b 81b9          ldd  r27,y+1
00085c 81a8          ld   r26,y
00085d 9610          adiw r26,0
00085e f031          breq memset1
00085f 81fc          ldd  r31,y+4
000860 81eb          ldd  r30,y+3
000861 816a          ldd  r22,y+2
                 memset0:
000862 9361          st   z+,r22
000863 9711          sbiw r26,1
000864 f7e9          brne memset0
                 memset1:
000865 81eb          ldd  r30,y+3
000866 81fc          ldd  r31,y+4
                 _0x20A0001:
000867 9625      	ADIW R28,5
000868 9508      	RET
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000869 93ba      	ST   -Y,R27
00086a 93aa      	ST   -Y,R26
00086b 91a9          ld   r26,y+
00086c 91b9          ld   r27,y+
00086d 27ee          clr  r30
00086e 27ff          clr  r31
                 strlen0:
00086f 916d          ld   r22,x+
000870 2366          tst  r22
000871 f011          breq strlen1
000872 9631          adiw r30,1
000873 cffb          rjmp strlen0
                 strlen1:
000874 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000875 93aa      	ST   -Y,R26
000876 2766          clr  r22
000877 2777          clr  r23
000878 9189          ld   r24,y+
000879 91e9          ld   r30,y+
00087a 91f9          ld   r31,y+
00087b 91a9          ld   r26,y+
00087c 91b9          ld   r27,y+
                 strncmp0:
00087d 2388          tst  r24
00087e f049          breq strncmp1
00087f 958a          dec  r24
000880 916d          ld   r22,x+
000881 9171          ld   r23,z+
000882 1767          cp   r22,r23
000883 f421          brne strncmp1
000884 2366          tst  r22
000885 f7b9          brne strncmp0
                 strncmp3:
000886 27ee          clr  r30
000887 9508          ret
                 strncmp1:
000888 1b67          sub  r22,r23
000889 f3e1          breq strncmp3
00088a e0e1          ldi  r30,1
00088b f408          brcc strncmp2
00088c 50e2          subi r30,2
                 strncmp2:
00088d 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
000619           	.BYTE 0x10
                 _buffer:
000629           	.BYTE 0x20
                 _previous_count_S0000013000:
000649           	.BYTE 0x2
                 __seed_G100:
00064b           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00088e e0e1      	LDI  R30,LOW(1)
00088f e0f0      	LDI  R31,HIGH(1)
000890 15e4      	CP   R30,R4
000891 05f5      	CPC  R31,R5
000892 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:135 WORDS
                 SUBOPT_0x1:
000893 e0a1      	LDI  R26,LOW(1)
000894 940e 05c2 	CALL _lcdCommand
000896 e0e1      	LDI  R30,LOW(1)
000897 93ea      	ST   -Y,R30
000898 e0a1      	LDI  R26,LOW(1)
000899 940c 05f2 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:77 WORDS
                 SUBOPT_0x2:
00089b 940e 060a 	CALL _lcd_print
00089d e0e1      	LDI  R30,LOW(1)
00089e 93ea      	ST   -Y,R30
00089f e0a2      	LDI  R26,LOW(2)
0008a0 940c 05f2 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0008a2 e0e2      	LDI  R30,LOW(2)
0008a3 e0f0      	LDI  R31,HIGH(2)
0008a4 15e4      	CP   R30,R4
0008a5 05f5      	CPC  R31,R5
0008a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0008a7 e0af      	LDI  R26,LOW(15)
0008a8 940e 05c2 	CALL _lcdCommand
                +
0008aa e880     +LDI R24 , LOW ( 3200 )
0008ab e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0008ac 9701     +SBIW R24 , 1
0008ad f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0008ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
0008af e0ac      	LDI  R26,LOW(12)
0008b0 940e 05c2 	CALL _lcdCommand
                +
0008b2 e880     +LDI R24 , LOW ( 3200 )
0008b3 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
0008b4 9701     +SBIW R24 , 1
0008b5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
0008b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0008b7 e0e3      	LDI  R30,LOW(3)
0008b8 e0f0      	LDI  R31,HIGH(3)
0008b9 15e4      	CP   R30,R4
0008ba 05f5      	CPC  R31,R5
0008bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0008bc e0e4      	LDI  R30,LOW(4)
0008bd e0f0      	LDI  R31,HIGH(4)
0008be 15e4      	CP   R30,R4
0008bf 05f5      	CPC  R31,R5
0008c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x8:
0008c1 e2e9      	LDI  R30,LOW(_buffer)
0008c2 e0f6      	LDI  R31,HIGH(_buffer)
0008c3 93fa      	ST   -Y,R31
0008c4 93ea      	ST   -Y,R30
0008c5 e0e0      	LDI  R30,LOW(0)
0008c6 93ea      	ST   -Y,R30
0008c7 e2a0      	LDI  R26,LOW(32)
0008c8 e0b0      	LDI  R27,0
0008c9 940c 0859 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0008cb e2a9      	LDI  R26,LOW(_buffer)
0008cc e0b6      	LDI  R27,HIGH(_buffer)
0008cd 940e 060a 	CALL _lcd_print
0008cf eea8      	LDI  R26,LOW(1000)
0008d0 e0b3      	LDI  R27,HIGH(1000)
0008d1 940c 0987 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xA:
0008d3 01f8      	MOVW R30,R16
0008d4 9631      	ADIW R30,1
0008d5 940e 0b19 	CALL __LSLW3
0008d7 0fe2      	ADD  R30,R18
0008d8 1ff3      	ADC  R31,R19
0008d9 01df      	MOVW R26,R30
0008da 940c 06ad 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
0008dc e0a0      	LDI  R26,LOW(0)
0008dd e0b0      	LDI  R27,0
0008de 940c 06ad 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xC:
0008e0 e0ad      	LDI  R26,LOW(13)
0008e1 940e 06c4 	CALL _USART_Transmit
0008e3 e0ad      	LDI  R26,LOW(13)
0008e4 940e 06c4 	CALL _USART_Transmit
0008e6 efa4      	LDI  R26,LOW(500)
0008e7 e0b1      	LDI  R27,HIGH(500)
0008e8 940c 0987 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
0008ea 940e 060a 	CALL _lcd_print
0008ec eda0      	LDI  R26,LOW(2000)
0008ed e0b7      	LDI  R27,HIGH(2000)
0008ee 940c 0987 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0008f0 e0e6      	LDI  R30,LOW(6)
0008f1 e0f0      	LDI  R31,HIGH(6)
0008f2 15e4      	CP   R30,R4
0008f3 05f5      	CPC  R31,R5
0008f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0008f5 e0e7      	LDI  R30,LOW(7)
0008f6 e0f0      	LDI  R31,HIGH(7)
0008f7 15e4      	CP   R30,R4
0008f8 05f5      	CPC  R31,R5
0008f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0008fa e0e8      	LDI  R30,LOW(8)
0008fb e0f0      	LDI  R31,HIGH(8)
0008fc 15e4      	CP   R30,R4
0008fd 05f5      	CPC  R31,R5
0008fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
0008ff e0e9      	LDI  R30,LOW(9)
000900 e0f0      	LDI  R31,HIGH(9)
000901 15e4      	CP   R30,R4
000902 05f5      	CPC  R31,R5
000903 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
000904 bbe5      	OUT  0x15,R30
000905 b3e3      	IN   R30,0x13
000906 70ef      	ANDI R30,LOW(0xF)
000907 2f1e      	MOV  R17,R30
000908 301f      	CPI  R17,15
000909 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 27 TIMES, CODE SIZE REDUCTION:231 WORDS
                 SUBOPT_0x13:
00090a 2fe0      	MOV  R30,R16
00090b e1a9      	LDI  R26,LOW(_keypad)
00090c e0b6      	LDI  R27,HIGH(_keypad)
00090d e0f0      	LDI  R31,0
00090e 940e 0b1b 	CALL __LSLW2
000910 0fae      	ADD  R26,R30
000911 1fbf      	ADC  R27,R31
000912 27ee      	CLR  R30
000913 0fa3      	ADD  R26,R19
000914 1fbe      	ADC  R27,R30
000915 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 13 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x14:
000916 e2a9      	LDI  R26,LOW(_buffer)
000917 e0b6      	LDI  R27,HIGH(_buffer)
000918 940c 0869 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
00091a 5de7      	SUBI R30,LOW(-_buffer)
00091b 4ff9      	SBCI R31,HIGH(-_buffer)
00091c 010f      	MOVW R0,R30
00091d cfec      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
00091e 91ec      	LD   R30,X
00091f 01d0      	MOVW R26,R0
000920 93ec      	ST   X,R30
000921 cff4      	RJMP SUBOPT_0x14
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
                +
000922 5de6     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000923 4ff9     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000924 e0a0      	LDI  R26,LOW(0)
000925 83a0      	STD  Z+0,R26
000926 cfe3      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x18:
000927 2fe5      	MOV  R30,R21
000928 e0f0      	LDI  R31,0
000929 9731      	SBIW R30,1
00092a 5de7      	SUBI R30,LOW(-_buffer)
00092b 4ff9      	SBCI R31,HIGH(-_buffer)
00092c e0a0      	LDI  R26,LOW(0)
00092d 83a0      	STD  Z+0,R26
00092e e1a0      	LDI  R26,LOW(16)
00092f 940c 05c2 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x19:
000931 940e 060a 	CALL _lcd_print
000933 e1a0      	LDI  R26,LOW(16)
000934 940c 05c2 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1A:
000936 e0f0      	LDI  R31,0
000937 9631      	ADIW R30,1
000938 940e 0b19 	CALL __LSLW3
00093a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
00093b 9721      	SBIW R28,1
00093c 940e 06d8 	CALL _search_student_code
00093e 83e8      	ST   Y,R30
00093f 81a8      	LD   R26,Y
000940 30a1      	CPI  R26,LOW(0x1)
000941 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
000942 93aa      	ST   -Y,R26
000943 b3e8      	IN   R30,0x18
000944 70ef      	ANDI R30,LOW(0xF)
000945 2fae      	MOV  R26,R30
000946 81e8      	LD   R30,Y
000947 7fe0      	ANDI R30,LOW(0xF0)
000948 2bea      	OR   R30,R26
000949 bbe8      	OUT  0x18,R30
00094a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
00094b 98c1      	CBI  0x18,1
00094c 9ac2      	SBI  0x18,2
                +
00094d e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
00094e 958a     +DEC R24
00094f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000950 98c2      	CBI  0x18,2
000951 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1E:
000952 b3e8      	IN   R30,0x18
000953 70ef      	ANDI R30,LOW(0xF)
000954 2fae      	MOV  R26,R30
000955 81e8      	LD   R30,Y
000956 95e2      	SWAP R30
000957 7fe0      	ANDI R30,0xF0
000958 2bea      	OR   R30,R26
000959 bbe8      	OUT  0x18,R30
00095a 9ac2      	SBI  0x18,2
                +
00095b e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
00095c 958a     +DEC R24
00095d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
00095e 98c2      	CBI  0x18,2
00095f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1F:
000960 940e 05c2 	CALL _lcdCommand
                +
000962 e880     +LDI R24 , LOW ( 3200 )
000963 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000964 9701     +SBIW R24 , 1
000965 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000966 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
000967 81ea      	LDD  R30,Y+2
000968 70f0      	ANDI R31,HIGH(0x0)
000969 70e3      	ANDI R30,LOW(0x3)
00096a bbef      	OUT  0x1F,R30
00096b 81e9      	LDD  R30,Y+1
00096c bbee      	OUT  0x1E,R30
00096d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x21:
                +
00096e 81ac     +LDD R26 , Y + 4
00096f 81bd     +LDD R27 , Y + 4 + 1
000970 818e     +LDD R24 , Y + 4 + 2
000971 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
000972 3ca0     +CPI R26 , LOW ( 0x927C0 )
000973 e2e7     +LDI R30 , HIGH ( 0x927C0 )
000974 07be     +CPC R27 , R30
000975 e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
000976 078e     +CPC R24 , R30
000977 e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
000978 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
000979 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x22:
                +
00097a 81ec     +LDD R30 , Y + 4
00097b 81fd     +LDD R31 , Y + 4 + 1
00097c 816e     +LDD R22 , Y + 4 + 2
00097d 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
00097e 5fef     +SUBI R30 , LOW ( - 1 )
00097f 4fff     +SBCI R31 , HIGH ( - 1 )
000980 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000981 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
000982 83ec     +STD Y + 4 , R30
000983 83fd     +STD Y + 4 + 1 , R31
000984 836e     +STD Y + 4 + 2 , R22
000985 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000986 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000987 9610      	adiw r26,0
000988 f039      	breq __delay_ms1
                 __delay_ms0:
000989 95a8      	wdr
                +
00098a ed80     +LDI R24 , LOW ( 0x7D0 )
00098b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00098c 9701     +SBIW R24 , 1
00098d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00098e 9711      	sbiw r26,1
00098f f7c9      	brne __delay_ms0
                 __delay_ms1:
000990 9508      	ret
                 
                 __ROUND_REPACK:
000991 2355      	TST  R21
000992 f442      	BRPL __REPACK
000993 3850      	CPI  R21,0x80
000994 f411      	BRNE __ROUND_REPACK0
000995 ffe0      	SBRS R30,0
000996 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000997 9631      	ADIW R30,1
000998 1f69      	ADC  R22,R25
000999 1f79      	ADC  R23,R25
00099a f06b      	BRVS __REPACK1
                 
                 __REPACK:
00099b e850      	LDI  R21,0x80
00099c 2757      	EOR  R21,R23
00099d f411      	BRNE __REPACK0
00099e 935f      	PUSH R21
00099f c0c8      	RJMP __ZERORES
                 __REPACK0:
0009a0 3f5f      	CPI  R21,0xFF
0009a1 f031      	BREQ __REPACK1
0009a2 0f66      	LSL  R22
0009a3 0c00      	LSL  R0
0009a4 9557      	ROR  R21
0009a5 9567      	ROR  R22
0009a6 2f75      	MOV  R23,R21
0009a7 9508      	RET
                 __REPACK1:
0009a8 935f      	PUSH R21
0009a9 2000      	TST  R0
0009aa f00a      	BRMI __REPACK2
0009ab c0c8      	RJMP __MAXRES
                 __REPACK2:
0009ac c0c1      	RJMP __MINRES
                 
                 __UNPACK:
0009ad e850      	LDI  R21,0x80
0009ae 2e19      	MOV  R1,R25
0009af 2215      	AND  R1,R21
0009b0 0f88      	LSL  R24
0009b1 1f99      	ROL  R25
0009b2 2795      	EOR  R25,R21
0009b3 0f55      	LSL  R21
0009b4 9587      	ROR  R24
                 
                 __UNPACK1:
0009b5 e850      	LDI  R21,0x80
0009b6 2e07      	MOV  R0,R23
0009b7 2205      	AND  R0,R21
0009b8 0f66      	LSL  R22
0009b9 1f77      	ROL  R23
0009ba 2775      	EOR  R23,R21
0009bb 0f55      	LSL  R21
0009bc 9567      	ROR  R22
0009bd 9508      	RET
                 
                 __CFD1U:
0009be 9468      	SET
0009bf c001      	RJMP __CFD1U0
                 __CFD1:
0009c0 94e8      	CLT
                 __CFD1U0:
0009c1 935f      	PUSH R21
0009c2 dff2      	RCALL __UNPACK1
0009c3 3870      	CPI  R23,0x80
0009c4 f018      	BRLO __CFD10
0009c5 3f7f      	CPI  R23,0xFF
0009c6 f408      	BRCC __CFD10
0009c7 c0a0      	RJMP __ZERORES
                 __CFD10:
0009c8 e156      	LDI  R21,22
0009c9 1b57      	SUB  R21,R23
0009ca f4aa      	BRPL __CFD11
0009cb 9551      	NEG  R21
0009cc 3058      	CPI  R21,8
0009cd f40e      	BRTC __CFD19
0009ce 3059      	CPI  R21,9
                 __CFD19:
0009cf f030      	BRLO __CFD17
0009d0 efef      	SER  R30
0009d1 efff      	SER  R31
0009d2 ef6f      	SER  R22
0009d3 e77f      	LDI  R23,0x7F
0009d4 f977      	BLD  R23,7
0009d5 c01a      	RJMP __CFD15
                 __CFD17:
0009d6 2777      	CLR  R23
0009d7 2355      	TST  R21
0009d8 f0b9      	BREQ __CFD15
                 __CFD18:
0009d9 0fee      	LSL  R30
0009da 1fff      	ROL  R31
0009db 1f66      	ROL  R22
0009dc 1f77      	ROL  R23
0009dd 955a      	DEC  R21
0009de f7d1      	BRNE __CFD18
0009df c010      	RJMP __CFD15
                 __CFD11:
0009e0 2777      	CLR  R23
                 __CFD12:
0009e1 3058      	CPI  R21,8
0009e2 f028      	BRLO __CFD13
0009e3 2fef      	MOV  R30,R31
0009e4 2ff6      	MOV  R31,R22
0009e5 2f67      	MOV  R22,R23
0009e6 5058      	SUBI R21,8
0009e7 cff9      	RJMP __CFD12
                 __CFD13:
0009e8 2355      	TST  R21
0009e9 f031      	BREQ __CFD15
                 __CFD14:
0009ea 9576      	LSR  R23
0009eb 9567      	ROR  R22
0009ec 95f7      	ROR  R31
0009ed 95e7      	ROR  R30
0009ee 955a      	DEC  R21
0009ef f7d1      	BRNE __CFD14
                 __CFD15:
0009f0 2000      	TST  R0
0009f1 f40a      	BRPL __CFD16
0009f2 d11e      	RCALL __ANEGD1
                 __CFD16:
0009f3 915f      	POP  R21
0009f4 9508      	RET
                 
                 __CDF1U:
0009f5 9468      	SET
0009f6 c001      	RJMP __CDF1U0
                 __CDF1:
0009f7 94e8      	CLT
                 __CDF1U0:
0009f8 9730      	SBIW R30,0
0009f9 4060      	SBCI R22,0
0009fa 4070      	SBCI R23,0
0009fb f0b1      	BREQ __CDF10
0009fc 2400      	CLR  R0
0009fd f026      	BRTS __CDF11
0009fe 2377      	TST  R23
0009ff f412      	BRPL __CDF11
000a00 9400      	COM  R0
000a01 d10f      	RCALL __ANEGD1
                 __CDF11:
000a02 2e17      	MOV  R1,R23
000a03 e17e      	LDI  R23,30
000a04 2011      	TST  R1
                 __CDF12:
000a05 f032      	BRMI __CDF13
000a06 957a      	DEC  R23
000a07 0fee      	LSL  R30
000a08 1fff      	ROL  R31
000a09 1f66      	ROL  R22
000a0a 1c11      	ROL  R1
000a0b cff9      	RJMP __CDF12
                 __CDF13:
000a0c 2fef      	MOV  R30,R31
000a0d 2ff6      	MOV  R31,R22
000a0e 2d61      	MOV  R22,R1
000a0f 935f      	PUSH R21
000a10 df8a      	RCALL __REPACK
000a11 915f      	POP  R21
                 __CDF10:
000a12 9508      	RET
                 
                 __SWAPACC:
000a13 934f      	PUSH R20
000a14 01af      	MOVW R20,R30
000a15 01fd      	MOVW R30,R26
000a16 01da      	MOVW R26,R20
000a17 01ab      	MOVW R20,R22
000a18 01bc      	MOVW R22,R24
000a19 01ca      	MOVW R24,R20
000a1a 2d40      	MOV  R20,R0
000a1b 2c01      	MOV  R0,R1
000a1c 2e14      	MOV  R1,R20
000a1d 914f      	POP  R20
000a1e 9508      	RET
                 
                 __UADD12:
000a1f 0fea      	ADD  R30,R26
000a20 1ffb      	ADC  R31,R27
000a21 1f68      	ADC  R22,R24
000a22 9508      	RET
                 
                 __NEGMAN1:
000a23 95e0      	COM  R30
000a24 95f0      	COM  R31
000a25 9560      	COM  R22
000a26 5fef      	SUBI R30,-1
000a27 4fff      	SBCI R31,-1
000a28 4f6f      	SBCI R22,-1
000a29 9508      	RET
                 
                 __ADDF12:
000a2a 935f      	PUSH R21
000a2b df81      	RCALL __UNPACK
000a2c 3890      	CPI  R25,0x80
000a2d f139      	BREQ __ADDF129
                 
                 __ADDF120:
000a2e 3870      	CPI  R23,0x80
000a2f f121      	BREQ __ADDF128
                 __ADDF121:
000a30 2f57      	MOV  R21,R23
000a31 1b59      	SUB  R21,R25
000a32 f12b      	BRVS __ADDF1211
000a33 f412      	BRPL __ADDF122
000a34 dfde      	RCALL __SWAPACC
000a35 cffa      	RJMP __ADDF121
                 __ADDF122:
000a36 3158      	CPI  R21,24
000a37 f018      	BRLO __ADDF123
000a38 27aa      	CLR  R26
000a39 27bb      	CLR  R27
000a3a 2788      	CLR  R24
                 __ADDF123:
000a3b 3058      	CPI  R21,8
000a3c f028      	BRLO __ADDF124
000a3d 2fab      	MOV  R26,R27
000a3e 2fb8      	MOV  R27,R24
000a3f 2788      	CLR  R24
000a40 5058      	SUBI R21,8
000a41 cff9      	RJMP __ADDF123
                 __ADDF124:
000a42 2355      	TST  R21
000a43 f029      	BREQ __ADDF126
                 __ADDF125:
000a44 9586      	LSR  R24
000a45 95b7      	ROR  R27
000a46 95a7      	ROR  R26
000a47 955a      	DEC  R21
000a48 f7d9      	BRNE __ADDF125
                 __ADDF126:
000a49 2d50      	MOV  R21,R0
000a4a 2551      	EOR  R21,R1
000a4b f072      	BRMI __ADDF127
000a4c dfd2      	RCALL __UADD12
000a4d f438      	BRCC __ADDF129
000a4e 9567      	ROR  R22
000a4f 95f7      	ROR  R31
000a50 95e7      	ROR  R30
000a51 9573      	INC  R23
000a52 f413      	BRVC __ADDF129
000a53 c020      	RJMP __MAXRES
                 __ADDF128:
000a54 dfbe      	RCALL __SWAPACC
                 __ADDF129:
000a55 df45      	RCALL __REPACK
000a56 915f      	POP  R21
000a57 9508      	RET
                 __ADDF1211:
000a58 f7d8      	BRCC __ADDF128
000a59 cffb      	RJMP __ADDF129
                 __ADDF127:
000a5a 1bea      	SUB  R30,R26
000a5b 0bfb      	SBC  R31,R27
000a5c 0b68      	SBC  R22,R24
000a5d f051      	BREQ __ZERORES
000a5e f410      	BRCC __ADDF1210
000a5f 9400      	COM  R0
000a60 dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
000a61 2366      	TST  R22
000a62 f392      	BRMI __ADDF129
000a63 0fee      	LSL  R30
000a64 1fff      	ROL  R31
000a65 1f66      	ROL  R22
000a66 957a      	DEC  R23
000a67 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000a68 27ee      	CLR  R30
000a69 27ff      	CLR  R31
000a6a 2766      	CLR  R22
000a6b 2777      	CLR  R23
000a6c 915f      	POP  R21
000a6d 9508      	RET
                 
                 __MINRES:
000a6e efef      	SER  R30
000a6f efff      	SER  R31
000a70 e76f      	LDI  R22,0x7F
000a71 ef7f      	SER  R23
000a72 915f      	POP  R21
000a73 9508      	RET
                 
                 __MAXRES:
000a74 efef      	SER  R30
000a75 efff      	SER  R31
000a76 e76f      	LDI  R22,0x7F
000a77 e77f      	LDI  R23,0x7F
000a78 915f      	POP  R21
000a79 9508      	RET
                 
                 __MULF12:
000a7a 935f      	PUSH R21
000a7b df31      	RCALL __UNPACK
000a7c 3870      	CPI  R23,0x80
000a7d f351      	BREQ __ZERORES
000a7e 3890      	CPI  R25,0x80
000a7f f341      	BREQ __ZERORES
000a80 2401      	EOR  R0,R1
000a81 9408      	SEC
000a82 1f79      	ADC  R23,R25
000a83 f423      	BRVC __MULF124
000a84 f31c      	BRLT __ZERORES
                 __MULF125:
000a85 2000      	TST  R0
000a86 f33a      	BRMI __MINRES
000a87 cfec      	RJMP __MAXRES
                 __MULF124:
000a88 920f      	PUSH R0
000a89 931f      	PUSH R17
000a8a 932f      	PUSH R18
000a8b 933f      	PUSH R19
000a8c 934f      	PUSH R20
000a8d 2711      	CLR  R17
000a8e 2722      	CLR  R18
000a8f 2799      	CLR  R25
000a90 9f68      	MUL  R22,R24
000a91 01a0      	MOVW R20,R0
000a92 9f8f      	MUL  R24,R31
000a93 2d30      	MOV  R19,R0
000a94 0d41      	ADD  R20,R1
000a95 1f59      	ADC  R21,R25
000a96 9f6b      	MUL  R22,R27
000a97 0d30      	ADD  R19,R0
000a98 1d41      	ADC  R20,R1
000a99 1f59      	ADC  R21,R25
000a9a 9f8e      	MUL  R24,R30
000a9b d027      	RCALL __MULF126
000a9c 9fbf      	MUL  R27,R31
000a9d d025      	RCALL __MULF126
000a9e 9f6a      	MUL  R22,R26
000a9f d023      	RCALL __MULF126
000aa0 9fbe      	MUL  R27,R30
000aa1 d01d      	RCALL __MULF127
000aa2 9faf      	MUL  R26,R31
000aa3 d01b      	RCALL __MULF127
000aa4 9fae      	MUL  R26,R30
000aa5 0d11      	ADD  R17,R1
000aa6 1f29      	ADC  R18,R25
000aa7 1f39      	ADC  R19,R25
000aa8 1f49      	ADC  R20,R25
000aa9 1f59      	ADC  R21,R25
000aaa 2fe3      	MOV  R30,R19
000aab 2ff4      	MOV  R31,R20
000aac 2f65      	MOV  R22,R21
000aad 2f52      	MOV  R21,R18
000aae 914f      	POP  R20
000aaf 913f      	POP  R19
000ab0 912f      	POP  R18
000ab1 911f      	POP  R17
000ab2 900f      	POP  R0
000ab3 2366      	TST  R22
000ab4 f02a      	BRMI __MULF122
000ab5 0f55      	LSL  R21
000ab6 1fee      	ROL  R30
000ab7 1fff      	ROL  R31
000ab8 1f66      	ROL  R22
000ab9 c002      	RJMP __MULF123
                 __MULF122:
000aba 9573      	INC  R23
000abb f24b      	BRVS __MULF125
                 __MULF123:
000abc ded4      	RCALL __ROUND_REPACK
000abd 915f      	POP  R21
000abe 9508      	RET
                 
                 __MULF127:
000abf 0d10      	ADD  R17,R0
000ac0 1d21      	ADC  R18,R1
000ac1 1f39      	ADC  R19,R25
000ac2 c002      	RJMP __MULF128
                 __MULF126:
000ac3 0d20      	ADD  R18,R0
000ac4 1d31      	ADC  R19,R1
                 __MULF128:
000ac5 1f49      	ADC  R20,R25
000ac6 1f59      	ADC  R21,R25
000ac7 9508      	RET
                 
                 __DIVF21:
000ac8 935f      	PUSH R21
000ac9 dee3      	RCALL __UNPACK
000aca 3870      	CPI  R23,0x80
000acb f421      	BRNE __DIVF210
000acc 2011      	TST  R1
                 __DIVF211:
000acd f40a      	BRPL __DIVF219
000ace cf9f      	RJMP __MINRES
                 __DIVF219:
000acf cfa4      	RJMP __MAXRES
                 __DIVF210:
000ad0 3890      	CPI  R25,0x80
000ad1 f409      	BRNE __DIVF218
                 __DIVF217:
000ad2 cf95      	RJMP __ZERORES
                 __DIVF218:
000ad3 2401      	EOR  R0,R1
000ad4 9408      	SEC
000ad5 0b97      	SBC  R25,R23
000ad6 f41b      	BRVC __DIVF216
000ad7 f3d4      	BRLT __DIVF217
000ad8 2000      	TST  R0
000ad9 cff3      	RJMP __DIVF211
                 __DIVF216:
000ada 2f79      	MOV  R23,R25
000adb 931f      	PUSH R17
000adc 932f      	PUSH R18
000add 933f      	PUSH R19
000ade 934f      	PUSH R20
000adf 2411      	CLR  R1
000ae0 2711      	CLR  R17
000ae1 2722      	CLR  R18
000ae2 2733      	CLR  R19
000ae3 2744      	CLR  R20
000ae4 2755      	CLR  R21
000ae5 e290      	LDI  R25,32
                 __DIVF212:
000ae6 17ae      	CP   R26,R30
000ae7 07bf      	CPC  R27,R31
000ae8 0786      	CPC  R24,R22
000ae9 0741      	CPC  R20,R17
000aea f030      	BRLO __DIVF213
000aeb 1bae      	SUB  R26,R30
000aec 0bbf      	SBC  R27,R31
000aed 0b86      	SBC  R24,R22
000aee 0b41      	SBC  R20,R17
000aef 9408      	SEC
000af0 c001      	RJMP __DIVF214
                 __DIVF213:
000af1 9488      	CLC
                 __DIVF214:
000af2 1f55      	ROL  R21
000af3 1f22      	ROL  R18
000af4 1f33      	ROL  R19
000af5 1c11      	ROL  R1
000af6 1faa      	ROL  R26
000af7 1fbb      	ROL  R27
000af8 1f88      	ROL  R24
000af9 1f44      	ROL  R20
000afa 959a      	DEC  R25
000afb f751      	BRNE __DIVF212
000afc 01f9      	MOVW R30,R18
000afd 2d61      	MOV  R22,R1
000afe 914f      	POP  R20
000aff 913f      	POP  R19
000b00 912f      	POP  R18
000b01 911f      	POP  R17
000b02 2366      	TST  R22
000b03 f032      	BRMI __DIVF215
000b04 0f55      	LSL  R21
000b05 1fee      	ROL  R30
000b06 1fff      	ROL  R31
000b07 1f66      	ROL  R22
000b08 957a      	DEC  R23
000b09 f243      	BRVS __DIVF217
                 __DIVF215:
000b0a de86      	RCALL __ROUND_REPACK
000b0b 915f      	POP  R21
000b0c 9508      	RET
                 
                 __ANEGW1:
000b0d 95f1      	NEG  R31
000b0e 95e1      	NEG  R30
000b0f 40f0      	SBCI R31,0
000b10 9508      	RET
                 
                 __ANEGD1:
000b11 95f0      	COM  R31
000b12 9560      	COM  R22
000b13 9570      	COM  R23
000b14 95e1      	NEG  R30
000b15 4fff      	SBCI R31,-1
000b16 4f6f      	SBCI R22,-1
000b17 4f7f      	SBCI R23,-1
000b18 9508      	RET
                 
                 __LSLW3:
000b19 0fee      	LSL  R30
000b1a 1fff      	ROL  R31
                 __LSLW2:
000b1b 0fee      	LSL  R30
000b1c 1fff      	ROL  R31
000b1d 0fee      	LSL  R30
000b1e 1fff      	ROL  R31
000b1f 9508      	RET
                 
                 __LSRD1:
000b20 9576      	LSR  R23
000b21 9567      	ROR  R22
000b22 95f7      	ROR  R31
000b23 95e7      	ROR  R30
000b24 9508      	RET
                 
                 __CWD1:
000b25 2f6f      	MOV  R22,R31
000b26 0f66      	ADD  R22,R22
000b27 0b66      	SBC  R22,R22
000b28 2f76      	MOV  R23,R22
000b29 9508      	RET
                 
                 __DIVW21U:
000b2a 2400      	CLR  R0
000b2b 2411      	CLR  R1
000b2c e190      	LDI  R25,16
                 __DIVW21U1:
000b2d 0faa      	LSL  R26
000b2e 1fbb      	ROL  R27
000b2f 1c00      	ROL  R0
000b30 1c11      	ROL  R1
000b31 1a0e      	SUB  R0,R30
000b32 0a1f      	SBC  R1,R31
000b33 f418      	BRCC __DIVW21U2
000b34 0e0e      	ADD  R0,R30
000b35 1e1f      	ADC  R1,R31
000b36 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000b37 60a1      	SBR  R26,1
                 __DIVW21U3:
000b38 959a      	DEC  R25
000b39 f799      	BRNE __DIVW21U1
000b3a 01fd      	MOVW R30,R26
000b3b 01d0      	MOVW R26,R0
000b3c 9508      	RET
                 
                 __MODW21:
000b3d 94e8      	CLT
000b3e ffb7      	SBRS R27,7
000b3f c004      	RJMP __MODW211
000b40 95a0      	COM  R26
000b41 95b0      	COM  R27
000b42 9611      	ADIW R26,1
000b43 9468      	SET
                 __MODW211:
000b44 fdf7      	SBRC R31,7
000b45 dfc7      	RCALL __ANEGW1
000b46 dfe3      	RCALL __DIVW21U
000b47 01fd      	MOVW R30,R26
000b48 f40e      	BRTC __MODW212
000b49 dfc3      	RCALL __ANEGW1
                 __MODW212:
000b4a 9508      	RET
                 
                 __GETD1S0:
000b4b 81e8      	LD   R30,Y
000b4c 81f9      	LDD  R31,Y+1
000b4d 816a      	LDD  R22,Y+2
000b4e 817b      	LDD  R23,Y+3
000b4f 9508      	RET
                 
                 __GETD2S0:
000b50 81a8      	LD   R26,Y
000b51 81b9      	LDD  R27,Y+1
000b52 818a      	LDD  R24,Y+2
000b53 819b      	LDD  R25,Y+3
000b54 9508      	RET
                 
                 __PUTD1S0:
000b55 83e8      	ST   Y,R30
000b56 83f9      	STD  Y+1,R31
000b57 836a      	STD  Y+2,R22
000b58 837b      	STD  Y+3,R23
000b59 9508      	RET
                 
                 __SAVELOCR6:
000b5a 935a      	ST   -Y,R21
                 __SAVELOCR5:
000b5b 934a      	ST   -Y,R20
                 __SAVELOCR4:
000b5c 933a      	ST   -Y,R19
                 __SAVELOCR3:
000b5d 932a      	ST   -Y,R18
                 __SAVELOCR2:
000b5e 931a      	ST   -Y,R17
000b5f 930a      	ST   -Y,R16
000b60 9508      	RET
                 
                 __LOADLOCR6:
000b61 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000b62 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000b63 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000b64 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000b65 8119      	LDD  R17,Y+1
000b66 8108      	LD   R16,Y
000b67 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  51 r1 :  27 r2 :   0 r3 :   0 r4 :  34 r5 :  22 r6 :   4 r7 :  11 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  34 r17:  51 r18:  36 r19:  44 r20:  27 r21:  76 r22:  78 r23:  53 
r24:  61 r25:  48 r26: 261 r27: 121 r28:  31 r29:   1 r30: 426 r31: 175 
x  :  41 y  : 183 z  :  12 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  31 add   :  22 
adiw  :  33 and   :   2 andi  :  13 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  40 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  16 
brlt  :   2 brmi  :   7 brne  :  82 brpl  :   7 brsh  :  10 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 207 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  59 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  29 cpc   :  44 cpi   :  63 cpse  :   0 dec   :  13 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  14 inc   :   4 jmp   :  34 ld    :  68 ldd   :  46 ldi   : 385 
lds   :   2 lpm   :   7 lsl   :  15 lsr   :   3 mov   :  72 movw  :  52 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   5 
ori   :   0 out   :  37 pop   :  22 push  :  21 rcall :  75 ret   :  68 
reti  :   1 rjmp  : 127 rol   :  30 ror   :  15 sbc   :   9 sbci  :  22 
sbi   :  14 sbic  :   3 sbis  :   4 sbiw  :  31 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   3 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  91 std   :  24 sts   :   2 sub   :   7 subi  :  26 swap  :   1 
tst   :  20 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0016d0   4768   1072   5840   32768  17.8%
[.dseg] 0x000060 0x00064f      0   1007   1007    2048  49.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
