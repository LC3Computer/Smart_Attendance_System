
AVRASM ver. 2.1.30  C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm Thu Jan 02 11:13:11 2025

C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1093): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 450 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x01C2
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _stage=R5
                 	.DEF _page_num=R4
                 	.DEF _US_count=R7
                 	.DEF _logged_in=R6
                 	.DEF _submitTime=R9
                 	.DEF _timerCount=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 03a1 	JMP  __RESET
000002 940c 061c 	JMP  _int0_routine
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 060a 	JMP  _timer2_ovf_isr
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G103:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G103:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0500      	.DB  0x0,0x5
                 
                 _0x3:
000036 3837
000037 4f39
000038 3534
000039 4436      	.DB  0x37,0x38,0x39,0x4F,0x34,0x35,0x36,0x44
00003a 3231
00003b 4333
00003c 304c
00003d 4552      	.DB  0x31,0x32,0x33,0x43,0x4C,0x30,0x52,0x45
                 _0x5:
00003e 0222
00003f 0226
000040 022a
000041 022e      	.DB  LOW(_0x4),HIGH(_0x4),LOW(_0x4+4),HIGH(_0x4+4),LOW(_0x4+8),HIGH(_0x4+8),LOW(_0x4+12),HIGH(_0x4+12)
000042 0232
000043 0236
000044 023a      	.DB  LOW(_0x4+16),HIGH(_0x4+16),LOW(_0x4+20),HIGH(_0x4+20),LOW(_0x4+24),HIGH(_0x4+24)
                 _0x17D:
000045 ffff      	.DB  0xFF,0xFF
                 _0x0:
000046 7553
000047 006e
000048 6f4d
000049 006e      	.DB  0x53,0x75,0x6E,0x0,0x4D,0x6F,0x6E,0x0
00004a 7554
00004b 0065
00004c 6557
00004d 0064      	.DB  0x54,0x75,0x65,0x0,0x57,0x65,0x64,0x0
00004e 6854
00004f 0075
000050 7246
000051 0069      	.DB  0x54,0x68,0x75,0x0,0x46,0x72,0x69,0x0
000052 6153
000053 0074
000054 3a31
000055 5320      	.DB  0x53,0x61,0x74,0x0,0x31,0x3A,0x20,0x53
000056 6275
000057 696d
000058 2074
000059 7453      	.DB  0x75,0x62,0x6D,0x69,0x74,0x20,0x53,0x74
00005a 6475
00005b 6e65
00005c 2074
00005d 6f43      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x43,0x6F
00005e 6564
00005f 3200
000060 203a
000061 7553      	.DB  0x64,0x65,0x0,0x32,0x3A,0x20,0x53,0x75
000062 6d62
000063 7469
000064 5720
000065 7469      	.DB  0x62,0x6D,0x69,0x74,0x20,0x57,0x69,0x74
000066 2068
000067 6143
000068 6472
000069 5400      	.DB  0x68,0x20,0x43,0x61,0x72,0x64,0x0,0x54
00006a 6d69
00006b 2065
00006c 6f66
00006d 2072      	.DB  0x69,0x6D,0x65,0x20,0x66,0x6F,0x72,0x20
00006e 7573
00006f 6d62
000070 7469
000071 6920      	.DB  0x73,0x75,0x62,0x6D,0x69,0x74,0x20,0x69
000072 2073
000073 6966
000074 696e
000075 6873      	.DB  0x73,0x20,0x66,0x69,0x6E,0x69,0x73,0x68
000076 6465
000077 4500
000078 746e
000079 7265      	.DB  0x65,0x64,0x0,0x45,0x6E,0x74,0x65,0x72
00007a 7920
00007b 756f
00007c 2072
00007d 7473      	.DB  0x20,0x79,0x6F,0x75,0x72,0x20,0x73,0x74
00007e 6475
00007f 6e65
000080 2074
000081 6f63      	.DB  0x75,0x64,0x65,0x6E,0x74,0x20,0x63,0x6F
000082 6564
000083 003a
000084 7242
000085 6e69      	.DB  0x64,0x65,0x3A,0x0,0x42,0x72,0x69,0x6E
000086 2067
000087 6f79
000088 7275
000089 6320      	.DB  0x67,0x20,0x79,0x6F,0x75,0x72,0x20,0x63
00008a 7261
00008b 2064
00008c 656e
00008d 7261      	.DB  0x61,0x72,0x64,0x20,0x6E,0x65,0x61,0x72
00008e 6420
00008f 7665
000090 6369
000091 3a65      	.DB  0x20,0x64,0x65,0x76,0x69,0x63,0x65,0x3A
000092 3400
000093 0030
000094 6e49
000095 6176      	.DB  0x0,0x34,0x30,0x0,0x49,0x6E,0x76,0x61
000096 696c
000097 2064
000098 6143
000099 6472      	.DB  0x6C,0x69,0x64,0x20,0x43,0x61,0x72,0x64
00009a 4400
00009b 7075
00009c 696c
00009d 6163      	.DB  0x0,0x44,0x75,0x70,0x6C,0x69,0x63,0x61
00009e 6574
00009f 5320
0000a0 7574
0000a1 6564      	.DB  0x74,0x65,0x20,0x53,0x74,0x75,0x64,0x65
0000a2 746e
0000a3 4320
0000a4 646f
0000a5 0065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x0
0000a6 7453
0000a7 6475
0000a8 6e65
0000a9 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0000aa 6461
0000ab 6564
0000ac 2064
0000ad 6977      	.DB  0x61,0x64,0x64,0x65,0x64,0x20,0x77,0x69
0000ae 6874
0000af 4920
0000b0 3a44
0000b1 4e00      	.DB  0x74,0x68,0x20,0x49,0x44,0x3A,0x0,0x4E
0000b2 6d75
0000b3 6562
0000b4 2072
0000b5 666f      	.DB  0x75,0x6D,0x62,0x65,0x72,0x20,0x6F,0x66
0000b6 7320
0000b7 7574
0000b8 6564
0000b9 746e      	.DB  0x20,0x73,0x74,0x75,0x64,0x65,0x6E,0x74
0000ba 2073
0000bb 203a
0000bc 5000
0000bd 6572      	.DB  0x73,0x20,0x3A,0x20,0x0,0x50,0x72,0x65
0000be 7373
0000bf 4320
0000c0 6e61
0000c1 6563      	.DB  0x73,0x73,0x20,0x43,0x61,0x6E,0x63,0x65
0000c2 206c
0000c3 6f54
0000c4 4720
0000c5 206f      	.DB  0x6C,0x20,0x54,0x6F,0x20,0x47,0x6F,0x20
0000c6 6142
0000c7 6b63
0000c8 5300
0000c9 6174      	.DB  0x42,0x61,0x63,0x6B,0x0,0x53,0x74,0x61
0000ca 7472
0000cb 5420
0000cc 6172
0000cd 736e      	.DB  0x72,0x74,0x20,0x54,0x72,0x61,0x6E,0x73
0000ce 6566
0000cf 7272
0000d0 6e69
0000d1 2e67      	.DB  0x66,0x65,0x72,0x72,0x69,0x6E,0x67,0x2E
0000d2 2e2e
0000d3 5500
0000d4 6173
0000d5 7472      	.DB  0x2E,0x2E,0x0,0x55,0x73,0x61,0x72,0x74
0000d6 5420
0000d7 6172
0000d8 736e
0000d9 696d      	.DB  0x20,0x54,0x72,0x61,0x6E,0x73,0x6D,0x69
0000da 2074
0000db 6946
0000dc 696e
0000dd 6873      	.DB  0x74,0x20,0x46,0x69,0x6E,0x69,0x73,0x68
0000de 6465
0000df 3100
0000e0 203a
0000e1 6553      	.DB  0x65,0x64,0x0,0x31,0x3A,0x20,0x53,0x65
0000e2 7261
0000e3 6863
0000e4 5320
0000e5 7574      	.DB  0x61,0x72,0x63,0x68,0x20,0x53,0x74,0x75
0000e6 6564
0000e7 746e
0000e8 3200
0000e9 203a      	.DB  0x64,0x65,0x6E,0x74,0x0,0x32,0x3A,0x20
0000ea 6544
0000eb 656c
0000ec 6574
0000ed 5320      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x20,0x53
0000ee 7574
0000ef 6564
0000f0 746e
0000f1 4500      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x0,0x45
0000f2 746e
0000f3 7265
0000f4 5320
0000f5 7574      	.DB  0x6E,0x74,0x65,0x72,0x20,0x53,0x74,0x75
0000f6 6564
0000f7 746e
0000f8 4320
0000f9 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
0000fa 2065
0000fb 6f46
0000fc 2072
0000fd 6553      	.DB  0x65,0x20,0x46,0x6F,0x72,0x20,0x53,0x65
0000fe 7261
0000ff 6863
000100 003a
000101 6e45      	.DB  0x61,0x72,0x63,0x68,0x3A,0x0,0x45,0x6E
000102 6574
000103 2072
000104 7453
000105 6475      	.DB  0x74,0x65,0x72,0x20,0x53,0x74,0x75,0x64
000106 6e65
000107 2074
000108 6f43
000109 6564      	.DB  0x65,0x6E,0x74,0x20,0x43,0x6F,0x64,0x65
00010a 4620
00010b 726f
00010c 4420
00010d 6c65      	.DB  0x20,0x46,0x6F,0x72,0x20,0x44,0x65,0x6C
00010e 7465
00010f 3a65
000110 4500
000111 746e      	.DB  0x65,0x74,0x65,0x3A,0x0,0x45,0x6E,0x74
000112 7265
000113 5320
000114 6365
000115 6572      	.DB  0x65,0x72,0x20,0x53,0x65,0x63,0x72,0x65
000116 2074
000117 6f43
000118 6564
000119 2820      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x28
00011a 726f
00011b 6320
00011c 6e61
00011d 6563      	.DB  0x6F,0x72,0x20,0x63,0x61,0x6E,0x63,0x65
00011e 296c
00011f 3100
000120 3a20
000121 4320      	.DB  0x6C,0x29,0x0,0x31,0x20,0x3A,0x20,0x43
000122 656c
000123 7261
000124 4520
000125 5045      	.DB  0x6C,0x65,0x61,0x72,0x20,0x45,0x45,0x50
000126 4f52
000127 004d
000128 2020
000129 2020      	.DB  0x52,0x4F,0x4D,0x0,0x20,0x20,0x20,0x20
00012a 7270
00012b 7365
00012c 2073
00012d 6163      	.DB  0x70,0x72,0x65,0x73,0x73,0x20,0x63,0x61
00012e 636e
00012f 6c65
000130 7420
000131 206f      	.DB  0x6E,0x63,0x65,0x6C,0x20,0x74,0x6F,0x20
000132 6162
000133 6b63
000134 5300
000135 7465      	.DB  0x62,0x61,0x63,0x6B,0x0,0x53,0x65,0x74
000136 5420
000137 6d69
000138 7265
000139 6d28      	.DB  0x20,0x54,0x69,0x6D,0x65,0x72,0x28,0x6D
00013a 6e69
00013b 7475
00013c 7365
00013d 3a29      	.DB  0x69,0x6E,0x75,0x74,0x65,0x73,0x29,0x3A
00013e 0020
00013f 3025
000140 7832
000141 253a      	.DB  0x20,0x0,0x25,0x30,0x32,0x78,0x3A,0x25
000142 3230
000143 3a78
000144 3025
000145 7832      	.DB  0x30,0x32,0x78,0x3A,0x25,0x30,0x32,0x78
000146 2020
000147 3200
000148 2530
000149 3230      	.DB  0x20,0x20,0x0,0x32,0x30,0x25,0x30,0x32
00014a 2f78
00014b 3025
00014c 7832
00014d 252f      	.DB  0x78,0x2F,0x25,0x30,0x32,0x78,0x2F,0x25
00014e 3230
00014f 2078
000150 2520
000151 7333      	.DB  0x30,0x32,0x78,0x20,0x20,0x25,0x33,0x73
000152 4c00
000153 676f
000154 756f
000155 2074      	.DB  0x0,0x4C,0x6F,0x67,0x6F,0x75,0x74,0x20
000156 2e2e
000157 002e
000158 6f47
000159 6e69      	.DB  0x2E,0x2E,0x2E,0x0,0x47,0x6F,0x69,0x6E
00015a 2067
00015b 6f54
00015c 4120
00015d 6d64      	.DB  0x67,0x20,0x54,0x6F,0x20,0x41,0x64,0x6D
00015e 6e69
00015f 5020
000160 6761
000161 2065      	.DB  0x69,0x6E,0x20,0x50,0x61,0x67,0x65,0x20
000162 6e49
000163 3220
000164 5320
000165 6365      	.DB  0x49,0x6E,0x20,0x32,0x20,0x53,0x65,0x63
000166 4900
000167 636e
000168 726f
000169 6572      	.DB  0x0,0x49,0x6E,0x63,0x6F,0x72,0x72,0x65
00016a 7463
00016b 5320
00016c 7574
00016d 6564      	.DB  0x63,0x74,0x20,0x53,0x74,0x75,0x64,0x65
00016e 746e
00016f 4320
000170 646f
000171 2065      	.DB  0x6E,0x74,0x20,0x43,0x6F,0x64,0x65,0x20
000172 6f46
000173 6d72
000174 7461
000175 5900      	.DB  0x46,0x6F,0x72,0x6D,0x61,0x74,0x0,0x59
000176 756f
000177 5720
000178 6c69
000179 206c      	.DB  0x6F,0x75,0x20,0x57,0x69,0x6C,0x6C,0x20
00017a 6142
00017b 6b63
00017c 4d20
00017d 6e65      	.DB  0x42,0x61,0x63,0x6B,0x20,0x4D,0x65,0x6E
00017e 2075
00017f 6e49
000180 3220
000181 5320      	.DB  0x75,0x20,0x49,0x6E,0x20,0x32,0x20,0x53
000182 6365
000183 6e6f
000184 0064
000185 7544      	.DB  0x65,0x63,0x6F,0x6E,0x64,0x0,0x44,0x75
000186 6c70
000187 6369
000188 7461
000189 2065      	.DB  0x70,0x6C,0x69,0x63,0x61,0x74,0x65,0x20
00018a 7453
00018b 6475
00018c 6e65
00018d 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
00018e 6f43
00018f 6564
000190 4520
000191 746e      	.DB  0x43,0x6F,0x64,0x65,0x20,0x45,0x6E,0x74
000192 7265
000193 6465
000194 5300
000195 7574      	.DB  0x65,0x72,0x65,0x64,0x0,0x53,0x74,0x75
000196 6564
000197 746e
000198 4320
000199 646f      	.DB  0x64,0x65,0x6E,0x74,0x20,0x43,0x6F,0x64
00019a 2065
00019b 7553
00019c 6363
00019d 7365      	.DB  0x65,0x20,0x53,0x75,0x63,0x63,0x65,0x73
00019e 6673
00019f 6c75
0001a0 796c
0001a1 4120      	.DB  0x73,0x66,0x75,0x6C,0x6C,0x79,0x20,0x41
0001a2 6464
0001a3 6465
0001a4 5900
0001a5 756f      	.DB  0x64,0x64,0x65,0x64,0x0,0x59,0x6F,0x75
0001a6 4d20
0001a7 7375
0001a8 2074
0001a9 6946      	.DB  0x20,0x4D,0x75,0x73,0x74,0x20,0x46,0x69
0001aa 7372
0001ab 2074
0001ac 6f4c
0001ad 6967      	.DB  0x72,0x73,0x74,0x20,0x4C,0x6F,0x67,0x69
0001ae 006e
0001af 6f59
0001b0 2075
0001b1 6957      	.DB  0x6E,0x0,0x59,0x6F,0x75,0x20,0x57,0x69
0001b2 6c6c
0001b3 4720
0001b4 206f
0001b5 6441      	.DB  0x6C,0x6C,0x20,0x47,0x6F,0x20,0x41,0x64
0001b6 696d
0001b7 206e
0001b8 6150
0001b9 6567      	.DB  0x6D,0x69,0x6E,0x20,0x50,0x61,0x67,0x65
0001ba 3220
0001bb 5320
0001bc 6365
0001bd 5300      	.DB  0x20,0x32,0x20,0x53,0x65,0x63,0x0,0x53
0001be 7574
0001bf 6564
0001c0 746e
0001c1 4320      	.DB  0x74,0x75,0x64,0x65,0x6E,0x74,0x20,0x43
0001c2 646f
0001c3 2065
0001c4 6f46
0001c5 6e75      	.DB  0x6F,0x64,0x65,0x20,0x46,0x6F,0x75,0x6E
0001c6 0064
0001c7 704f
0001c8 2073
0001c9 202c      	.DB  0x64,0x0,0x4F,0x70,0x73,0x20,0x2C,0x20
0001ca 7453
0001cb 6475
0001cc 6e65
0001cd 2074      	.DB  0x53,0x74,0x75,0x64,0x65,0x6E,0x74,0x20
0001ce 6f43
0001cf 6564
0001d0 4e20
0001d1 746f      	.DB  0x43,0x6F,0x64,0x65,0x20,0x4E,0x6F,0x74
0001d2 4620
0001d3 756f
0001d4 646e
0001d5 5700      	.DB  0x20,0x46,0x6F,0x75,0x6E,0x64,0x0,0x57
0001d6 6961
0001d7 2074
0001d8 6f46
0001d9 2072      	.DB  0x61,0x69,0x74,0x20,0x46,0x6F,0x72,0x20
0001da 6544
0001db 656c
0001dc 6574
0001dd 2e2e      	.DB  0x44,0x65,0x6C,0x65,0x74,0x65,0x2E,0x2E
0001de 002e
0001df 7453
0001e0 6475
0001e1 6e65      	.DB  0x2E,0x0,0x53,0x74,0x75,0x64,0x65,0x6E
0001e2 2074
0001e3 6f43
0001e4 6564
0001e5 5720      	.DB  0x74,0x20,0x43,0x6F,0x64,0x65,0x20,0x57
0001e6 7361
0001e7 4420
0001e8 6c65
0001e9 7465      	.DB  0x61,0x73,0x20,0x44,0x65,0x6C,0x65,0x74
0001ea 6465
0001eb 5400
0001ec 6d69
0001ed 7265      	.DB  0x65,0x64,0x0,0x54,0x69,0x6D,0x65,0x72
0001ee 7320
0001ef 6174
0001f0 7472
0001f1 6465      	.DB  0x20,0x73,0x74,0x61,0x72,0x74,0x65,0x64
0001f2 4c00
0001f3 676f
0001f4 6e69
0001f5 5320      	.DB  0x0,0x4C,0x6F,0x67,0x69,0x6E,0x20,0x53
0001f6 6375
0001f7 6563
0001f8 7373
0001f9 7566      	.DB  0x75,0x63,0x63,0x65,0x73,0x73,0x66,0x75
0001fa 6c6c
0001fb 0079
0001fc 6157
0001fd 7469      	.DB  0x6C,0x6C,0x79,0x0,0x57,0x61,0x69,0x74
0001fe 2e2e
0001ff 002e
000200 704f
000201 2073      	.DB  0x2E,0x2E,0x2E,0x0,0x4F,0x70,0x73,0x20
000202 202c
000203 6573
000204 7263
000205 7465      	.DB  0x2C,0x20,0x73,0x65,0x63,0x72,0x65,0x74
000206 6920
000207 2073
000208 6e69
000209 6f63      	.DB  0x20,0x69,0x73,0x20,0x69,0x6E,0x63,0x6F
00020a 7272
00020b 6365
00020c 0074
00020d 6c43      	.DB  0x72,0x72,0x65,0x63,0x74,0x0,0x43,0x6C
00020e 6165
00020f 6972
000210 676e
000211 4520      	.DB  0x65,0x61,0x72,0x69,0x6E,0x67,0x20,0x45
000212 5045
000213 4f52
000214 204d
000215 2e2e      	.DB  0x45,0x50,0x52,0x4F,0x4D,0x20,0x2E,0x2E
000216 002e
000217 6554
000218 706d
000219 7265      	.DB  0x2E,0x0,0x54,0x65,0x6D,0x70,0x65,0x72
00021a 7461
00021b 7275
00021c 2865
00021d 2943      	.DB  0x61,0x74,0x75,0x72,0x65,0x28,0x43,0x29
00021e 003a
00021f 3a31
000220 4120
000221 7474      	.DB  0x3A,0x0,0x31,0x3A,0x20,0x41,0x74,0x74
000222 6e65
000223 6164
000224 636e
000225 2065      	.DB  0x65,0x6E,0x64,0x61,0x6E,0x63,0x65,0x20
000226 6e49
000227 7469
000228 6169
000229 696c      	.DB  0x49,0x6E,0x69,0x74,0x69,0x61,0x6C,0x69
00022a 617a
00022b 6974
00022c 6e6f
00022d 3200      	.DB  0x7A,0x61,0x74,0x69,0x6F,0x6E,0x0,0x32
00022e 203a
00022f 7453
000230 6475
000231 6e65      	.DB  0x3A,0x20,0x53,0x74,0x75,0x64,0x65,0x6E
000232 2074
000233 614d
000234 616e
000235 6567      	.DB  0x74,0x20,0x4D,0x61,0x6E,0x61,0x67,0x65
000236 656d
000237 746e
000238 3300
000239 203a      	.DB  0x6D,0x65,0x6E,0x74,0x0,0x33,0x3A,0x20
00023a 6956
00023b 7765
00023c 5020
00023d 6572      	.DB  0x56,0x69,0x65,0x77,0x20,0x50,0x72,0x65
00023e 6573
00023f 746e
000240 5320
000241 7574      	.DB  0x73,0x65,0x6E,0x74,0x20,0x53,0x74,0x75
000242 6564
000243 746e
000244 2073
000245 3400      	.DB  0x64,0x65,0x6E,0x74,0x73,0x20,0x0,0x34
000246 203a
000247 6554
000248 706d
000249 7265      	.DB  0x3A,0x20,0x54,0x65,0x6D,0x70,0x65,0x72
00024a 7461
00024b 7275
00024c 2065
00024d 6f4d      	.DB  0x61,0x74,0x75,0x72,0x65,0x20,0x4D,0x6F
00024e 696e
00024f 6f74
000250 6972
000251 676e      	.DB  0x6E,0x69,0x74,0x6F,0x72,0x69,0x6E,0x67
000252 3500
000253 203a
000254 6552
000255 7274      	.DB  0x0,0x35,0x3A,0x20,0x52,0x65,0x74,0x72
000256 6569
000257 6576
000258 5320
000259 7574      	.DB  0x69,0x65,0x76,0x65,0x20,0x53,0x74,0x75
00025a 6564
00025b 746e
00025c 4420
00025d 7461      	.DB  0x64,0x65,0x6E,0x74,0x20,0x44,0x61,0x74
00025e 0061
00025f 3a36
000260 5420
000261 6172      	.DB  0x61,0x0,0x36,0x3A,0x20,0x54,0x72,0x61
000262 6666
000263 6369
000264 4d20
000265 6e6f      	.DB  0x66,0x66,0x69,0x63,0x20,0x4D,0x6F,0x6E
000266 7469
000267 726f
000268 6e69
000269 0067      	.DB  0x69,0x74,0x6F,0x72,0x69,0x6E,0x67,0x0
00026a 3a37
00026b 4c20
00026c 676f
00026d 6e69      	.DB  0x37,0x3A,0x20,0x4C,0x6F,0x67,0x69,0x6E
00026e 5720
00026f 7469
000270 2068
000271 6441      	.DB  0x20,0x57,0x69,0x74,0x68,0x20,0x41,0x64
000272 696d
000273 006e
000274 3a38
000275 4c20      	.DB  0x6D,0x69,0x6E,0x0,0x38,0x3A,0x20,0x4C
000276 676f
000277 756f
000278 0074
000279 3a39      	.DB  0x6F,0x67,0x6F,0x75,0x74,0x0,0x39,0x3A
00027a 5320
00027b 7465
00027c 5420
00027d 6d69      	.DB  0x20,0x53,0x65,0x74,0x20,0x54,0x69,0x6D
00027e 7265
00027f 4400
000280 7369
000281 6174      	.DB  0x65,0x72,0x0,0x44,0x69,0x73,0x74,0x61
000282 636e
000283 3a65
000284 0020
000285 7245      	.DB  0x6E,0x63,0x65,0x3A,0x20,0x0,0x45,0x72
000286 6f72
000287 0072
000288 6f4e
000289 4f20      	.DB  0x72,0x6F,0x72,0x0,0x4E,0x6F,0x20,0x4F
00028a 7362
00028b 6174
00028c 6c63
00028d 0065      	.DB  0x62,0x73,0x74,0x61,0x63,0x6C,0x65,0x0
00028e 6320
00028f 206d
000290 4300
000291 756f      	.DB  0x20,0x63,0x6D,0x20,0x0,0x43,0x6F,0x75
000292 746e
000293 203a
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1291): warning: .cseg .db misalignment - padding zero byte
000294 0000      	.DB  0x6E,0x74,0x3A,0x20,0x0
                 _0x2000060:
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1293): warning: .cseg .db misalignment - padding zero byte
000295 0001      	.DB  0x1
                 _0x2000000:
000296 4e2d
000297 4e41
000298 4900
000299 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\Asus\Documents\attendance-avr\Debug\List\microFinalProjectCodes.asm(1296): warning: .cseg .db misalignment - padding zero byte
00029a 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00029b 0006      	.DW  0x06
00029c 0004      	.DW  0x04
00029d 0066      	.DW  __REG_VARS*2
                 
00029e 0010      	.DW  0x10
00029f 07d8      	.DW  _keypad
0002a0 006c      	.DW  _0x3*2
                 
0002a1 0004      	.DW  0x04
0002a2 0222      	.DW  _0x4
0002a3 008c      	.DW  _0x0*2
                 
0002a4 0004      	.DW  0x04
0002a5 0226      	.DW  _0x4+4
0002a6 0090      	.DW  _0x0*2+4
                 
0002a7 0004      	.DW  0x04
0002a8 022a      	.DW  _0x4+8
0002a9 0094      	.DW  _0x0*2+8
                 
0002aa 0004      	.DW  0x04
0002ab 022e      	.DW  _0x4+12
0002ac 0098      	.DW  _0x0*2+12
                 
0002ad 0004      	.DW  0x04
0002ae 0232      	.DW  _0x4+16
0002af 009c      	.DW  _0x0*2+16
                 
0002b0 0004      	.DW  0x04
0002b1 0236      	.DW  _0x4+20
0002b2 00a0      	.DW  _0x0*2+20
                 
0002b3 0004      	.DW  0x04
0002b4 023a      	.DW  _0x4+24
0002b5 00a4      	.DW  _0x0*2+24
                 
0002b6 000e      	.DW  0x0E
0002b7 0808      	.DW  _days
0002b8 007c      	.DW  _0x5*2
                 
0002b9 0017      	.DW  0x17
0002ba 023e      	.DW  _0xC
0002bb 00a8      	.DW  _0x0*2+28
                 
0002bc 0014      	.DW  0x14
0002bd 0255      	.DW  _0xC+23
0002be 00bf      	.DW  _0x0*2+51
                 
0002bf 001c      	.DW  0x1C
0002c0 0269      	.DW  _0xC+43
0002c1 00d3      	.DW  _0x0*2+71
                 
0002c2 0019      	.DW  0x19
0002c3 0285      	.DW  _0xC+71
0002c4 00ef      	.DW  _0x0*2+99
                 
0002c5 001c      	.DW  0x1C
0002c6 029e      	.DW  _0xC+96
0002c7 00d3      	.DW  _0x0*2+71
                 
0002c8 001d      	.DW  0x1D
0002c9 02ba      	.DW  _0xC+124
0002ca 0108      	.DW  _0x0*2+124
                 
0002cb 0003      	.DW  0x03
0002cc 02d7      	.DW  _0xC+153
0002cd 0125      	.DW  _0x0*2+153
                 
0002ce 000d      	.DW  0x0D
0002cf 02da      	.DW  _0xC+156
0002d0 0128      	.DW  _0x0*2+156
                 
0002d1 0017      	.DW  0x17
0002d2 02e7      	.DW  _0xC+169
0002d3 0135      	.DW  _0x0*2+169
                 
0002d4 0017      	.DW  0x17
0002d5 02fe      	.DW  _0xC+192
0002d6 014c      	.DW  _0x0*2+192
                 
0002d7 0016      	.DW  0x16
0002d8 0315      	.DW  _0xC+215
0002d9 0163      	.DW  _0x0*2+215
                 
0002da 0018      	.DW  0x18
0002db 032b      	.DW  _0xC+237
0002dc 0179      	.DW  _0x0*2+237
                 
0002dd 0016      	.DW  0x16
0002de 0343      	.DW  _0xC+261
0002df 0191      	.DW  _0x0*2+261
                 
0002e0 0018      	.DW  0x18
0002e1 0359      	.DW  _0xC+283
0002e2 01a7      	.DW  _0x0*2+283
                 
0002e3 0012      	.DW  0x12
0002e4 0371      	.DW  _0xC+307
0002e5 01bf      	.DW  _0x0*2+307
                 
0002e6 0012      	.DW  0x12
0002e7 0383      	.DW  _0xC+325
0002e8 01d1      	.DW  _0x0*2+325
                 
0002e9 001f      	.DW  0x1F
0002ea 0395      	.DW  _0xC+343
0002eb 01e3      	.DW  _0x0*2+343
                 
0002ec 001f      	.DW  0x1F
0002ed 03b4      	.DW  _0xC+374
0002ee 0202      	.DW  _0x0*2+374
                 
0002ef 001e      	.DW  0x1E
0002f0 03d3      	.DW  _0xC+405
0002f1 0221      	.DW  _0x0*2+405
                 
0002f2 0011      	.DW  0x11
0002f3 03f1      	.DW  _0xC+435
0002f4 023f      	.DW  _0x0*2+435
                 
0002f5 0019      	.DW  0x19
0002f6 0402      	.DW  _0xC+452
0002f7 0250      	.DW  _0x0*2+452
                 
0002f8 0015      	.DW  0x15
0002f9 041b      	.DW  _0xC+477
0002fa 0269      	.DW  _0x0*2+477
                 
0002fb 000b      	.DW  0x0B
0002fc 0430      	.DW  _0x86
0002fd 02a5      	.DW  _0x0*2+537
                 
0002fe 001d      	.DW  0x1D
0002ff 043b      	.DW  _0x86+11
000300 02b0      	.DW  _0x0*2+548
                 
000301 0002      	.DW  0x02
000302 0458      	.DW  _0x86+40
000303 0177      	.DW  _0x0*2+235
                 
000304 0002      	.DW  0x02
000305 045a      	.DW  _0x86+42
000306 0177      	.DW  _0x0*2+235
                 
000307 0003      	.DW  0x03
000308 045c      	.DW  _0x86+44
000309 0125      	.DW  _0x0*2+153
                 
00030a 001e      	.DW  0x1E
00030b 045f      	.DW  _0x86+47
00030c 02cd      	.DW  _0x0*2+577
                 
00030d 001f      	.DW  0x1F
00030e 047d      	.DW  _0x86+77
00030f 02eb      	.DW  _0x0*2+607
                 
000310 001f      	.DW  0x1F
000311 049c      	.DW  _0x86+108
000312 030a      	.DW  _0x0*2+638
                 
000313 001f      	.DW  0x1F
000314 04bb      	.DW  _0x86+139
000315 02eb      	.DW  _0x0*2+607
                 
000316 0020      	.DW  0x20
000317 04da      	.DW  _0x86+170
000318 0329      	.DW  _0x0*2+669
                 
000319 001f      	.DW  0x1F
00031a 04fa      	.DW  _0x86+202
00031b 02eb      	.DW  _0x0*2+607
                 
00031c 0015      	.DW  0x15
00031d 0519      	.DW  _0x86+233
00031e 0349      	.DW  _0x0*2+701
                 
00031f 001d      	.DW  0x1D
000320 052e      	.DW  _0x86+254
000321 035e      	.DW  _0x0*2+722
                 
000322 0002      	.DW  0x02
000323 054b      	.DW  _0x86+283
000324 0177      	.DW  _0x0*2+235
                 
000325 0002      	.DW  0x02
000326 054d      	.DW  _0x86+285
000327 0177      	.DW  _0x0*2+235
                 
000328 0013      	.DW  0x13
000329 054f      	.DW  _0x86+287
00032a 037b      	.DW  _0x0*2+751
                 
00032b 001f      	.DW  0x1F
00032c 0562      	.DW  _0x86+306
00032d 02eb      	.DW  _0x0*2+607
                 
00032e 001d      	.DW  0x1D
00032f 0581      	.DW  _0x86+337
000330 038e      	.DW  _0x0*2+770
                 
000331 001f      	.DW  0x1F
000332 059e      	.DW  _0x86+366
000333 02eb      	.DW  _0x0*2+607
                 
000334 0002      	.DW  0x02
000335 05bd      	.DW  _0x86+397
000336 0177      	.DW  _0x0*2+235
                 
000337 0002      	.DW  0x02
000338 05bf      	.DW  _0x86+399
000339 0177      	.DW  _0x0*2+235
                 
00033a 0013      	.DW  0x13
00033b 05c1      	.DW  _0x86+401
00033c 037b      	.DW  _0x0*2+751
                 
00033d 0013      	.DW  0x13
00033e 05d4      	.DW  _0x86+420
00033f 03ab      	.DW  _0x0*2+799
                 
000340 0019      	.DW  0x19
000341 05e7      	.DW  _0x86+439
000342 03be      	.DW  _0x0*2+818
                 
000343 001f      	.DW  0x1F
000344 0600      	.DW  _0x86+464
000345 02eb      	.DW  _0x0*2+607
                 
000346 001d      	.DW  0x1D
000347 061f      	.DW  _0x86+495
000348 038e      	.DW  _0x0*2+770
                 
000349 001f      	.DW  0x1F
00034a 063c      	.DW  _0x86+524
00034b 02eb      	.DW  _0x0*2+607
                 
00034c 0003      	.DW  0x03
00034d 065b      	.DW  _0x86+555
00034e 028c      	.DW  _0x0*2+512
                 
00034f 0003      	.DW  0x03
000350 065e      	.DW  _0x86+558
000351 028c      	.DW  _0x0*2+512
                 
000352 000e      	.DW  0x0E
000353 0661      	.DW  _0x86+561
000354 03d7      	.DW  _0x0*2+843
                 
000355 0002      	.DW  0x02
000356 066f      	.DW  _0x86+575
000357 0177      	.DW  _0x0*2+235
                 
000358 0002      	.DW  0x02
000359 0671      	.DW  _0x86+577
00035a 0177      	.DW  _0x0*2+235
                 
00035b 0013      	.DW  0x13
00035c 0673      	.DW  _0x86+579
00035d 03e5      	.DW  _0x0*2+857
                 
00035e 0008      	.DW  0x08
00035f 0686      	.DW  _0x86+598
000360 03f8      	.DW  _0x0*2+876
                 
000361 001a      	.DW  0x1A
000362 068e      	.DW  _0x86+606
000363 0400      	.DW  _0x0*2+884
                 
000364 001f      	.DW  0x1F
000365 06a8      	.DW  _0x86+632
000366 02eb      	.DW  _0x0*2+607
                 
000367 0014      	.DW  0x14
000368 06c7      	.DW  _0x86+663
000369 041a      	.DW  _0x0*2+910
                 
00036a 0010      	.DW  0x10
00036b 06db      	.DW  _0x121
00036c 042e      	.DW  _0x0*2+930
                 
00036d 0002      	.DW  0x02
00036e 06eb      	.DW  _0x121+16
00036f 0177      	.DW  _0x0*2+235
                 
000370 001d      	.DW  0x1D
000371 06ed      	.DW  _0x12D
000372 043e      	.DW  _0x0*2+946
                 
000373 0016      	.DW  0x16
000374 070a      	.DW  _0x12D+29
000375 045b      	.DW  _0x0*2+975
                 
000376 001a      	.DW  0x1A
000377 0720      	.DW  _0x12D+51
000378 0471      	.DW  _0x0*2+997
                 
000379 001a      	.DW  0x1A
00037a 073a      	.DW  _0x12D+77
00037b 048b      	.DW  _0x0*2+1023
                 
00037c 0019      	.DW  0x19
00037d 0754      	.DW  _0x12D+103
00037e 04a5      	.DW  _0x0*2+1049
                 
00037f 0016      	.DW  0x16
000380 076d      	.DW  _0x12D+128
000381 04be      	.DW  _0x0*2+1074
                 
000382 0014      	.DW  0x14
000383 0783      	.DW  _0x12D+150
000384 04d4      	.DW  _0x0*2+1096
                 
000385 000a      	.DW  0x0A
000386 0797      	.DW  _0x12D+170
000387 04e8      	.DW  _0x0*2+1116
                 
000388 000d      	.DW  0x0D
000389 07a1      	.DW  _0x12D+180
00038a 04f2      	.DW  _0x0*2+1126
                 
00038b 0002      	.DW  0x02
00038c 082a      	.DW  _previous_count_S0000015000
00038d 008a      	.DW  _0x17D*2
                 
00038e 000b      	.DW  0x0B
00038f 07ae      	.DW  _0x17E
000390 04ff      	.DW  _0x0*2+1139
                 
000391 0006      	.DW  0x06
000392 07b9      	.DW  _0x17E+11
000393 050a      	.DW  _0x0*2+1150
                 
000394 000c      	.DW  0x0C
000395 07bf      	.DW  _0x17E+17
000396 0510      	.DW  _0x0*2+1156
                 
000397 0005      	.DW  0x05
000398 07cb      	.DW  _0x17E+29
000399 051c      	.DW  _0x0*2+1168
                 
00039a 0008      	.DW  0x08
00039b 07d0      	.DW  _0x17E+34
00039c 0521      	.DW  _0x0*2+1173
                 
00039d 0001      	.DW  0x01
00039e 082c      	.DW  __seed_G100
00039f 052a      	.DW  _0x2000060*2
                 
                 _0xFFFFFFFF:
0003a0 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0003a1 94f8      	CLI
0003a2 27ee      	CLR  R30
0003a3 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0003a4 e0f1      	LDI  R31,1
0003a5 bffb      	OUT  GICR,R31
0003a6 bfeb      	OUT  GICR,R30
0003a7 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0003a8 e08d      	LDI  R24,(14-2)+1
0003a9 e0a2      	LDI  R26,2
0003aa 27bb      	CLR  R27
                 __CLEAR_REG:
0003ab 93ed      	ST   X+,R30
0003ac 958a      	DEC  R24
0003ad f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0003ae e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0003af e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0003b0 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0003b1 93ed      	ST   X+,R30
0003b2 9701      	SBIW R24,1
0003b3 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0003b4 e3e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0003b5 e0f5      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0003b6 9185      	LPM  R24,Z+
0003b7 9195      	LPM  R25,Z+
0003b8 9700      	SBIW R24,0
0003b9 f061      	BREQ __GLOBAL_INI_END
0003ba 91a5      	LPM  R26,Z+
0003bb 91b5      	LPM  R27,Z+
0003bc 9005      	LPM  R0,Z+
0003bd 9015      	LPM  R1,Z+
0003be 01bf      	MOVW R22,R30
0003bf 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0003c0 9005      	LPM  R0,Z+
0003c1 920d      	ST   X+,R0
0003c2 9701      	SBIW R24,1
0003c3 f7e1      	BRNE __GLOBAL_INI_LOOP
0003c4 01fb      	MOVW R30,R22
0003c5 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0003c6 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0003c7 bfed      	OUT  SPL,R30
0003c8 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0003c9 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0003ca e2c2      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0003cb e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0003cc 940c 03ce 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x222
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <mega32.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;#include <eeprom.h>
                 ;#include <stdint.h>
                 ;#include <stdio.h>
                 ;
                 ;#define LCD_PRT PORTA // LCD DATA PORT
                 ;#define LCD_DDR DDRA  // LCD DATA DDR
                 ;#define LCD_PIN PINA  // LCD DATA PIN
                 ;#define LCD_RS 0      // LCD RS
                 ;#define LCD_RW 1      // LCD RW
                 ;#define LCD_EN 2      // LCD EN
                 ;#define KEY_PRT PORTB // keyboard PORT
                 ;#define KEY_DDR DDRB  // keyboard DDR
                 ;#define KEY_PIN PINB  // keyboard PIN
                 ;#define BUZZER_DDR DDRD
                 ;#define BUZZER_PRT PORTD
                 ;#define BUZZER_NUM 7
                 ;#define MENU_PAGE_COUNT 5
                 ;#define US_ERROR -1       // Error indicator
                 ;#define US_NO_OBSTACLE -2 // No obstacle indicator
                 ;#define US_PORT PORTD     // Ultrasonic sensor connected to PORTB
                 ;#define US_PIN PIND       // Ultrasonic PIN register
                 ;#define US_DDR DDRD       // Ultrasonic data direction register
                 ;#define US_TRIG_POS 5     // Trigger pin connected to PD5
                 ;#define US_ECHO_POS 6     // Echo pin connected to PD6
                 ;
                 ;void lcdCommand(unsigned char cmnd);
                 ;void lcdData(unsigned char data);
                 ;void lcd_init();
                 ;void lcd_gotoxy(unsigned char x, unsigned char y);
                 ;void lcd_print(char *str);
                 ;void show_temperature();
                 ;void show_menu();
                 ;void clear_eeprom();
                 ;unsigned char read_byte_from_eeprom(unsigned int addr);
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value);
                 ;void USART_init(unsigned int ubrr);
                 ;void USART_Transmit(unsigned char data);
                 ;unsigned char USART_Receive();
                 ;unsigned char search_student_code();
                 ;void delete_student_code(unsigned char index);
                 ;void HCSR04Init();
                 ;void HCSR04Trigger();
                 ;uint16_t GetPulseWidth();
                 ;void startSonar();
                 ;unsigned int simple_hash(const char *str);
                 ;void I2C_init();
                 ;void I2C_start();
                 ;void I2C_write(unsigned char data);
                 ;unsigned char I2C_read(unsigned char ackVal);
                 ;void I2C_stop();
                 ;void rtc_init();
                 ;void rtc_getTime(unsigned char*, unsigned char*, unsigned char*);
                 ;void rtc_getDate(unsigned char*, unsigned char*, unsigned char*, unsigned char*);
                 ;void Timer2_Init();
                 ;
                 ;/* keypad mapping :
                 ;C : Cancel
                 ;O : On/Clear
                 ;D : Delete
                 ;L : Left
                 ;R : Right
                 ;E : Enter  */
                 ;unsigned char keypad[4][4] = {{'7', '8', '9', 'O'},
                 ;                              {'4', '5', '6', 'D'},
                 ;                              {'1', '2', '3', 'C'},
                 ;                              {'L', '0', 'R', 'E'}};
                 
                 	.DSEG
                 ;
                 ;unsigned char stage = 0;
                 ;char buffer[32] = "";
                 ;unsigned char page_num = 0;
                 ;unsigned char US_count = 0;
                 ;const unsigned int secret = 3940;
                 ;char logged_in = 0;
                 ;char* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
                 _0x4:
000222           	.BYTE 0x1C
                 ;char time[20];
                 ;unsigned char submitTime = 5;
                 ;unsigned char timerCount = 0;
                 ;
                 ;enum stages
                 ;{
                 ;    STAGE_INIT_MENU,
                 ;    STAGE_ATTENDENC_MENU,
                 ;    STAGE_SUBMIT_CODE,
                 ;    STAGE_SUBMIT_WITH_CARD,
                 ;    STAGE_TEMPERATURE_MONITORING,
                 ;    STAGE_VIEW_PRESENT_STUDENTS,
                 ;    STAGE_RETRIEVE_STUDENT_DATA,
                 ;    STAGE_STUDENT_MANAGMENT,
                 ;    STAGE_SEARCH_STUDENT,
                 ;    STAGE_DELETE_STUDENT,
                 ;    STAGE_TRAFFIC_MONITORING,
                 ;    STAGE_LOGIN_WITH_ADMIN,
                 ;    STAGE_CLEAR_EEPROM,
                 ;    STAGE_SHOW_CLOCK,
                 ;    STAGE_SET_TIMER,
                 ;};
                 ;
                 ;enum menu_options
                 ;{
                 ;    OPTION_ATTENDENCE = 1,
                 ;    OPTION_STUDENT_MANAGEMENT = 2,
                 ;    OPTION_VIEW_PRESENT_STUDENTS = 3,
                 ;    OPTION_TEMPERATURE_MONITORING = 4,
                 ;    OPTION_RETRIEVE_STUDENT_DATA = 5,
                 ;    OPTION_TRAFFIC_MONITORING = 6,
                 ;    OPTION_LOGIN_WITH_ADMIN = 7,
                 ;    OPTION_LOGOUT = 8,
                 ;    OPTION_SET_TIMER = 9,
                 ;};
                 ;
                 ;void main(void)
                 ; 0000 0075 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0076     int i, j;
                 ; 0000 0077     unsigned char st_counts;
                 ; 0000 0078     unsigned char data;
                 ; 0000 0079     unsigned char second, minute, hour;
                 ; 0000 007A     unsigned char day, date, month, year;
                 ; 0000 007B 
                 ; 0000 007C     KEY_DDR = 0xF0;
0003ce 9727      	SBIW R28,7
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	st_counts -> R21
                 ;	data -> R20
                 ;	second -> Y+6
                 ;	minute -> Y+5
                 ;	hour -> Y+4
                 ;	day -> Y+3
                 ;	date -> Y+2
                 ;	month -> Y+1
                 ;	year -> Y+0
0003cf efe0      	LDI  R30,LOW(240)
0003d0 bbe7      	OUT  0x17,R30
                 ; 0000 007D     KEY_PRT = 0xFF;
0003d1 efef      	LDI  R30,LOW(255)
0003d2 bbe8      	OUT  0x18,R30
                 ; 0000 007E     KEY_PRT &= 0x0F;                  // ground all rows at once
0003d3 b3e8      	IN   R30,0x18
0003d4 70ef      	ANDI R30,LOW(0xF)
0003d5 bbe8      	OUT  0x18,R30
                 ; 0000 007F     MCUCR = 0x02;                     // make INT0 falling edge triggered
0003d6 e0e2      	LDI  R30,LOW(2)
0003d7 bfe5      	OUT  0x35,R30
                 ; 0000 0080     GICR = (1 << INT0);               // enable external interrupt 0
0003d8 e4e0      	LDI  R30,LOW(64)
0003d9 bfeb      	OUT  0x3B,R30
                 ; 0000 0081     BUZZER_DDR |= (1 << BUZZER_NUM);  // make buzzer pin output
0003da 9a8f      	SBI  0x11,7
                 ; 0000 0082     BUZZER_PRT &= ~(1 << BUZZER_NUM); // disable buzzer
0003db 9897      	CBI  0x12,7
                 ; 0000 0083     USART_init(0x33);
0003dc e3a3      	LDI  R26,LOW(51)
0003dd e0b0      	LDI  R27,0
0003de 940e 0b04 	CALL _USART_init
                 ; 0000 0084     HCSR04Init(); // Initialize ultrasonic sensor
0003e0 940e 0b82 	CALL _HCSR04Init
                 ; 0000 0085     lcd_init();
0003e2 940e 09ef 	CALL _lcd_init
                 ; 0000 0086     rtc_init();
0003e4 940e 0ca8 	CALL _rtc_init
                 ; 0000 0087 
                 ; 0000 0088 #asm("sei")           // enable interrupts
0003e6 9478      	sei
                 ; 0000 0089     lcdCommand(0x01); // clear LCD
0003e7 e0a1      	LDI  R26,LOW(1)
0003e8 940e 09db 	CALL _lcdCommand
                 ; 0000 008A     while (1)
                 _0x6:
                 ; 0000 008B     {
                 ; 0000 008C         if (stage == STAGE_INIT_MENU)
0003ea 2055      	TST  R5
0003eb f419      	BRNE _0x9
                 ; 0000 008D         {
                 ; 0000 008E             show_menu();
0003ec 940e 0a6a 	CALL _show_menu
                 ; 0000 008F         }
                 ; 0000 0090         else if (stage == STAGE_ATTENDENC_MENU)
0003ee c219      	RJMP _0xA
                 _0x9:
0003ef e0e1      	LDI  R30,LOW(1)
0003f0 15e5      	CP   R30,R5
0003f1 f471      	BRNE _0xB
                 ; 0000 0091         {
                 ; 0000 0092             lcdCommand(0x01);
0003f2 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0093             lcd_gotoxy(1, 1);
                 ; 0000 0094             lcd_print("1: Submit Student Code");
                +
0003f4 e3ae     +LDI R26 , LOW ( _0xC + ( 0 ) )
0003f5 e0b2     +LDI R27 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW2MN _0xC,0
0003f6 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0095             lcd_gotoxy(1, 2);
                 ; 0000 0096             lcd_print("2: Submit With Card");
                +
0003f8 e5a5     +LDI R26 , LOW ( _0xC + ( 23 ) )
0003f9 e0b2     +LDI R27 , HIGH ( _0xC + ( 23 ) )
                 	__POINTW2MN _0xC,23
0003fa 940e 0a22 	CALL _lcd_print
                 ; 0000 0097             while (stage == STAGE_ATTENDENC_MENU)
                 _0xD:
0003fc e0e1      	LDI  R30,LOW(1)
0003fd 15e5      	CP   R30,R5
0003fe f3e9      	BREQ _0xD
                 ; 0000 0098                 ;
                 ; 0000 0099         }
                 ; 0000 009A         else if (stage == STAGE_SUBMIT_CODE)
0003ff c208      	RJMP _0x10
                 _0xB:
000400 e0e2      	LDI  R30,LOW(2)
000401 15e5      	CP   R30,R5
000402 f4b1      	BRNE _0x11
                 ; 0000 009B         {
                 ; 0000 009C             if(submitTime == 0)
000403 2099      	TST  R9
000404 f431      	BRNE _0x12
                 ; 0000 009D             {
                 ; 0000 009E                 lcdCommand(0x01);
000405 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 009F                 lcd_gotoxy(1, 1);
                 ; 0000 00A0                 lcd_print("Time for submit is finished");
                +
000407 e6a9     +LDI R26 , LOW ( _0xC + ( 43 ) )
000408 e0b2     +LDI R27 , HIGH ( _0xC + ( 43 ) )
                 	__POINTW2MN _0xC,43
000409 940e 0f10 	CALL SUBOPT_0x2
                 ; 0000 00A1                 delay_ms(2000);
                 ; 0000 00A2                 stage = STAGE_INIT_MENU;
                 ; 0000 00A3             }
                 ; 0000 00A4             lcdCommand(0x01);
                 _0x12:
00040b 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00A5             lcd_gotoxy(1, 1);
                 ; 0000 00A6             lcd_print("Enter your student code:");
                +
00040d e8a5     +LDI R26 , LOW ( _0xC + ( 71 ) )
00040e e0b2     +LDI R27 , HIGH ( _0xC + ( 71 ) )
                 	__POINTW2MN _0xC,71
00040f 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 00A7             lcd_gotoxy(1, 2);
                 ; 0000 00A8             lcdCommand(0x0f);   // display on, cursor blinking
000411 940e 0f18 	CALL SUBOPT_0x3
                 ; 0000 00A9             delay_us(100 * 16); // wait
                 ; 0000 00AA             while (stage == STAGE_SUBMIT_CODE)
                 _0x13:
000413 e0e2      	LDI  R30,LOW(2)
000414 15e5      	CP   R30,R5
000415 f3e9      	BREQ _0x13
                 ; 0000 00AB                 ;
                 ; 0000 00AC             lcdCommand(0x0c);   // display on, cursor off
000416 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 00AD             delay_us(100 * 16); // wait
                 ; 0000 00AE         }
                 ; 0000 00AF         else if(stage == STAGE_SUBMIT_WITH_CARD)
000418 c1ef      	RJMP _0x16
                 _0x11:
000419 e0e3      	LDI  R30,LOW(3)
00041a 15e5      	CP   R30,R5
00041b f009      	BREQ PC+2
00041c c07b      	RJMP _0x17
                 ; 0000 00B0         {
                 ; 0000 00B1             memset(buffer,0,32);
00041d 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 00B2             while (stage == STAGE_SUBMIT_WITH_CARD)
                 _0x18:
00041f e0e3      	LDI  R30,LOW(3)
000420 15e5      	CP   R30,R5
000421 f009      	BREQ PC+2
000422 c074      	RJMP _0x1A
                 ; 0000 00B3             {
                 ; 0000 00B4                 if(submitTime == 0)
000423 2099      	TST  R9
000424 f439      	BRNE _0x1B
                 ; 0000 00B5                 {
                 ; 0000 00B6                     lcdCommand(0x01);
000425 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00B7                     lcd_gotoxy(1, 1);
                 ; 0000 00B8                     lcd_print("Time for submit is finished");
                +
000427 e9ae     +LDI R26 , LOW ( _0xC + ( 96 ) )
000428 e0b2     +LDI R27 , HIGH ( _0xC + ( 96 ) )
                 	__POINTW2MN _0xC,96
000429 940e 0f10 	CALL SUBOPT_0x2
                 ; 0000 00B9                     delay_ms(2000);
                 ; 0000 00BA                     stage = STAGE_INIT_MENU;
                 ; 0000 00BB                     break;
00042b c06b      	RJMP _0x1A
                 ; 0000 00BC                 }
                 ; 0000 00BD                 lcdCommand(0x01);
                 _0x1B:
00042c 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00BE                 lcd_gotoxy(1, 1);
                 ; 0000 00BF                 lcd_print("Bring your card near device:");
                +
00042e ebaa     +LDI R26 , LOW ( _0xC + ( 124 ) )
00042f e0b2     +LDI R27 , HIGH ( _0xC + ( 124 ) )
                 	__POINTW2MN _0xC,124
000430 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 00C0                 lcd_gotoxy(1, 2);
                 ; 0000 00C1                 delay_us(100 * 16); // wait
000432 940e 0f32 	CALL SUBOPT_0x6
                 ; 0000 00C2                 while((data = USART_Receive()) != '\r'){
                 _0x1C:
000434 940e 0afb 	CALL _USART_Receive
000436 2f4e      	MOV  R20,R30
000437 30ed      	CPI  R30,LOW(0xD)
000438 f049      	BREQ _0x1E
                 ; 0000 00C3                     if(stage != STAGE_SUBMIT_WITH_CARD)
000439 e0e3      	LDI  R30,LOW(3)
00043a 15e5      	CP   R30,R5
00043b f431      	BRNE _0x1E
                 ; 0000 00C4                         break;
                 ; 0000 00C5                     buffer[strlen(buffer)] = data;
00043c 940e 0f37 	CALL SUBOPT_0x7
00043e 51e8      	SUBI R30,LOW(-_buffer)
00043f 4ff8      	SBCI R31,HIGH(-_buffer)
000440 8340      	ST   Z,R20
                 ; 0000 00C6                 }
000441 cff2      	RJMP _0x1C
                 _0x1E:
                 ; 0000 00C7                 if(stage != STAGE_SUBMIT_WITH_CARD){
000442 e0e3      	LDI  R30,LOW(3)
000443 15e5      	CP   R30,R5
000444 f019      	BREQ _0x20
                 ; 0000 00C8                     memset(buffer,0,32);
000445 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 00C9                     break;
000447 c04f      	RJMP _0x1A
                 ; 0000 00CA                 }
                 ; 0000 00CB                 if (strncmp(buffer, "40", 2) != 0 ||
                 _0x20:
                 ; 0000 00CC                         strlen(buffer) != 8)
000448 940e 0f3b 	CALL SUBOPT_0x8
                +
00044a ede7     +LDI R30 , LOW ( _0xC + ( 153 ) )
00044b e0f2     +LDI R31 , HIGH ( _0xC + ( 153 ) )
                 	__POINTW1MN _0xC,153
00044c 940e 0f40 	CALL SUBOPT_0x9
00044e f431      	BRNE _0x22
00044f 940e 0f37 	CALL SUBOPT_0x7
000451 30e8      	CPI  R30,LOW(0x8)
000452 e0a0      	LDI  R26,HIGH(0x8)
000453 07fa      	CPC  R31,R26
000454 f051      	BREQ _0x21
                 _0x22:
                 ; 0000 00CD                 {
                 ; 0000 00CE                     lcdCommand(0x01);
000455 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00CF                     lcd_gotoxy(1, 1);
                 ; 0000 00D0                     lcd_print("Invalid Card");
                +
000457 edaa     +LDI R26 , LOW ( _0xC + ( 156 ) )
000458 e0b2     +LDI R27 , HIGH ( _0xC + ( 156 ) )
                 	__POINTW2MN _0xC,156
000459 940e 0a22 	CALL _lcd_print
                 ; 0000 00D1                     BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00045b 9a97      	SBI  0x12,7
                 ; 0000 00D2                     delay_ms(2000);
00045c 940e 0f47 	CALL SUBOPT_0xA
                 ; 0000 00D3                     BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00D4                 }
                 ; 0000 00D5                 else{
00045e c035      	RJMP _0x24
                 _0x21:
                 ; 0000 00D6                     if (search_student_code() > 0){
00045f 940e 0b11 	CALL _search_student_code
000461 30e1      	CPI  R30,LOW(0x1)
000462 f040      	BRLO _0x25
                 ; 0000 00D7                         BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
000463 9a97      	SBI  0x12,7
                 ; 0000 00D8                         lcdCommand(0x01);
000464 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00D9                         lcd_gotoxy(1, 1);
                 ; 0000 00DA                         lcd_print("Duplicate Student Code");
                +
000466 eea7     +LDI R26 , LOW ( _0xC + ( 169 ) )
000467 e0b2     +LDI R27 , HIGH ( _0xC + ( 169 ) )
                 	__POINTW2MN _0xC,169
000468 940e 0f4d 	CALL SUBOPT_0xB
                 ; 0000 00DB                         delay_ms(2000);
                 ; 0000 00DC                         BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 00DD                     }
                 ; 0000 00DE                     else{
00046a c029      	RJMP _0x26
                 _0x25:
                 ; 0000 00DF                         // save the buffer to EEPROM
                 ; 0000 00E0                         st_counts = read_byte_from_eeprom(0x0);
00046b 940e 0f50 	CALL SUBOPT_0xC
                 ; 0000 00E1                         for (i = 0; i < 8; i++)
                +
00046d e000     +LDI R16 , LOW ( 0 )
00046e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x28:
                +
00046f 3008     +CPI R16 , LOW ( 8 )
000470 e0e0     +LDI R30 , HIGH ( 8 )
000471 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
000472 f47c      	BRGE _0x29
                 ; 0000 00E2                         {
                 ; 0000 00E3                             write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000473 2fe5      	MOV  R30,R21
000474 940e 0f56 	CALL SUBOPT_0xD
000476 0fe0      	ADD  R30,R16
000477 1ff1      	ADC  R31,R17
000478 940e 0f5b 	CALL SUBOPT_0xE
00047a 0fa0      	ADD  R26,R16
00047b 1fb1      	ADC  R27,R17
00047c 91ac      	LD   R26,X
00047d 940e 0aea 	CALL _write_byte_to_eeprom
                 ; 0000 00E4                         }
                +
00047f 5f0f     +SUBI R16 , LOW ( - 1 )
000480 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000481 cfed      	RJMP _0x28
                 _0x29:
                 ; 0000 00E5                         write_byte_to_eeprom(0x0, st_counts + 1);
000482 940e 0f60 	CALL SUBOPT_0xF
000484 2fa5      	MOV  R26,R21
000485 5faf      	SUBI R26,-LOW(1)
000486 940e 0aea 	CALL _write_byte_to_eeprom
                 ; 0000 00E6                         lcdCommand(0x01);
000488 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00E7                         lcd_gotoxy(1, 1);
                 ; 0000 00E8                         lcd_print("Student added with ID:");
                +
00048a efae     +LDI R26 , LOW ( _0xC + ( 192 ) )
00048b e0b2     +LDI R27 , HIGH ( _0xC + ( 192 ) )
                 	__POINTW2MN _0xC,192
00048c 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 00E9                         lcd_gotoxy(1, 2);
                 ; 0000 00EA                         lcd_print(buffer);
00048e 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 00EB                         delay_ms(3000); // wait
000490 eba8      	LDI  R26,LOW(3000)
000491 e0bb      	LDI  R27,HIGH(3000)
000492 940e 1073 	CALL _delay_ms
                 ; 0000 00EC                     }
                 _0x26:
                 ; 0000 00ED                 }
                 _0x24:
                 ; 0000 00EE                 memset(buffer,0,32);
000494 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 00EF             }
000496 cf88      	RJMP _0x18
                 _0x1A:
                 ; 0000 00F0         }
                 ; 0000 00F1         else if (stage == STAGE_TEMPERATURE_MONITORING)
000497 c170      	RJMP _0x2A
                 _0x17:
000498 e0e4      	LDI  R30,LOW(4)
000499 15e5      	CP   R30,R5
00049a f411      	BRNE _0x2B
                 ; 0000 00F2         {
                 ; 0000 00F3             show_temperature();
00049b d59d      	RCALL _show_temperature
                 ; 0000 00F4         }
                 ; 0000 00F5         else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
00049c c16b      	RJMP _0x2C
                 _0x2B:
00049d e0e5      	LDI  R30,LOW(5)
00049e 15e5      	CP   R30,R5
00049f f009      	BREQ PC+2
0004a0 c049      	RJMP _0x2D
                 ; 0000 00F6         {
                 ; 0000 00F7             lcdCommand(0x01);
0004a1 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 00F8             lcd_gotoxy(1, 1);
                 ; 0000 00F9             lcd_print("Number of students : ");
                +
0004a3 e1a5     +LDI R26 , LOW ( _0xC + ( 215 ) )
0004a4 e0b3     +LDI R27 , HIGH ( _0xC + ( 215 ) )
                 	__POINTW2MN _0xC,215
0004a5 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 00FA             lcd_gotoxy(1, 2);
                 ; 0000 00FB             st_counts = read_byte_from_eeprom(0x0);
0004a7 940e 0f50 	CALL SUBOPT_0xC
                 ; 0000 00FC             memset(buffer, 0, 32);
0004a9 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 00FD             itoa(st_counts, buffer);
0004ab 2fe5      	MOV  R30,R21
0004ac e0f0      	LDI  R31,0
0004ad 940e 0f5b 	CALL SUBOPT_0xE
0004af 940e 0ce9 	CALL _itoa
                 ; 0000 00FE             lcd_print(buffer);
0004b1 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 00FF             delay_ms(1000);
0004b3 940e 0f69 	CALL SUBOPT_0x11
                 ; 0000 0100 
                 ; 0000 0101             for (i = 0; i < st_counts; i++)
                +
0004b5 e000     +LDI R16 , LOW ( 0 )
0004b6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2F:
0004b7 2fe5      	MOV  R30,R21
0004b8 01d8      	MOVW R26,R16
0004b9 e0f0      	LDI  R31,0
0004ba 17ae      	CP   R26,R30
0004bb 07bf      	CPC  R27,R31
0004bc f524      	BRGE _0x30
                 ; 0000 0102             {
                 ; 0000 0103                 memset(buffer, 0, 32);
0004bd 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0104                 for (j = 0; j < 8; j++)
                +
0004bf e020     +LDI R18 , LOW ( 0 )
0004c0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x32:
                +
0004c1 3028     +CPI R18 , LOW ( 8 )
0004c2 e0e0     +LDI R30 , HIGH ( 8 )
0004c3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
0004c4 f46c      	BRGE _0x33
                 ; 0000 0105                 {
                 ; 0000 0106                     buffer[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
0004c5 01f9      	MOVW R30,R18
0004c6 51e8      	SUBI R30,LOW(-_buffer)
0004c7 4ff8      	SBCI R31,HIGH(-_buffer)
0004c8 93ff      	PUSH R31
0004c9 93ef      	PUSH R30
0004ca 940e 0f6d 	CALL SUBOPT_0x12
0004cc 91af      	POP  R26
0004cd 91bf      	POP  R27
0004ce 93ec      	ST   X,R30
                 ; 0000 0107                 }
                +
0004cf 5f2f     +SUBI R18 , LOW ( - 1 )
0004d0 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0004d1 cfef      	RJMP _0x32
                 _0x33:
                 ; 0000 0108                 buffer[j] = '\0';
0004d2 eea8      	LDI  R26,LOW(_buffer)
0004d3 e0b7      	LDI  R27,HIGH(_buffer)
0004d4 0fa2      	ADD  R26,R18
0004d5 1fb3      	ADC  R27,R19
0004d6 e0e0      	LDI  R30,LOW(0)
0004d7 93ec      	ST   X,R30
                 ; 0000 0109                 lcdCommand(0x01);
0004d8 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 010A                 lcd_gotoxy(1, 1);
                 ; 0000 010B                 lcd_print(buffer);
0004da 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 010C                 delay_ms(1000);
0004dc 940e 0f69 	CALL SUBOPT_0x11
                 ; 0000 010D             }
                +
0004de 5f0f     +SUBI R16 , LOW ( - 1 )
0004df 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0004e0 cfd6      	RJMP _0x2F
                 _0x30:
                 ; 0000 010E 
                 ; 0000 010F             lcdCommand(0x01);
0004e1 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0110             lcd_gotoxy(1, 1);
                 ; 0000 0111             lcd_print("Press Cancel To Go Back");
                +
0004e3 e2ab     +LDI R26 , LOW ( _0xC + ( 237 ) )
0004e4 e0b3     +LDI R27 , HIGH ( _0xC + ( 237 ) )
                 	__POINTW2MN _0xC,237
0004e5 d53c      	RCALL _lcd_print
                 ; 0000 0112             while (stage == STAGE_VIEW_PRESENT_STUDENTS)
                 _0x34:
0004e6 e0e5      	LDI  R30,LOW(5)
0004e7 15e5      	CP   R30,R5
0004e8 f3e9      	BREQ _0x34
                 ; 0000 0113                 ;
                 ; 0000 0114         }
                 ; 0000 0115         else if (stage == STAGE_RETRIEVE_STUDENT_DATA)
0004e9 c11e      	RJMP _0x37
                 _0x2D:
0004ea e0e6      	LDI  R30,LOW(6)
0004eb 15e5      	CP   R30,R5
0004ec f5b9      	BRNE _0x38
                 ; 0000 0116         {
                 ; 0000 0117             lcdCommand(0x01);
0004ed 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0118             lcd_gotoxy(1, 1);
                 ; 0000 0119             lcd_print("Start Transferring...");
                +
0004ef e4a3     +LDI R26 , LOW ( _0xC + ( 261 ) )
0004f0 e0b3     +LDI R27 , HIGH ( _0xC + ( 261 ) )
                 	__POINTW2MN _0xC,261
0004f1 d530      	RCALL _lcd_print
                 ; 0000 011A             st_counts = read_byte_from_eeprom(0x0);
0004f2 940e 0f50 	CALL SUBOPT_0xC
                 ; 0000 011B             for (i = 0; i < st_counts; i++)
                +
0004f4 e000     +LDI R16 , LOW ( 0 )
0004f5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3A:
0004f6 2fe5      	MOV  R30,R21
0004f7 01d8      	MOVW R26,R16
0004f8 e0f0      	LDI  R31,0
0004f9 17ae      	CP   R26,R30
0004fa 07bf      	CPC  R27,R31
0004fb f49c      	BRGE _0x3B
                 ; 0000 011C             {
                 ; 0000 011D                 for (j = 0; j < 8; j++)
                +
0004fc e020     +LDI R18 , LOW ( 0 )
0004fd e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x3D:
                +
0004fe 3028     +CPI R18 , LOW ( 8 )
0004ff e0e0     +LDI R30 , HIGH ( 8 )
000500 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000501 f444      	BRGE _0x3E
                 ; 0000 011E                 {
                 ; 0000 011F                     USART_Transmit(read_byte_from_eeprom(j + ((i + 1) * 8)));
000502 940e 0f6d 	CALL SUBOPT_0x12
000504 2fae      	MOV  R26,R30
000505 940e 0af5 	CALL _USART_Transmit
                 ; 0000 0120                 }
                +
000507 5f2f     +SUBI R18 , LOW ( - 1 )
000508 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000509 cff4      	RJMP _0x3D
                 _0x3E:
                 ; 0000 0121 
                 ; 0000 0122                 USART_Transmit('\r');
00050a 940e 0f76 	CALL SUBOPT_0x13
                 ; 0000 0123                 USART_Transmit('\r');
                 ; 0000 0124 
                 ; 0000 0125                 delay_ms(500);
                 ; 0000 0126             }
                +
00050c 5f0f     +SUBI R16 , LOW ( - 1 )
00050d 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00050e cfe7      	RJMP _0x3A
                 _0x3B:
                 ; 0000 0127             for (j = 0; j < 8; j++)
                +
00050f e020     +LDI R18 , LOW ( 0 )
000510 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40:
                +
000511 3028     +CPI R18 , LOW ( 8 )
000512 e0e0     +LDI R30 , HIGH ( 8 )
000513 073e     +CPC R19 , R30
                 	__CPWRN 18,19,8
000514 f434      	BRGE _0x41
                 ; 0000 0128             {
                 ; 0000 0129                 USART_Transmit('=');
000515 e3ad      	LDI  R26,LOW(61)
000516 940e 0af5 	CALL _USART_Transmit
                 ; 0000 012A             }
                +
000518 5f2f     +SUBI R18 , LOW ( - 1 )
000519 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00051a cff6      	RJMP _0x40
                 _0x41:
                 ; 0000 012B 
                 ; 0000 012C             USART_Transmit('\r');
00051b 940e 0f76 	CALL SUBOPT_0x13
                 ; 0000 012D             USART_Transmit('\r');
                 ; 0000 012E             delay_ms(500);
                 ; 0000 012F 
                 ; 0000 0130             lcdCommand(0x01);
00051d 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0131             lcd_gotoxy(1, 1);
                 ; 0000 0132             lcd_print("Usart Transmit Finished");
                +
00051f e5a9     +LDI R26 , LOW ( _0xC + ( 283 ) )
000520 e0b3     +LDI R27 , HIGH ( _0xC + ( 283 ) )
                 	__POINTW2MN _0xC,283
000521 940e 0f10 	CALL SUBOPT_0x2
                 ; 0000 0133             delay_ms(2000);
                 ; 0000 0134             stage = STAGE_INIT_MENU;
                 ; 0000 0135         }
                 ; 0000 0136         else if (stage == STAGE_STUDENT_MANAGMENT)
000523 c0e4      	RJMP _0x42
                 _0x38:
000524 e0e7      	LDI  R30,LOW(7)
000525 15e5      	CP   R30,R5
000526 f469      	BRNE _0x43
                 ; 0000 0137         {
                 ; 0000 0138             lcdCommand(0x01);
000527 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0139             lcd_gotoxy(1, 1);
                 ; 0000 013A             lcd_print("1: Search Student");
                +
000529 e7a1     +LDI R26 , LOW ( _0xC + ( 307 ) )
00052a e0b3     +LDI R27 , HIGH ( _0xC + ( 307 ) )
                 	__POINTW2MN _0xC,307
00052b 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 013B             lcd_gotoxy(1, 2);
                 ; 0000 013C             lcd_print("2: Delete Student");
                +
00052d e8a3     +LDI R26 , LOW ( _0xC + ( 325 ) )
00052e e0b3     +LDI R27 , HIGH ( _0xC + ( 325 ) )
                 	__POINTW2MN _0xC,325
00052f d4f2      	RCALL _lcd_print
                 ; 0000 013D             while (stage == STAGE_STUDENT_MANAGMENT)
                 _0x44:
000530 e0e7      	LDI  R30,LOW(7)
000531 15e5      	CP   R30,R5
000532 f3e9      	BREQ _0x44
                 ; 0000 013E                 ;
                 ; 0000 013F         }
                 ; 0000 0140         else if (stage == STAGE_SEARCH_STUDENT)
000533 c0d4      	RJMP _0x47
                 _0x43:
000534 e0e8      	LDI  R30,LOW(8)
000535 15e5      	CP   R30,R5
000536 f471      	BRNE _0x48
                 ; 0000 0141         {
                 ; 0000 0142             lcdCommand(0x01);
000537 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0143             lcd_gotoxy(1, 1);
                 ; 0000 0144             lcd_print("Enter Student Code For Search:");
                +
000539 e9a5     +LDI R26 , LOW ( _0xC + ( 343 ) )
00053a e0b3     +LDI R27 , HIGH ( _0xC + ( 343 ) )
                 	__POINTW2MN _0xC,343
00053b 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0145             lcd_gotoxy(1, 2);
                 ; 0000 0146             lcdCommand(0x0f);   // display on, cursor blinking
00053d 940e 0f18 	CALL SUBOPT_0x3
                 ; 0000 0147             delay_us(100 * 16); // wait
                 ; 0000 0148             while (stage == STAGE_SEARCH_STUDENT)
                 _0x49:
00053f e0e8      	LDI  R30,LOW(8)
000540 15e5      	CP   R30,R5
000541 f3e9      	BREQ _0x49
                 ; 0000 0149                 ;
                 ; 0000 014A             lcdCommand(0x0c);   // display on, cursor off
000542 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 014B             delay_us(100 * 16); // wait
                 ; 0000 014C         }
                 ; 0000 014D         else if (stage == STAGE_DELETE_STUDENT)
000544 c0c3      	RJMP _0x4C
                 _0x48:
000545 e0e9      	LDI  R30,LOW(9)
000546 15e5      	CP   R30,R5
000547 f471      	BRNE _0x4D
                 ; 0000 014E         {
                 ; 0000 014F             lcdCommand(0x01);
000548 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0150             lcd_gotoxy(1, 1);
                 ; 0000 0151             lcd_print("Enter Student Code For Delete:");
                +
00054a eba4     +LDI R26 , LOW ( _0xC + ( 374 ) )
00054b e0b3     +LDI R27 , HIGH ( _0xC + ( 374 ) )
                 	__POINTW2MN _0xC,374
00054c 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0152             lcd_gotoxy(1, 2);
                 ; 0000 0153             lcdCommand(0x0f);   // display on, cursor blinking
00054e 940e 0f18 	CALL SUBOPT_0x3
                 ; 0000 0154             delay_us(100 * 16); // wait
                 ; 0000 0155             while (stage == STAGE_DELETE_STUDENT)
                 _0x4E:
000550 e0e9      	LDI  R30,LOW(9)
000551 15e5      	CP   R30,R5
000552 f3e9      	BREQ _0x4E
                 ; 0000 0156                 ;
                 ; 0000 0157             lcdCommand(0x0c); // display on, cursor off
000553 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 0158             delay_us(100 * 16);
                 ; 0000 0159         }
                 ; 0000 015A         else if (stage == STAGE_TRAFFIC_MONITORING)
000555 c0b2      	RJMP _0x51
                 _0x4D:
000556 e0ea      	LDI  R30,LOW(10)
000557 15e5      	CP   R30,R5
000558 f421      	BRNE _0x52
                 ; 0000 015B         {
                 ; 0000 015C             startSonar();
000559 940e 0bd8 	CALL _startSonar
                 ; 0000 015D             stage = STAGE_INIT_MENU;
00055b 2455      	CLR  R5
                 ; 0000 015E         }
                 ; 0000 015F         else if (stage == STAGE_LOGIN_WITH_ADMIN)
00055c c0ab      	RJMP _0x53
                 _0x52:
00055d e0eb      	LDI  R30,LOW(11)
00055e 15e5      	CP   R30,R5
00055f f521      	BRNE _0x54
                 ; 0000 0160         {
                 ; 0000 0161             lcdCommand(0x01);
000560 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0162             lcd_gotoxy(1, 1);
                 ; 0000 0163             lcd_print("Enter Secret Code (or cancel)");
                +
000562 eda3     +LDI R26 , LOW ( _0xC + ( 405 ) )
000563 e0b3     +LDI R27 , HIGH ( _0xC + ( 405 ) )
                 	__POINTW2MN _0xC,405
000564 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0164             lcd_gotoxy(1, 2);
                 ; 0000 0165             lcdCommand(0x0f);   // display on, cursor blinking
000566 940e 0f18 	CALL SUBOPT_0x3
                 ; 0000 0166             delay_us(100 * 16); // wait
                 ; 0000 0167             while (stage == STAGE_LOGIN_WITH_ADMIN && logged_in == 0)
                 _0x55:
000568 e0eb      	LDI  R30,LOW(11)
000569 15e5      	CP   R30,R5
00056a f411      	BRNE _0x58
00056b 2066      	TST  R6
00056c f009      	BREQ _0x59
                 _0x58:
00056d c001      	RJMP _0x57
                 _0x59:
                 ; 0000 0168                 ;
00056e cff9      	RJMP _0x55
                 _0x57:
                 ; 0000 0169             if (logged_in == 1)
00056f e0e1      	LDI  R30,LOW(1)
000570 15e6      	CP   R30,R6
000571 f479      	BRNE _0x5A
                 ; 0000 016A             {
                 ; 0000 016B                 lcdCommand(0x0c); // display on, cursor off
000572 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 016C                 delay_us(100 * 16);
                 ; 0000 016D                 lcdCommand(0x01);
000574 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 016E                 lcd_gotoxy(1, 1);
                 ; 0000 016F                 lcd_print("1 : Clear EEPROM");
                +
000576 efa1     +LDI R26 , LOW ( _0xC + ( 435 ) )
000577 e0b3     +LDI R27 , HIGH ( _0xC + ( 435 ) )
                 	__POINTW2MN _0xC,435
000578 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0170                 lcd_gotoxy(1, 2);
                 ; 0000 0171                 lcd_print("    press cancel to back");
                +
00057a e0a2     +LDI R26 , LOW ( _0xC + ( 452 ) )
00057b e0b4     +LDI R27 , HIGH ( _0xC + ( 452 ) )
                 	__POINTW2MN _0xC,452
00057c d4a5      	RCALL _lcd_print
                 ; 0000 0172                 while (stage == STAGE_LOGIN_WITH_ADMIN)
                 _0x5B:
00057d e0eb      	LDI  R30,LOW(11)
00057e 15e5      	CP   R30,R5
00057f f3e9      	BREQ _0x5B
                 ; 0000 0173                     ;
                 ; 0000 0174             }
                 ; 0000 0175             else
000580 c002      	RJMP _0x5E
                 _0x5A:
                 ; 0000 0176             {
                 ; 0000 0177                 lcdCommand(0x0c); // display on, cursor off
000581 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 0178                 delay_us(100 * 16);
                 ; 0000 0179             }
                 _0x5E:
                 ; 0000 017A         }
                 ; 0000 017B         else if (stage == STAGE_SET_TIMER)
000583 c084      	RJMP _0x5F
                 _0x54:
000584 e0ee      	LDI  R30,LOW(14)
000585 15e5      	CP   R30,R5
000586 f4a9      	BRNE _0x60
                 ; 0000 017C         {
                 ; 0000 017D             lcdCommand(0x01);
000587 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 017E             lcd_gotoxy(1, 1);
                 ; 0000 017F             lcdCommand(0x0c); // display on, cursor off
000589 e0ac      	LDI  R26,LOW(12)
00058a d450      	RCALL _lcdCommand
                 ; 0000 0180             itoa(submitTime, buffer);
00058b 940e 0f80 	CALL SUBOPT_0x14
00058d 940e 0ce9 	CALL _itoa
                 ; 0000 0181             lcd_print("Set Timer(minutes): ");
                +
00058f e1ab     +LDI R26 , LOW ( _0xC + ( 477 ) )
000590 e0b4     +LDI R27 , HIGH ( _0xC + ( 477 ) )
                 	__POINTW2MN _0xC,477
000591 d490      	RCALL _lcd_print
                 ; 0000 0182             lcd_print(buffer);
000592 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 0183             delay_us(100 * 16); // wait
000594 940e 0f32 	CALL SUBOPT_0x6
                 ; 0000 0184             while(stage == STAGE_SET_TIMER);
                 _0x61:
000596 e0ee      	LDI  R30,LOW(14)
000597 15e5      	CP   R30,R5
000598 f3e9      	BREQ _0x61
                 ; 0000 0185             delay_us(100 * 16);
000599 940e 0f32 	CALL SUBOPT_0x6
                 ; 0000 0186         }
                 ; 0000 0187         else if(stage == STAGE_SHOW_CLOCK)
00059b c06c      	RJMP _0x64
                 _0x60:
00059c e0ed      	LDI  R30,LOW(13)
00059d 15e5      	CP   R30,R5
00059e f009      	BREQ PC+2
00059f c068      	RJMP _0x65
                 ; 0000 0188         {
                 ; 0000 0189             while(stage == STAGE_SHOW_CLOCK){
                 _0x66:
0005a0 e0ed      	LDI  R30,LOW(13)
0005a1 15e5      	CP   R30,R5
0005a2 f009      	BREQ PC+2
0005a3 c064      	RJMP _0x68
                 ; 0000 018A                 lcdCommand(0x01);
0005a4 e0a1      	LDI  R26,LOW(1)
0005a5 d435      	RCALL _lcdCommand
                 ; 0000 018B                 rtc_getTime(&hour, &minute, &second);
0005a6 940e 0f83 	CALL SUBOPT_0x15
0005a8 01fe      	MOVW R30,R28
0005a9 9637      	ADIW R30,7
0005aa 93fa      	ST   -Y,R31
0005ab 93ea      	ST   -Y,R30
0005ac 01de      	MOVW R26,R28
0005ad 961a      	ADIW R26,10
0005ae 940e 0cb1 	CALL _rtc_getTime
                 ; 0000 018C                 sprintf(time, "%02x:%02x:%02x  ", hour, minute, second);
0005b0 e1e6      	LDI  R30,LOW(_time)
0005b1 e0f8      	LDI  R31,HIGH(_time)
0005b2 93fa      	ST   -Y,R31
0005b3 93ea      	ST   -Y,R30
                +
0005b4 e7ee     +LDI R30 , LOW ( 2 * _0x0 + ( 498 ) )
0005b5 e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 498 ) )
                 	__POINTW1FN _0x0,498
0005b6 93fa      	ST   -Y,R31
0005b7 93ea      	ST   -Y,R30
0005b8 85e8      	LDD  R30,Y+8
0005b9 940e 0f88 	CALL SUBOPT_0x16
0005bb 85ed      	LDD  R30,Y+13
0005bc 940e 0f88 	CALL SUBOPT_0x16
0005be 89ea      	LDD  R30,Y+18
0005bf 940e 0f88 	CALL SUBOPT_0x16
0005c1 e08c      	LDI  R24,12
0005c2 940e 0ecd 	CALL _sprintf
0005c4 9660      	ADIW R28,16
                 ; 0000 018D                 lcd_gotoxy(1,1);
0005c5 e0e1      	LDI  R30,LOW(1)
0005c6 940e 0f8e 	CALL SUBOPT_0x17
                 ; 0000 018E                 lcd_print(time);
0005c8 e1a6      	LDI  R26,LOW(_time)
0005c9 e0b8      	LDI  R27,HIGH(_time)
0005ca d457      	RCALL _lcd_print
                 ; 0000 018F                 rtc_getDate(&year, &month, &date, &day);
0005cb 01fe      	MOVW R30,R28
0005cc 93fa      	ST   -Y,R31
0005cd 93ea      	ST   -Y,R30
0005ce 01fe      	MOVW R30,R28
0005cf 9633      	ADIW R30,3
0005d0 93fa      	ST   -Y,R31
0005d1 93ea      	ST   -Y,R30
0005d2 01fe      	MOVW R30,R28
0005d3 9636      	ADIW R30,6
0005d4 93fa      	ST   -Y,R31
0005d5 93ea      	ST   -Y,R30
0005d6 01de      	MOVW R26,R28
0005d7 9619      	ADIW R26,9
0005d8 940e 0cc2 	CALL _rtc_getDate
                 ; 0000 0190                 sprintf(time, "20%02x/%02x/%02x  %3s", year, month, date, days[day - 1]);
0005da e1e6      	LDI  R30,LOW(_time)
0005db e0f8      	LDI  R31,HIGH(_time)
0005dc 93fa      	ST   -Y,R31
0005dd 93ea      	ST   -Y,R30
                +
0005de e8ef     +LDI R30 , LOW ( 2 * _0x0 + ( 515 ) )
0005df e0f2     +LDI R31 , HIGH ( 2 * _0x0 + ( 515 ) )
                 	__POINTW1FN _0x0,515
0005e0 93fa      	ST   -Y,R31
0005e1 93ea      	ST   -Y,R30
0005e2 81ec      	LDD  R30,Y+4
0005e3 940e 0f88 	CALL SUBOPT_0x16
0005e5 85e9      	LDD  R30,Y+9
0005e6 940e 0f88 	CALL SUBOPT_0x16
0005e8 85ee      	LDD  R30,Y+14
0005e9 940e 0f88 	CALL SUBOPT_0x16
0005eb 89eb      	LDD  R30,Y+19
0005ec e0f0      	LDI  R31,0
0005ed 9731      	SBIW R30,1
0005ee e0a8      	LDI  R26,LOW(_days)
0005ef e0b8      	LDI  R27,HIGH(_days)
0005f0 0fee      	LSL  R30
0005f1 1fff      	ROL  R31
0005f2 0fae      	ADD  R26,R30
0005f3 1fbf      	ADC  R27,R31
0005f4 940e 123b 	CALL __GETW1P
0005f6 2766      	CLR  R22
0005f7 2777      	CLR  R23
0005f8 940e 1252 	CALL __PUTPARD1
0005fa e180      	LDI  R24,16
0005fb 940e 0ecd 	CALL _sprintf
0005fd 9664      	ADIW R28,20
                 ; 0000 0191                 lcd_gotoxy(1,2);
0005fe e0e1      	LDI  R30,LOW(1)
0005ff 93ea      	ST   -Y,R30
000600 e0a2      	LDI  R26,LOW(2)
000601 d409      	RCALL _lcd_gotoxy
                 ; 0000 0192                 lcd_print(time);
000602 e1a6      	LDI  R26,LOW(_time)
000603 e0b8      	LDI  R27,HIGH(_time)
000604 d41d      	RCALL _lcd_print
                 ; 0000 0193                 delay_ms(1000);
000605 940e 0f69 	CALL SUBOPT_0x11
                 ; 0000 0194             }
000607 cf98      	RJMP _0x66
                 _0x68:
                 ; 0000 0195         }
                 ; 0000 0196     }
                 _0x65:
                 _0x64:
                 _0x5F:
                 _0x53:
                 _0x51:
                 _0x4C:
                 _0x47:
                 _0x42:
                 _0x37:
                 _0x2C:
                 _0x2A:
                 _0x16:
                 _0x10:
                 _0xA:
000608 cde1      	RJMP _0x6
                 ; 0000 0197 }
                 _0x69:
000609 cfff      	RJMP _0x69
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
00023e           	.BYTE 0x1F2
                 ;
                 ;interrupt[TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 019A {
                 
                 	.CSEG
                 _timer2_ovf_isr:
                 ; .FSTART _timer2_ovf_isr
00060a 93ea      	ST   -Y,R30
00060b b7ef      	IN   R30,SREG
00060c 93ea      	ST   -Y,R30
                 ; 0000 019B     timerCount++;
00060d 9483      	INC  R8
                 ; 0000 019C     if(timerCount == 60){
00060e e3ec      	LDI  R30,LOW(60)
00060f 15e8      	CP   R30,R8
000610 f411      	BRNE _0x6A
                 ; 0000 019D         submitTime--;
000611 949a      	DEC  R9
                 ; 0000 019E         timerCount = 0;
000612 2488      	CLR  R8
                 ; 0000 019F     }
                 ; 0000 01A0     TCNT2 = 0;
                 _0x6A:
000613 e0e0      	LDI  R30,LOW(0)
000614 bde4      	OUT  0x24,R30
                 ; 0000 01A1     if(submitTime == 0)
000615 2099      	TST  R9
000616 f409      	BRNE _0x6B
                 ; 0000 01A2         TIMSK = 0;
000617 bfe9      	OUT  0x39,R30
                 ; 0000 01A3 }
                 _0x6B:
000618 91e9      	LD   R30,Y+
000619 bfef      	OUT  SREG,R30
00061a 91e9      	LD   R30,Y+
00061b 9518      	RETI
                 ; .FEND
                 ;
                 ;// int0 (keypad) service routine
                 ;interrupt[EXT_INT0] void int0_routine(void)
                 ; 0000 01A7 {
                 _int0_routine:
                 ; .FSTART _int0_routine
00061c 920a      	ST   -Y,R0
00061d 921a      	ST   -Y,R1
00061e 92fa      	ST   -Y,R15
00061f 936a      	ST   -Y,R22
000620 937a      	ST   -Y,R23
000621 938a      	ST   -Y,R24
000622 939a      	ST   -Y,R25
000623 93aa      	ST   -Y,R26
000624 93ba      	ST   -Y,R27
000625 93ea      	ST   -Y,R30
000626 93fa      	ST   -Y,R31
000627 b7ef      	IN   R30,SREG
000628 93ea      	ST   -Y,R30
                 ; 0000 01A8     unsigned char colloc, rowloc, cl, st_counts, buffer_len;
                 ; 0000 01A9     int i;
                 ; 0000 01AA 
                 ; 0000 01AB     // detect the key
                 ; 0000 01AC     while (1)
000629 9722      	SBIW R28,2
00062a 940e 1257 	CALL __SAVELOCR6
                 ;	colloc -> R17
                 ;	rowloc -> R16
                 ;	cl -> R19
                 ;	st_counts -> R18
                 ;	buffer_len -> R21
                 ;	i -> Y+6
                 ; 0000 01AD     {
                 ; 0000 01AE         KEY_PRT = 0xEF;            // ground row 0
00062c eeef      	LDI  R30,LOW(239)
00062d 940e 0f92 	CALL SUBOPT_0x18
                 ; 0000 01AF         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01B0         if (colloc != 0x0F)        // column detected
00062f f011      	BREQ _0x6F
                 ; 0000 01B1         {
                 ; 0000 01B2             rowloc = 0; // save row location
000630 e000      	LDI  R16,LOW(0)
                 ; 0000 01B3             break;      // exit while loop
000631 c012      	RJMP _0x6E
                 ; 0000 01B4         }
                 ; 0000 01B5         KEY_PRT = 0xDF;            // ground row 1
                 _0x6F:
000632 edef      	LDI  R30,LOW(223)
000633 940e 0f92 	CALL SUBOPT_0x18
                 ; 0000 01B6         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01B7         if (colloc != 0x0F)        // column detected
000635 f011      	BREQ _0x70
                 ; 0000 01B8         {
                 ; 0000 01B9             rowloc = 1; // save row location
000636 e001      	LDI  R16,LOW(1)
                 ; 0000 01BA             break;      // exit while loop
000637 c00c      	RJMP _0x6E
                 ; 0000 01BB         }
                 ; 0000 01BC         KEY_PRT = 0xBF;            // ground row 2
                 _0x70:
000638 ebef      	LDI  R30,LOW(191)
000639 940e 0f92 	CALL SUBOPT_0x18
                 ; 0000 01BD         colloc = (KEY_PIN & 0x0F); // read the columns
                 ; 0000 01BE         if (colloc != 0x0F)        // column detected
00063b f011      	BREQ _0x71
                 ; 0000 01BF         {
                 ; 0000 01C0             rowloc = 2; // save row location
00063c e002      	LDI  R16,LOW(2)
                 ; 0000 01C1             break;      // exit while loop
00063d c006      	RJMP _0x6E
                 ; 0000 01C2         }
                 ; 0000 01C3         KEY_PRT = 0x7F;            // ground row 3
                 _0x71:
00063e e7ef      	LDI  R30,LOW(127)
00063f bbe8      	OUT  0x18,R30
                 ; 0000 01C4         colloc = (KEY_PIN & 0x0F); // read the columns
000640 b3e6      	IN   R30,0x16
000641 70ef      	ANDI R30,LOW(0xF)
000642 2f1e      	MOV  R17,R30
                 ; 0000 01C5         rowloc = 3;                // save row location
000643 e003      	LDI  R16,LOW(3)
                 ; 0000 01C6         break;                     // exit while loop
                 ; 0000 01C7     }
                 _0x6E:
                 ; 0000 01C8     // check column and send result to Port D
                 ; 0000 01C9     if (colloc == 0x0E)
000644 301e      	CPI  R17,14
000645 f411      	BRNE _0x72
                 ; 0000 01CA         cl = 0;
000646 e030      	LDI  R19,LOW(0)
                 ; 0000 01CB     else if (colloc == 0x0D)
000647 c009      	RJMP _0x73
                 _0x72:
000648 301d      	CPI  R17,13
000649 f411      	BRNE _0x74
                 ; 0000 01CC         cl = 1;
00064a e031      	LDI  R19,LOW(1)
                 ; 0000 01CD     else if (colloc == 0x0B)
00064b c005      	RJMP _0x75
                 _0x74:
00064c 301b      	CPI  R17,11
00064d f411      	BRNE _0x76
                 ; 0000 01CE         cl = 2;
00064e e032      	LDI  R19,LOW(2)
                 ; 0000 01CF     else
00064f c001      	RJMP _0x77
                 _0x76:
                 ; 0000 01D0         cl = 3;
000650 e033      	LDI  R19,LOW(3)
                 ; 0000 01D1 
                 ; 0000 01D2     KEY_PRT &= 0x0F; // ground all rows at once
                 _0x77:
                 _0x75:
                 _0x73:
000651 b3e8      	IN   R30,0x18
000652 70ef      	ANDI R30,LOW(0xF)
000653 bbe8      	OUT  0x18,R30
                 ; 0000 01D3 
                 ; 0000 01D4     // inside menu level 1
                 ; 0000 01D5     if (stage == STAGE_INIT_MENU)
000654 2055      	TST  R5
000655 f009      	BREQ PC+2
000656 c079      	RJMP _0x78
                 ; 0000 01D6     {
                 ; 0000 01D7         switch (keypad[rowloc][cl] - '0')
000657 940e 0f98 	CALL SUBOPT_0x19
000659 91ec      	LD   R30,X
00065a e0f0      	LDI  R31,0
00065b 97f0      	SBIW R30,48
                 ; 0000 01D8         {
                 ; 0000 01D9         case OPTION_ATTENDENCE:
00065c 30e1      	CPI  R30,LOW(0x1)
00065d e0a0      	LDI  R26,HIGH(0x1)
00065e 07fa      	CPC  R31,R26
00065f f419      	BRNE _0x7C
                 ; 0000 01DA             stage = STAGE_ATTENDENC_MENU;
000660 e0e1      	LDI  R30,LOW(1)
000661 2e5e      	MOV  R5,R30
                 ; 0000 01DB             break;
000662 c047      	RJMP _0x7B
                 ; 0000 01DC         case OPTION_TEMPERATURE_MONITORING:
                 _0x7C:
000663 30e4      	CPI  R30,LOW(0x4)
000664 e0a0      	LDI  R26,HIGH(0x4)
000665 07fa      	CPC  R31,R26
000666 f419      	BRNE _0x7D
                 ; 0000 01DD             stage = STAGE_TEMPERATURE_MONITORING;
000667 e0e4      	LDI  R30,LOW(4)
000668 2e5e      	MOV  R5,R30
                 ; 0000 01DE             break;
000669 c040      	RJMP _0x7B
                 ; 0000 01DF         case OPTION_VIEW_PRESENT_STUDENTS:
                 _0x7D:
00066a 30e3      	CPI  R30,LOW(0x3)
00066b e0a0      	LDI  R26,HIGH(0x3)
00066c 07fa      	CPC  R31,R26
00066d f419      	BRNE _0x7E
                 ; 0000 01E0             stage = STAGE_VIEW_PRESENT_STUDENTS;
00066e e0e5      	LDI  R30,LOW(5)
00066f 2e5e      	MOV  R5,R30
                 ; 0000 01E1             break;
000670 c039      	RJMP _0x7B
                 ; 0000 01E2         case OPTION_RETRIEVE_STUDENT_DATA:
                 _0x7E:
000671 30e5      	CPI  R30,LOW(0x5)
000672 e0a0      	LDI  R26,HIGH(0x5)
000673 07fa      	CPC  R31,R26
000674 f419      	BRNE _0x7F
                 ; 0000 01E3             stage = STAGE_RETRIEVE_STUDENT_DATA;
000675 e0e6      	LDI  R30,LOW(6)
000676 2e5e      	MOV  R5,R30
                 ; 0000 01E4             break;
000677 c032      	RJMP _0x7B
                 ; 0000 01E5         case OPTION_STUDENT_MANAGEMENT:
                 _0x7F:
000678 30e2      	CPI  R30,LOW(0x2)
000679 e0a0      	LDI  R26,HIGH(0x2)
00067a 07fa      	CPC  R31,R26
00067b f419      	BRNE _0x80
                 ; 0000 01E6             stage = STAGE_STUDENT_MANAGMENT;
00067c e0e7      	LDI  R30,LOW(7)
00067d 2e5e      	MOV  R5,R30
                 ; 0000 01E7             break;
00067e c02b      	RJMP _0x7B
                 ; 0000 01E8         case OPTION_TRAFFIC_MONITORING:
                 _0x80:
00067f 30e6      	CPI  R30,LOW(0x6)
000680 e0a0      	LDI  R26,HIGH(0x6)
000681 07fa      	CPC  R31,R26
000682 f419      	BRNE _0x81
                 ; 0000 01E9             stage = STAGE_TRAFFIC_MONITORING;
000683 e0ea      	LDI  R30,LOW(10)
000684 2e5e      	MOV  R5,R30
                 ; 0000 01EA             break;
000685 c024      	RJMP _0x7B
                 ; 0000 01EB         case OPTION_LOGIN_WITH_ADMIN:
                 _0x81:
000686 30e7      	CPI  R30,LOW(0x7)
000687 e0a0      	LDI  R26,HIGH(0x7)
000688 07fa      	CPC  R31,R26
000689 f419      	BRNE _0x82
                 ; 0000 01EC             stage = STAGE_LOGIN_WITH_ADMIN;
00068a e0eb      	LDI  R30,LOW(11)
00068b 2e5e      	MOV  R5,R30
                 ; 0000 01ED             break;
00068c c01d      	RJMP _0x7B
                 ; 0000 01EE         case OPTION_SET_TIMER:
                 _0x82:
00068d 30e9      	CPI  R30,LOW(0x9)
00068e e0a0      	LDI  R26,HIGH(0x9)
00068f 07fa      	CPC  R31,R26
000690 f419      	BRNE _0x83
                 ; 0000 01EF             stage = STAGE_SET_TIMER;
000691 e0ee      	LDI  R30,LOW(14)
000692 2e5e      	MOV  R5,R30
                 ; 0000 01F0             break;
000693 c016      	RJMP _0x7B
                 ; 0000 01F1         case OPTION_LOGOUT:
                 _0x83:
000694 30e8      	CPI  R30,LOW(0x8)
000695 e0a0      	LDI  R26,HIGH(0x8)
000696 07fa      	CPC  R31,R26
000697 f491      	BRNE _0x87
                 ; 0000 01F2 #asm("cli") // disable interrupts
000698 94f8      	cli
                 ; 0000 01F3             if (logged_in == 1)
000699 e0e1      	LDI  R30,LOW(1)
00069a 15e6      	CP   R30,R6
00069b f471      	BRNE _0x85
                 ; 0000 01F4             {
                 ; 0000 01F5                 lcdCommand(0x1);
00069c 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 01F6                 lcd_gotoxy(1, 1);
                 ; 0000 01F7                 lcd_print("Logout ...");
                +
00069e e3a0     +LDI R26 , LOW ( _0x86 + ( 0 ) )
00069f e0b4     +LDI R27 , HIGH ( _0x86 + ( 0 ) )
                 	__POINTW2MN _0x86,0
0006a0 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 01F8                 lcd_gotoxy(1, 2);
                 ; 0000 01F9                 lcd_print("Going To Admin Page In 2 Sec");
                +
0006a2 e3ab     +LDI R26 , LOW ( _0x86 + ( 11 ) )
0006a3 e0b4     +LDI R27 , HIGH ( _0x86 + ( 11 ) )
                 	__POINTW2MN _0x86,11
0006a4 940e 0fa4 	CALL SUBOPT_0x1A
                 ; 0000 01FA                 delay_ms(2000);
                 ; 0000 01FB                 logged_in = 0;
0006a6 2466      	CLR  R6
                 ; 0000 01FC #asm("sei")
0006a7 9478      	sei
                 ; 0000 01FD                 stage = STAGE_LOGIN_WITH_ADMIN;
0006a8 e0eb      	LDI  R30,LOW(11)
0006a9 2e5e      	MOV  R5,R30
                 ; 0000 01FE             }
                 ; 0000 01FF             break;
                 _0x85:
                 ; 0000 0200         default:
                 _0x87:
                 ; 0000 0201             break;
                 ; 0000 0202         }
                 _0x7B:
                 ; 0000 0203 
                 ; 0000 0204         if (keypad[rowloc][cl] == 'L')
0006aa 940e 0f98 	CALL SUBOPT_0x19
0006ac 91ac      	LD   R26,X
0006ad 34ac      	CPI  R26,LOW(0x4C)
0006ae f451      	BRNE _0x88
                 ; 0000 0205         {
                 ; 0000 0206             page_num = page_num > 0 ? page_num - 1 : (MENU_PAGE_COUNT - 1);
0006af e0e0      	LDI  R30,LOW(0)
0006b0 15e4      	CP   R30,R4
0006b1 f420      	BRSH _0x89
0006b2 2de4      	MOV  R30,R4
0006b3 e0f0      	LDI  R31,0
0006b4 9731      	SBIW R30,1
0006b5 c001      	RJMP _0x8A
                 _0x89:
0006b6 e0e4      	LDI  R30,LOW(4)
                 _0x8A:
0006b7 2e4e      	MOV  R4,R30
                 ; 0000 0207         }
                 ; 0000 0208         else if (keypad[rowloc][cl] == 'R')
0006b8 c016      	RJMP _0x8C
                 _0x88:
0006b9 940e 0f98 	CALL SUBOPT_0x19
0006bb 91ac      	LD   R26,X
0006bc 35a2      	CPI  R26,LOW(0x52)
0006bd f451      	BRNE _0x8D
                 ; 0000 0209         {
                 ; 0000 020A             page_num = (page_num + 1) % MENU_PAGE_COUNT;
0006be 2de4      	MOV  R30,R4
0006bf e0f0      	LDI  R31,0
0006c0 9631      	ADIW R30,1
0006c1 01df      	MOVW R26,R30
0006c2 e0e5      	LDI  R30,LOW(5)
0006c3 e0f0      	LDI  R31,HIGH(5)
0006c4 940e 122d 	CALL __MODW21
0006c6 2e4e      	MOV  R4,R30
                 ; 0000 020B         }
                 ; 0000 020C         else if(keypad[rowloc][cl] == 'O')
0006c7 c007      	RJMP _0x8E
                 _0x8D:
0006c8 940e 0f98 	CALL SUBOPT_0x19
0006ca 91ac      	LD   R26,X
0006cb 34af      	CPI  R26,LOW(0x4F)
0006cc f411      	BRNE _0x8F
                 ; 0000 020D         {
                 ; 0000 020E             stage = STAGE_SHOW_CLOCK;
0006cd e0ed      	LDI  R30,LOW(13)
0006ce 2e5e      	MOV  R5,R30
                 ; 0000 020F         }
                 ; 0000 0210     }
                 _0x8F:
                 _0x8E:
                 _0x8C:
                 ; 0000 0211     else if (stage == STAGE_ATTENDENC_MENU)
0006cf c2fa      	RJMP _0x90
                 _0x78:
0006d0 e0e1      	LDI  R30,LOW(1)
0006d1 15e5      	CP   R30,R5
0006d2 f4e1      	BRNE _0x91
                 ; 0000 0212     {
                 ; 0000 0213         switch (keypad[rowloc][cl])
0006d3 940e 0f98 	CALL SUBOPT_0x19
0006d5 91ec      	LD   R30,X
0006d6 e0f0      	LDI  R31,0
                 ; 0000 0214         {
                 ; 0000 0215         case 'C':
0006d7 34e3      	CPI  R30,LOW(0x43)
0006d8 e0a0      	LDI  R26,HIGH(0x43)
0006d9 07fa      	CPC  R31,R26
0006da f411      	BRNE _0x95
                 ; 0000 0216             stage = STAGE_INIT_MENU;
0006db 2455      	CLR  R5
                 ; 0000 0217             break;
0006dc c011      	RJMP _0x94
                 ; 0000 0218         case '1':
                 _0x95:
0006dd 33e1      	CPI  R30,LOW(0x31)
0006de e0a0      	LDI  R26,HIGH(0x31)
0006df 07fa      	CPC  R31,R26
0006e0 f429      	BRNE _0x96
                 ; 0000 0219             memset(buffer, 0, 32);
0006e1 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 021A             stage = STAGE_SUBMIT_CODE;
0006e3 e0e2      	LDI  R30,LOW(2)
0006e4 2e5e      	MOV  R5,R30
                 ; 0000 021B             break;
0006e5 c008      	RJMP _0x94
                 ; 0000 021C         case '2':
                 _0x96:
0006e6 33e2      	CPI  R30,LOW(0x32)
0006e7 e0a0      	LDI  R26,HIGH(0x32)
0006e8 07fa      	CPC  R31,R26
0006e9 f421      	BRNE _0x98
                 ; 0000 021D             memset(buffer, 0, 32);
0006ea 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 021E             stage = STAGE_SUBMIT_WITH_CARD;
0006ec e0e3      	LDI  R30,LOW(3)
0006ed 2e5e      	MOV  R5,R30
                 ; 0000 021F             break;
                 ; 0000 0220         default:
                 _0x98:
                 ; 0000 0221             break;
                 ; 0000 0222         }
                 _0x94:
                 ; 0000 0223     }
                 ; 0000 0224     else if (stage == STAGE_SUBMIT_CODE)
0006ee c2db      	RJMP _0x99
                 _0x91:
0006ef e0e2      	LDI  R30,LOW(2)
0006f0 15e5      	CP   R30,R5
0006f1 f009      	BREQ PC+2
0006f2 c0aa      	RJMP _0x9A
                 ; 0000 0225     {
                 ; 0000 0226 
                 ; 0000 0227         if (keypad[rowloc][cl] == 'C')
0006f3 940e 0f98 	CALL SUBOPT_0x19
0006f5 91ac      	LD   R26,X
0006f6 34a3      	CPI  R26,LOW(0x43)
0006f7 f421      	BRNE _0x9B
                 ; 0000 0228         {
                 ; 0000 0229             memset(buffer, 0, 32);
0006f8 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 022A             stage = STAGE_ATTENDENC_MENU;
0006fa e0e1      	LDI  R30,LOW(1)
0006fb 2e5e      	MOV  R5,R30
                 ; 0000 022B         }
                 ; 0000 022C         if ((keypad[rowloc][cl] - '0') < 10)
                 _0x9B:
0006fc 940e 0f98 	CALL SUBOPT_0x19
0006fe 91ec      	LD   R30,X
0006ff e0f0      	LDI  R31,0
000700 97fa      	SBIW R30,58
000701 f47c      	BRGE _0x9C
                 ; 0000 022D         {
                 ; 0000 022E             if (strlen(buffer) <= 30)
000702 940e 0f37 	CALL SUBOPT_0x7
000704 977f      	SBIW R30,31
000705 f450      	BRSH _0x9D
                 ; 0000 022F             {
                 ; 0000 0230                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000706 940e 0f37 	CALL SUBOPT_0x7
000708 940e 0faa 	CALL SUBOPT_0x1B
00070a 940e 0fae 	CALL SUBOPT_0x1C
                 ; 0000 0231                 buffer[strlen(buffer) + 1] = '\0';
00070c 940e 0fb2 	CALL SUBOPT_0x1D
                 ; 0000 0232                 lcdData(keypad[rowloc][cl]);
00070e 91ac      	LD   R26,X
00070f d2d7      	RCALL _lcdData
                 ; 0000 0233             }
                 ; 0000 0234         }
                 _0x9D:
                 ; 0000 0235         else if (keypad[rowloc][cl] == 'D')
000710 c08b      	RJMP _0x9E
                 _0x9C:
000711 940e 0f98 	CALL SUBOPT_0x19
000713 91ac      	LD   R26,X
000714 34a4      	CPI  R26,LOW(0x44)
000715 f461      	BRNE _0x9F
                 ; 0000 0236         {
                 ; 0000 0237             buffer_len = strlen(buffer);
000716 940e 0f37 	CALL SUBOPT_0x7
000718 2f5e      	MOV  R21,R30
                 ; 0000 0238             if (buffer_len > 0)
000719 3051      	CPI  R21,1
00071a f030      	BRLO _0xA0
                 ; 0000 0239             {
                 ; 0000 023A                 buffer[buffer_len - 1] = '\0';
00071b 940e 0fb7 	CALL SUBOPT_0x1E
                 ; 0000 023B                 lcdCommand(0x10);
                 ; 0000 023C                 lcd_print(" ");
                +
00071d e5a8     +LDI R26 , LOW ( _0x86 + ( 40 ) )
00071e e0b4     +LDI R27 , HIGH ( _0x86 + ( 40 ) )
                 	__POINTW2MN _0x86,40
00071f 940e 0fc1 	CALL SUBOPT_0x1F
                 ; 0000 023D                 lcdCommand(0x10);
                 ; 0000 023E             }
                 ; 0000 023F         }
                 _0xA0:
                 ; 0000 0240         else if(keypad[rowloc][cl] == 'O')
000721 c07a      	RJMP _0xA1
                 _0x9F:
000722 940e 0f98 	CALL SUBOPT_0x19
000724 91ac      	LD   R26,X
000725 34af      	CPI  R26,LOW(0x4F)
000726 f481      	BRNE _0xA2
                 ; 0000 0241         {
                 ; 0000 0242             lcdCommand(0xC0);
000727 940e 0fc6 	CALL SUBOPT_0x20
                 ; 0000 0243             for(i = 0; i < strlen(buffer); i++)
                 _0xA4:
000729 940e 0f37 	CALL SUBOPT_0x7
00072b 940e 0fcd 	CALL SUBOPT_0x21
00072d f430      	BRSH _0xA5
                 ; 0000 0244                 lcd_print(" ");
                +
00072e e5aa     +LDI R26 , LOW ( _0x86 + ( 42 ) )
00072f e0b4     +LDI R27 , HIGH ( _0x86 + ( 42 ) )
                 	__POINTW2MN _0x86,42
000730 d2f1      	RCALL _lcd_print
000731 940e 0fd2 	CALL SUBOPT_0x22
000733 cff5      	RJMP _0xA4
                 _0xA5:
                 ; 0000 0245 lcdCommand(0xC0);
000734 940e 0fd8 	CALL SUBOPT_0x23
                 ; 0000 0246             memset(buffer, 0, 32);
                 ; 0000 0247         }
                 ; 0000 0248         else if (keypad[rowloc][cl] == 'E')
000736 c065      	RJMP _0xA6
                 _0xA2:
000737 940e 0f98 	CALL SUBOPT_0x19
000739 91ac      	LD   R26,X
00073a 34a5      	CPI  R26,LOW(0x45)
00073b f009      	BREQ PC+2
00073c c058      	RJMP _0xA7
                 ; 0000 0249         {
                 ; 0000 024A 
                 ; 0000 024B #asm("cli")
00073d 94f8      	cli
                 ; 0000 024C 
                 ; 0000 024D             if (strncmp(buffer, "40", 2) != 0 ||
                 ; 0000 024E                 strlen(buffer) != 8)
00073e 940e 0f3b 	CALL SUBOPT_0x8
                +
000740 e5ec     +LDI R30 , LOW ( _0x86 + ( 44 ) )
000741 e0f4     +LDI R31 , HIGH ( _0x86 + ( 44 ) )
                 	__POINTW1MN _0x86,44
000742 940e 0f40 	CALL SUBOPT_0x9
000744 f431      	BRNE _0xA9
000745 940e 0f37 	CALL SUBOPT_0x7
000747 30e8      	CPI  R30,LOW(0x8)
000748 e0a0      	LDI  R26,HIGH(0x8)
000749 07fa      	CPC  R31,R26
00074a f061      	BREQ _0xA8
                 _0xA9:
                 ; 0000 024F             {
                 ; 0000 0250 
                 ; 0000 0251                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00074b 9a97      	SBI  0x12,7
                 ; 0000 0252                 lcdCommand(0x01);
00074c 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0253                 lcd_gotoxy(1, 1);
                 ; 0000 0254                 lcd_print("Incorrect Student Code Format");
                +
00074e e5af     +LDI R26 , LOW ( _0x86 + ( 47 ) )
00074f e0b4     +LDI R27 , HIGH ( _0x86 + ( 47 ) )
                 	__POINTW2MN _0x86,47
000750 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0255                 lcd_gotoxy(1, 2);
                 ; 0000 0256                 lcd_print("You Will Back Menu In 2 Second");
                +
000752 e7ad     +LDI R26 , LOW ( _0x86 + ( 77 ) )
000753 e0b4     +LDI R27 , HIGH ( _0x86 + ( 77 ) )
                 	__POINTW2MN _0x86,77
000754 940e 0f4d 	CALL SUBOPT_0xB
                 ; 0000 0257                 delay_ms(2000);
                 ; 0000 0258                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0259             }
                 ; 0000 025A             else if (search_student_code() > 0)
000756 c03a      	RJMP _0xAB
                 _0xA8:
000757 d3b9      	RCALL _search_student_code
000758 30e1      	CPI  R30,LOW(0x1)
000759 f060      	BRLO _0xAC
                 ; 0000 025B             {
                 ; 0000 025C                 BUZZER_PRT |= (1 << BUZZER_NUM); // turn on buzzer
00075a 9a97      	SBI  0x12,7
                 ; 0000 025D                 lcdCommand(0x01);
00075b 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 025E                 lcd_gotoxy(1, 1);
                 ; 0000 025F                 lcd_print("Duplicate Student Code Entered");
                +
00075d e9ac     +LDI R26 , LOW ( _0x86 + ( 108 ) )
00075e e0b4     +LDI R27 , HIGH ( _0x86 + ( 108 ) )
                 	__POINTW2MN _0x86,108
00075f 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0260                 lcd_gotoxy(1, 2);
                 ; 0000 0261                 lcd_print("You Will Back Menu In 2 Second");
                +
000761 ebab     +LDI R26 , LOW ( _0x86 + ( 139 ) )
000762 e0b4     +LDI R27 , HIGH ( _0x86 + ( 139 ) )
                 	__POINTW2MN _0x86,139
000763 940e 0f4d 	CALL SUBOPT_0xB
                 ; 0000 0262                 delay_ms(2000);
                 ; 0000 0263                 BUZZER_PRT &= ~(1 << BUZZER_NUM); // turn off buzzer
                 ; 0000 0264             }
                 ; 0000 0265             else
000765 c02b      	RJMP _0xAD
                 _0xAC:
                 ; 0000 0266             {
                 ; 0000 0267                 // save the buffer to EEPROM
                 ; 0000 0268                 st_counts = read_byte_from_eeprom(0x0);
000766 940e 0fdc 	CALL SUBOPT_0x24
000768 2f2e      	MOV  R18,R30
                 ; 0000 0269                 for (i = 0; i < 8; i++)
000769 e0e0      	LDI  R30,LOW(0)
00076a 83ee      	STD  Y+6,R30
00076b 83ef      	STD  Y+6+1,R30
                 _0xAF:
00076c 81ae      	LDD  R26,Y+6
00076d 81bf      	LDD  R27,Y+6+1
00076e 9718      	SBIW R26,8
00076f f494      	BRGE _0xB0
                 ; 0000 026A                 {
                 ; 0000 026B                     write_byte_to_eeprom(i + ((st_counts + 1) * 8), buffer[i]);
000770 2fe2      	MOV  R30,R18
000771 940e 0f56 	CALL SUBOPT_0xD
000773 81ae      	LDD  R26,Y+6
000774 81bf      	LDD  R27,Y+6+1
000775 0fea      	ADD  R30,R26
000776 1ffb      	ADC  R31,R27
000777 93fa      	ST   -Y,R31
000778 93ea      	ST   -Y,R30
000779 85e8      	LDD  R30,Y+8
00077a 85f9      	LDD  R31,Y+8+1
00077b 51e8      	SUBI R30,LOW(-_buffer)
00077c 4ff8      	SBCI R31,HIGH(-_buffer)
00077d 81a0      	LD   R26,Z
00077e d36b      	RCALL _write_byte_to_eeprom
                 ; 0000 026C                 }
00077f 940e 0fd2 	CALL SUBOPT_0x22
000781 cfea      	RJMP _0xAF
                 _0xB0:
                 ; 0000 026D                 write_byte_to_eeprom(0x0, st_counts + 1);
000782 940e 0f60 	CALL SUBOPT_0xF
000784 2fa2      	MOV  R26,R18
000785 5faf      	SUBI R26,-LOW(1)
000786 d363      	RCALL _write_byte_to_eeprom
                 ; 0000 026E 
                 ; 0000 026F                 lcdCommand(0x01);
000787 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0270                 lcd_gotoxy(1, 1);
                 ; 0000 0271                 lcd_print("Student Code Successfully Added");
                +
000789 edaa     +LDI R26 , LOW ( _0x86 + ( 170 ) )
00078a e0b4     +LDI R27 , HIGH ( _0x86 + ( 170 ) )
                 	__POINTW2MN _0x86,170
00078b 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0272                 lcd_gotoxy(1, 2);
                 ; 0000 0273                 lcd_print("You Will Back Menu In 2 Second");
                +
00078d efaa     +LDI R26 , LOW ( _0x86 + ( 202 ) )
00078e e0b4     +LDI R27 , HIGH ( _0x86 + ( 202 ) )
                 	__POINTW2MN _0x86,202
00078f 940e 0fa4 	CALL SUBOPT_0x1A
                 ; 0000 0274                 delay_ms(2000);
                 ; 0000 0275             }
                 _0xAD:
                 _0xAB:
                 ; 0000 0276             memset(buffer, 0, 32);
000791 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0277 #asm("sei")
000793 9478      	sei
                 ; 0000 0278             stage = STAGE_ATTENDENC_MENU;
000794 c005      	RJMP _0x19B
                 ; 0000 0279         }
                 ; 0000 027A         else if (keypad[rowloc][cl] == 'C')
                 _0xA7:
000795 940e 0f98 	CALL SUBOPT_0x19
000797 91ac      	LD   R26,X
000798 34a3      	CPI  R26,LOW(0x43)
000799 f411      	BRNE _0xB2
                 ; 0000 027B             stage = STAGE_ATTENDENC_MENU;
                 _0x19B:
00079a e0e1      	LDI  R30,LOW(1)
00079b 2e5e      	MOV  R5,R30
                 ; 0000 027C     }
                 _0xB2:
                 _0xA6:
                 _0xA1:
                 _0x9E:
                 ; 0000 027D     else if (stage == STAGE_SUBMIT_WITH_CARD)
00079c c22d      	RJMP _0xB3
                 _0x9A:
00079d e0e3      	LDI  R30,LOW(3)
00079e 15e5      	CP   R30,R5
00079f f451      	BRNE _0xB4
                 ; 0000 027E     {
                 ; 0000 027F         if (keypad[rowloc][cl] == 'C')
0007a0 940e 0f98 	CALL SUBOPT_0x19
0007a2 91ac      	LD   R26,X
0007a3 34a3      	CPI  R26,LOW(0x43)
0007a4 f421      	BRNE _0xB5
                 ; 0000 0280         {
                 ; 0000 0281             memset(buffer, 0, 32);
0007a5 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0282             stage = STAGE_ATTENDENC_MENU;
0007a7 e0e1      	LDI  R30,LOW(1)
0007a8 2e5e      	MOV  R5,R30
                 ; 0000 0283         }
                 ; 0000 0284     }
                 _0xB5:
                 ; 0000 0285     else if (stage == STAGE_TEMPERATURE_MONITORING)
0007a9 c220      	RJMP _0xB6
                 _0xB4:
0007aa e0e4      	LDI  R30,LOW(4)
0007ab 15e5      	CP   R30,R5
0007ac f439      	BRNE _0xB7
                 ; 0000 0286     {
                 ; 0000 0287         if (keypad[rowloc][cl] == 'C')
0007ad 940e 0f98 	CALL SUBOPT_0x19
0007af 91ac      	LD   R26,X
0007b0 34a3      	CPI  R26,LOW(0x43)
0007b1 f409      	BRNE _0xB8
                 ; 0000 0288             stage = STAGE_INIT_MENU;
0007b2 2455      	CLR  R5
                 ; 0000 0289     }
                 _0xB8:
                 ; 0000 028A     else if (stage == STAGE_VIEW_PRESENT_STUDENTS)
0007b3 c216      	RJMP _0xB9
                 _0xB7:
0007b4 e0e5      	LDI  R30,LOW(5)
0007b5 15e5      	CP   R30,R5
0007b6 f439      	BRNE _0xBA
                 ; 0000 028B     {
                 ; 0000 028C         if (keypad[rowloc][cl] == 'C')
0007b7 940e 0f98 	CALL SUBOPT_0x19
0007b9 91ac      	LD   R26,X
0007ba 34a3      	CPI  R26,LOW(0x43)
0007bb f409      	BRNE _0xBB
                 ; 0000 028D             stage = STAGE_INIT_MENU;
0007bc 2455      	CLR  R5
                 ; 0000 028E     }
                 _0xBB:
                 ; 0000 028F     else if (stage == STAGE_STUDENT_MANAGMENT)
0007bd c20c      	RJMP _0xBC
                 _0xBA:
0007be e0e7      	LDI  R30,LOW(7)
0007bf 15e5      	CP   R30,R5
0007c0 f571      	BRNE _0xBD
                 ; 0000 0290     {
                 ; 0000 0291         if (keypad[rowloc][cl] == 'C')
0007c1 940e 0f98 	CALL SUBOPT_0x19
0007c3 91ac      	LD   R26,X
0007c4 34a3      	CPI  R26,LOW(0x43)
0007c5 f411      	BRNE _0xBE
                 ; 0000 0292             stage = STAGE_INIT_MENU;
0007c6 2455      	CLR  R5
                 ; 0000 0293         else if (keypad[rowloc][cl] == '1')
0007c7 c026      	RJMP _0xBF
                 _0xBE:
0007c8 940e 0f98 	CALL SUBOPT_0x19
0007ca 91ac      	LD   R26,X
0007cb 33a1      	CPI  R26,LOW(0x31)
0007cc f411      	BRNE _0xC0
                 ; 0000 0294             stage = STAGE_SEARCH_STUDENT;
0007cd e0e8      	LDI  R30,LOW(8)
0007ce c01e      	RJMP _0x19C
                 ; 0000 0295         else if (keypad[rowloc][cl] == '2' && logged_in == 1)
                 _0xC0:
0007cf 940e 0f98 	CALL SUBOPT_0x19
0007d1 91ac      	LD   R26,X
0007d2 33a2      	CPI  R26,LOW(0x32)
0007d3 f419      	BRNE _0xC3
0007d4 e0e1      	LDI  R30,LOW(1)
0007d5 15e6      	CP   R30,R6
0007d6 f009      	BREQ _0xC4
                 _0xC3:
0007d7 c002      	RJMP _0xC2
                 _0xC4:
                 ; 0000 0296             stage = STAGE_DELETE_STUDENT;
0007d8 e0e9      	LDI  R30,LOW(9)
0007d9 c013      	RJMP _0x19C
                 ; 0000 0297         else if (keypad[rowloc][cl] == '2' && logged_in == 0)
                 _0xC2:
0007da 940e 0f98 	CALL SUBOPT_0x19
0007dc 91ac      	LD   R26,X
0007dd 33a2      	CPI  R26,LOW(0x32)
0007de f411      	BRNE _0xC7
0007df 2066      	TST  R6
0007e0 f009      	BREQ _0xC8
                 _0xC7:
0007e1 c00c      	RJMP _0xC6
                 _0xC8:
                 ; 0000 0298         {
                 ; 0000 0299             lcdCommand(0x01);
0007e2 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 029A             lcd_gotoxy(1, 1);
                 ; 0000 029B             lcd_print("You Must First Login");
                +
0007e4 e1a9     +LDI R26 , LOW ( _0x86 + ( 233 ) )
0007e5 e0b5     +LDI R27 , HIGH ( _0x86 + ( 233 ) )
                 	__POINTW2MN _0x86,233
0007e6 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 029C             lcd_gotoxy(1, 2);
                 ; 0000 029D             lcd_print("You Will Go Admin Page 2 Sec");
                +
0007e8 e2ae     +LDI R26 , LOW ( _0x86 + ( 254 ) )
0007e9 e0b5     +LDI R27 , HIGH ( _0x86 + ( 254 ) )
                 	__POINTW2MN _0x86,254
0007ea 940e 0fa4 	CALL SUBOPT_0x1A
                 ; 0000 029E             delay_ms(2000);
                 ; 0000 029F             stage = STAGE_LOGIN_WITH_ADMIN;
0007ec e0eb      	LDI  R30,LOW(11)
                 _0x19C:
0007ed 2e5e      	MOV  R5,R30
                 ; 0000 02A0         }
                 ; 0000 02A1     }
                 _0xC6:
                 _0xBF:
                 ; 0000 02A2     else if (stage == STAGE_SEARCH_STUDENT)
0007ee c1db      	RJMP _0xC9
                 _0xBD:
0007ef e0e8      	LDI  R30,LOW(8)
0007f0 15e5      	CP   R30,R5
0007f1 f009      	BREQ PC+2
0007f2 c06d      	RJMP _0xCA
                 ; 0000 02A3     {
                 ; 0000 02A4         if (keypad[rowloc][cl] == 'C')
0007f3 940e 0f98 	CALL SUBOPT_0x19
0007f5 91ac      	LD   R26,X
0007f6 34a3      	CPI  R26,LOW(0x43)
0007f7 f419      	BRNE _0xCB
                 ; 0000 02A5         {
                 ; 0000 02A6             memset(buffer, 0, 32);
0007f8 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 02A7             stage = STAGE_STUDENT_MANAGMENT;
0007fa c062      	RJMP _0x19D
                 ; 0000 02A8         }
                 ; 0000 02A9         else if ((keypad[rowloc][cl] - '0') < 10)
                 _0xCB:
0007fb 940e 0f98 	CALL SUBOPT_0x19
0007fd 91ec      	LD   R30,X
0007fe e0f0      	LDI  R31,0
0007ff 97fa      	SBIW R30,58
000800 f47c      	BRGE _0xCD
                 ; 0000 02AA         {
                 ; 0000 02AB             if (strlen(buffer) <= 30)
000801 940e 0f37 	CALL SUBOPT_0x7
000803 977f      	SBIW R30,31
000804 f450      	BRSH _0xCE
                 ; 0000 02AC             {
                 ; 0000 02AD                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000805 940e 0f37 	CALL SUBOPT_0x7
000807 940e 0faa 	CALL SUBOPT_0x1B
000809 940e 0fae 	CALL SUBOPT_0x1C
                 ; 0000 02AE                 buffer[strlen(buffer) + 1] = '\0';
00080b 940e 0fb2 	CALL SUBOPT_0x1D
                 ; 0000 02AF                 lcdData(keypad[rowloc][cl]);
00080d 91ac      	LD   R26,X
00080e d1d8      	RCALL _lcdData
                 ; 0000 02B0             }
                 ; 0000 02B1         }
                 _0xCE:
                 ; 0000 02B2         else if (keypad[rowloc][cl] == 'D')
00080f c04f      	RJMP _0xCF
                 _0xCD:
000810 940e 0f98 	CALL SUBOPT_0x19
000812 91ac      	LD   R26,X
000813 34a4      	CPI  R26,LOW(0x44)
000814 f461      	BRNE _0xD0
                 ; 0000 02B3         {
                 ; 0000 02B4             buffer_len = strlen(buffer);
000815 940e 0f37 	CALL SUBOPT_0x7
000817 2f5e      	MOV  R21,R30
                 ; 0000 02B5             if (buffer_len > 0)
000818 3051      	CPI  R21,1
000819 f030      	BRLO _0xD1
                 ; 0000 02B6             {
                 ; 0000 02B7                 buffer[buffer_len - 1] = '\0';
00081a 940e 0fb7 	CALL SUBOPT_0x1E
                 ; 0000 02B8                 lcdCommand(0x10);
                 ; 0000 02B9                 lcd_print(" ");
                +
00081c e4ab     +LDI R26 , LOW ( _0x86 + ( 283 ) )
00081d e0b5     +LDI R27 , HIGH ( _0x86 + ( 283 ) )
                 	__POINTW2MN _0x86,283
00081e 940e 0fc1 	CALL SUBOPT_0x1F
                 ; 0000 02BA                 lcdCommand(0x10);
                 ; 0000 02BB             }
                 ; 0000 02BC         }
                 _0xD1:
                 ; 0000 02BD         else if (keypad[rowloc][cl] == 'O')
000820 c03e      	RJMP _0xD2
                 _0xD0:
000821 940e 0f98 	CALL SUBOPT_0x19
000823 91ac      	LD   R26,X
000824 34af      	CPI  R26,LOW(0x4F)
000825 f481      	BRNE _0xD3
                 ; 0000 02BE         {
                 ; 0000 02BF             lcdCommand(0xC0);
000826 940e 0fc6 	CALL SUBOPT_0x20
                 ; 0000 02C0             for(i = 0; i < strlen(buffer); i++)
                 _0xD5:
000828 940e 0f37 	CALL SUBOPT_0x7
00082a 940e 0fcd 	CALL SUBOPT_0x21
00082c f430      	BRSH _0xD6
                 ; 0000 02C1                 lcd_print(" ");
                +
00082d e4ad     +LDI R26 , LOW ( _0x86 + ( 285 ) )
00082e e0b5     +LDI R27 , HIGH ( _0x86 + ( 285 ) )
                 	__POINTW2MN _0x86,285
00082f d1f2      	RCALL _lcd_print
000830 940e 0fd2 	CALL SUBOPT_0x22
000832 cff5      	RJMP _0xD5
                 _0xD6:
                 ; 0000 02C2 lcdCommand(0xC0);
000833 940e 0fd8 	CALL SUBOPT_0x23
                 ; 0000 02C3             memset(buffer, 0, 32);
                 ; 0000 02C4         }
                 ; 0000 02C5         else if (keypad[rowloc][cl] == 'E')
000835 c029      	RJMP _0xD7
                 _0xD3:
000836 940e 0f98 	CALL SUBOPT_0x19
000838 91ac      	LD   R26,X
000839 34a5      	CPI  R26,LOW(0x45)
00083a f4e9      	BRNE _0xD8
                 ; 0000 02C6         {
                 ; 0000 02C7             // search from eeprom data
                 ; 0000 02C8             unsigned char result = search_student_code();
                 ; 0000 02C9 
                 ; 0000 02CA             if (result > 0)
00083b 940e 0fe0 	CALL SUBOPT_0x25
                 ;	i -> Y+7
                 ;	result -> Y+0
00083d f048      	BRLO _0xD9
                 ; 0000 02CB             {
                 ; 0000 02CC                 lcdCommand(0x01);
00083e 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 02CD                 lcd_gotoxy(1, 1);
                 ; 0000 02CE                 lcd_print("Student Code Found");
                +
000840 e4af     +LDI R26 , LOW ( _0x86 + ( 287 ) )
000841 e0b5     +LDI R27 , HIGH ( _0x86 + ( 287 ) )
                 	__POINTW2MN _0x86,287
000842 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 02CF                 lcd_gotoxy(1, 2);
                 ; 0000 02D0                 lcd_print("You Will Back Menu In 2 Second");
                +
000844 e6a2     +LDI R26 , LOW ( _0x86 + ( 306 ) )
000845 e0b5     +LDI R27 , HIGH ( _0x86 + ( 306 ) )
                 	__POINTW2MN _0x86,306
000846 c008      	RJMP _0x19E
                 ; 0000 02D1                 delay_ms(2000);
                 ; 0000 02D2             }
                 ; 0000 02D3             else
                 _0xD9:
                 ; 0000 02D4             {
                 ; 0000 02D5                 lcdCommand(0x01);
000847 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 02D6                 lcd_gotoxy(1, 1);
                 ; 0000 02D7                 lcd_print("Ops , Student Code Not Found");
                +
000849 e8a1     +LDI R26 , LOW ( _0x86 + ( 337 ) )
00084a e0b5     +LDI R27 , HIGH ( _0x86 + ( 337 ) )
                 	__POINTW2MN _0x86,337
00084b 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 02D8                 lcd_gotoxy(1, 2);
                 ; 0000 02D9                 lcd_print("You Will Back Menu In 2 Second");
                +
00084d e9ae     +LDI R26 , LOW ( _0x86 + ( 366 ) )
00084e e0b5     +LDI R27 , HIGH ( _0x86 + ( 366 ) )
                 	__POINTW2MN _0x86,366
                 _0x19E:
00084f d1d2      	RCALL _lcd_print
                 ; 0000 02DA                 delay_ms(2000);
000850 940e 0fe7 	CALL SUBOPT_0x26
                 ; 0000 02DB             }
                 ; 0000 02DC             memset(buffer, 0, 32);
000852 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 02DD             stage = STAGE_STUDENT_MANAGMENT;
000854 e0e7      	LDI  R30,LOW(7)
000855 2e5e      	MOV  R5,R30
                 ; 0000 02DE         }
000856 9621      	ADIW R28,1
                 ; 0000 02DF         else if (keypad[rowloc][cl] == 'C')
000857 c007      	RJMP _0xDB
                 _0xD8:
000858 940e 0f98 	CALL SUBOPT_0x19
00085a 91ac      	LD   R26,X
00085b 34a3      	CPI  R26,LOW(0x43)
00085c f411      	BRNE _0xDC
                 ; 0000 02E0             stage = STAGE_STUDENT_MANAGMENT;
                 _0x19D:
00085d e0e7      	LDI  R30,LOW(7)
00085e 2e5e      	MOV  R5,R30
                 ; 0000 02E1     }
                 _0xDC:
                 _0xDB:
                 _0xD7:
                 _0xD2:
                 _0xCF:
                 ; 0000 02E2     else if (stage == STAGE_DELETE_STUDENT)
00085f c16a      	RJMP _0xDD
                 _0xCA:
000860 e0e9      	LDI  R30,LOW(9)
000861 15e5      	CP   R30,R5
000862 f009      	BREQ PC+2
000863 c072      	RJMP _0xDE
                 ; 0000 02E3     {
                 ; 0000 02E4         if (keypad[rowloc][cl] == 'C')
000864 940e 0f98 	CALL SUBOPT_0x19
000866 91ac      	LD   R26,X
000867 34a3      	CPI  R26,LOW(0x43)
000868 f429      	BRNE _0xDF
                 ; 0000 02E5         {
                 ; 0000 02E6             memset(buffer, 0, 32);
000869 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 02E7             stage = STAGE_STUDENT_MANAGMENT;
00086b e0e7      	LDI  R30,LOW(7)
00086c 2e5e      	MOV  R5,R30
                 ; 0000 02E8         }
                 ; 0000 02E9         else if ((keypad[rowloc][cl] - '0') < 10)
00086d c067      	RJMP _0xE0
                 _0xDF:
00086e 940e 0f98 	CALL SUBOPT_0x19
000870 91ec      	LD   R30,X
000871 e0f0      	LDI  R31,0
000872 97fa      	SBIW R30,58
000873 f47c      	BRGE _0xE1
                 ; 0000 02EA         {
                 ; 0000 02EB             if (strlen(buffer) <= 30)
000874 940e 0f37 	CALL SUBOPT_0x7
000876 977f      	SBIW R30,31
000877 f450      	BRSH _0xE2
                 ; 0000 02EC             {
                 ; 0000 02ED                 buffer[strlen(buffer)] = keypad[rowloc][cl];
000878 940e 0f37 	CALL SUBOPT_0x7
00087a 940e 0faa 	CALL SUBOPT_0x1B
00087c 940e 0fae 	CALL SUBOPT_0x1C
                 ; 0000 02EE                 buffer[strlen(buffer) + 1] = '\0';
00087e 940e 0fb2 	CALL SUBOPT_0x1D
                 ; 0000 02EF                 lcdData(keypad[rowloc][cl]);
000880 91ac      	LD   R26,X
000881 d165      	RCALL _lcdData
                 ; 0000 02F0             }
                 ; 0000 02F1         }
                 _0xE2:
                 ; 0000 02F2         else if (keypad[rowloc][cl] == 'D')
000882 c052      	RJMP _0xE3
                 _0xE1:
000883 940e 0f98 	CALL SUBOPT_0x19
000885 91ac      	LD   R26,X
000886 34a4      	CPI  R26,LOW(0x44)
000887 f461      	BRNE _0xE4
                 ; 0000 02F3         {
                 ; 0000 02F4             buffer_len = strlen(buffer);
000888 940e 0f37 	CALL SUBOPT_0x7
00088a 2f5e      	MOV  R21,R30
                 ; 0000 02F5             if (buffer_len > 0)
00088b 3051      	CPI  R21,1
00088c f030      	BRLO _0xE5
                 ; 0000 02F6             {
                 ; 0000 02F7                 buffer[buffer_len - 1] = '\0';
00088d 940e 0fb7 	CALL SUBOPT_0x1E
                 ; 0000 02F8                 lcdCommand(0x10);
                 ; 0000 02F9                 lcd_print(" ");
                +
00088f ebad     +LDI R26 , LOW ( _0x86 + ( 397 ) )
000890 e0b5     +LDI R27 , HIGH ( _0x86 + ( 397 ) )
                 	__POINTW2MN _0x86,397
000891 940e 0fc1 	CALL SUBOPT_0x1F
                 ; 0000 02FA                 lcdCommand(0x10);
                 ; 0000 02FB             }
                 ; 0000 02FC         }
                 _0xE5:
                 ; 0000 02FD         else if (keypad[rowloc][cl] == 'O')
000893 c041      	RJMP _0xE6
                 _0xE4:
000894 940e 0f98 	CALL SUBOPT_0x19
000896 91ac      	LD   R26,X
000897 34af      	CPI  R26,LOW(0x4F)
000898 f481      	BRNE _0xE7
                 ; 0000 02FE         {
                 ; 0000 02FF             lcdCommand(0xC0);
000899 940e 0fc6 	CALL SUBOPT_0x20
                 ; 0000 0300             for(i = 0; i < strlen(buffer); i++)
                 _0xE9:
00089b 940e 0f37 	CALL SUBOPT_0x7
00089d 940e 0fcd 	CALL SUBOPT_0x21
00089f f430      	BRSH _0xEA
                 ; 0000 0301                 lcd_print(" ");
                +
0008a0 ebaf     +LDI R26 , LOW ( _0x86 + ( 399 ) )
0008a1 e0b5     +LDI R27 , HIGH ( _0x86 + ( 399 ) )
                 	__POINTW2MN _0x86,399
0008a2 d17f      	RCALL _lcd_print
0008a3 940e 0fd2 	CALL SUBOPT_0x22
0008a5 cff5      	RJMP _0xE9
                 _0xEA:
                 ; 0000 0302 lcdCommand(0xC0);
0008a6 940e 0fd8 	CALL SUBOPT_0x23
                 ; 0000 0303             memset(buffer, 0, 32);
                 ; 0000 0304         }
                 ; 0000 0305         else if (keypad[rowloc][cl] == 'E')
0008a8 c02c      	RJMP _0xEB
                 _0xE7:
0008a9 940e 0f98 	CALL SUBOPT_0x19
0008ab 91ac      	LD   R26,X
0008ac 34a5      	CPI  R26,LOW(0x45)
0008ad f539      	BRNE _0xEC
                 ; 0000 0306         {
                 ; 0000 0307             // search from eeprom data
                 ; 0000 0308             unsigned char result = search_student_code();
                 ; 0000 0309 
                 ; 0000 030A             if (result > 0)
0008ae 940e 0fe0 	CALL SUBOPT_0x25
                 ;	i -> Y+7
                 ;	result -> Y+0
0008b0 f0a0      	BRLO _0xED
                 ; 0000 030B             {
                 ; 0000 030C                 lcdCommand(0x01);
0008b1 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 030D                 lcd_gotoxy(1, 1);
                 ; 0000 030E                 lcd_print("Student Code Found");
                +
0008b3 eca1     +LDI R26 , LOW ( _0x86 + ( 401 ) )
0008b4 e0b5     +LDI R27 , HIGH ( _0x86 + ( 401 ) )
                 	__POINTW2MN _0x86,401
0008b5 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 030F                 lcd_gotoxy(1, 2);
                 ; 0000 0310                 lcd_print("Wait For Delete...");
                +
0008b7 eda4     +LDI R26 , LOW ( _0x86 + ( 420 ) )
0008b8 e0b5     +LDI R27 , HIGH ( _0x86 + ( 420 ) )
                 	__POINTW2MN _0x86,420
0008b9 d168      	RCALL _lcd_print
                 ; 0000 0311                 delete_student_code(result);
0008ba 81a8      	LD   R26,Y
0008bb d299      	RCALL _delete_student_code
                 ; 0000 0312                 lcdCommand(0x01);
0008bc 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0313                 lcd_gotoxy(1, 1);
                 ; 0000 0314                 lcd_print("Student Code Was Deleted");
                +
0008be eea7     +LDI R26 , LOW ( _0x86 + ( 439 ) )
0008bf e0b5     +LDI R27 , HIGH ( _0x86 + ( 439 ) )
                 	__POINTW2MN _0x86,439
0008c0 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0315                 lcd_gotoxy(1, 2);
                 ; 0000 0316                 lcd_print("You Will Back Menu In 2 Second");
                +
0008c2 e0a0     +LDI R26 , LOW ( _0x86 + ( 464 ) )
0008c3 e0b6     +LDI R27 , HIGH ( _0x86 + ( 464 ) )
                 	__POINTW2MN _0x86,464
0008c4 c008      	RJMP _0x19F
                 ; 0000 0317                 delay_ms(2000);
                 ; 0000 0318             }
                 ; 0000 0319             else
                 _0xED:
                 ; 0000 031A             {
                 ; 0000 031B                 lcdCommand(0x01);
0008c5 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 031C                 lcd_gotoxy(1, 1);
                 ; 0000 031D                 lcd_print("Ops , Student Code Not Found");
                +
0008c7 e1af     +LDI R26 , LOW ( _0x86 + ( 495 ) )
0008c8 e0b6     +LDI R27 , HIGH ( _0x86 + ( 495 ) )
                 	__POINTW2MN _0x86,495
0008c9 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 031E                 lcd_gotoxy(1, 2);
                 ; 0000 031F                 lcd_print("You Will Back Menu In 2 Second");
                +
0008cb e3ac     +LDI R26 , LOW ( _0x86 + ( 524 ) )
0008cc e0b6     +LDI R27 , HIGH ( _0x86 + ( 524 ) )
                 	__POINTW2MN _0x86,524
                 _0x19F:
0008cd d154      	RCALL _lcd_print
                 ; 0000 0320                 delay_ms(2000);
0008ce 940e 0fe7 	CALL SUBOPT_0x26
                 ; 0000 0321             }
                 ; 0000 0322             memset(buffer, 0, 32);
0008d0 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0323             stage = STAGE_STUDENT_MANAGMENT;
0008d2 e0e7      	LDI  R30,LOW(7)
0008d3 2e5e      	MOV  R5,R30
                 ; 0000 0324         }
0008d4 9621      	ADIW R28,1
                 ; 0000 0325     }
                 _0xEC:
                 _0xEB:
                 _0xE6:
                 _0xE3:
                 _0xE0:
                 ; 0000 0326     else if (stage == STAGE_TRAFFIC_MONITORING)
0008d5 c0f4      	RJMP _0xEF
                 _0xDE:
0008d6 e0ea      	LDI  R30,LOW(10)
0008d7 15e5      	CP   R30,R5
0008d8 f439      	BRNE _0xF0
                 ; 0000 0327     {
                 ; 0000 0328         if (keypad[rowloc][cl] == 'C')
0008d9 940e 0f98 	CALL SUBOPT_0x19
0008db 91ac      	LD   R26,X
0008dc 34a3      	CPI  R26,LOW(0x43)
0008dd f409      	BRNE _0xF1
                 ; 0000 0329             stage = STAGE_INIT_MENU;
0008de 2455      	CLR  R5
                 ; 0000 032A     }
                 _0xF1:
                 ; 0000 032B     else if (stage == STAGE_SHOW_CLOCK)
0008df c0ea      	RJMP _0xF2
                 _0xF0:
0008e0 e0ed      	LDI  R30,LOW(13)
0008e1 15e5      	CP   R30,R5
0008e2 f439      	BRNE _0xF3
                 ; 0000 032C     {
                 ; 0000 032D         if (keypad[rowloc][cl] == 'C')
0008e3 940e 0f98 	CALL SUBOPT_0x19
0008e5 91ac      	LD   R26,X
0008e6 34a3      	CPI  R26,LOW(0x43)
0008e7 f409      	BRNE _0xF4
                 ; 0000 032E             stage = STAGE_INIT_MENU;
0008e8 2455      	CLR  R5
                 ; 0000 032F     }
                 _0xF4:
                 ; 0000 0330     else if (stage == STAGE_SET_TIMER)
0008e9 c0e0      	RJMP _0xF5
                 _0xF3:
0008ea e0ee      	LDI  R30,LOW(14)
0008eb 15e5      	CP   R30,R5
0008ec f009      	BREQ PC+2
0008ed c045      	RJMP _0xF6
                 ; 0000 0331     {
                 ; 0000 0332         if (keypad[rowloc][cl] == 'C')
0008ee 940e 0f98 	CALL SUBOPT_0x19
0008f0 91ac      	LD   R26,X
0008f1 34a3      	CPI  R26,LOW(0x43)
0008f2 f419      	BRNE _0xF7
                 ; 0000 0333         {
                 ; 0000 0334             memset(buffer, 0, 32);
0008f3 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0335             stage = STAGE_INIT_MENU;
0008f5 c03b      	RJMP _0x1A0
                 ; 0000 0336         }
                 ; 0000 0337 
                 ; 0000 0338         else if(keypad[rowloc][cl] == 'R')
                 _0xF7:
0008f6 940e 0f98 	CALL SUBOPT_0x19
0008f8 91ac      	LD   R26,X
0008f9 35a2      	CPI  R26,LOW(0x52)
0008fa f489      	BRNE _0xF9
                 ; 0000 0339         {
                 ; 0000 033A             if(submitTime < 20){
0008fb e1e4      	LDI  R30,LOW(20)
0008fc 169e      	CP   R9,R30
0008fd f468      	BRSH _0xFA
                 ; 0000 033B                 submitTime++;
0008fe 9493      	INC  R9
                 ; 0000 033C                 itoa(submitTime, buffer);
0008ff 940e 0f80 	CALL SUBOPT_0x14
000901 940e 0ce9 	CALL _itoa
                 ; 0000 033D                 lcd_gotoxy(21,1);
000903 e1e5      	LDI  R30,LOW(21)
000904 940e 0f8e 	CALL SUBOPT_0x17
                 ; 0000 033E                 lcd_print(buffer);
000906 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 033F                 lcd_print("  ");
                +
000908 e5ab     +LDI R26 , LOW ( _0x86 + ( 555 ) )
000909 e0b6     +LDI R27 , HIGH ( _0x86 + ( 555 ) )
                 	__POINTW2MN _0x86,555
00090a d117      	RCALL _lcd_print
                 ; 0000 0340             }
                 ; 0000 0341         }
                 _0xFA:
                 ; 0000 0342         else if(keypad[rowloc][cl] == 'L')
00090b c026      	RJMP _0xFB
                 _0xF9:
00090c 940e 0f98 	CALL SUBOPT_0x19
00090e 91ac      	LD   R26,X
00090f 34ac      	CPI  R26,LOW(0x4C)
000910 f489      	BRNE _0xFC
                 ; 0000 0343         {
                 ; 0000 0344             if(submitTime > 1){
000911 e0e1      	LDI  R30,LOW(1)
000912 15e9      	CP   R30,R9
000913 f468      	BRSH _0xFD
                 ; 0000 0345                 submitTime--;
000914 949a      	DEC  R9
                 ; 0000 0346                 itoa(submitTime, buffer);
000915 940e 0f80 	CALL SUBOPT_0x14
000917 940e 0ce9 	CALL _itoa
                 ; 0000 0347                 lcd_gotoxy(21,1);
000919 e1e5      	LDI  R30,LOW(21)
00091a 940e 0f8e 	CALL SUBOPT_0x17
                 ; 0000 0348                 lcd_print(buffer);
00091c 940e 0f65 	CALL SUBOPT_0x10
                 ; 0000 0349                 lcd_print("  ");
                +
00091e e5ae     +LDI R26 , LOW ( _0x86 + ( 558 ) )
00091f e0b6     +LDI R27 , HIGH ( _0x86 + ( 558 ) )
                 	__POINTW2MN _0x86,558
000920 d101      	RCALL _lcd_print
                 ; 0000 034A             }
                 ; 0000 034B         }
                 _0xFD:
                 ; 0000 034C         else if(keypad[rowloc][cl] == 'E')
000921 c010      	RJMP _0xFE
                 _0xFC:
000922 940e 0f98 	CALL SUBOPT_0x19
000924 91ac      	LD   R26,X
000925 34a5      	CPI  R26,LOW(0x45)
000926 f459      	BRNE _0xFF
                 ; 0000 034D         {
                 ; 0000 034E             lcdCommand(0x01);
000927 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 034F             lcd_gotoxy(1,1);
                 ; 0000 0350             lcd_print("Timer started");
                +
000929 e6a1     +LDI R26 , LOW ( _0x86 + ( 561 ) )
00092a e0b6     +LDI R27 , HIGH ( _0x86 + ( 561 ) )
                 	__POINTW2MN _0x86,561
00092b d0f6      	RCALL _lcd_print
                 ; 0000 0351             memset(buffer, 0, 32);
00092c 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0352             delay_ms(2000);
00092e 940e 0fe7 	CALL SUBOPT_0x26
                 ; 0000 0353             Timer2_Init();
000930 d3a7      	RCALL _Timer2_Init
                 ; 0000 0354             stage = STAGE_INIT_MENU;
                 _0x1A0:
000931 2455      	CLR  R5
                 ; 0000 0355         }
                 ; 0000 0356 
                 ; 0000 0357     }
                 _0xFF:
                 _0xFE:
                 _0xFB:
                 ; 0000 0358     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 1)
000932 c097      	RJMP _0x100
                 _0xF6:
000933 e0eb      	LDI  R30,LOW(11)
000934 15e5      	CP   R30,R5
000935 f419      	BRNE _0x102
000936 e0e1      	LDI  R30,LOW(1)
000937 15e6      	CP   R30,R6
000938 f409      	BRNE _0x103
                 _0x102:
000939 c071      	RJMP _0x101
                 _0x103:
                 ; 0000 0359     {
                 ; 0000 035A         if (keypad[rowloc][cl] == 'C')
00093a 940e 0f98 	CALL SUBOPT_0x19
00093c 91ac      	LD   R26,X
00093d 34a3      	CPI  R26,LOW(0x43)
00093e f421      	BRNE _0x104
                 ; 0000 035B         {
                 ; 0000 035C             memset(buffer, 0, 32);
00093f 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 035D             stage = STAGE_INIT_MENU;
000941 2455      	CLR  R5
                 ; 0000 035E         }
                 ; 0000 035F 
                 ; 0000 0360         else if ((keypad[rowloc][cl] - '0') < 10)
000942 c067      	RJMP _0x105
                 _0x104:
000943 940e 0f98 	CALL SUBOPT_0x19
000945 91ec      	LD   R30,X
000946 e0f0      	LDI  R31,0
000947 97fa      	SBIW R30,58
000948 f47c      	BRGE _0x106
                 ; 0000 0361         {
                 ; 0000 0362             if (strlen(buffer) <= 30)
000949 940e 0f37 	CALL SUBOPT_0x7
00094b 977f      	SBIW R30,31
00094c f450      	BRSH _0x107
                 ; 0000 0363             {
                 ; 0000 0364                 buffer[strlen(buffer)] = keypad[rowloc][cl];
00094d 940e 0f37 	CALL SUBOPT_0x7
00094f 940e 0faa 	CALL SUBOPT_0x1B
000951 940e 0fae 	CALL SUBOPT_0x1C
                 ; 0000 0365                 buffer[strlen(buffer) + 1] = '\0';
000953 940e 0fb2 	CALL SUBOPT_0x1D
                 ; 0000 0366                 lcdData(keypad[rowloc][cl]);
000955 91ac      	LD   R26,X
000956 d090      	RCALL _lcdData
                 ; 0000 0367             }
                 ; 0000 0368         }
                 _0x107:
                 ; 0000 0369         else if (keypad[rowloc][cl] == 'D')
000957 c052      	RJMP _0x108
                 _0x106:
000958 940e 0f98 	CALL SUBOPT_0x19
00095a 91ac      	LD   R26,X
00095b 34a4      	CPI  R26,LOW(0x44)
00095c f461      	BRNE _0x109
                 ; 0000 036A         {
                 ; 0000 036B             buffer_len = strlen(buffer);
00095d 940e 0f37 	CALL SUBOPT_0x7
00095f 2f5e      	MOV  R21,R30
                 ; 0000 036C             if (buffer_len > 0)
000960 3051      	CPI  R21,1
000961 f030      	BRLO _0x10A
                 ; 0000 036D             {
                 ; 0000 036E                 buffer[buffer_len - 1] = '\0';
000962 940e 0fb7 	CALL SUBOPT_0x1E
                 ; 0000 036F                 lcdCommand(0x10);
                 ; 0000 0370                 lcd_print(" ");
                +
000964 e6af     +LDI R26 , LOW ( _0x86 + ( 575 ) )
000965 e0b6     +LDI R27 , HIGH ( _0x86 + ( 575 ) )
                 	__POINTW2MN _0x86,575
000966 940e 0fc1 	CALL SUBOPT_0x1F
                 ; 0000 0371                 lcdCommand(0x10);
                 ; 0000 0372             }
                 ; 0000 0373         }
                 _0x10A:
                 ; 0000 0374         else if (keypad[rowloc][cl] == 'O')
000968 c041      	RJMP _0x10B
                 _0x109:
000969 940e 0f98 	CALL SUBOPT_0x19
00096b 91ac      	LD   R26,X
00096c 34af      	CPI  R26,LOW(0x4F)
00096d f481      	BRNE _0x10C
                 ; 0000 0375         {
                 ; 0000 0376             lcdCommand(0xC0);
00096e 940e 0fc6 	CALL SUBOPT_0x20
                 ; 0000 0377             for(i = 0; i < strlen(buffer); i++)
                 _0x10E:
000970 940e 0f37 	CALL SUBOPT_0x7
000972 940e 0fcd 	CALL SUBOPT_0x21
000974 f430      	BRSH _0x10F
                 ; 0000 0378                 lcd_print(" ");
                +
000975 e7a1     +LDI R26 , LOW ( _0x86 + ( 577 ) )
000976 e0b6     +LDI R27 , HIGH ( _0x86 + ( 577 ) )
                 	__POINTW2MN _0x86,577
000977 d0aa      	RCALL _lcd_print
000978 940e 0fd2 	CALL SUBOPT_0x22
00097a cff5      	RJMP _0x10E
                 _0x10F:
                 ; 0000 0379 lcdCommand(0xC0);
00097b 940e 0fd8 	CALL SUBOPT_0x23
                 ; 0000 037A             memset(buffer, 0, 32);
                 ; 0000 037B         }
                 ; 0000 037C         else if (keypad[rowloc][cl] == 'E')
00097d c02c      	RJMP _0x110
                 _0x10C:
00097e 940e 0f98 	CALL SUBOPT_0x19
000980 91ac      	LD   R26,X
000981 34a5      	CPI  R26,LOW(0x45)
000982 f539      	BRNE _0x111
                 ; 0000 037D         {
                 ; 0000 037E             // search from eeprom data
                 ; 0000 037F             unsigned int input_hash = simple_hash(buffer);
                 ; 0000 0380 
                 ; 0000 0381             if (input_hash == secret)
000983 9722      	SBIW R28,2
                 ;	i -> Y+8
                 ;	input_hash -> Y+0
000984 eea8      	LDI  R26,LOW(_buffer)
000985 e0b7      	LDI  R27,HIGH(_buffer)
000986 d2d4      	RCALL _simple_hash
000987 83e8      	ST   Y,R30
000988 83f9      	STD  Y+1,R31
000989 81a8      	LD   R26,Y
00098a 81b9      	LDD  R27,Y+1
00098b 36a4      	CPI  R26,LOW(0xF64)
00098c e0ef      	LDI  R30,HIGH(0xF64)
00098d 07be      	CPC  R27,R30
00098e f469      	BRNE _0x112
                 ; 0000 0382             {
                 ; 0000 0383                 lcdCommand(0x01);
00098f 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0384                 lcd_gotoxy(1, 1);
                 ; 0000 0385                 lcd_print("Login Successfully");
                +
000991 e7a3     +LDI R26 , LOW ( _0x86 + ( 579 ) )
000992 e0b6     +LDI R27 , HIGH ( _0x86 + ( 579 ) )
                 	__POINTW2MN _0x86,579
000993 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0386                 lcd_gotoxy(1, 2);
                 ; 0000 0387                 lcd_print("Wait...");
                +
000995 e8a6     +LDI R26 , LOW ( _0x86 + ( 598 ) )
000996 e0b6     +LDI R27 , HIGH ( _0x86 + ( 598 ) )
                 	__POINTW2MN _0x86,598
000997 940e 0fa4 	CALL SUBOPT_0x1A
                 ; 0000 0388                 delay_ms(2000);
                 ; 0000 0389                 logged_in = 1;
000999 e0e1      	LDI  R30,LOW(1)
00099a 2e6e      	MOV  R6,R30
                 ; 0000 038A             }
                 ; 0000 038B             else
00099b c00a      	RJMP _0x113
                 _0x112:
                 ; 0000 038C             {
                 ; 0000 038D                 lcdCommand(0x01);
00099c 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 038E                 lcd_gotoxy(1, 1);
                 ; 0000 038F                 lcd_print("Ops , secret is incorrect");
                +
00099e e8ae     +LDI R26 , LOW ( _0x86 + ( 606 ) )
00099f e0b6     +LDI R27 , HIGH ( _0x86 + ( 606 ) )
                 	__POINTW2MN _0x86,606
0009a0 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0390                 lcd_gotoxy(1, 2);
                 ; 0000 0391                 lcd_print("You Will Back Menu In 2 Second");
                +
0009a2 eaa8     +LDI R26 , LOW ( _0x86 + ( 632 ) )
0009a3 e0b6     +LDI R27 , HIGH ( _0x86 + ( 632 ) )
                 	__POINTW2MN _0x86,632
0009a4 940e 0fa4 	CALL SUBOPT_0x1A
                 ; 0000 0392                 delay_ms(2000);
                 ; 0000 0393             }
                 _0x113:
                 ; 0000 0394             memset(buffer, 0, 32);
0009a6 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 0395             stage = STAGE_INIT_MENU;
0009a8 2455      	CLR  R5
                 ; 0000 0396         }
0009a9 9622      	ADIW R28,2
                 ; 0000 0397     }
                 _0x111:
                 _0x110:
                 _0x10B:
                 _0x108:
                 _0x105:
                 ; 0000 0398     else if (stage == STAGE_LOGIN_WITH_ADMIN && logged_in != 0)
0009aa c01f      	RJMP _0x114
                 _0x101:
0009ab e0eb      	LDI  R30,LOW(11)
0009ac 15e5      	CP   R30,R5
0009ad f411      	BRNE _0x116
0009ae 2066      	TST  R6
0009af f409      	BRNE _0x117
                 _0x116:
0009b0 c019      	RJMP _0x115
                 _0x117:
                 ; 0000 0399     {
                 ; 0000 039A         switch (keypad[rowloc][cl])
0009b1 940e 0f98 	CALL SUBOPT_0x19
0009b3 91ec      	LD   R30,X
0009b4 e0f0      	LDI  R31,0
                 ; 0000 039B         {
                 ; 0000 039C         case 'C':
0009b5 34e3      	CPI  R30,LOW(0x43)
0009b6 e0a0      	LDI  R26,HIGH(0x43)
0009b7 07fa      	CPC  R31,R26
0009b8 f411      	BRNE _0x11B
                 ; 0000 039D             stage = STAGE_INIT_MENU;
0009b9 2455      	CLR  R5
                 ; 0000 039E             break;
0009ba c00c      	RJMP _0x11A
                 ; 0000 039F         case '1':
                 _0x11B:
0009bb 33e1      	CPI  R30,LOW(0x31)
0009bc e0a0      	LDI  R26,HIGH(0x31)
0009bd 07fa      	CPC  R31,R26
0009be f441      	BRNE _0x11D
                 ; 0000 03A0 #asm("cli") // disable interrupts
0009bf 94f8      	cli
                 ; 0000 03A1             lcdCommand(0x1);
0009c0 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 03A2             lcd_gotoxy(1, 1);
                 ; 0000 03A3             lcd_print("Clearing EEPROM ...");
                +
0009c2 eca7     +LDI R26 , LOW ( _0x86 + ( 663 ) )
0009c3 e0b6     +LDI R27 , HIGH ( _0x86 + ( 663 ) )
                 	__POINTW2MN _0x86,663
0009c4 d05d      	RCALL _lcd_print
                 ; 0000 03A4             clear_eeprom();
0009c5 d0fe      	RCALL _clear_eeprom
                 ; 0000 03A5 #asm("sei") // enable interrupts
0009c6 9478      	sei
                 ; 0000 03A6             break;
                 ; 0000 03A7         default:
                 _0x11D:
                 ; 0000 03A8             break;
                 ; 0000 03A9         }
                 _0x11A:
                 ; 0000 03AA         memset(buffer, 0, 32);
0009c7 940e 0f28 	CALL SUBOPT_0x5
                 ; 0000 03AB         stage = STAGE_INIT_MENU;
0009c9 2455      	CLR  R5
                 ; 0000 03AC     }
                 ; 0000 03AD }
                 _0x115:
                 _0x114:
                 _0x100:
                 _0xF5:
                 _0xF2:
                 _0xEF:
                 _0xDD:
                 _0xC9:
                 _0xBC:
                 _0xB9:
                 _0xB6:
                 _0xB3:
                 _0x99:
                 _0x90:
0009ca 940e 125e 	CALL __LOADLOCR6
0009cc 9628      	ADIW R28,8
0009cd 91e9      	LD   R30,Y+
0009ce bfef      	OUT  SREG,R30
0009cf 91f9      	LD   R31,Y+
0009d0 91e9      	LD   R30,Y+
0009d1 91b9      	LD   R27,Y+
0009d2 91a9      	LD   R26,Y+
0009d3 9199      	LD   R25,Y+
0009d4 9189      	LD   R24,Y+
0009d5 9179      	LD   R23,Y+
0009d6 9169      	LD   R22,Y+
0009d7 90f9      	LD   R15,Y+
0009d8 9019      	LD   R1,Y+
0009d9 9009      	LD   R0,Y+
0009da 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x86:
000430           	.BYTE 0x2AB
                 ;
                 ;void lcdCommand(unsigned char cmnd)
                 ; 0000 03B0 {
                 
                 	.CSEG
                 _lcdCommand:
                 ; .FSTART _lcdCommand
                 ; 0000 03B1     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd & 0xF0);
0009db 940e 0feb 	CALL SUBOPT_0x27
                 ;	cmnd -> Y+0
                 ; 0000 03B2     LCD_PRT &= ~(1 << LCD_RS); // RS = 0 for command
0009dd 98d8      	CBI  0x1B,0
                 ; 0000 03B3     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0009de 940e 0ff4 	CALL SUBOPT_0x28
                 ; 0000 03B4     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03B5     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03B6     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03B7     delay_us(20 * 16);         // wait
                +
0009e0 e880     +LDI R24 , LOW ( 640 )
0009e1 e092     +LDI R25 , HIGH ( 640 )
                +__DELAY_USW_LOOP :
0009e2 9701     +SBIW R24 , 1
0009e3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 640
                 ; 0000 03B8     LCD_PRT = (LCD_PRT & 0x0F) | (cmnd << 4);
0009e4 940e 0ffb 	CALL SUBOPT_0x29
                 ; 0000 03B9     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03BA     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03BB     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03BC }
0009e6 c2b9      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcdData(unsigned char data)
                 ; 0000 03BE {
                 _lcdData:
                 ; .FSTART _lcdData
                 ; 0000 03BF     LCD_PRT = (LCD_PRT & 0x0F) | (data & 0xF0);
0009e7 940e 0feb 	CALL SUBOPT_0x27
                 ;	data -> Y+0
                 ; 0000 03C0     LCD_PRT |= (1 << LCD_RS);  // RS = 1 for data
0009e9 9ad8      	SBI  0x1B,0
                 ; 0000 03C1     LCD_PRT &= ~(1 << LCD_RW); // RW = 0 for write
0009ea 940e 0ff4 	CALL SUBOPT_0x28
                 ; 0000 03C2     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03C3     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03C4     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03C5     LCD_PRT = (LCD_PRT & 0x0F) | (data << 4);
0009ec 940e 0ffb 	CALL SUBOPT_0x29
                 ; 0000 03C6     LCD_PRT |= (1 << LCD_EN);  // EN = 1 for H-to-L
                 ; 0000 03C7     delay_us(1 * 16);          // wait to make EN wider
                 ; 0000 03C8     LCD_PRT &= ~(1 << LCD_EN); // EN = 0 for H-to-L
                 ; 0000 03C9 }
0009ee c2b1      	RJMP _0x20C0005
                 ; .FEND
                 ;void lcd_init()
                 ; 0000 03CB {
                 _lcd_init:
                 ; .FSTART _lcd_init
                 ; 0000 03CC     LCD_DDR = 0xFF;            // LCD port is output
0009ef efef      	LDI  R30,LOW(255)
0009f0 bbea      	OUT  0x1A,R30
                 ; 0000 03CD     LCD_PRT &= ~(1 << LCD_EN); // LCD_EN = 0
0009f1 98da      	CBI  0x1B,2
                 ; 0000 03CE     delay_us(2000 * 16);       // wait for stable power
                +
0009f2 e080     +LDI R24 , LOW ( 64000 )
0009f3 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
0009f4 9701     +SBIW R24 , 1
0009f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 03CF     lcdCommand(0x33);          //$33 for 4-bit mode
0009f6 e3a3      	LDI  R26,LOW(51)
0009f7 940e 1009 	CALL SUBOPT_0x2A
                 ; 0000 03D0     delay_us(100 * 16);        // wait
                 ; 0000 03D1     lcdCommand(0x32);          //$32 for 4-bit mode
0009f9 e3a2      	LDI  R26,LOW(50)
0009fa 940e 1009 	CALL SUBOPT_0x2A
                 ; 0000 03D2     delay_us(100 * 16);        // wait
                 ; 0000 03D3     lcdCommand(0x28);          //$28 for 4-bit mode
0009fc e2a8      	LDI  R26,LOW(40)
0009fd 940e 1009 	CALL SUBOPT_0x2A
                 ; 0000 03D4     delay_us(100 * 16);        // wait
                 ; 0000 03D5     lcdCommand(0x0c);          // display on, cursor off
0009ff 940e 0f20 	CALL SUBOPT_0x4
                 ; 0000 03D6     delay_us(100 * 16);        // wait
                 ; 0000 03D7     lcdCommand(0x01);          // clear LCD
000a01 e0a1      	LDI  R26,LOW(1)
000a02 dfd8      	RCALL _lcdCommand
                 ; 0000 03D8     delay_us(2000 * 16);       // wait
                +
000a03 e080     +LDI R24 , LOW ( 64000 )
000a04 ef9a     +LDI R25 , HIGH ( 64000 )
                +__DELAY_USW_LOOP :
000a05 9701     +SBIW R24 , 1
000a06 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 64000
                 ; 0000 03D9     lcdCommand(0x06);          // shift cursor right
000a07 e0a6      	LDI  R26,LOW(6)
000a08 940e 1009 	CALL SUBOPT_0x2A
                 ; 0000 03DA     delay_us(100 * 16);
                 ; 0000 03DB }
000a0a 9508      	RET
                 ; .FEND
                 ;void lcd_gotoxy(unsigned char x, unsigned char y)
                 ; 0000 03DD {
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
                 ; 0000 03DE     unsigned char firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
                 ; 0000 03DF     lcdCommand(firstCharAdr[y - 1] + x - 1);
000a0b 93aa      	ST   -Y,R26
000a0c 9724      	SBIW R28,4
000a0d e8e0      	LDI  R30,LOW(128)
000a0e 83e8      	ST   Y,R30
000a0f ece0      	LDI  R30,LOW(192)
000a10 83e9      	STD  Y+1,R30
000a11 e9e4      	LDI  R30,LOW(148)
000a12 83ea      	STD  Y+2,R30
000a13 ede4      	LDI  R30,LOW(212)
000a14 83eb      	STD  Y+3,R30
                 ;	x -> Y+5
                 ;	y -> Y+4
                 ;	firstCharAdr -> Y+0
000a15 81ec      	LDD  R30,Y+4
000a16 e0f0      	LDI  R31,0
000a17 9731      	SBIW R30,1
000a18 01de      	MOVW R26,R28
000a19 0fae      	ADD  R26,R30
000a1a 1fbf      	ADC  R27,R31
000a1b 91ec      	LD   R30,X
000a1c 81ad      	LDD  R26,Y+5
000a1d 0fae      	ADD  R26,R30
000a1e 50a1      	SUBI R26,LOW(1)
000a1f 940e 1009 	CALL SUBOPT_0x2A
                 ; 0000 03E0     delay_us(100 * 16);
                 ; 0000 03E1 }
000a21 c29e      	RJMP _0x20C0004
                 ; .FEND
                 ;void lcd_print(char *str)
                 ; 0000 03E3 {
                 _lcd_print:
                 ; .FSTART _lcd_print
                 ; 0000 03E4     unsigned char i = 0;
                 ; 0000 03E5     while (str[i] != 0)
000a22 93ba      	ST   -Y,R27
000a23 93aa      	ST   -Y,R26
000a24 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
000a25 e010      	LDI  R17,0
                 _0x11E:
000a26 81a9      	LDD  R26,Y+1
000a27 81ba      	LDD  R27,Y+1+1
000a28 27ee      	CLR  R30
000a29 0fa1      	ADD  R26,R17
000a2a 1fbe      	ADC  R27,R30
000a2b 91ec      	LD   R30,X
000a2c 30e0      	CPI  R30,0
000a2d f049      	BREQ _0x120
                 ; 0000 03E6     {
                 ; 0000 03E7         lcdData(str[i]);
000a2e 81a9      	LDD  R26,Y+1
000a2f 81ba      	LDD  R27,Y+1+1
000a30 27ee      	CLR  R30
000a31 0fa1      	ADD  R26,R17
000a32 1fbe      	ADC  R27,R30
000a33 91ac      	LD   R26,X
000a34 dfb2      	RCALL _lcdData
                 ; 0000 03E8         i++;
000a35 5f1f      	SUBI R17,-1
                 ; 0000 03E9     }
000a36 cfef      	RJMP _0x11E
                 _0x120:
                 ; 0000 03EA }
000a37 8118      	LDD  R17,Y+0
000a38 c0ba      	RJMP _0x20C0008
                 ; .FEND
                 ;
                 ;void show_temperature()
                 ; 0000 03ED {
                 _show_temperature:
                 ; .FSTART _show_temperature
                 ; 0000 03EE     unsigned char temperatureVal = 0;
                 ; 0000 03EF     unsigned char temperatureRep[3];
                 ; 0000 03F0 
                 ; 0000 03F1     DDRA &= ~(1 << 3);
000a39 9723      	SBIW R28,3
000a3a 931a      	ST   -Y,R17
                 ;	temperatureVal -> R17
                 ;	temperatureRep -> Y+1
000a3b e010      	LDI  R17,0
000a3c 98d3      	CBI  0x1A,3
                 ; 0000 03F2     ADMUX = 0xE3;
000a3d eee3      	LDI  R30,LOW(227)
000a3e b9e7      	OUT  0x7,R30
                 ; 0000 03F3     ADCSRA = 0x87;
000a3f e8e7      	LDI  R30,LOW(135)
000a40 b9e6      	OUT  0x6,R30
                 ; 0000 03F4 
                 ; 0000 03F5     lcdCommand(0x01);
000a41 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 03F6     lcd_gotoxy(1, 1);
                 ; 0000 03F7     lcd_print("Temperature(C):");
                +
000a43 edab     +LDI R26 , LOW ( _0x121 + ( 0 ) )
000a44 e0b6     +LDI R27 , HIGH ( _0x121 + ( 0 ) )
                 	__POINTW2MN _0x121,0
000a45 dfdc      	RCALL _lcd_print
                 ; 0000 03F8 
                 ; 0000 03F9     while (stage == STAGE_TEMPERATURE_MONITORING)
                 _0x122:
000a46 e0e4      	LDI  R30,LOW(4)
000a47 15e5      	CP   R30,R5
000a48 f4e9      	BRNE _0x124
                 ; 0000 03FA     {
                 ; 0000 03FB         ADCSRA |= (1 << ADSC);
000a49 9a36      	SBI  0x6,6
                 ; 0000 03FC         while ((ADCSRA & (1 << ADIF)) == 0)
                 _0x125:
000a4a 9b34      	SBIS 0x6,4
                 ; 0000 03FD             ;
000a4b cffe      	RJMP _0x125
                 ; 0000 03FE         if (ADCH != temperatureVal)
000a4c b1e5      	IN   R30,0x5
000a4d 171e      	CP   R17,R30
000a4e f091      	BREQ _0x128
                 ; 0000 03FF         {
                 ; 0000 0400             temperatureVal = ADCH;
000a4f b115      	IN   R17,5
                 ; 0000 0401             itoa(temperatureVal, temperatureRep);
000a50 2fe1      	MOV  R30,R17
000a51 e0f0      	LDI  R31,0
000a52 93fa      	ST   -Y,R31
000a53 93ea      	ST   -Y,R30
000a54 01de      	MOVW R26,R28
000a55 9613      	ADIW R26,3
000a56 940e 0ce9 	CALL _itoa
                 ; 0000 0402             lcd_gotoxy(17, 1);
000a58 e1e1      	LDI  R30,LOW(17)
000a59 940e 0f8e 	CALL SUBOPT_0x17
                 ; 0000 0403             lcd_print(temperatureRep);
000a5b 01de      	MOVW R26,R28
000a5c 9611      	ADIW R26,1
000a5d dfc4      	RCALL _lcd_print
                 ; 0000 0404             lcd_print(" ");
                +
000a5e eeab     +LDI R26 , LOW ( _0x121 + ( 16 ) )
000a5f e0b6     +LDI R27 , HIGH ( _0x121 + ( 16 ) )
                 	__POINTW2MN _0x121,16
000a60 dfc1      	RCALL _lcd_print
                 ; 0000 0405         }
                 ; 0000 0406         delay_ms(500);
                 _0x128:
000a61 efa4      	LDI  R26,LOW(500)
000a62 e0b1      	LDI  R27,HIGH(500)
000a63 940e 1073 	CALL _delay_ms
                 ; 0000 0407     }
000a65 cfe0      	RJMP _0x122
                 _0x124:
                 ; 0000 0408 
                 ; 0000 0409     ADCSRA = 0x0;
000a66 e0e0      	LDI  R30,LOW(0)
000a67 b9e6      	OUT  0x6,R30
                 ; 0000 040A }
000a68 8118      	LDD  R17,Y+0
000a69 c212      	RJMP _0x20C0006
                 ; .FEND
                 
                 	.DSEG
                 _0x121:
0006db           	.BYTE 0x12
                 ;
                 ;void show_menu()
                 ; 0000 040D {
                 
                 	.CSEG
                 _show_menu:
                 ; .FSTART _show_menu
                 ; 0000 040E     while (stage == STAGE_INIT_MENU)
                 _0x129:
000a6a 2055      	TST  R5
000a6b f009      	BREQ PC+2
000a6c c056      	RJMP _0x12B
                 ; 0000 040F     {
                 ; 0000 0410         lcdCommand(0x01);
000a6d 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 0411         lcd_gotoxy(1, 1);
                 ; 0000 0412         if (page_num == 0)
000a6f 2044      	TST  R4
000a70 f471      	BRNE _0x12C
                 ; 0000 0413         {
                 ; 0000 0414             lcd_print("1: Attendance Initialization");
                +
000a71 eead     +LDI R26 , LOW ( _0x12D + ( 0 ) )
000a72 e0b6     +LDI R27 , HIGH ( _0x12D + ( 0 ) )
                 	__POINTW2MN _0x12D,0
000a73 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0415             lcd_gotoxy(1, 2);
                 ; 0000 0416             lcd_print("2: Student Management");
                +
000a75 e0aa     +LDI R26 , LOW ( _0x12D + ( 29 ) )
000a76 e0b7     +LDI R27 , HIGH ( _0x12D + ( 29 ) )
                 	__POINTW2MN _0x12D,29
000a77 dfaa      	RCALL _lcd_print
                 ; 0000 0417             while (page_num == 0 && stage == STAGE_INIT_MENU)
                 _0x12E:
000a78 2044      	TST  R4
000a79 f411      	BRNE _0x131
000a7a 2055      	TST  R5
000a7b f009      	BREQ _0x132
                 _0x131:
000a7c c001      	RJMP _0x130
                 _0x132:
                 ; 0000 0418                 ;
000a7d cffa      	RJMP _0x12E
                 _0x130:
                 ; 0000 0419         }
                 ; 0000 041A         else if (page_num == 1)
000a7e c043      	RJMP _0x133
                 _0x12C:
000a7f e0e1      	LDI  R30,LOW(1)
000a80 15e4      	CP   R30,R4
000a81 f479      	BRNE _0x134
                 ; 0000 041B         {
                 ; 0000 041C             lcd_print("3: View Present Students ");
                +
000a82 e2a0     +LDI R26 , LOW ( _0x12D + ( 51 ) )
000a83 e0b7     +LDI R27 , HIGH ( _0x12D + ( 51 ) )
                 	__POINTW2MN _0x12D,51
000a84 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 041D             lcd_gotoxy(1, 2);
                 ; 0000 041E             lcd_print("4: Temperature Monitoring");
                +
000a86 e3aa     +LDI R26 , LOW ( _0x12D + ( 77 ) )
000a87 e0b7     +LDI R27 , HIGH ( _0x12D + ( 77 ) )
                 	__POINTW2MN _0x12D,77
000a88 df99      	RCALL _lcd_print
                 ; 0000 041F             while (page_num == 1 && stage == STAGE_INIT_MENU)
                 _0x135:
000a89 e0e1      	LDI  R30,LOW(1)
000a8a 15e4      	CP   R30,R4
000a8b f411      	BRNE _0x138
000a8c 2055      	TST  R5
000a8d f009      	BREQ _0x139
                 _0x138:
000a8e c001      	RJMP _0x137
                 _0x139:
                 ; 0000 0420                 ;
000a8f cff9      	RJMP _0x135
                 _0x137:
                 ; 0000 0421         }
                 ; 0000 0422         else if (page_num == 2)
000a90 c031      	RJMP _0x13A
                 _0x134:
000a91 e0e2      	LDI  R30,LOW(2)
000a92 15e4      	CP   R30,R4
000a93 f479      	BRNE _0x13B
                 ; 0000 0423         {
                 ; 0000 0424             lcd_print("5: Retrieve Student Data");
                +
000a94 e5a4     +LDI R26 , LOW ( _0x12D + ( 103 ) )
000a95 e0b7     +LDI R27 , HIGH ( _0x12D + ( 103 ) )
                 	__POINTW2MN _0x12D,103
000a96 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 0425             lcd_gotoxy(1, 2);
                 ; 0000 0426             lcd_print("6: Traffic Monitoring");
                +
000a98 e6ad     +LDI R26 , LOW ( _0x12D + ( 128 ) )
000a99 e0b7     +LDI R27 , HIGH ( _0x12D + ( 128 ) )
                 	__POINTW2MN _0x12D,128
000a9a df87      	RCALL _lcd_print
                 ; 0000 0427             while (page_num == 2 && stage == STAGE_INIT_MENU)
                 _0x13C:
000a9b e0e2      	LDI  R30,LOW(2)
000a9c 15e4      	CP   R30,R4
000a9d f411      	BRNE _0x13F
000a9e 2055      	TST  R5
000a9f f009      	BREQ _0x140
                 _0x13F:
000aa0 c001      	RJMP _0x13E
                 _0x140:
                 ; 0000 0428                 ;
000aa1 cff9      	RJMP _0x13C
                 _0x13E:
                 ; 0000 0429         }
                 ; 0000 042A         else if (page_num == 3)
000aa2 c01f      	RJMP _0x141
                 _0x13B:
000aa3 e0e3      	LDI  R30,LOW(3)
000aa4 15e4      	CP   R30,R4
000aa5 f479      	BRNE _0x142
                 ; 0000 042B         {
                 ; 0000 042C             lcd_print("7: Login With Admin");
                +
000aa6 e8a3     +LDI R26 , LOW ( _0x12D + ( 150 ) )
000aa7 e0b7     +LDI R27 , HIGH ( _0x12D + ( 150 ) )
                 	__POINTW2MN _0x12D,150
000aa8 940e 0f09 	CALL SUBOPT_0x1
                 ; 0000 042D             lcd_gotoxy(1, 2);
                 ; 0000 042E             lcd_print("8: Logout");
                +
000aaa e9a7     +LDI R26 , LOW ( _0x12D + ( 170 ) )
000aab e0b7     +LDI R27 , HIGH ( _0x12D + ( 170 ) )
                 	__POINTW2MN _0x12D,170
000aac df75      	RCALL _lcd_print
                 ; 0000 042F             while (page_num == 3 && stage == STAGE_INIT_MENU)
                 _0x143:
000aad e0e3      	LDI  R30,LOW(3)
000aae 15e4      	CP   R30,R4
000aaf f411      	BRNE _0x146
000ab0 2055      	TST  R5
000ab1 f009      	BREQ _0x147
                 _0x146:
000ab2 c001      	RJMP _0x145
                 _0x147:
                 ; 0000 0430                 ;
000ab3 cff9      	RJMP _0x143
                 _0x145:
                 ; 0000 0431         }
                 ; 0000 0432         else if (page_num == 4)
000ab4 c00d      	RJMP _0x148
                 _0x142:
000ab5 e0e4      	LDI  R30,LOW(4)
000ab6 15e4      	CP   R30,R4
000ab7 f451      	BRNE _0x149
                 ; 0000 0433         {
                 ; 0000 0434             lcd_print("9: Set Timer");
                +
000ab8 eaa1     +LDI R26 , LOW ( _0x12D + ( 180 ) )
000ab9 e0b7     +LDI R27 , HIGH ( _0x12D + ( 180 ) )
                 	__POINTW2MN _0x12D,180
000aba df67      	RCALL _lcd_print
                 ; 0000 0435             while (page_num == 4 && stage == STAGE_INIT_MENU)
                 _0x14A:
000abb e0e4      	LDI  R30,LOW(4)
000abc 15e4      	CP   R30,R4
000abd f411      	BRNE _0x14D
000abe 2055      	TST  R5
000abf f009      	BREQ _0x14E
                 _0x14D:
000ac0 c001      	RJMP _0x14C
                 _0x14E:
                 ; 0000 0436                 ;
000ac1 cff9      	RJMP _0x14A
                 _0x14C:
                 ; 0000 0437         }
                 ; 0000 0438     }
                 _0x149:
                 _0x148:
                 _0x141:
                 _0x13A:
                 _0x133:
000ac2 cfa7      	RJMP _0x129
                 _0x12B:
                 ; 0000 0439 }
000ac3 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x12D:
0006ed           	.BYTE 0xC1
                 ;
                 ;void clear_eeprom()
                 ; 0000 043C {
                 
                 	.CSEG
                 _clear_eeprom:
                 ; .FSTART _clear_eeprom
                 ; 0000 043D     unsigned int i;
                 ; 0000 043E 
                 ; 0000 043F     for (i = 0; i <= 1023; i++)
000ac4 931a      	ST   -Y,R17
000ac5 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
000ac6 e000     +LDI R16 , LOW ( 0 )
000ac7 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x150:
                +
000ac8 3000     +CPI R16 , LOW ( 1024 )
000ac9 e0e4     +LDI R30 , HIGH ( 1024 )
000aca 071e     +CPC R17 , R30
                 	__CPWRN 16,17,1024
000acb f478      	BRSH _0x151
                 ; 0000 0440     {
                 ; 0000 0441         // Wait for the previous write to complete
                 ; 0000 0442         while (EECR & (1 << EEWE))
                 _0x152:
000acc 99e1      	SBIC 0x1C,1
                 ; 0000 0443             ;
000acd cffe      	RJMP _0x152
                 ; 0000 0444 
                 ; 0000 0445         // Set up address registers
                 ; 0000 0446         EEARH = (i >> 8) & 0x03; // High byte (bits 8-9)
000ace 2fe1      	MOV  R30,R17
000acf 70f0      	ANDI R31,HIGH(0x0)
000ad0 70e3      	ANDI R30,LOW(0x3)
000ad1 bbef      	OUT  0x1F,R30
                 ; 0000 0447         EEARL = i & 0xFF;        // Low byte (bits 0-7)
000ad2 2fe0      	MOV  R30,R16
000ad3 bbee      	OUT  0x1E,R30
                 ; 0000 0448 
                 ; 0000 0449         // Set up data register
                 ; 0000 044A         EEDR = 0; // Write 0 to EEPROM
000ad4 e0e0      	LDI  R30,LOW(0)
000ad5 bbed      	OUT  0x1D,R30
                 ; 0000 044B 
                 ; 0000 044C         // Enable write
                 ; 0000 044D         EECR |= (1 << EEMWE); // Master write enable
000ad6 9ae2      	SBI  0x1C,2
                 ; 0000 044E         EECR |= (1 << EEWE);  // Start EEPROM write
000ad7 9ae1      	SBI  0x1C,1
                 ; 0000 044F     }
                +
000ad8 5f0f     +SUBI R16 , LOW ( - 1 )
000ad9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000ada cfed      	RJMP _0x150
                 _0x151:
                 ; 0000 0450 }
000adb 9109      	LD   R16,Y+
000adc 9119      	LD   R17,Y+
000add 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char read_byte_from_eeprom(unsigned int addr)
                 ; 0000 0453 {
                 _read_byte_from_eeprom:
                 ; .FSTART _read_byte_from_eeprom
                 ; 0000 0454     unsigned char x;
                 ; 0000 0455     // Wait for the previous write to complete
                 ; 0000 0456     while (EECR & (1 << EEWE))
000ade 93ba      	ST   -Y,R27
000adf 93aa      	ST   -Y,R26
000ae0 931a      	ST   -Y,R17
                 ;	addr -> Y+1
                 ;	x -> R17
                 _0x155:
000ae1 99e1      	SBIC 0x1C,1
                 ; 0000 0457         ;
000ae2 cffe      	RJMP _0x155
                 ; 0000 0458 
                 ; 0000 0459     // Set up address registers
                 ; 0000 045A     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000ae3 940e 100c 	CALL SUBOPT_0x2B
                 ; 0000 045B     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 045C     EECR |= (1 << EERE);        // Read Enable
000ae5 9ae0      	SBI  0x1C,0
                 ; 0000 045D     x = EEDR;
000ae6 b31d      	IN   R17,29
                 ; 0000 045E     return x;
000ae7 2fe1      	MOV  R30,R17
000ae8 8118      	LDD  R17,Y+0
000ae9 c009      	RJMP _0x20C0008
                 ; 0000 045F }
                 ; .FEND
                 ;
                 ;void write_byte_to_eeprom(unsigned int addr, unsigned char value)
                 ; 0000 0462 {
                 _write_byte_to_eeprom:
                 ; .FSTART _write_byte_to_eeprom
                 ; 0000 0463     // Wait for the previous write to complete
                 ; 0000 0464     while (EECR & (1 << EEWE))
000aea 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	value -> Y+0
                 _0x158:
000aeb 99e1      	SBIC 0x1C,1
                 ; 0000 0465         ;
000aec cffe      	RJMP _0x158
                 ; 0000 0466 
                 ; 0000 0467     // Set up address registers
                 ; 0000 0468     EEARH = (addr >> 8) & 0x03; // High byte (bits 8-9)
000aed 940e 100c 	CALL SUBOPT_0x2B
                 ; 0000 0469     EEARL = addr & 0xFF;        // Low byte (bits 0-7)
                 ; 0000 046A 
                 ; 0000 046B     // Set up data register
                 ; 0000 046C     EEDR = value; // Write 0 to EEPROM
000aef 81e8      	LD   R30,Y
000af0 bbed      	OUT  0x1D,R30
                 ; 0000 046D 
                 ; 0000 046E     // Enable write
                 ; 0000 046F     EECR |= (1 << EEMWE); // Master write enable
000af1 9ae2      	SBI  0x1C,2
                 ; 0000 0470     EECR |= (1 << EEWE);  // Start EEPROM write
000af2 9ae1      	SBI  0x1C,1
                 ; 0000 0471 }
                 _0x20C0008:
000af3 9623      	ADIW R28,3
000af4 9508      	RET
                 ; .FEND
                 ;
                 ;void USART_Transmit(unsigned char data)
                 ; 0000 0474 {
                 _USART_Transmit:
                 ; .FSTART _USART_Transmit
                 ; 0000 0475     while (!(UCSRA & (1 << UDRE)))
000af5 93aa      	ST   -Y,R26
                 ;	data -> Y+0
                 _0x15B:
000af6 9b5d      	SBIS 0xB,5
                 ; 0000 0476         ;
000af7 cffe      	RJMP _0x15B
                 ; 0000 0477     UDR = data;
000af8 81e8      	LD   R30,Y
000af9 b9ec      	OUT  0xC,R30
                 ; 0000 0478 }
000afa c1a5      	RJMP _0x20C0005
                 ; .FEND
                 ;
                 ;unsigned char USART_Receive()
                 ; 0000 047B {
                 _USART_Receive:
                 ; .FSTART _USART_Receive
                 ; 0000 047C     while(!(UCSRA & (1 << RXC)) && stage == STAGE_SUBMIT_WITH_CARD);
                 _0x15E:
000afb 995f      	SBIC 0xB,7
000afc c003      	RJMP _0x161
000afd e0e3      	LDI  R30,LOW(3)
000afe 15e5      	CP   R30,R5
000aff f009      	BREQ _0x162
                 _0x161:
000b00 c001      	RJMP _0x160
                 _0x162:
000b01 cff9      	RJMP _0x15E
                 _0x160:
                 ; 0000 047D     return UDR;
000b02 b1ec      	IN   R30,0xC
000b03 9508      	RET
                 ; 0000 047E }
                 ; .FEND
                 ;
                 ;void USART_init(unsigned int ubrr)
                 ; 0000 0481 {
                 _USART_init:
                 ; .FSTART _USART_init
                 ; 0000 0482     UBRRL = (unsigned char)ubrr;
000b04 93ba      	ST   -Y,R27
000b05 93aa      	ST   -Y,R26
                 ;	ubrr -> Y+0
000b06 81e8      	LD   R30,Y
000b07 b9e9      	OUT  0x9,R30
                 ; 0000 0483     UBRRH = (unsigned char)(ubrr >> 8);
000b08 81e9      	LDD  R30,Y+1
000b09 70f0      	ANDI R31,HIGH(0x0)
000b0a bde0      	OUT  0x20,R30
                 ; 0000 0484     UCSRB = (1 << RXEN) | (1 << TXEN);
000b0b e1e8      	LDI  R30,LOW(24)
000b0c b9ea      	OUT  0xA,R30
                 ; 0000 0485     UCSRC = (1 << UCSZ1) | (1 << UCSZ0); // Set UCSZ1 and UCSZ0 for 8-bit data
000b0d e0e6      	LDI  R30,LOW(6)
000b0e bde0      	OUT  0x20,R30
                 ; 0000 0486 }
000b0f 9622      	ADIW R28,2
000b10 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char search_student_code()
                 ; 0000 0489 {
                 _search_student_code:
                 ; .FSTART _search_student_code
                 ; 0000 048A     unsigned char st_counts, i, j;
                 ; 0000 048B     char temp[10];
                 ; 0000 048C 
                 ; 0000 048D     st_counts = read_byte_from_eeprom(0x0);
000b11 972a      	SBIW R28,10
000b12 940e 1259 	CALL __SAVELOCR4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> Y+4
000b14 940e 0fdc 	CALL SUBOPT_0x24
000b16 2f1e      	MOV  R17,R30
                 ; 0000 048E 
                 ; 0000 048F     for (i = 0; i < st_counts; i++)
000b17 e000      	LDI  R16,LOW(0)
                 _0x164:
000b18 1701      	CP   R16,R17
000b19 f5b0      	BRSH _0x165
                 ; 0000 0490     {
                 ; 0000 0491         memset(temp, 0, 10);
000b1a 940e 0f83 	CALL SUBOPT_0x15
000b1c e0e0      	LDI  R30,LOW(0)
000b1d 93ea      	ST   -Y,R30
000b1e e0aa      	LDI  R26,LOW(10)
000b1f e0b0      	LDI  R27,0
000b20 940e 0d17 	CALL _memset
                 ; 0000 0492         for (j = 0; j < 8; j++)
000b22 e030      	LDI  R19,LOW(0)
                 _0x167:
000b23 3038      	CPI  R19,8
000b24 f4a8      	BRSH _0x168
                 ; 0000 0493         {
                 ; 0000 0494             temp[j] = read_byte_from_eeprom(j + ((i + 1) * 8));
000b25 2fe3      	MOV  R30,R19
000b26 e0f0      	LDI  R31,0
000b27 01de      	MOVW R26,R28
000b28 9614      	ADIW R26,4
000b29 0fea      	ADD  R30,R26
000b2a 1ffb      	ADC  R31,R27
000b2b 93ff      	PUSH R31
000b2c 93ef      	PUSH R30
000b2d 2fa3      	MOV  R26,R19
000b2e 27bb      	CLR  R27
000b2f 2fe0      	MOV  R30,R16
000b30 940e 0f56 	CALL SUBOPT_0xD
000b32 0fae      	ADD  R26,R30
000b33 1fbf      	ADC  R27,R31
000b34 dfa9      	RCALL _read_byte_from_eeprom
000b35 91af      	POP  R26
000b36 91bf      	POP  R27
000b37 93ec      	ST   X,R30
                 ; 0000 0495         }
000b38 5f3f      	SUBI R19,-1
000b39 cfe9      	RJMP _0x167
                 _0x168:
                 ; 0000 0496         temp[j] = '\0';
000b3a 2fe3      	MOV  R30,R19
000b3b e0f0      	LDI  R31,0
000b3c 01de      	MOVW R26,R28
000b3d 9614      	ADIW R26,4
000b3e 0fae      	ADD  R26,R30
000b3f 1fbf      	ADC  R27,R31
000b40 e0e0      	LDI  R30,LOW(0)
000b41 93ec      	ST   X,R30
                 ; 0000 0497         if (strncmp(temp, buffer, 8) == 0)
000b42 940e 0f83 	CALL SUBOPT_0x15
000b44 940e 0f3b 	CALL SUBOPT_0x8
000b46 e0a8      	LDI  R26,LOW(8)
000b47 940e 0d40 	CALL _strncmp
000b49 30e0      	CPI  R30,0
000b4a f419      	BRNE _0x169
                 ; 0000 0498             return (i + 1);
000b4b 2fe0      	MOV  R30,R16
000b4c 5fef      	SUBI R30,-LOW(1)
000b4d c003      	RJMP _0x20C0007
                 ; 0000 0499     }
                 _0x169:
000b4e 5f0f      	SUBI R16,-1
000b4f cfc8      	RJMP _0x164
                 _0x165:
                 ; 0000 049A 
                 ; 0000 049B     return 0;
000b50 e0e0      	LDI  R30,LOW(0)
                 _0x20C0007:
000b51 940e 1260 	CALL __LOADLOCR4
000b53 962e      	ADIW R28,14
000b54 9508      	RET
                 ; 0000 049C }
                 ; .FEND
                 ;
                 ;void delete_student_code(unsigned char index)
                 ; 0000 049F {
                 _delete_student_code:
                 ; .FSTART _delete_student_code
                 ; 0000 04A0     unsigned char st_counts, i, j;
                 ; 0000 04A1     unsigned char temp;
                 ; 0000 04A2 
                 ; 0000 04A3     st_counts = read_byte_from_eeprom(0x0);
000b55 93aa      	ST   -Y,R26
000b56 940e 1259 	CALL __SAVELOCR4
                 ;	index -> Y+4
                 ;	st_counts -> R17
                 ;	i -> R16
                 ;	j -> R19
                 ;	temp -> R18
000b58 940e 0fdc 	CALL SUBOPT_0x24
000b5a 2f1e      	MOV  R17,R30
                 ; 0000 04A4 
                 ; 0000 04A5     for (i = index; i <= st_counts; i++)
000b5b 810c      	LDD  R16,Y+4
                 _0x16B:
000b5c 1710      	CP   R17,R16
000b5d f0d8      	BRLO _0x16C
                 ; 0000 04A6     {
                 ; 0000 04A7         for (j = 0; j < 8; j++)
000b5e e030      	LDI  R19,LOW(0)
                 _0x16E:
000b5f 3038      	CPI  R19,8
000b60 f4b0      	BRSH _0x16F
                 ; 0000 04A8         {
                 ; 0000 04A9             temp = read_byte_from_eeprom(j + ((i + 1) * 8));
000b61 2fa3      	MOV  R26,R19
000b62 27bb      	CLR  R27
000b63 2fe0      	MOV  R30,R16
000b64 940e 0f56 	CALL SUBOPT_0xD
000b66 0fae      	ADD  R26,R30
000b67 1fbf      	ADC  R27,R31
000b68 df75      	RCALL _read_byte_from_eeprom
000b69 2f2e      	MOV  R18,R30
                 ; 0000 04AA             write_byte_to_eeprom(j + ((i) * 8), temp);
000b6a 2fa3      	MOV  R26,R19
000b6b 27bb      	CLR  R27
000b6c e0e8      	LDI  R30,LOW(8)
000b6d 9fe0      	MUL  R30,R16
000b6e 01f0      	MOVW R30,R0
000b6f 0fea      	ADD  R30,R26
000b70 1ffb      	ADC  R31,R27
000b71 93fa      	ST   -Y,R31
000b72 93ea      	ST   -Y,R30
000b73 2fa2      	MOV  R26,R18
000b74 df75      	RCALL _write_byte_to_eeprom
                 ; 0000 04AB         }
000b75 5f3f      	SUBI R19,-1
000b76 cfe8      	RJMP _0x16E
                 _0x16F:
                 ; 0000 04AC     }
000b77 5f0f      	SUBI R16,-1
000b78 cfe3      	RJMP _0x16B
                 _0x16C:
                 ; 0000 04AD     write_byte_to_eeprom(0x0, st_counts - 1);
000b79 940e 0f60 	CALL SUBOPT_0xF
000b7b 2fa1      	MOV  R26,R17
000b7c 50a1      	SUBI R26,LOW(1)
000b7d df6c      	RCALL _write_byte_to_eeprom
                 ; 0000 04AE }
000b7e 940e 1260 	CALL __LOADLOCR4
000b80 940c 0d97 	JMP  _0x20C0002
                 ; .FEND
                 ;
                 ;void HCSR04Init()
                 ; 0000 04B1 {
                 _HCSR04Init:
                 ; .FSTART _HCSR04Init
                 ; 0000 04B2     US_DDR |= (1 << US_TRIG_POS);  // Trigger pin as output
000b82 9a8d      	SBI  0x11,5
                 ; 0000 04B3     US_DDR &= ~(1 << US_ECHO_POS); // Echo pin as input
000b83 988e      	CBI  0x11,6
                 ; 0000 04B4 }
000b84 9508      	RET
                 ; .FEND
                 ;
                 ;void HCSR04Trigger()
                 ; 0000 04B7 {
                 _HCSR04Trigger:
                 ; .FSTART _HCSR04Trigger
                 ; 0000 04B8     US_PORT |= (1 << US_TRIG_POS);  // Set trigger pin high
000b85 9a95      	SBI  0x12,5
                 ; 0000 04B9     delay_us(15 * 16);              // Wait for 15 microseconds
                +
000b86 ee80     +LDI R24 , LOW ( 480 )
000b87 e091     +LDI R25 , HIGH ( 480 )
                +__DELAY_USW_LOOP :
000b88 9701     +SBIW R24 , 1
000b89 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 480
                 ; 0000 04BA     US_PORT &= ~(1 << US_TRIG_POS); // Set trigger pin low
000b8a 9895      	CBI  0x12,5
                 ; 0000 04BB }
000b8b 9508      	RET
                 ; .FEND
                 ;
                 ;uint16_t GetPulseWidth()
                 ; 0000 04BE {
                 _GetPulseWidth:
                 ; .FSTART _GetPulseWidth
                 ; 0000 04BF     uint32_t i, result;
                 ; 0000 04C0 
                 ; 0000 04C1     // Wait for rising edge on Echo pin
                 ; 0000 04C2     for (i = 0; i < 600000; i++)
000b8c 9728      	SBIW R28,8
                 ;	i -> Y+4
                 ;	result -> Y+0
000b8d e0e0      	LDI  R30,LOW(0)
                +
000b8e 83ec     +STD Y + 4 , R30
000b8f 83ed     +STD Y + 4 + 1 , R30
000b90 83ee     +STD Y + 4 + 2 , R30
000b91 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x171:
000b92 940e 1013 	CALL SUBOPT_0x2C
000b94 f430      	BRSH _0x172
                 ; 0000 04C3     {
                 ; 0000 04C4         if (!(US_PIN & (1 << US_ECHO_POS)))
000b95 9b86      	SBIS 0x10,6
                 ; 0000 04C5             continue;
000b96 c001      	RJMP _0x170
                 ; 0000 04C6         else
                 ; 0000 04C7             break;
000b97 c003      	RJMP _0x172
                 ; 0000 04C8     }
                 _0x170:
000b98 940e 101f 	CALL SUBOPT_0x2D
000b9a cff7      	RJMP _0x171
                 _0x172:
                 ; 0000 04C9 
                 ; 0000 04CA     if (i == 600000)
000b9b 940e 1013 	CALL SUBOPT_0x2C
000b9d f419      	BRNE _0x175
                 ; 0000 04CB         return US_ERROR; // Timeout error if no rising edge detected
000b9e efef      	LDI  R30,LOW(65535)
000b9f efff      	LDI  R31,HIGH(65535)
000ba0 c135      	RJMP _0x20C0003
                 ; 0000 04CC 
                 ; 0000 04CD     // Start timer with prescaler 64
                 ; 0000 04CE     TCCR1A = 0x00;
                 _0x175:
000ba1 e0e0      	LDI  R30,LOW(0)
000ba2 bdef      	OUT  0x2F,R30
                 ; 0000 04CF     TCCR1B = (1 << CS11) | (1 << CS10);
000ba3 e0e3      	LDI  R30,LOW(3)
000ba4 bdee      	OUT  0x2E,R30
                 ; 0000 04D0     TCNT1 = 0x00; // Reset timer
000ba5 e0e0      	LDI  R30,LOW(0)
000ba6 e0f0      	LDI  R31,HIGH(0)
000ba7 bdfd      	OUT  0x2C+1,R31
000ba8 bdec      	OUT  0x2C,R30
                 ; 0000 04D1 
                 ; 0000 04D2     // Wait for falling edge on Echo pin
                 ; 0000 04D3     for (i = 0; i < 600000; i++)
                +
000ba9 83ec     +STD Y + 4 , R30
000baa 83ed     +STD Y + 4 + 1 , R30
000bab 83ee     +STD Y + 4 + 2 , R30
000bac 83ef     +STD Y + 4 + 3 , R30
                 	__CLRD1S 4
                 _0x177:
000bad 940e 1013 	CALL SUBOPT_0x2C
000baf f470      	BRSH _0x178
                 ; 0000 04D4     {
                 ; 0000 04D5         if (!(US_PIN & (1 << US_ECHO_POS)))
000bb0 9b86      	SBIS 0x10,6
                 ; 0000 04D6             break; // Falling edge detected
000bb1 c00c      	RJMP _0x178
                 ; 0000 04D7         if (TCNT1 > 60000)
000bb2 b5ec      	IN   R30,0x2C
000bb3 b5fd      	IN   R31,0x2C+1
000bb4 36e1      	CPI  R30,LOW(0xEA61)
000bb5 eeaa      	LDI  R26,HIGH(0xEA61)
000bb6 07fa      	CPC  R31,R26
000bb7 f018      	BRLO _0x17A
                 ; 0000 04D8             return US_NO_OBSTACLE; // No obstacle in range
000bb8 efee      	LDI  R30,LOW(65534)
000bb9 efff      	LDI  R31,HIGH(65534)
000bba c11b      	RJMP _0x20C0003
                 ; 0000 04D9     }
                 _0x17A:
000bbb 940e 101f 	CALL SUBOPT_0x2D
000bbd cfef      	RJMP _0x177
                 _0x178:
                 ; 0000 04DA 
                 ; 0000 04DB     result = TCNT1; // Capture timer value
000bbe b5ec      	IN   R30,0x2C
000bbf b5fd      	IN   R31,0x2C+1
000bc0 2766      	CLR  R22
000bc1 2777      	CLR  R23
000bc2 940e 124d 	CALL __PUTD1S0
                 ; 0000 04DC     TCCR1B = 0x00;  // Stop timer
000bc4 e0e0      	LDI  R30,LOW(0)
000bc5 bdee      	OUT  0x2E,R30
                 ; 0000 04DD 
                 ; 0000 04DE     if (result > 60000)
000bc6 940e 1248 	CALL __GETD2S0
                +
000bc8 36a1     +CPI R26 , LOW ( 0xEA61 )
000bc9 eeea     +LDI R30 , HIGH ( 0xEA61 )
000bca 07be     +CPC R27 , R30
000bcb e0e0     +LDI R30 , BYTE3 ( 0xEA61 )
000bcc 078e     +CPC R24 , R30
000bcd e0e0     +LDI R30 , BYTE4 ( 0xEA61 )
000bce 079e     +CPC R25 , R30
                 	__CPD2N 0xEA61
000bcf f018      	BRLO _0x17B
                 ; 0000 04DF         return US_NO_OBSTACLE;
000bd0 efee      	LDI  R30,LOW(65534)
000bd1 efff      	LDI  R31,HIGH(65534)
000bd2 c103      	RJMP _0x20C0003
                 ; 0000 04E0     else
                 _0x17B:
                 ; 0000 04E1         return (result >> 1); // Return the measured pulse width
000bd3 940e 1243 	CALL __GETD1S0
000bd5 940e 1210 	CALL __LSRD1
000bd7 c0fe      	RJMP _0x20C0003
                 ; 0000 04E2 }
                 ; .FEND
                 ;
                 ;void startSonar()
                 ; 0000 04E5 {
                 _startSonar:
                 ; .FSTART _startSonar
                 ; 0000 04E6     char numberString[16];
                 ; 0000 04E7     uint16_t pulseWidth; // Pulse width from echo
                 ; 0000 04E8     int distance, previous_distance = -1;
                 ; 0000 04E9     static int previous_count = -1;
                 
                 	.DSEG
                 
                 	.CSEG
                 ; 0000 04EA 
                 ; 0000 04EB     lcdCommand(0x01);
000bd8 9760      	SBIW R28,16
000bd9 940e 1257 	CALL __SAVELOCR6
                 ;	numberString -> Y+6
                 ;	pulseWidth -> R16,R17
                 ;	distance -> R18,R19
                 ;	previous_distance -> R20,R21
                +
000bdb ef4f     +LDI R20 , LOW ( - 1 )
000bdc ef5f     +LDI R21 , HIGH ( - 1 )
                 	__GETWRN 20,21,-1
000bdd 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 04EC     lcd_gotoxy(1, 1);
                 ; 0000 04ED     lcd_print("Distance: ");
                +
000bdf eaae     +LDI R26 , LOW ( _0x17E + ( 0 ) )
000be0 e0b7     +LDI R27 , HIGH ( _0x17E + ( 0 ) )
                 	__POINTW2MN _0x17E,0
000be1 de40      	RCALL _lcd_print
                 ; 0000 04EE 
                 ; 0000 04EF     while (stage == STAGE_TRAFFIC_MONITORING)
                 _0x17F:
000be2 e0ea      	LDI  R30,LOW(10)
000be3 15e5      	CP   R30,R5
000be4 f009      	BREQ PC+2
000be5 c071      	RJMP _0x181
                 ; 0000 04F0     {
                 ; 0000 04F1         HCSR04Trigger();              // Send trigger pulse
000be6 df9e      	RCALL _HCSR04Trigger
                 ; 0000 04F2         pulseWidth = GetPulseWidth(); // Measure echo pulse
000be7 dfa4      	RCALL _GetPulseWidth
000be8 018f      	MOVW R16,R30
                 ; 0000 04F3 
                 ; 0000 04F4         if (pulseWidth == US_ERROR)
000be9 efef      	LDI  R30,LOW(65535)
000bea efff      	LDI  R31,HIGH(65535)
000beb 17e0      	CP   R30,R16
000bec 07f1      	CPC  R31,R17
000bed f429      	BRNE _0x182
                 ; 0000 04F5         {
                 ; 0000 04F6             lcdCommand(0x01);
000bee 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 04F7             lcd_gotoxy(1, 1);
                 ; 0000 04F8             lcd_print("Error"); // Display error message
                +
000bf0 eba9     +LDI R26 , LOW ( _0x17E + ( 11 ) )
000bf1 e0b7     +LDI R27 , HIGH ( _0x17E + ( 11 ) )
                 	__POINTW2MN _0x17E,11
000bf2 c05e      	RJMP _0x1A1
                 ; 0000 04F9         }
                 ; 0000 04FA         else if (pulseWidth == US_NO_OBSTACLE)
                 _0x182:
000bf3 efee      	LDI  R30,LOW(65534)
000bf4 efff      	LDI  R31,HIGH(65534)
000bf5 17e0      	CP   R30,R16
000bf6 07f1      	CPC  R31,R17
000bf7 f429      	BRNE _0x184
                 ; 0000 04FB         {
                 ; 0000 04FC             lcdCommand(0x01);
000bf8 940e 0f01 	CALL SUBOPT_0x0
                 ; 0000 04FD             lcd_gotoxy(1, 1);
                 ; 0000 04FE             lcd_print("No Obstacle"); // Display no obstacle message
                +
000bfa ebaf     +LDI R26 , LOW ( _0x17E + ( 17 ) )
000bfb e0b7     +LDI R27 , HIGH ( _0x17E + ( 17 ) )
                 	__POINTW2MN _0x17E,17
000bfc c054      	RJMP _0x1A1
                 ; 0000 04FF         }
                 ; 0000 0500         else
                 _0x184:
                 ; 0000 0501         {
                 ; 0000 0502             distance = (int)((pulseWidth * 0.034 / 2) + 0.5);
000bfd 01f8      	MOVW R30,R16
000bfe 2766      	CLR  R22
000bff 2777      	CLR  R23
000c00 940e 10e3 	CALL __CDF1
                +
000c02 e9a6     +LDI R26 , LOW ( 0x3D0B4396 )
000c03 e4b3     +LDI R27 , HIGH ( 0x3D0B4396 )
000c04 e08b     +LDI R24 , BYTE3 ( 0x3D0B4396 )
000c05 e39d     +LDI R25 , BYTE4 ( 0x3D0B4396 )
                 	__GETD2N 0x3D0B4396
000c06 940e 1166 	CALL __MULF12
000c08 01df      	MOVW R26,R30
000c09 01cb      	MOVW R24,R22
                +
000c0a e0e0     +LDI R30 , LOW ( 0x40000000 )
000c0b e0f0     +LDI R31 , HIGH ( 0x40000000 )
000c0c e060     +LDI R22 , BYTE3 ( 0x40000000 )
000c0d e470     +LDI R23 , BYTE4 ( 0x40000000 )
                 	__GETD1N 0x40000000
000c0e 940e 11b4 	CALL __DIVF21
                +
000c10 e0a0     +LDI R26 , LOW ( 0x3F000000 )
000c11 e0b0     +LDI R27 , HIGH ( 0x3F000000 )
000c12 e080     +LDI R24 , BYTE3 ( 0x3F000000 )
000c13 e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
000c14 940e 1116 	CALL __ADDF12
000c16 940e 10ac 	CALL __CFD1
000c18 019f      	MOVW R18,R30
                 ; 0000 0503 
                 ; 0000 0504             if (distance != previous_distance)
                +
000c19 1742     +CP R20 , R18
000c1a 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000c1b f081      	BREQ _0x186
                 ; 0000 0505             {
                 ; 0000 0506                 previous_distance = distance;
000c1c 01a9      	MOVW R20,R18
                 ; 0000 0507                 // Display distance on LCD
                 ; 0000 0508                 itoa(distance, numberString); // Convert distance to string
000c1d 933a      	ST   -Y,R19
000c1e 932a      	ST   -Y,R18
000c1f 01de      	MOVW R26,R28
000c20 9618      	ADIW R26,8
000c21 940e 0ce9 	CALL _itoa
                 ; 0000 0509                 lcd_gotoxy(11, 1);
000c23 e0eb      	LDI  R30,LOW(11)
000c24 940e 0f8e 	CALL SUBOPT_0x17
                 ; 0000 050A                 lcd_print(numberString);
000c26 01de      	MOVW R26,R28
000c27 9616      	ADIW R26,6
000c28 ddf9      	RCALL _lcd_print
                 ; 0000 050B                 lcd_print(" cm ");
                +
000c29 ecab     +LDI R26 , LOW ( _0x17E + ( 29 ) )
000c2a e0b7     +LDI R27 , HIGH ( _0x17E + ( 29 ) )
                 	__POINTW2MN _0x17E,29
000c2b ddf6      	RCALL _lcd_print
                 ; 0000 050C             }
                 ; 0000 050D             // Counting logic based on distance
                 ; 0000 050E             if (distance < 6)
                 _0x186:
                +
000c2c 3026     +CPI R18 , LOW ( 6 )
000c2d e0e0     +LDI R30 , HIGH ( 6 )
000c2e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000c2f f40c      	BRGE _0x187
                 ; 0000 050F             {
                 ; 0000 0510                 US_count++; // Increment count if distance is below threshold
000c30 9473      	INC  R7
                 ; 0000 0511             }
                 ; 0000 0512 
                 ; 0000 0513             // Update count on LCD only if it changes
                 ; 0000 0514             if (US_count != previous_count)
                 _0x187:
000c31 91e0 082a 	LDS  R30,_previous_count_S0000015000
000c33 91f0 082b 	LDS  R31,_previous_count_S0000015000+1
000c35 2da7      	MOV  R26,R7
000c36 e0b0      	LDI  R27,0
000c37 17ea      	CP   R30,R26
000c38 07fb      	CPC  R31,R27
000c39 f0c1      	BREQ _0x188
                 ; 0000 0515             {
                 ; 0000 0516                 previous_count = US_count;
000c3a 2de7      	MOV  R30,R7
000c3b e0f0      	LDI  R31,0
000c3c 93e0 082a 	STS  _previous_count_S0000015000,R30
000c3e 93f0 082b 	STS  _previous_count_S0000015000+1,R31
                 ; 0000 0517                 lcd_gotoxy(1, 2); // Move to second line
000c40 e0e1      	LDI  R30,LOW(1)
000c41 93ea      	ST   -Y,R30
000c42 e0a2      	LDI  R26,LOW(2)
000c43 ddc7      	RCALL _lcd_gotoxy
                 ; 0000 0518                 itoa(US_count, numberString);
000c44 2de7      	MOV  R30,R7
000c45 e0f0      	LDI  R31,0
000c46 93fa      	ST   -Y,R31
000c47 93ea      	ST   -Y,R30
000c48 01de      	MOVW R26,R28
000c49 9618      	ADIW R26,8
000c4a 940e 0ce9 	CALL _itoa
                 ; 0000 0519                 lcd_print("Count: ");
                +
000c4c eda0     +LDI R26 , LOW ( _0x17E + ( 34 ) )
000c4d e0b7     +LDI R27 , HIGH ( _0x17E + ( 34 ) )
                 	__POINTW2MN _0x17E,34
000c4e ddd3      	RCALL _lcd_print
                 ; 0000 051A                 lcd_print(numberString);
000c4f 01de      	MOVW R26,R28
000c50 9616      	ADIW R26,6
                 _0x1A1:
000c51 ddd0      	RCALL _lcd_print
                 ; 0000 051B             }
                 ; 0000 051C         }
                 _0x188:
                 ; 0000 051D         delay_ms(500);
000c52 efa4      	LDI  R26,LOW(500)
000c53 e0b1      	LDI  R27,HIGH(500)
000c54 940e 1073 	CALL _delay_ms
                 ; 0000 051E     }
000c56 cf8b      	RJMP _0x17F
                 _0x181:
                 ; 0000 051F }
000c57 940e 125e 	CALL __LOADLOCR6
000c59 9666      	ADIW R28,22
000c5a 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x17E:
0007ae           	.BYTE 0x2A
                 ;
                 ;unsigned int simple_hash(const char *str)
                 ; 0000 0522 {
                 
                 	.CSEG
                 _simple_hash:
                 ; .FSTART _simple_hash
                 ; 0000 0523     unsigned int hash = 0;
                 ; 0000 0524     while (*str)
000c5b 93ba      	ST   -Y,R27
000c5c 93aa      	ST   -Y,R26
000c5d 931a      	ST   -Y,R17
000c5e 930a      	ST   -Y,R16
                 ;	*str -> Y+2
                 ;	hash -> R16,R17
                +
000c5f e000     +LDI R16 , LOW ( 0 )
000c60 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x189:
000c61 81aa      	LDD  R26,Y+2
000c62 81bb      	LDD  R27,Y+2+1
000c63 91ec      	LD   R30,X
000c64 30e0      	CPI  R30,0
000c65 f099      	BREQ _0x18B
                 ; 0000 0525     {
                 ; 0000 0526         hash = (hash * 31) + *str; // A basic hash formula
                +
000c66 e1af     +LDI R26 , 31
000c67 9fa0     +MUL R26 , R16
000c68 01f0     +MOVW R30 , R0
000c69 9fa1     +MUL R26 , R17
000c6a 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,31
000c6b 010f      	MOVW R0,R30
000c6c 81aa      	LDD  R26,Y+2
000c6d 81bb      	LDD  R27,Y+2+1
000c6e 91ec      	LD   R30,X
000c6f e0f0      	LDI  R31,0
000c70 0de0      	ADD  R30,R0
000c71 1df1      	ADC  R31,R1
000c72 018f      	MOVW R16,R30
                 ; 0000 0527         str++;
000c73 81ea      	LDD  R30,Y+2
000c74 81fb      	LDD  R31,Y+2+1
000c75 9631      	ADIW R30,1
000c76 83ea      	STD  Y+2,R30
000c77 83fb      	STD  Y+2+1,R31
                 ; 0000 0528     }
000c78 cfe8      	RJMP _0x189
                 _0x18B:
                 ; 0000 0529     return hash;
000c79 01f8      	MOVW R30,R16
000c7a 8119      	LDD  R17,Y+1
000c7b 8108      	LDD  R16,Y+0
                 _0x20C0006:
000c7c 9624      	ADIW R28,4
000c7d 9508      	RET
                 ; 0000 052A }
                 ; .FEND
                 ;
                 ;void I2C_init()
                 ; 0000 052D {
                 _I2C_init:
                 ; .FSTART _I2C_init
                 ; 0000 052E     TWSR = 0x00;
000c7e e0e0      	LDI  R30,LOW(0)
000c7f b9e1      	OUT  0x1,R30
                 ; 0000 052F     TWBR = 0x47;
000c80 e4e7      	LDI  R30,LOW(71)
000c81 b9e0      	OUT  0x0,R30
                 ; 0000 0530     TWCR = 0x04;
000c82 e0e4      	LDI  R30,LOW(4)
000c83 bfe6      	OUT  0x36,R30
                 ; 0000 0531 }
000c84 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_start()
                 ; 0000 0534 {
                 _I2C_start:
                 ; .FSTART _I2C_start
                 ; 0000 0535     TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
000c85 eae4      	LDI  R30,LOW(164)
000c86 bfe6      	OUT  0x36,R30
                 ; 0000 0536     while(!(TWCR & (1 << TWINT)));
                 _0x18C:
000c87 b7e6      	IN   R30,0x36
000c88 78e0      	ANDI R30,LOW(0x80)
000c89 f3e9      	BREQ _0x18C
                 ; 0000 0537 }
000c8a 9508      	RET
                 ; .FEND
                 ;
                 ;void I2C_write(unsigned char data)
                 ; 0000 053A {
                 _I2C_write:
                 ; .FSTART _I2C_write
                 ; 0000 053B     TWDR = data;
000c8b 93aa      	ST   -Y,R26
                 ;	data -> Y+0
000c8c 81e8      	LD   R30,Y
000c8d b9e3      	OUT  0x3,R30
                 ; 0000 053C     TWCR = (1 << TWINT) | (1 << TWEN);
000c8e e8e4      	LDI  R30,LOW(132)
000c8f bfe6      	OUT  0x36,R30
                 ; 0000 053D     while(!(TWCR & (1 << TWINT)));
                 _0x18F:
000c90 b7e6      	IN   R30,0x36
000c91 78e0      	ANDI R30,LOW(0x80)
000c92 f3e9      	BREQ _0x18F
                 ; 0000 053E }
000c93 c00c      	RJMP _0x20C0005
                 ; .FEND
                 ;
                 ;unsigned char I2C_read(unsigned char ackVal)
                 ; 0000 0541 {
                 _I2C_read:
                 ; .FSTART _I2C_read
                 ; 0000 0542     TWCR = (1 << TWINT) | (1 << TWEN) | (ackVal << TWEA);
000c94 93aa      	ST   -Y,R26
                 ;	ackVal -> Y+0
000c95 81e8      	LD   R30,Y
000c96 95e2      	SWAP R30
000c97 7fe0      	ANDI R30,0xF0
000c98 0fee      	LSL  R30
000c99 0fee      	LSL  R30
000c9a 68e4      	ORI  R30,LOW(0x84)
000c9b bfe6      	OUT  0x36,R30
                 ; 0000 0543     while(!(TWCR & (1 << TWINT)));
                 _0x192:
000c9c b7e6      	IN   R30,0x36
000c9d 78e0      	ANDI R30,LOW(0x80)
000c9e f3e9      	BREQ _0x192
                 ; 0000 0544     return TWDR;
000c9f b1e3      	IN   R30,0x3
                 _0x20C0005:
000ca0 9621      	ADIW R28,1
000ca1 9508      	RET
                 ; 0000 0545 }
                 ; .FEND
                 ;
                 ;void I2C_stop()
                 ; 0000 0548 {
                 _I2C_stop:
                 ; .FSTART _I2C_stop
                 ; 0000 0549     TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
000ca2 e9e4      	LDI  R30,LOW(148)
000ca3 bfe6      	OUT  0x36,R30
                 ; 0000 054A     while(TWCR & (1 << TWSTO));
                 _0x195:
000ca4 b7e6      	IN   R30,0x36
000ca5 fde4      	SBRC R30,4
000ca6 cffd      	RJMP _0x195
                 ; 0000 054B }
000ca7 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_init()
                 ; 0000 054E {
                 _rtc_init:
                 ; .FSTART _rtc_init
                 ; 0000 054F     I2C_init();
000ca8 dfd5      	RCALL _I2C_init
                 ; 0000 0550     I2C_start();
000ca9 940e 102c 	CALL SUBOPT_0x2E
                 ; 0000 0551     I2C_write(0xD0);
                 ; 0000 0552     I2C_write(0x07);
000cab e0a7      	LDI  R26,LOW(7)
000cac dfde      	RCALL _I2C_write
                 ; 0000 0553     I2C_write(0x00);
000cad e0a0      	LDI  R26,LOW(0)
000cae 940e 1031 	CALL SUBOPT_0x2F
                 ; 0000 0554     I2C_stop();
                 ; 0000 0555 }
000cb0 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getTime(unsigned char* hour, unsigned char* minute, unsigned char* second)
                 ; 0000 0558 {
                 _rtc_getTime:
                 ; .FSTART _rtc_getTime
                 ; 0000 0559     I2C_start();
000cb1 93ba      	ST   -Y,R27
000cb2 93aa      	ST   -Y,R26
                 ;	*hour -> Y+4
                 ;	*minute -> Y+2
                 ;	*second -> Y+0
000cb3 940e 102c 	CALL SUBOPT_0x2E
                 ; 0000 055A     I2C_write(0xD0);
                 ; 0000 055B     I2C_write(0x00);
000cb5 e0a0      	LDI  R26,LOW(0)
000cb6 940e 1031 	CALL SUBOPT_0x2F
                 ; 0000 055C     I2C_stop();
                 ; 0000 055D 
                 ; 0000 055E     I2C_start();
000cb8 940e 1035 	CALL SUBOPT_0x30
                 ; 0000 055F     I2C_write(0xD1);
                 ; 0000 0560     *second = I2C_read(1);
                 ; 0000 0561     *minute = I2C_read(1);
                 ; 0000 0562     *hour = I2C_read(0);
000cba e0a0      	LDI  R26,LOW(0)
000cbb dfd8      	RCALL _I2C_read
000cbc 81ac      	LDD  R26,Y+4
000cbd 81bd      	LDD  R27,Y+4+1
000cbe 93ec      	ST   X,R30
                 ; 0000 0563     I2C_stop();
000cbf dfe2      	RCALL _I2C_stop
                 ; 0000 0564 }
                 _0x20C0004:
000cc0 9626      	ADIW R28,6
000cc1 9508      	RET
                 ; .FEND
                 ;
                 ;void rtc_getDate(unsigned char* year, unsigned char* month, unsigned char* date, unsigned char* day)
                 ; 0000 0567 {
                 _rtc_getDate:
                 ; .FSTART _rtc_getDate
                 ; 0000 0568     I2C_start();
000cc2 93ba      	ST   -Y,R27
000cc3 93aa      	ST   -Y,R26
                 ;	*year -> Y+6
                 ;	*month -> Y+4
                 ;	*date -> Y+2
                 ;	*day -> Y+0
000cc4 940e 102c 	CALL SUBOPT_0x2E
                 ; 0000 0569     I2C_write(0xD0);
                 ; 0000 056A     I2C_write(0x03);
000cc6 e0a3      	LDI  R26,LOW(3)
000cc7 940e 1031 	CALL SUBOPT_0x2F
                 ; 0000 056B     I2C_stop();
                 ; 0000 056C 
                 ; 0000 056D     I2C_start();
000cc9 940e 1035 	CALL SUBOPT_0x30
                 ; 0000 056E     I2C_write(0xD1);
                 ; 0000 056F     *day = I2C_read(1);
                 ; 0000 0570     *date = I2C_read(1);
                 ; 0000 0571     *month = I2C_read(1);
000ccb e0a1      	LDI  R26,LOW(1)
000ccc dfc7      	RCALL _I2C_read
000ccd 81ac      	LDD  R26,Y+4
000cce 81bd      	LDD  R27,Y+4+1
000ccf 93ec      	ST   X,R30
                 ; 0000 0572     *year = I2C_read(0);
000cd0 e0a0      	LDI  R26,LOW(0)
000cd1 dfc2      	RCALL _I2C_read
000cd2 81ae      	LDD  R26,Y+6
000cd3 81bf      	LDD  R27,Y+6+1
000cd4 93ec      	ST   X,R30
                 ; 0000 0573     I2C_stop();
000cd5 dfcc      	RCALL _I2C_stop
                 ; 0000 0574 }
                 _0x20C0003:
000cd6 9628      	ADIW R28,8
000cd7 9508      	RET
                 ; .FEND
                 ;
                 ;void Timer2_Init()
                 ; 0000 0577 {
                 _Timer2_Init:
                 ; .FSTART _Timer2_Init
                 ; 0000 0578     //Disable timer2 interrupts
                 ; 0000 0579     TIMSK = 0;
000cd8 e0e0      	LDI  R30,LOW(0)
000cd9 bfe9      	OUT  0x39,R30
                 ; 0000 057A     //Enable asynchronous mode
                 ; 0000 057B     ASSR = (1 << AS2);
000cda e0e8      	LDI  R30,LOW(8)
000cdb bde2      	OUT  0x22,R30
                 ; 0000 057C     //set initial counter value
                 ; 0000 057D     TCNT2 = 0;
000cdc e0e0      	LDI  R30,LOW(0)
000cdd bde4      	OUT  0x24,R30
                 ; 0000 057E     //set prescaller 128
                 ; 0000 057F     TCCR2 = 0;
000cde bde5      	OUT  0x25,R30
                 ; 0000 0580     TCCR2 |= (1 << CS22) | ( 1 << CS00);
000cdf b5e5      	IN   R30,0x25
000ce0 60e5      	ORI  R30,LOW(0x5)
000ce1 bde5      	OUT  0x25,R30
                 ; 0000 0581     //wait for registers update
                 ; 0000 0582     while (ASSR & ((1 << TCN2UB) | (1 << TCR2UB)));
                 _0x198:
000ce2 b5e2      	IN   R30,0x22
000ce3 70e5      	ANDI R30,LOW(0x5)
000ce4 f7e9      	BRNE _0x198
                 ; 0000 0583     //clear interrupt flags
                 ; 0000 0584     TIFR = (1 << TOV2);
000ce5 e4e0      	LDI  R30,LOW(64)
000ce6 bfe8      	OUT  0x38,R30
                 ; 0000 0585     //enable TOV2 interrupt
                 ; 0000 0586     TIMSK  = (1 << TOIE2);
000ce7 bfe9      	OUT  0x39,R30
                 ; 0000 0587 }
000ce8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
000ce9 93ba      	ST   -Y,R27
000cea 93aa      	ST   -Y,R26
000ceb 91a9          ld   r26,y+
000cec 91b9          ld   r27,y+
000ced 91e9          ld   r30,y+
000cee 91f9          ld   r31,y+
000cef 9630          adiw r30,0
000cf0 f42a          brpl __itoa0
000cf1 95e0          com  r30
000cf2 95f0          com  r31
000cf3 9631          adiw r30,1
000cf4 e26d          ldi  r22,'-'
000cf5 936d          st   x+,r22
                 __itoa0:
000cf6 94e8          clt
000cf7 e180          ldi  r24,low(10000)
000cf8 e297          ldi  r25,high(10000)
000cf9 d00d          rcall __itoa1
000cfa ee88          ldi  r24,low(1000)
000cfb e093          ldi  r25,high(1000)
000cfc d00a          rcall __itoa1
000cfd e684          ldi  r24,100
000cfe 2799          clr  r25
000cff d007          rcall __itoa1
000d00 e08a          ldi  r24,10
000d01 d005          rcall __itoa1
000d02 2f6e          mov  r22,r30
000d03 d010          rcall __itoa5
000d04 2766          clr  r22
000d05 936c          st   x,r22
000d06 9508          ret
                 
                 __itoa1:
000d07 2766          clr	 r22
                 __itoa2:
000d08 17e8          cp   r30,r24
000d09 07f9          cpc  r31,r25
000d0a f020          brlo __itoa3
000d0b 9563          inc  r22
000d0c 1be8          sub  r30,r24
000d0d 0bf9          sbc  r31,r25
000d0e f7c9          brne __itoa2
                 __itoa3:
000d0f 2366          tst  r22
000d10 f411          brne __itoa4
000d11 f016          brts __itoa5
000d12 9508          ret
                 __itoa4:
000d13 9468          set
                 __itoa5:
000d14 5d60          subi r22,-0x30
000d15 936d          st   x+,r22
000d16 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _memset:
                 ; .FSTART _memset
000d17 93ba      	ST   -Y,R27
000d18 93aa      	ST   -Y,R26
000d19 81b9          ldd  r27,y+1
000d1a 81a8          ld   r26,y
000d1b 9610          adiw r26,0
000d1c f031          breq memset1
000d1d 81fc          ldd  r31,y+4
000d1e 81eb          ldd  r30,y+3
000d1f 816a          ldd  r22,y+2
                 memset0:
000d20 9361          st   z+,r22
000d21 9711          sbiw r26,1
000d22 f7e9          brne memset0
                 memset1:
000d23 81eb          ldd  r30,y+3
000d24 81fc          ldd  r31,y+4
000d25 940c 0d97 	JMP  _0x20C0002
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000d27 93ba      	ST   -Y,R27
000d28 93aa      	ST   -Y,R26
000d29 91a9          ld   r26,y+
000d2a 91b9          ld   r27,y+
000d2b 27ee          clr  r30
000d2c 27ff          clr  r31
                 strlen0:
000d2d 916d          ld   r22,x+
000d2e 2366          tst  r22
000d2f f011          breq strlen1
000d30 9631          adiw r30,1
000d31 cffb          rjmp strlen0
                 strlen1:
000d32 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000d33 93ba      	ST   -Y,R27
000d34 93aa      	ST   -Y,R26
000d35 27aa          clr  r26
000d36 27bb          clr  r27
000d37 91e9          ld   r30,y+
000d38 91f9          ld   r31,y+
                 strlenf0:
000d39 9005      	lpm  r0,z+
000d3a 2000          tst  r0
000d3b f011          breq strlenf1
000d3c 9611          adiw r26,1
000d3d cffb          rjmp strlenf0
                 strlenf1:
000d3e 01fd          movw r30,r26
000d3f 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
000d40 93aa      	ST   -Y,R26
000d41 2766          clr  r22
000d42 2777          clr  r23
000d43 9189          ld   r24,y+
000d44 91e9          ld   r30,y+
000d45 91f9          ld   r31,y+
000d46 91a9          ld   r26,y+
000d47 91b9          ld   r27,y+
                 strncmp0:
000d48 2388          tst  r24
000d49 f049          breq strncmp1
000d4a 958a          dec  r24
000d4b 916d          ld   r22,x+
000d4c 9171          ld   r23,z+
000d4d 1767          cp   r22,r23
000d4e f421          brne strncmp1
000d4f 2366          tst  r22
000d50 f7b9          brne strncmp0
                 strncmp3:
000d51 27ee          clr  r30
000d52 9508          ret
                 strncmp1:
000d53 1b67          sub  r22,r23
000d54 f3e1          breq strncmp3
000d55 e0e1          ldi  r30,1
000d56 f408          brcc strncmp2
000d57 50e2          subi r30,2
                 strncmp2:
000d58 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G103:
                 ; .FSTART _put_buff_G103
000d59 93ba      	ST   -Y,R27
000d5a 93aa      	ST   -Y,R26
000d5b 931a      	ST   -Y,R17
000d5c 930a      	ST   -Y,R16
000d5d 81aa      	LDD  R26,Y+2
000d5e 81bb      	LDD  R27,Y+2+1
000d5f 9612      	ADIW R26,2
000d60 940e 123b 	CALL __GETW1P
000d62 9730      	SBIW R30,0
000d63 f159      	BREQ _0x2060010
000d64 81aa      	LDD  R26,Y+2
000d65 81bb      	LDD  R27,Y+2+1
000d66 9614      	ADIW R26,4
000d67 940e 123b 	CALL __GETW1P
000d69 018f      	MOVW R16,R30
000d6a 9730      	SBIW R30,0
000d6b f061      	BREQ _0x2060012
                +
000d6c 3002     +CPI R16 , LOW ( 2 )
000d6d e0e0     +LDI R30 , HIGH ( 2 )
000d6e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000d6f f098      	BRLO _0x2060013
000d70 01f8      	MOVW R30,R16
000d71 9731      	SBIW R30,1
000d72 018f      	MOVW R16,R30
                +
000d73 81aa     +LDD R26 , Y + 2
000d74 81bb     +LDD R27 , Y + 2 + 1
000d75 9614     +ADIW R26 , 4
000d76 93ed     +ST X + , R30
000d77 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2060012:
000d78 81aa      	LDD  R26,Y+2
000d79 81bb      	LDD  R27,Y+2+1
000d7a 9612      	ADIW R26,2
000d7b 91ed      	LD   R30,X+
000d7c 91fd      	LD   R31,X+
000d7d 9631      	ADIW R30,1
000d7e 93fe      	ST   -X,R31
000d7f 93ee      	ST   -X,R30
000d80 9731      	SBIW R30,1
000d81 81ac      	LDD  R26,Y+4
000d82 83a0      	STD  Z+0,R26
                 _0x2060013:
000d83 81aa      	LDD  R26,Y+2
000d84 81bb      	LDD  R27,Y+2+1
000d85 940e 123b 	CALL __GETW1P
000d87 23ff      	TST  R31
000d88 f02a      	BRMI _0x2060014
000d89 91ed      	LD   R30,X+
000d8a 91fd      	LD   R31,X+
000d8b 9631      	ADIW R30,1
000d8c 93fe      	ST   -X,R31
000d8d 93ee      	ST   -X,R30
                 _0x2060014:
000d8e c006      	RJMP _0x2060015
                 _0x2060010:
000d8f 81aa      	LDD  R26,Y+2
000d90 81bb      	LDD  R27,Y+2+1
000d91 efef      	LDI  R30,LOW(65535)
000d92 efff      	LDI  R31,HIGH(65535)
000d93 93ed      	ST   X+,R30
000d94 93fc      	ST   X,R31
                 _0x2060015:
000d95 8119      	LDD  R17,Y+1
000d96 8108      	LDD  R16,Y+0
                 _0x20C0002:
000d97 9625      	ADIW R28,5
000d98 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
000d99 93ba      	ST   -Y,R27
000d9a 93aa      	ST   -Y,R26
000d9b 9726      	SBIW R28,6
000d9c 940e 1257 	CALL __SAVELOCR6
000d9e e010      	LDI  R17,0
000d9f 85ac      	LDD  R26,Y+12
000da0 85bd      	LDD  R27,Y+12+1
000da1 e0e0      	LDI  R30,LOW(0)
000da2 e0f0      	LDI  R31,HIGH(0)
000da3 93ed      	ST   X+,R30
000da4 93fc      	ST   X,R31
                 _0x2060016:
000da5 89ea      	LDD  R30,Y+18
000da6 89fb      	LDD  R31,Y+18+1
000da7 9631      	ADIW R30,1
000da8 8bea      	STD  Y+18,R30
000da9 8bfb      	STD  Y+18+1,R31
000daa 9731      	SBIW R30,1
000dab 91e4      	LPM  R30,Z
000dac 2f2e      	MOV  R18,R30
000dad 30e0      	CPI  R30,0
000dae f409      	BRNE PC+2
000daf c115      	RJMP _0x2060018
000db0 2fe1      	MOV  R30,R17
000db1 30e0      	CPI  R30,0
000db2 f439      	BRNE _0x206001C
000db3 3225      	CPI  R18,37
000db4 f411      	BRNE _0x206001D
000db5 e011      	LDI  R17,LOW(1)
000db6 c002      	RJMP _0x206001E
                 _0x206001D:
000db7 940e 1047 	CALL SUBOPT_0x31
                 _0x206001E:
000db9 c10a      	RJMP _0x206001B
                 _0x206001C:
000dba 30e1      	CPI  R30,LOW(0x1)
000dbb f4a9      	BRNE _0x206001F
000dbc 3225      	CPI  R18,37
000dbd f419      	BRNE _0x2060020
000dbe 940e 1047 	CALL SUBOPT_0x31
000dc0 c102      	RJMP _0x20600CC
                 _0x2060020:
000dc1 e012      	LDI  R17,LOW(2)
000dc2 e040      	LDI  R20,LOW(0)
000dc3 e000      	LDI  R16,LOW(0)
000dc4 322d      	CPI  R18,45
000dc5 f411      	BRNE _0x2060021
000dc6 e001      	LDI  R16,LOW(1)
000dc7 c0fc      	RJMP _0x206001B
                 _0x2060021:
000dc8 322b      	CPI  R18,43
000dc9 f411      	BRNE _0x2060022
000dca e24b      	LDI  R20,LOW(43)
000dcb c0f8      	RJMP _0x206001B
                 _0x2060022:
000dcc 3220      	CPI  R18,32
000dcd f411      	BRNE _0x2060023
000dce e240      	LDI  R20,LOW(32)
000dcf c0f4      	RJMP _0x206001B
                 _0x2060023:
000dd0 c002      	RJMP _0x2060024
                 _0x206001F:
000dd1 30e2      	CPI  R30,LOW(0x2)
000dd2 f439      	BRNE _0x2060025
                 _0x2060024:
000dd3 e050      	LDI  R21,LOW(0)
000dd4 e013      	LDI  R17,LOW(3)
000dd5 3320      	CPI  R18,48
000dd6 f411      	BRNE _0x2060026
000dd7 6800      	ORI  R16,LOW(128)
000dd8 c0eb      	RJMP _0x206001B
                 _0x2060026:
000dd9 c003      	RJMP _0x2060027
                 _0x2060025:
000dda 30e3      	CPI  R30,LOW(0x3)
000ddb f009      	BREQ PC+2
000ddc c0e7      	RJMP _0x206001B
                 _0x2060027:
000ddd 3320      	CPI  R18,48
000dde f010      	BRLO _0x206002A
000ddf 332a      	CPI  R18,58
000de0 f008      	BRLO _0x206002B
                 _0x206002A:
000de1 c007      	RJMP _0x2060029
                 _0x206002B:
000de2 e0aa      	LDI  R26,LOW(10)
000de3 9f5a      	MUL  R21,R26
000de4 2d50      	MOV  R21,R0
000de5 2fe2      	MOV  R30,R18
000de6 53e0      	SUBI R30,LOW(48)
000de7 0f5e      	ADD  R21,R30
000de8 c0db      	RJMP _0x206001B
                 _0x2060029:
000de9 2fe2      	MOV  R30,R18
000dea 36e3      	CPI  R30,LOW(0x63)
000deb f449      	BRNE _0x206002F
000dec 940e 104e 	CALL SUBOPT_0x32
000dee 89e8      	LDD  R30,Y+16
000def 89f9      	LDD  R31,Y+16+1
000df0 81a4      	LDD  R26,Z+4
000df1 93aa      	ST   -Y,R26
000df2 940e 1054 	CALL SUBOPT_0x33
000df4 c0ce      	RJMP _0x2060030
                 _0x206002F:
000df5 37e3      	CPI  R30,LOW(0x73)
000df6 f441      	BRNE _0x2060032
000df7 940e 104e 	CALL SUBOPT_0x32
000df9 940e 105a 	CALL SUBOPT_0x34
000dfb 940e 0d27 	CALL _strlen
000dfd 2f1e      	MOV  R17,R30
000dfe c00a      	RJMP _0x2060033
                 _0x2060032:
000dff 37e0      	CPI  R30,LOW(0x70)
000e00 f461      	BRNE _0x2060035
000e01 940e 104e 	CALL SUBOPT_0x32
000e03 940e 105a 	CALL SUBOPT_0x34
000e05 940e 0d33 	CALL _strlenf
000e07 2f1e      	MOV  R17,R30
000e08 6008      	ORI  R16,LOW(8)
                 _0x2060033:
000e09 6002      	ORI  R16,LOW(2)
000e0a 770f      	ANDI R16,LOW(127)
000e0b e030      	LDI  R19,LOW(0)
000e0c c034      	RJMP _0x2060036
                 _0x2060035:
000e0d 36e4      	CPI  R30,LOW(0x64)
000e0e f011      	BREQ _0x2060039
000e0f 36e9      	CPI  R30,LOW(0x69)
000e10 f411      	BRNE _0x206003A
                 _0x2060039:
000e11 6004      	ORI  R16,LOW(4)
000e12 c002      	RJMP _0x206003B
                 _0x206003A:
000e13 37e5      	CPI  R30,LOW(0x75)
000e14 f431      	BRNE _0x206003C
                 _0x206003B:
000e15 e5e4      	LDI  R30,LOW(_tbl10_G103*2)
000e16 e0f0      	LDI  R31,HIGH(_tbl10_G103*2)
000e17 83ee      	STD  Y+6,R30
000e18 83ff      	STD  Y+6+1,R31
000e19 e015      	LDI  R17,LOW(5)
000e1a c00c      	RJMP _0x206003D
                 _0x206003C:
000e1b 35e8      	CPI  R30,LOW(0x58)
000e1c f411      	BRNE _0x206003F
000e1d 6008      	ORI  R16,LOW(8)
000e1e c003      	RJMP _0x2060040
                 _0x206003F:
000e1f 37e8      	CPI  R30,LOW(0x78)
000e20 f009      	BREQ PC+2
000e21 c0a1      	RJMP _0x2060071
                 _0x2060040:
000e22 e5ee      	LDI  R30,LOW(_tbl16_G103*2)
000e23 e0f0      	LDI  R31,HIGH(_tbl16_G103*2)
000e24 83ee      	STD  Y+6,R30
000e25 83ff      	STD  Y+6+1,R31
000e26 e014      	LDI  R17,LOW(4)
                 _0x206003D:
000e27 ff02      	SBRS R16,2
000e28 c014      	RJMP _0x2060042
000e29 940e 104e 	CALL SUBOPT_0x32
000e2b 940e 1064 	CALL SUBOPT_0x35
000e2d 85ab      	LDD  R26,Y+11
000e2e 23aa      	TST  R26
000e2f f43a      	BRPL _0x2060043
000e30 85ea      	LDD  R30,Y+10
000e31 85fb      	LDD  R31,Y+10+1
000e32 940e 11fd 	CALL __ANEGW1
000e34 87ea      	STD  Y+10,R30
000e35 87fb      	STD  Y+10+1,R31
000e36 e24d      	LDI  R20,LOW(45)
                 _0x2060043:
000e37 3040      	CPI  R20,0
000e38 f011      	BREQ _0x2060044
000e39 5f1f      	SUBI R17,-LOW(1)
000e3a c001      	RJMP _0x2060045
                 _0x2060044:
000e3b 7f0b      	ANDI R16,LOW(251)
                 _0x2060045:
000e3c c004      	RJMP _0x2060046
                 _0x2060042:
000e3d 940e 104e 	CALL SUBOPT_0x32
000e3f 940e 1064 	CALL SUBOPT_0x35
                 _0x2060046:
                 _0x2060036:
000e41 fd00      	SBRC R16,0
000e42 c011      	RJMP _0x2060047
                 _0x2060048:
000e43 1715      	CP   R17,R21
000e44 f478      	BRSH _0x206004A
000e45 ff07      	SBRS R16,7
000e46 c008      	RJMP _0x206004B
000e47 ff02      	SBRS R16,2
000e48 c004      	RJMP _0x206004C
000e49 7f0b      	ANDI R16,LOW(251)
000e4a 2f24      	MOV  R18,R20
000e4b 5011      	SUBI R17,LOW(1)
000e4c c001      	RJMP _0x206004D
                 _0x206004C:
000e4d e320      	LDI  R18,LOW(48)
                 _0x206004D:
000e4e c001      	RJMP _0x206004E
                 _0x206004B:
000e4f e220      	LDI  R18,LOW(32)
                 _0x206004E:
000e50 940e 1047 	CALL SUBOPT_0x31
000e52 5051      	SUBI R21,LOW(1)
000e53 cfef      	RJMP _0x2060048
                 _0x206004A:
                 _0x2060047:
000e54 2f31      	MOV  R19,R17
000e55 ff01      	SBRS R16,1
000e56 c017      	RJMP _0x206004F
                 _0x2060050:
000e57 3030      	CPI  R19,0
000e58 f0a1      	BREQ _0x2060052
000e59 ff03      	SBRS R16,3
000e5a c006      	RJMP _0x2060053
000e5b 81ee      	LDD  R30,Y+6
000e5c 81ff      	LDD  R31,Y+6+1
000e5d 9125      	LPM  R18,Z+
000e5e 83ee      	STD  Y+6,R30
000e5f 83ff      	STD  Y+6+1,R31
000e60 c005      	RJMP _0x2060054
                 _0x2060053:
000e61 81ae      	LDD  R26,Y+6
000e62 81bf      	LDD  R27,Y+6+1
000e63 912d      	LD   R18,X+
000e64 83ae      	STD  Y+6,R26
000e65 83bf      	STD  Y+6+1,R27
                 _0x2060054:
000e66 940e 1047 	CALL SUBOPT_0x31
000e68 3050      	CPI  R21,0
000e69 f009      	BREQ _0x2060055
000e6a 5051      	SUBI R21,LOW(1)
                 _0x2060055:
000e6b 5031      	SUBI R19,LOW(1)
000e6c cfea      	RJMP _0x2060050
                 _0x2060052:
000e6d c04b      	RJMP _0x2060056
                 _0x206004F:
                 _0x2060058:
000e6e e320      	LDI  R18,LOW(48)
000e6f 81ee      	LDD  R30,Y+6
000e70 81ff      	LDD  R31,Y+6+1
000e71 940e 123f 	CALL __GETW1PF
000e73 87e8      	STD  Y+8,R30
000e74 87f9      	STD  Y+8+1,R31
000e75 81ee      	LDD  R30,Y+6
000e76 81ff      	LDD  R31,Y+6+1
000e77 9632      	ADIW R30,2
000e78 83ee      	STD  Y+6,R30
000e79 83ff      	STD  Y+6+1,R31
                 _0x206005A:
000e7a 85e8      	LDD  R30,Y+8
000e7b 85f9      	LDD  R31,Y+8+1
000e7c 85aa      	LDD  R26,Y+10
000e7d 85bb      	LDD  R27,Y+10+1
000e7e 17ae      	CP   R26,R30
000e7f 07bf      	CPC  R27,R31
000e80 f050      	BRLO _0x206005C
000e81 5f2f      	SUBI R18,-LOW(1)
000e82 85a8      	LDD  R26,Y+8
000e83 85b9      	LDD  R27,Y+8+1
000e84 85ea      	LDD  R30,Y+10
000e85 85fb      	LDD  R31,Y+10+1
000e86 1bea      	SUB  R30,R26
000e87 0bfb      	SBC  R31,R27
000e88 87ea      	STD  Y+10,R30
000e89 87fb      	STD  Y+10+1,R31
000e8a cfef      	RJMP _0x206005A
                 _0x206005C:
000e8b 332a      	CPI  R18,58
000e8c f028      	BRLO _0x206005D
000e8d ff03      	SBRS R16,3
000e8e c002      	RJMP _0x206005E
000e8f 5f29      	SUBI R18,-LOW(7)
000e90 c001      	RJMP _0x206005F
                 _0x206005E:
000e91 5d29      	SUBI R18,-LOW(39)
                 _0x206005F:
                 _0x206005D:
000e92 fd04      	SBRC R16,4
000e93 c01a      	RJMP _0x2060061
000e94 3321      	CPI  R18,49
000e95 f420      	BRSH _0x2060063
000e96 85a8      	LDD  R26,Y+8
000e97 85b9      	LDD  R27,Y+8+1
000e98 9711      	SBIW R26,1
000e99 f409      	BRNE _0x2060062
                 _0x2060063:
000e9a c009      	RJMP _0x20600CD
                 _0x2060062:
000e9b 1753      	CP   R21,R19
000e9c f010      	BRLO _0x2060067
000e9d ff00      	SBRS R16,0
000e9e c001      	RJMP _0x2060068
                 _0x2060067:
000e9f c013      	RJMP _0x2060066
                 _0x2060068:
000ea0 e220      	LDI  R18,LOW(32)
000ea1 ff07      	SBRS R16,7
000ea2 c00b      	RJMP _0x2060069
000ea3 e320      	LDI  R18,LOW(48)
                 _0x20600CD:
000ea4 6100      	ORI  R16,LOW(16)
000ea5 ff02      	SBRS R16,2
000ea6 c007      	RJMP _0x206006A
000ea7 7f0b      	ANDI R16,LOW(251)
000ea8 934a      	ST   -Y,R20
000ea9 940e 1054 	CALL SUBOPT_0x33
000eab 3050      	CPI  R21,0
000eac f009      	BREQ _0x206006B
000ead 5051      	SUBI R21,LOW(1)
                 _0x206006B:
                 _0x206006A:
                 _0x2060069:
                 _0x2060061:
000eae 940e 1047 	CALL SUBOPT_0x31
000eb0 3050      	CPI  R21,0
000eb1 f009      	BREQ _0x206006C
000eb2 5051      	SUBI R21,LOW(1)
                 _0x206006C:
                 _0x2060066:
000eb3 5031      	SUBI R19,LOW(1)
000eb4 85a8      	LDD  R26,Y+8
000eb5 85b9      	LDD  R27,Y+8+1
000eb6 9712      	SBIW R26,2
000eb7 f008      	BRLO _0x2060059
000eb8 cfb5      	RJMP _0x2060058
                 _0x2060059:
                 _0x2060056:
000eb9 ff00      	SBRS R16,0
000eba c008      	RJMP _0x206006D
                 _0x206006E:
000ebb 3050      	CPI  R21,0
000ebc f031      	BREQ _0x2060070
000ebd 5051      	SUBI R21,LOW(1)
000ebe e2e0      	LDI  R30,LOW(32)
000ebf 93ea      	ST   -Y,R30
000ec0 940e 1054 	CALL SUBOPT_0x33
000ec2 cff8      	RJMP _0x206006E
                 _0x2060070:
                 _0x206006D:
                 _0x2060071:
                 _0x2060030:
                 _0x20600CC:
000ec3 e010      	LDI  R17,LOW(0)
                 _0x206001B:
000ec4 cee0      	RJMP _0x2060016
                 _0x2060018:
000ec5 85ac      	LDD  R26,Y+12
000ec6 85bd      	LDD  R27,Y+12+1
000ec7 940e 123b 	CALL __GETW1P
000ec9 940e 125e 	CALL __LOADLOCR6
000ecb 9664      	ADIW R28,20
000ecc 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000ecd 92ff      	PUSH R15
000ece 2ef8      	MOV  R15,R24
000ecf 9726      	SBIW R28,6
000ed0 940e 1259 	CALL __SAVELOCR4
000ed2 940e 106c 	CALL SUBOPT_0x36
000ed4 9730      	SBIW R30,0
000ed5 f419      	BRNE _0x2060072
000ed6 efef      	LDI  R30,LOW(65535)
000ed7 efff      	LDI  R31,HIGH(65535)
000ed8 c023      	RJMP _0x20C0001
                 _0x2060072:
000ed9 01de      	MOVW R26,R28
000eda 9616      	ADIW R26,6
000edb 940e 11f9 	CALL __ADDW2R15
000edd 018d      	MOVW R16,R26
000ede 940e 106c 	CALL SUBOPT_0x36
000ee0 83ee      	STD  Y+6,R30
000ee1 83ff      	STD  Y+6+1,R31
000ee2 e0e0      	LDI  R30,LOW(0)
000ee3 87e8      	STD  Y+8,R30
000ee4 87e9      	STD  Y+8+1,R30
000ee5 01de      	MOVW R26,R28
000ee6 961a      	ADIW R26,10
000ee7 940e 11f9 	CALL __ADDW2R15
000ee9 940e 123b 	CALL __GETW1P
000eeb 93fa      	ST   -Y,R31
000eec 93ea      	ST   -Y,R30
000eed 931a      	ST   -Y,R17
000eee 930a      	ST   -Y,R16
000eef e5e9      	LDI  R30,LOW(_put_buff_G103)
000ef0 e0fd      	LDI  R31,HIGH(_put_buff_G103)
000ef1 93fa      	ST   -Y,R31
000ef2 93ea      	ST   -Y,R30
000ef3 01de      	MOVW R26,R28
000ef4 961a      	ADIW R26,10
000ef5 dea3      	RCALL __print_G103
000ef6 019f      	MOVW R18,R30
000ef7 81ae      	LDD  R26,Y+6
000ef8 81bf      	LDD  R27,Y+6+1
000ef9 e0e0      	LDI  R30,LOW(0)
000efa 93ec      	ST   X,R30
000efb 01f9      	MOVW R30,R18
                 _0x20C0001:
000efc 940e 1260 	CALL __LOADLOCR4
000efe 962a      	ADIW R28,10
000eff 90ff      	POP  R15
000f00 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _keypad:
0007d8           	.BYTE 0x10
                 _buffer:
0007e8           	.BYTE 0x20
                 _days:
000808           	.BYTE 0xE
                 _time:
000816           	.BYTE 0x14
                 _previous_count_S0000015000:
00082a           	.BYTE 0x2
                 __seed_G100:
00082c           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 38 TIMES, CODE SIZE REDUCTION:219 WORDS
                 SUBOPT_0x0:
000f01 e0a1      	LDI  R26,LOW(1)
000f02 940e 09db 	CALL _lcdCommand
000f04 e0e1      	LDI  R30,LOW(1)
000f05 93ea      	ST   -Y,R30
000f06 e0a1      	LDI  R26,LOW(1)
000f07 940c 0a0b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 26 TIMES, CODE SIZE REDUCTION:122 WORDS
                 SUBOPT_0x1:
000f09 940e 0a22 	CALL _lcd_print
000f0b e0e1      	LDI  R30,LOW(1)
000f0c 93ea      	ST   -Y,R30
000f0d e0a2      	LDI  R26,LOW(2)
000f0e 940c 0a0b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
000f10 940e 0a22 	CALL _lcd_print
000f12 eda0      	LDI  R26,LOW(2000)
000f13 e0b7      	LDI  R27,HIGH(2000)
000f14 940e 1073 	CALL _delay_ms
000f16 2455      	CLR  R5
000f17 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x3:
000f18 e0af      	LDI  R26,LOW(15)
000f19 940e 09db 	CALL _lcdCommand
                +
000f1b e880     +LDI R24 , LOW ( 3200 )
000f1c e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000f1d 9701     +SBIW R24 , 1
000f1e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000f1f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
000f20 e0ac      	LDI  R26,LOW(12)
000f21 940e 09db 	CALL _lcdCommand
                +
000f23 e880     +LDI R24 , LOW ( 3200 )
000f24 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000f25 9701     +SBIW R24 , 1
000f26 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000f27 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:173 WORDS
                 SUBOPT_0x5:
000f28 eee8      	LDI  R30,LOW(_buffer)
000f29 e0f7      	LDI  R31,HIGH(_buffer)
000f2a 93fa      	ST   -Y,R31
000f2b 93ea      	ST   -Y,R30
000f2c e0e0      	LDI  R30,LOW(0)
000f2d 93ea      	ST   -Y,R30
000f2e e2a0      	LDI  R26,LOW(32)
000f2f e0b0      	LDI  R27,0
000f30 940c 0d17 	JMP  _memset
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x6:
                +
000f32 e880     +LDI R24 , LOW ( 3200 )
000f33 e09c     +LDI R25 , HIGH ( 3200 )
                +__DELAY_USW_LOOP :
000f34 9701     +SBIW R24 , 1
000f35 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 3200
000f36 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x7:
000f37 eea8      	LDI  R26,LOW(_buffer)
000f38 e0b7      	LDI  R27,HIGH(_buffer)
000f39 940c 0d27 	JMP  _strlen
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000f3b eee8      	LDI  R30,LOW(_buffer)
000f3c e0f7      	LDI  R31,HIGH(_buffer)
000f3d 93fa      	ST   -Y,R31
000f3e 93ea      	ST   -Y,R30
000f3f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000f40 93fa      	ST   -Y,R31
000f41 93ea      	ST   -Y,R30
000f42 e0a2      	LDI  R26,LOW(2)
000f43 940e 0d40 	CALL _strncmp
000f45 30e0      	CPI  R30,0
000f46 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
000f47 eda0      	LDI  R26,LOW(2000)
000f48 e0b7      	LDI  R27,HIGH(2000)
000f49 940e 1073 	CALL _delay_ms
000f4b 9897      	CBI  0x12,7
000f4c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000f4d 940e 0a22 	CALL _lcd_print
000f4f cff7      	RJMP SUBOPT_0xA
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
000f50 e0a0      	LDI  R26,LOW(0)
000f51 e0b0      	LDI  R27,0
000f52 940e 0ade 	CALL _read_byte_from_eeprom
000f54 2f5e      	MOV  R21,R30
000f55 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xD:
000f56 e0f0      	LDI  R31,0
000f57 9631      	ADIW R30,1
000f58 940e 1209 	CALL __LSLW3
000f5a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xE:
000f5b 93fa      	ST   -Y,R31
000f5c 93ea      	ST   -Y,R30
000f5d eea8      	LDI  R26,LOW(_buffer)
000f5e e0b7      	LDI  R27,HIGH(_buffer)
000f5f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000f60 e0e0      	LDI  R30,LOW(0)
000f61 e0f0      	LDI  R31,HIGH(0)
000f62 93fa      	ST   -Y,R31
000f63 93ea      	ST   -Y,R30
000f64 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
000f65 eea8      	LDI  R26,LOW(_buffer)
000f66 e0b7      	LDI  R27,HIGH(_buffer)
000f67 940c 0a22 	JMP  _lcd_print
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000f69 eea8      	LDI  R26,LOW(1000)
000f6a e0b3      	LDI  R27,HIGH(1000)
000f6b 940c 1073 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x12:
000f6d 01f8      	MOVW R30,R16
000f6e 9631      	ADIW R30,1
000f6f 940e 1209 	CALL __LSLW3
000f71 0fe2      	ADD  R30,R18
000f72 1ff3      	ADC  R31,R19
000f73 01df      	MOVW R26,R30
000f74 940c 0ade 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x13:
000f76 e0ad      	LDI  R26,LOW(13)
000f77 940e 0af5 	CALL _USART_Transmit
000f79 e0ad      	LDI  R26,LOW(13)
000f7a 940e 0af5 	CALL _USART_Transmit
000f7c efa4      	LDI  R26,LOW(500)
000f7d e0b1      	LDI  R27,HIGH(500)
000f7e 940c 1073 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000f80 2de9      	MOV  R30,R9
000f81 e0f0      	LDI  R31,0
000f82 cfd8      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
000f83 01fe      	MOVW R30,R28
000f84 9634      	ADIW R30,4
000f85 93fa      	ST   -Y,R31
000f86 93ea      	ST   -Y,R30
000f87 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x16:
000f88 27ff      	CLR  R31
000f89 2766      	CLR  R22
000f8a 2777      	CLR  R23
000f8b 940e 1252 	CALL __PUTPARD1
000f8d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
000f8e 93ea      	ST   -Y,R30
000f8f e0a1      	LDI  R26,LOW(1)
000f90 940c 0a0b 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
000f92 bbe8      	OUT  0x18,R30
000f93 b3e6      	IN   R30,0x16
000f94 70ef      	ANDI R30,LOW(0xF)
000f95 2f1e      	MOV  R17,R30
000f96 301f      	CPI  R17,15
000f97 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 49 TIMES, CODE SIZE REDUCTION:429 WORDS
                 SUBOPT_0x19:
000f98 2fe0      	MOV  R30,R16
000f99 eda8      	LDI  R26,LOW(_keypad)
000f9a e0b7      	LDI  R27,HIGH(_keypad)
000f9b e0f0      	LDI  R31,0
000f9c 940e 120b 	CALL __LSLW2
000f9e 0fae      	ADD  R26,R30
000f9f 1fbf      	ADC  R27,R31
000fa0 27ee      	CLR  R30
000fa1 0fa3      	ADD  R26,R19
000fa2 1fbe      	ADC  R27,R30
000fa3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1A:
000fa4 940e 0a22 	CALL _lcd_print
000fa6 eda0      	LDI  R26,LOW(2000)
000fa7 e0b7      	LDI  R27,HIGH(2000)
000fa8 940c 1073 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1B:
000faa 51e8      	SUBI R30,LOW(-_buffer)
000fab 4ff8      	SBCI R31,HIGH(-_buffer)
000fac 010f      	MOVW R0,R30
000fad cfea      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1C:
000fae 91ec      	LD   R30,X
000faf 01d0      	MOVW R26,R0
000fb0 93ec      	ST   X,R30
000fb1 cf85      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1D:
                +
000fb2 51e7     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000fb3 4ff8     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000fb4 e0a0      	LDI  R26,LOW(0)
000fb5 83a0      	STD  Z+0,R26
000fb6 cfe1      	RJMP SUBOPT_0x19
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x1E:
000fb7 2fe5      	MOV  R30,R21
000fb8 e0f0      	LDI  R31,0
000fb9 9731      	SBIW R30,1
000fba 51e8      	SUBI R30,LOW(-_buffer)
000fbb 4ff8      	SBCI R31,HIGH(-_buffer)
000fbc e0a0      	LDI  R26,LOW(0)
000fbd 83a0      	STD  Z+0,R26
000fbe e1a0      	LDI  R26,LOW(16)
000fbf 940c 09db 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1F:
000fc1 940e 0a22 	CALL _lcd_print
000fc3 e1a0      	LDI  R26,LOW(16)
000fc4 940c 09db 	JMP  _lcdCommand
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
000fc6 eca0      	LDI  R26,LOW(192)
000fc7 940e 09db 	CALL _lcdCommand
000fc9 e0e0      	LDI  R30,LOW(0)
000fca 83ee      	STD  Y+6,R30
000fcb 83ef      	STD  Y+6+1,R30
000fcc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
000fcd 81ae      	LDD  R26,Y+6
000fce 81bf      	LDD  R27,Y+6+1
000fcf 17ae      	CP   R26,R30
000fd0 07bf      	CPC  R27,R31
000fd1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x22:
000fd2 81ee      	LDD  R30,Y+6
000fd3 81ff      	LDD  R31,Y+6+1
000fd4 9631      	ADIW R30,1
000fd5 83ee      	STD  Y+6,R30
000fd6 83ff      	STD  Y+6+1,R31
000fd7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x23:
000fd8 eca0      	LDI  R26,LOW(192)
000fd9 940e 09db 	CALL _lcdCommand
000fdb cf4c      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
000fdc e0a0      	LDI  R26,LOW(0)
000fdd e0b0      	LDI  R27,0
000fde 940c 0ade 	JMP  _read_byte_from_eeprom
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
000fe0 9721      	SBIW R28,1
000fe1 940e 0b11 	CALL _search_student_code
000fe3 83e8      	ST   Y,R30
000fe4 81a8      	LD   R26,Y
000fe5 30a1      	CPI  R26,LOW(0x1)
000fe6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x26:
000fe7 eda0      	LDI  R26,LOW(2000)
000fe8 e0b7      	LDI  R27,HIGH(2000)
000fe9 940c 1073 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x27:
000feb 93aa      	ST   -Y,R26
000fec b3eb      	IN   R30,0x1B
000fed 70ef      	ANDI R30,LOW(0xF)
000fee 2fae      	MOV  R26,R30
000fef 81e8      	LD   R30,Y
000ff0 7fe0      	ANDI R30,LOW(0xF0)
000ff1 2bea      	OR   R30,R26
000ff2 bbeb      	OUT  0x1B,R30
000ff3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x28:
000ff4 98d9      	CBI  0x1B,1
000ff5 9ada      	SBI  0x1B,2
                +
000ff6 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
000ff7 958a     +DEC R24
000ff8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
000ff9 98da      	CBI  0x1B,2
000ffa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x29:
000ffb b3eb      	IN   R30,0x1B
000ffc 70ef      	ANDI R30,LOW(0xF)
000ffd 2fae      	MOV  R26,R30
000ffe 81e8      	LD   R30,Y
000fff 95e2      	SWAP R30
001000 7fe0      	ANDI R30,0xF0
001001 2bea      	OR   R30,R26
001002 bbeb      	OUT  0x1B,R30
001003 9ada      	SBI  0x1B,2
                +
001004 e28b     +LDI R24 , LOW ( 43 )
                +__DELAY_USB_LOOP :
001005 958a     +DEC R24
001006 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 43
001007 98da      	CBI  0x1B,2
001008 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2A:
001009 940e 09db 	CALL _lcdCommand
00100b cf26      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2B:
00100c 81ea      	LDD  R30,Y+2
00100d 70f0      	ANDI R31,HIGH(0x0)
00100e 70e3      	ANDI R30,LOW(0x3)
00100f bbef      	OUT  0x1F,R30
001010 81e9      	LDD  R30,Y+1
001011 bbee      	OUT  0x1E,R30
001012 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x2C:
                +
001013 81ac     +LDD R26 , Y + 4
001014 81bd     +LDD R27 , Y + 4 + 1
001015 818e     +LDD R24 , Y + 4 + 2
001016 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
                +
001017 3ca0     +CPI R26 , LOW ( 0x927C0 )
001018 e2e7     +LDI R30 , HIGH ( 0x927C0 )
001019 07be     +CPC R27 , R30
00101a e0e9     +LDI R30 , BYTE3 ( 0x927C0 )
00101b 078e     +CPC R24 , R30
00101c e0e0     +LDI R30 , BYTE4 ( 0x927C0 )
00101d 079e     +CPC R25 , R30
                 	__CPD2N 0x927C0
00101e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2D:
                +
00101f 81ec     +LDD R30 , Y + 4
001020 81fd     +LDD R31 , Y + 4 + 1
001021 816e     +LDD R22 , Y + 4 + 2
001022 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
                +
001023 5fef     +SUBI R30 , LOW ( - 1 )
001024 4fff     +SBCI R31 , HIGH ( - 1 )
001025 4f6f     +SBCI R22 , BYTE3 ( - 1 )
001026 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
                +
001027 83ec     +STD Y + 4 , R30
001028 83fd     +STD Y + 4 + 1 , R31
001029 836e     +STD Y + 4 + 2 , R22
00102a 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
00102b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2E:
00102c 940e 0c85 	CALL _I2C_start
00102e eda0      	LDI  R26,LOW(208)
00102f 940c 0c8b 	JMP  _I2C_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2F:
001031 940e 0c8b 	CALL _I2C_write
001033 940c 0ca2 	JMP  _I2C_stop
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x30:
001035 940e 0c85 	CALL _I2C_start
001037 eda1      	LDI  R26,LOW(209)
001038 940e 0c8b 	CALL _I2C_write
00103a e0a1      	LDI  R26,LOW(1)
00103b 940e 0c94 	CALL _I2C_read
00103d 81a8      	LD   R26,Y
00103e 81b9      	LDD  R27,Y+1
00103f 93ec      	ST   X,R30
001040 e0a1      	LDI  R26,LOW(1)
001041 940e 0c94 	CALL _I2C_read
001043 81aa      	LDD  R26,Y+2
001044 81bb      	LDD  R27,Y+2+1
001045 93ec      	ST   X,R30
001046 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x31:
001047 932a      	ST   -Y,R18
001048 85ad      	LDD  R26,Y+13
001049 85be      	LDD  R27,Y+13+1
00104a 85ef      	LDD  R30,Y+15
00104b 89f8      	LDD  R31,Y+15+1
00104c 9509      	ICALL
00104d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x32:
00104e 89e8      	LDD  R30,Y+16
00104f 89f9      	LDD  R31,Y+16+1
001050 9734      	SBIW R30,4
001051 8be8      	STD  Y+16,R30
001052 8bf9      	STD  Y+16+1,R31
001053 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x33:
001054 85ad      	LDD  R26,Y+13
001055 85be      	LDD  R27,Y+13+1
001056 85ef      	LDD  R30,Y+15
001057 89f8      	LDD  R31,Y+15+1
001058 9509      	ICALL
001059 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x34:
00105a 89a8      	LDD  R26,Y+16
00105b 89b9      	LDD  R27,Y+16+1
00105c 9614      	ADIW R26,4
00105d 940e 123b 	CALL __GETW1P
00105f 83ee      	STD  Y+6,R30
001060 83ff      	STD  Y+6+1,R31
001061 81ae      	LDD  R26,Y+6
001062 81bf      	LDD  R27,Y+6+1
001063 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x35:
001064 89a8      	LDD  R26,Y+16
001065 89b9      	LDD  R27,Y+16+1
001066 9614      	ADIW R26,4
001067 940e 123b 	CALL __GETW1P
001069 87ea      	STD  Y+10,R30
00106a 87fb      	STD  Y+10+1,R31
00106b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x36:
00106c 01de      	MOVW R26,R28
00106d 961c      	ADIW R26,12
00106e 940e 11f9 	CALL __ADDW2R15
001070 940e 123b 	CALL __GETW1P
001072 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
001073 9610      	adiw r26,0
001074 f039      	breq __delay_ms1
                 __delay_ms0:
001075 95a8      	wdr
                +
001076 ed80     +LDI R24 , LOW ( 0x7D0 )
001077 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
001078 9701     +SBIW R24 , 1
001079 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00107a 9711      	sbiw r26,1
00107b f7c9      	brne __delay_ms0
                 __delay_ms1:
00107c 9508      	ret
                 
                 __ROUND_REPACK:
00107d 2355      	TST  R21
00107e f442      	BRPL __REPACK
00107f 3850      	CPI  R21,0x80
001080 f411      	BRNE __ROUND_REPACK0
001081 ffe0      	SBRS R30,0
001082 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
001083 9631      	ADIW R30,1
001084 1f69      	ADC  R22,R25
001085 1f79      	ADC  R23,R25
001086 f06b      	BRVS __REPACK1
                 
                 __REPACK:
001087 e850      	LDI  R21,0x80
001088 2757      	EOR  R21,R23
001089 f411      	BRNE __REPACK0
00108a 935f      	PUSH R21
00108b c0c8      	RJMP __ZERORES
                 __REPACK0:
00108c 3f5f      	CPI  R21,0xFF
00108d f031      	BREQ __REPACK1
00108e 0f66      	LSL  R22
00108f 0c00      	LSL  R0
001090 9557      	ROR  R21
001091 9567      	ROR  R22
001092 2f75      	MOV  R23,R21
001093 9508      	RET
                 __REPACK1:
001094 935f      	PUSH R21
001095 2000      	TST  R0
001096 f00a      	BRMI __REPACK2
001097 c0c8      	RJMP __MAXRES
                 __REPACK2:
001098 c0c1      	RJMP __MINRES
                 
                 __UNPACK:
001099 e850      	LDI  R21,0x80
00109a 2e19      	MOV  R1,R25
00109b 2215      	AND  R1,R21
00109c 0f88      	LSL  R24
00109d 1f99      	ROL  R25
00109e 2795      	EOR  R25,R21
00109f 0f55      	LSL  R21
0010a0 9587      	ROR  R24
                 
                 __UNPACK1:
0010a1 e850      	LDI  R21,0x80
0010a2 2e07      	MOV  R0,R23
0010a3 2205      	AND  R0,R21
0010a4 0f66      	LSL  R22
0010a5 1f77      	ROL  R23
0010a6 2775      	EOR  R23,R21
0010a7 0f55      	LSL  R21
0010a8 9567      	ROR  R22
0010a9 9508      	RET
                 
                 __CFD1U:
0010aa 9468      	SET
0010ab c001      	RJMP __CFD1U0
                 __CFD1:
0010ac 94e8      	CLT
                 __CFD1U0:
0010ad 935f      	PUSH R21
0010ae dff2      	RCALL __UNPACK1
0010af 3870      	CPI  R23,0x80
0010b0 f018      	BRLO __CFD10
0010b1 3f7f      	CPI  R23,0xFF
0010b2 f408      	BRCC __CFD10
0010b3 c0a0      	RJMP __ZERORES
                 __CFD10:
0010b4 e156      	LDI  R21,22
0010b5 1b57      	SUB  R21,R23
0010b6 f4aa      	BRPL __CFD11
0010b7 9551      	NEG  R21
0010b8 3058      	CPI  R21,8
0010b9 f40e      	BRTC __CFD19
0010ba 3059      	CPI  R21,9
                 __CFD19:
0010bb f030      	BRLO __CFD17
0010bc efef      	SER  R30
0010bd efff      	SER  R31
0010be ef6f      	SER  R22
0010bf e77f      	LDI  R23,0x7F
0010c0 f977      	BLD  R23,7
0010c1 c01a      	RJMP __CFD15
                 __CFD17:
0010c2 2777      	CLR  R23
0010c3 2355      	TST  R21
0010c4 f0b9      	BREQ __CFD15
                 __CFD18:
0010c5 0fee      	LSL  R30
0010c6 1fff      	ROL  R31
0010c7 1f66      	ROL  R22
0010c8 1f77      	ROL  R23
0010c9 955a      	DEC  R21
0010ca f7d1      	BRNE __CFD18
0010cb c010      	RJMP __CFD15
                 __CFD11:
0010cc 2777      	CLR  R23
                 __CFD12:
0010cd 3058      	CPI  R21,8
0010ce f028      	BRLO __CFD13
0010cf 2fef      	MOV  R30,R31
0010d0 2ff6      	MOV  R31,R22
0010d1 2f67      	MOV  R22,R23
0010d2 5058      	SUBI R21,8
0010d3 cff9      	RJMP __CFD12
                 __CFD13:
0010d4 2355      	TST  R21
0010d5 f031      	BREQ __CFD15
                 __CFD14:
0010d6 9576      	LSR  R23
0010d7 9567      	ROR  R22
0010d8 95f7      	ROR  R31
0010d9 95e7      	ROR  R30
0010da 955a      	DEC  R21
0010db f7d1      	BRNE __CFD14
                 __CFD15:
0010dc 2000      	TST  R0
0010dd f40a      	BRPL __CFD16
0010de d122      	RCALL __ANEGD1
                 __CFD16:
0010df 915f      	POP  R21
0010e0 9508      	RET
                 
                 __CDF1U:
0010e1 9468      	SET
0010e2 c001      	RJMP __CDF1U0
                 __CDF1:
0010e3 94e8      	CLT
                 __CDF1U0:
0010e4 9730      	SBIW R30,0
0010e5 4060      	SBCI R22,0
0010e6 4070      	SBCI R23,0
0010e7 f0b1      	BREQ __CDF10
0010e8 2400      	CLR  R0
0010e9 f026      	BRTS __CDF11
0010ea 2377      	TST  R23
0010eb f412      	BRPL __CDF11
0010ec 9400      	COM  R0
0010ed d113      	RCALL __ANEGD1
                 __CDF11:
0010ee 2e17      	MOV  R1,R23
0010ef e17e      	LDI  R23,30
0010f0 2011      	TST  R1
                 __CDF12:
0010f1 f032      	BRMI __CDF13
0010f2 957a      	DEC  R23
0010f3 0fee      	LSL  R30
0010f4 1fff      	ROL  R31
0010f5 1f66      	ROL  R22
0010f6 1c11      	ROL  R1
0010f7 cff9      	RJMP __CDF12
                 __CDF13:
0010f8 2fef      	MOV  R30,R31
0010f9 2ff6      	MOV  R31,R22
0010fa 2d61      	MOV  R22,R1
0010fb 935f      	PUSH R21
0010fc df8a      	RCALL __REPACK
0010fd 915f      	POP  R21
                 __CDF10:
0010fe 9508      	RET
                 
                 __SWAPACC:
0010ff 934f      	PUSH R20
001100 01af      	MOVW R20,R30
001101 01fd      	MOVW R30,R26
001102 01da      	MOVW R26,R20
001103 01ab      	MOVW R20,R22
001104 01bc      	MOVW R22,R24
001105 01ca      	MOVW R24,R20
001106 2d40      	MOV  R20,R0
001107 2c01      	MOV  R0,R1
001108 2e14      	MOV  R1,R20
001109 914f      	POP  R20
00110a 9508      	RET
                 
                 __UADD12:
00110b 0fea      	ADD  R30,R26
00110c 1ffb      	ADC  R31,R27
00110d 1f68      	ADC  R22,R24
00110e 9508      	RET
                 
                 __NEGMAN1:
00110f 95e0      	COM  R30
001110 95f0      	COM  R31
001111 9560      	COM  R22
001112 5fef      	SUBI R30,-1
001113 4fff      	SBCI R31,-1
001114 4f6f      	SBCI R22,-1
001115 9508      	RET
                 
                 __ADDF12:
001116 935f      	PUSH R21
001117 df81      	RCALL __UNPACK
001118 3890      	CPI  R25,0x80
001119 f139      	BREQ __ADDF129
                 
                 __ADDF120:
00111a 3870      	CPI  R23,0x80
00111b f121      	BREQ __ADDF128
                 __ADDF121:
00111c 2f57      	MOV  R21,R23
00111d 1b59      	SUB  R21,R25
00111e f12b      	BRVS __ADDF1211
00111f f412      	BRPL __ADDF122
001120 dfde      	RCALL __SWAPACC
001121 cffa      	RJMP __ADDF121
                 __ADDF122:
001122 3158      	CPI  R21,24
001123 f018      	BRLO __ADDF123
001124 27aa      	CLR  R26
001125 27bb      	CLR  R27
001126 2788      	CLR  R24
                 __ADDF123:
001127 3058      	CPI  R21,8
001128 f028      	BRLO __ADDF124
001129 2fab      	MOV  R26,R27
00112a 2fb8      	MOV  R27,R24
00112b 2788      	CLR  R24
00112c 5058      	SUBI R21,8
00112d cff9      	RJMP __ADDF123
                 __ADDF124:
00112e 2355      	TST  R21
00112f f029      	BREQ __ADDF126
                 __ADDF125:
001130 9586      	LSR  R24
001131 95b7      	ROR  R27
001132 95a7      	ROR  R26
001133 955a      	DEC  R21
001134 f7d9      	BRNE __ADDF125
                 __ADDF126:
001135 2d50      	MOV  R21,R0
001136 2551      	EOR  R21,R1
001137 f072      	BRMI __ADDF127
001138 dfd2      	RCALL __UADD12
001139 f438      	BRCC __ADDF129
00113a 9567      	ROR  R22
00113b 95f7      	ROR  R31
00113c 95e7      	ROR  R30
00113d 9573      	INC  R23
00113e f413      	BRVC __ADDF129
00113f c020      	RJMP __MAXRES
                 __ADDF128:
001140 dfbe      	RCALL __SWAPACC
                 __ADDF129:
001141 df45      	RCALL __REPACK
001142 915f      	POP  R21
001143 9508      	RET
                 __ADDF1211:
001144 f7d8      	BRCC __ADDF128
001145 cffb      	RJMP __ADDF129
                 __ADDF127:
001146 1bea      	SUB  R30,R26
001147 0bfb      	SBC  R31,R27
001148 0b68      	SBC  R22,R24
001149 f051      	BREQ __ZERORES
00114a f410      	BRCC __ADDF1210
00114b 9400      	COM  R0
00114c dfc2      	RCALL __NEGMAN1
                 __ADDF1210:
00114d 2366      	TST  R22
00114e f392      	BRMI __ADDF129
00114f 0fee      	LSL  R30
001150 1fff      	ROL  R31
001151 1f66      	ROL  R22
001152 957a      	DEC  R23
001153 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
001154 27ee      	CLR  R30
001155 27ff      	CLR  R31
001156 2766      	CLR  R22
001157 2777      	CLR  R23
001158 915f      	POP  R21
001159 9508      	RET
                 
                 __MINRES:
00115a efef      	SER  R30
00115b efff      	SER  R31
00115c e76f      	LDI  R22,0x7F
00115d ef7f      	SER  R23
00115e 915f      	POP  R21
00115f 9508      	RET
                 
                 __MAXRES:
001160 efef      	SER  R30
001161 efff      	SER  R31
001162 e76f      	LDI  R22,0x7F
001163 e77f      	LDI  R23,0x7F
001164 915f      	POP  R21
001165 9508      	RET
                 
                 __MULF12:
001166 935f      	PUSH R21
001167 df31      	RCALL __UNPACK
001168 3870      	CPI  R23,0x80
001169 f351      	BREQ __ZERORES
00116a 3890      	CPI  R25,0x80
00116b f341      	BREQ __ZERORES
00116c 2401      	EOR  R0,R1
00116d 9408      	SEC
00116e 1f79      	ADC  R23,R25
00116f f423      	BRVC __MULF124
001170 f31c      	BRLT __ZERORES
                 __MULF125:
001171 2000      	TST  R0
001172 f33a      	BRMI __MINRES
001173 cfec      	RJMP __MAXRES
                 __MULF124:
001174 920f      	PUSH R0
001175 931f      	PUSH R17
001176 932f      	PUSH R18
001177 933f      	PUSH R19
001178 934f      	PUSH R20
001179 2711      	CLR  R17
00117a 2722      	CLR  R18
00117b 2799      	CLR  R25
00117c 9f68      	MUL  R22,R24
00117d 01a0      	MOVW R20,R0
00117e 9f8f      	MUL  R24,R31
00117f 2d30      	MOV  R19,R0
001180 0d41      	ADD  R20,R1
001181 1f59      	ADC  R21,R25
001182 9f6b      	MUL  R22,R27
001183 0d30      	ADD  R19,R0
001184 1d41      	ADC  R20,R1
001185 1f59      	ADC  R21,R25
001186 9f8e      	MUL  R24,R30
001187 d027      	RCALL __MULF126
001188 9fbf      	MUL  R27,R31
001189 d025      	RCALL __MULF126
00118a 9f6a      	MUL  R22,R26
00118b d023      	RCALL __MULF126
00118c 9fbe      	MUL  R27,R30
00118d d01d      	RCALL __MULF127
00118e 9faf      	MUL  R26,R31
00118f d01b      	RCALL __MULF127
001190 9fae      	MUL  R26,R30
001191 0d11      	ADD  R17,R1
001192 1f29      	ADC  R18,R25
001193 1f39      	ADC  R19,R25
001194 1f49      	ADC  R20,R25
001195 1f59      	ADC  R21,R25
001196 2fe3      	MOV  R30,R19
001197 2ff4      	MOV  R31,R20
001198 2f65      	MOV  R22,R21
001199 2f52      	MOV  R21,R18
00119a 914f      	POP  R20
00119b 913f      	POP  R19
00119c 912f      	POP  R18
00119d 911f      	POP  R17
00119e 900f      	POP  R0
00119f 2366      	TST  R22
0011a0 f02a      	BRMI __MULF122
0011a1 0f55      	LSL  R21
0011a2 1fee      	ROL  R30
0011a3 1fff      	ROL  R31
0011a4 1f66      	ROL  R22
0011a5 c002      	RJMP __MULF123
                 __MULF122:
0011a6 9573      	INC  R23
0011a7 f24b      	BRVS __MULF125
                 __MULF123:
0011a8 ded4      	RCALL __ROUND_REPACK
0011a9 915f      	POP  R21
0011aa 9508      	RET
                 
                 __MULF127:
0011ab 0d10      	ADD  R17,R0
0011ac 1d21      	ADC  R18,R1
0011ad 1f39      	ADC  R19,R25
0011ae c002      	RJMP __MULF128
                 __MULF126:
0011af 0d20      	ADD  R18,R0
0011b0 1d31      	ADC  R19,R1
                 __MULF128:
0011b1 1f49      	ADC  R20,R25
0011b2 1f59      	ADC  R21,R25
0011b3 9508      	RET
                 
                 __DIVF21:
0011b4 935f      	PUSH R21
0011b5 dee3      	RCALL __UNPACK
0011b6 3870      	CPI  R23,0x80
0011b7 f421      	BRNE __DIVF210
0011b8 2011      	TST  R1
                 __DIVF211:
0011b9 f40a      	BRPL __DIVF219
0011ba cf9f      	RJMP __MINRES
                 __DIVF219:
0011bb cfa4      	RJMP __MAXRES
                 __DIVF210:
0011bc 3890      	CPI  R25,0x80
0011bd f409      	BRNE __DIVF218
                 __DIVF217:
0011be cf95      	RJMP __ZERORES
                 __DIVF218:
0011bf 2401      	EOR  R0,R1
0011c0 9408      	SEC
0011c1 0b97      	SBC  R25,R23
0011c2 f41b      	BRVC __DIVF216
0011c3 f3d4      	BRLT __DIVF217
0011c4 2000      	TST  R0
0011c5 cff3      	RJMP __DIVF211
                 __DIVF216:
0011c6 2f79      	MOV  R23,R25
0011c7 931f      	PUSH R17
0011c8 932f      	PUSH R18
0011c9 933f      	PUSH R19
0011ca 934f      	PUSH R20
0011cb 2411      	CLR  R1
0011cc 2711      	CLR  R17
0011cd 2722      	CLR  R18
0011ce 2733      	CLR  R19
0011cf 2744      	CLR  R20
0011d0 2755      	CLR  R21
0011d1 e290      	LDI  R25,32
                 __DIVF212:
0011d2 17ae      	CP   R26,R30
0011d3 07bf      	CPC  R27,R31
0011d4 0786      	CPC  R24,R22
0011d5 0741      	CPC  R20,R17
0011d6 f030      	BRLO __DIVF213
0011d7 1bae      	SUB  R26,R30
0011d8 0bbf      	SBC  R27,R31
0011d9 0b86      	SBC  R24,R22
0011da 0b41      	SBC  R20,R17
0011db 9408      	SEC
0011dc c001      	RJMP __DIVF214
                 __DIVF213:
0011dd 9488      	CLC
                 __DIVF214:
0011de 1f55      	ROL  R21
0011df 1f22      	ROL  R18
0011e0 1f33      	ROL  R19
0011e1 1c11      	ROL  R1
0011e2 1faa      	ROL  R26
0011e3 1fbb      	ROL  R27
0011e4 1f88      	ROL  R24
0011e5 1f44      	ROL  R20
0011e6 959a      	DEC  R25
0011e7 f751      	BRNE __DIVF212
0011e8 01f9      	MOVW R30,R18
0011e9 2d61      	MOV  R22,R1
0011ea 914f      	POP  R20
0011eb 913f      	POP  R19
0011ec 912f      	POP  R18
0011ed 911f      	POP  R17
0011ee 2366      	TST  R22
0011ef f032      	BRMI __DIVF215
0011f0 0f55      	LSL  R21
0011f1 1fee      	ROL  R30
0011f2 1fff      	ROL  R31
0011f3 1f66      	ROL  R22
0011f4 957a      	DEC  R23
0011f5 f243      	BRVS __DIVF217
                 __DIVF215:
0011f6 de86      	RCALL __ROUND_REPACK
0011f7 915f      	POP  R21
0011f8 9508      	RET
                 
                 __ADDW2R15:
0011f9 2400      	CLR  R0
0011fa 0daf      	ADD  R26,R15
0011fb 1db0      	ADC  R27,R0
0011fc 9508      	RET
                 
                 __ANEGW1:
0011fd 95f1      	NEG  R31
0011fe 95e1      	NEG  R30
0011ff 40f0      	SBCI R31,0
001200 9508      	RET
                 
                 __ANEGD1:
001201 95f0      	COM  R31
001202 9560      	COM  R22
001203 9570      	COM  R23
001204 95e1      	NEG  R30
001205 4fff      	SBCI R31,-1
001206 4f6f      	SBCI R22,-1
001207 4f7f      	SBCI R23,-1
001208 9508      	RET
                 
                 __LSLW3:
001209 0fee      	LSL  R30
00120a 1fff      	ROL  R31
                 __LSLW2:
00120b 0fee      	LSL  R30
00120c 1fff      	ROL  R31
00120d 0fee      	LSL  R30
00120e 1fff      	ROL  R31
00120f 9508      	RET
                 
                 __LSRD1:
001210 9576      	LSR  R23
001211 9567      	ROR  R22
001212 95f7      	ROR  R31
001213 95e7      	ROR  R30
001214 9508      	RET
                 
                 __CWD1:
001215 2f6f      	MOV  R22,R31
001216 0f66      	ADD  R22,R22
001217 0b66      	SBC  R22,R22
001218 2f76      	MOV  R23,R22
001219 9508      	RET
                 
                 __DIVW21U:
00121a 2400      	CLR  R0
00121b 2411      	CLR  R1
00121c e190      	LDI  R25,16
                 __DIVW21U1:
00121d 0faa      	LSL  R26
00121e 1fbb      	ROL  R27
00121f 1c00      	ROL  R0
001220 1c11      	ROL  R1
001221 1a0e      	SUB  R0,R30
001222 0a1f      	SBC  R1,R31
001223 f418      	BRCC __DIVW21U2
001224 0e0e      	ADD  R0,R30
001225 1e1f      	ADC  R1,R31
001226 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
001227 60a1      	SBR  R26,1
                 __DIVW21U3:
001228 959a      	DEC  R25
001229 f799      	BRNE __DIVW21U1
00122a 01fd      	MOVW R30,R26
00122b 01d0      	MOVW R26,R0
00122c 9508      	RET
                 
                 __MODW21:
00122d 94e8      	CLT
00122e ffb7      	SBRS R27,7
00122f c004      	RJMP __MODW211
001230 95a0      	COM  R26
001231 95b0      	COM  R27
001232 9611      	ADIW R26,1
001233 9468      	SET
                 __MODW211:
001234 fdf7      	SBRC R31,7
001235 dfc7      	RCALL __ANEGW1
001236 dfe3      	RCALL __DIVW21U
001237 01fd      	MOVW R30,R26
001238 f40e      	BRTC __MODW212
001239 dfc3      	RCALL __ANEGW1
                 __MODW212:
00123a 9508      	RET
                 
                 __GETW1P:
00123b 91ed      	LD   R30,X+
00123c 91fc      	LD   R31,X
00123d 9711      	SBIW R26,1
00123e 9508      	RET
                 
                 __GETW1PF:
00123f 9005      	LPM  R0,Z+
001240 91f4      	LPM  R31,Z
001241 2de0      	MOV  R30,R0
001242 9508      	RET
                 
                 __GETD1S0:
001243 81e8      	LD   R30,Y
001244 81f9      	LDD  R31,Y+1
001245 816a      	LDD  R22,Y+2
001246 817b      	LDD  R23,Y+3
001247 9508      	RET
                 
                 __GETD2S0:
001248 81a8      	LD   R26,Y
001249 81b9      	LDD  R27,Y+1
00124a 818a      	LDD  R24,Y+2
00124b 819b      	LDD  R25,Y+3
00124c 9508      	RET
                 
                 __PUTD1S0:
00124d 83e8      	ST   Y,R30
00124e 83f9      	STD  Y+1,R31
00124f 836a      	STD  Y+2,R22
001250 837b      	STD  Y+3,R23
001251 9508      	RET
                 
                 __PUTPARD1:
001252 937a      	ST   -Y,R23
001253 936a      	ST   -Y,R22
001254 93fa      	ST   -Y,R31
001255 93ea      	ST   -Y,R30
001256 9508      	RET
                 
                 __SAVELOCR6:
001257 935a      	ST   -Y,R21
                 __SAVELOCR5:
001258 934a      	ST   -Y,R20
                 __SAVELOCR4:
001259 933a      	ST   -Y,R19
                 __SAVELOCR3:
00125a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00125b 931a      	ST   -Y,R17
00125c 930a      	ST   -Y,R16
00125d 9508      	RET
                 
                 __LOADLOCR6:
00125e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00125f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
001260 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
001261 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
001262 8119      	LDD  R17,Y+1
001263 8108      	LD   R16,Y
001264 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  47 r1 :  28 r2 :   0 r3 :   0 r4 :  15 r5 :  83 r6 :   9 r7 :   4 
r8 :   3 r9 :   9 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  77 r17:  78 r18:  63 r19:  50 r20:  36 r21:  94 r22:  81 r23:  56 
r24:  64 r25:  49 r26: 443 r27: 199 r28:  49 r29:   1 r30: 749 r31: 219 
x  :  88 y  : 360 z  :  20 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  36 add   :  29 
adiw  :  58 and   :   2 andi  :  22 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   6 brcs  :   0 break :   0 breq  :  73 
brge  :  12 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  25 
brlt  :   2 brmi  :   8 brne  : 145 brpl  :   8 brsh  :  19 brtc  :   2 
brts  :   2 brvc  :   4 brvs  :   4 bset  :   0 bst   :   0 call  : 406 
cbi   :  10 cbr   :   0 clc   :   1 clh   :   0 cli   :   4 cln   :   0 
clr   :  65 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :  74 cpc   :  43 cpi   : 123 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :  23 inc   :   6 jmp   :  40 ld    : 107 ldd   : 138 ldi   : 582 
lds   :   2 lpm   :  14 lsl   :  18 lsr   :   3 mov   : 105 movw  :  60 
mul   :  13 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   8 out   :  55 pop   :  23 push  :  22 rcall :  90 ret   :  92 
reti  :   2 rjmp  : 251 rol   :  31 ror   :  15 sbc   :  10 sbci  :  24 
sbi   :  16 sbic  :   4 sbis  :   4 sbiw  :  49 sbr   :   1 sbrc  :   4 
sbrs  :  12 sec   :   3 seh   :   0 sei   :   4 sen   :   0 ser   :   8 
ses   :   0 set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 153 std   :  58 sts   :   2 sub   :   8 subi  :  42 swap  :   2 
tst   :  37 wdr   :   1 
Instructions used: 78 out of 116 (67.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0024ca   7644   1774   9418   32768  28.7%
[.dseg] 0x000060 0x000830      0   1550   1550    2048  75.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
